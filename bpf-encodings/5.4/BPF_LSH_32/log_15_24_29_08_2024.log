Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32 BPF_LSH_32.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0x14ed6f0
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_LSH_32'<<0x14ed6f0>>  #uses=1
  CS<0x157c590> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32 BPF_LSH_32.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_LSH_32'<<0x1ceeca0>>  #uses=1
  CS<0x19a75a0> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32 BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy1 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy1, %struct.tnum* %var_off.i28.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i185.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i185.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy2 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy2, %struct.tnum* %var_off.i185.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_LSH_32:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i29.i = bitcast %struct.tnum* %var_off.i28.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i186.i = bitcast %struct.tnum* %var_off.i185.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32 BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32 BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_LSH_32'<<0x24ccc00>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32 BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_LSH_32 -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
GLOBAL_BITVECTOR_SUFFIX: 18
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_0
[lookInsideStruct] singleValueType:dst_reg_18_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_1
[lookInsideStruct] singleValueType:dst_reg_18_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_2
[lookInsideStruct] singleValueType:dst_reg_18_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_3
[lookInsideStruct] singleValueType:dst_reg_18_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_4
[lookInsideStruct] singleValueType:dst_reg_18_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_5
[lookInsideStruct] singleValueType:dst_reg_18_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_6
[lookInsideStruct] singleValueType:dst_reg_18_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_7
[lookInsideStruct] singleValueType:dst_reg_18_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_8
[lookInsideStruct] singleValueType:dst_reg_18_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_9
[lookInsideStruct] singleValueType:dst_reg_18_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_10
[lookInsideStruct] singleValueType:dst_reg_18_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_11
[lookInsideStruct] singleValueType:dst_reg_18_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_12
[lookInsideStruct] singleValueType:dst_reg_18_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_13
[lookInsideStruct] singleValueType:dst_reg_18_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_14
[lookInsideStruct] singleValueType:src_reg_18_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_15
[lookInsideStruct] singleValueType:src_reg_18_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_16
[lookInsideStruct] singleValueType:src_reg_18_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_17
[lookInsideStruct] singleValueType:src_reg_18_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_18
[lookInsideStruct] singleValueType:src_reg_18_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_19
[lookInsideStruct] singleValueType:src_reg_18_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_20
[lookInsideStruct] singleValueType:src_reg_18_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_21
[lookInsideStruct] singleValueType:src_reg_18_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_22
[lookInsideStruct] singleValueType:src_reg_18_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_23
[lookInsideStruct] singleValueType:src_reg_18_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_24
[lookInsideStruct] singleValueType:src_reg_18_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_25
[lookInsideStruct] singleValueType:src_reg_18_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_26
[lookInsideStruct] singleValueType:src_reg_18_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_27
[lookInsideStruct] singleValueType:src_reg_18_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_18_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_18_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_18_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[handleLoadInst] (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_18_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_18_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[handleLoadInst] (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_18_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_18_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[handleLoadInst] (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)

-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleLoadInst] pointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i18.i.i_18_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i18.i.i_18_33
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[handleLoadInst] (= dst_reg_18_4 i18.i.i_18_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)

-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleLoadInst] pointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i20.i.i_18_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i20.i.i_18_34
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[handleLoadInst] (= dst_reg_18_5 i20.i.i_18_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)

-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i18.i.i_18_33
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i.i_18_36
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i.i_18_36
[handleBinaryOperatorInst] AND instruction
(= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i20.i.i_18_34
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i.i_18_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i.i_18_38
[handleBinaryOperatorInst] AND instruction
(= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_18_36
[handleStoreInst] BVToStore: and.i.i.i_18_36
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i.i_18_36 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_18_38
[handleStoreInst] BVToStore: and6.i.i.i_18_38
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i.i_18_38 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i23.i.i_18_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i23.i.i_18_39
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[handleLoadInst] (= dst_reg_18_8 i23.i.i_18_39)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)

-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i24.i.i_18_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i24.i.i_18_40
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[handleLoadInst] (= dst_reg_18_9 i24.i.i_18_40)
[printBBAssertionsMap] 
BasicBlock: entry, Size:37
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)

-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_18_40
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_18_39
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i.i_18_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i.i_18_41
[handleBinaryOperatorInst] XOR instruction
(= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i.i_18_41
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i_18_43
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i_18_43
[handleICmpInst] (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))

-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_18_39
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i_18_45
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i_18_45
[handleBinaryOperatorInst] AND instruction
(= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i_18_45
[handleStoreInst] BVToStore: and6.i.i_18_45
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i_18_45 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_18_40
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i.i_18_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i.i_18_47
[handleBinaryOperatorInst] AND instruction
(= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_49
[lookInsideStruct] singleValueType:dst_reg_18_49
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_50
[lookInsideStruct] singleValueType:dst_reg_18_50
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_51
[lookInsideStruct] singleValueType:dst_reg_18_51
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_52
[lookInsideStruct] singleValueType:dst_reg_18_52
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_53
[lookInsideStruct] singleValueType:dst_reg_18_53
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_54
[lookInsideStruct] singleValueType:dst_reg_18_54
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_55
[lookInsideStruct] singleValueType:dst_reg_18_55
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_56
[lookInsideStruct] singleValueType:dst_reg_18_56
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_57
[lookInsideStruct] singleValueType:dst_reg_18_57
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_58
[lookInsideStruct] singleValueType:dst_reg_18_58
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_59
[lookInsideStruct] singleValueType:dst_reg_18_59
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_60
[lookInsideStruct] singleValueType:dst_reg_18_60
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_61
[lookInsideStruct] singleValueType:dst_reg_18_61
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_62
[lookInsideStruct] singleValueType:dst_reg_18_62
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_63
[lookInsideStruct] singleValueType:src_reg_18_63
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_64
[lookInsideStruct] singleValueType:src_reg_18_64
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_65
[lookInsideStruct] singleValueType:src_reg_18_65
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_66
[lookInsideStruct] singleValueType:src_reg_18_66
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_67
[lookInsideStruct] singleValueType:src_reg_18_67
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_68
[lookInsideStruct] singleValueType:src_reg_18_68
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_69
[lookInsideStruct] singleValueType:src_reg_18_69
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_70
[lookInsideStruct] singleValueType:src_reg_18_70
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_71
[lookInsideStruct] singleValueType:src_reg_18_71
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_72
[lookInsideStruct] singleValueType:src_reg_18_72
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_73
[lookInsideStruct] singleValueType:src_reg_18_73
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_74
[lookInsideStruct] singleValueType:src_reg_18_74
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_75
[lookInsideStruct] singleValueType:src_reg_18_75
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_76
[lookInsideStruct] singleValueType:src_reg_18_76
[setupBVTreeForArg] returning BVTree: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i.i
[handleMemoryPhiNode] incomingAccessI: 5 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_18_63)
(= src_reg_18_15 src_reg_18_64)
(= src_reg_18_16 src_reg_18_65)
(= src_reg_18_17 src_reg_18_66)
(= src_reg_18_18 src_reg_18_67)
(= src_reg_18_19 src_reg_18_68)
(= src_reg_18_20 src_reg_18_69)
(= src_reg_18_21 src_reg_18_70)
(= src_reg_18_22 src_reg_18_71)
(= src_reg_18_23 src_reg_18_72)
(= src_reg_18_24 src_reg_18_73)
(= src_reg_18_25 src_reg_18_74)
(= src_reg_18_26 src_reg_18_75)
(= src_reg_18_27 src_reg_18_76)
(= #x00000001 dst_reg_18_49)
(= dst_reg_18_1 dst_reg_18_50)
(= dst_reg_18_2 dst_reg_18_51)
(= dst_reg_18_3 dst_reg_18_52)
(= and.i.i.i_18_36 dst_reg_18_53)
(= and6.i.i.i_18_38 dst_reg_18_54)
(= dst_reg_18_6 dst_reg_18_55)
(= dst_reg_18_7 dst_reg_18_56)
(= and6.i.i_18_45 dst_reg_18_57)
(= dst_reg_18_9 dst_reg_18_58)
(= dst_reg_18_10 dst_reg_18_59)
(= dst_reg_18_11 dst_reg_18_60)
(= dst_reg_18_12 dst_reg_18_61)
(= dst_reg_18_13 dst_reg_18_62)
]
[handleMemoryPhiNode] incomingBBI: if.else.i.i
[handleMemoryPhiNode] incomingAccessI: 6 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_18_63)
(= src_reg_18_15 src_reg_18_64)
(= src_reg_18_16 src_reg_18_65)
(= src_reg_18_17 src_reg_18_66)
(= src_reg_18_18 src_reg_18_67)
(= src_reg_18_19 src_reg_18_68)
(= src_reg_18_20 src_reg_18_69)
(= src_reg_18_21 src_reg_18_70)
(= src_reg_18_22 src_reg_18_71)
(= src_reg_18_23 src_reg_18_72)
(= src_reg_18_24 src_reg_18_73)
(= src_reg_18_25 src_reg_18_74)
(= src_reg_18_26 src_reg_18_75)
(= src_reg_18_27 src_reg_18_76)
(= #x00000001 dst_reg_18_49)
(= dst_reg_18_1 dst_reg_18_50)
(= dst_reg_18_2 dst_reg_18_51)
(= dst_reg_18_3 dst_reg_18_52)
(= and.i.i.i_18_36 dst_reg_18_53)
(= and6.i.i.i_18_38 dst_reg_18_54)
(= dst_reg_18_6 dst_reg_18_55)
(= dst_reg_18_7 dst_reg_18_56)
(= #x0000000000000000 dst_reg_18_57)
(= dst_reg_18_9 dst_reg_18_58)
(= dst_reg_18_10 dst_reg_18_59)
(= dst_reg_18_11 dst_reg_18_60)
(= dst_reg_18_12 dst_reg_18_61)
(= dst_reg_18_13 dst_reg_18_62)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= #x0000000000000000 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= and6.i.i_18_45 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 4294967295
[getBool] returning unique bool w/ prefix: if.else.i.i_coerce_reg_to_size.exit.i_18_77
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_18_77
[handlePhiNodeSetupBitVecs] valueI:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBool] returning unique bool w/ prefix: if.then.i.i_coerce_reg_to_size.exit.i_18_78
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_18_78
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_18_78
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_18_77
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i.i_18_79
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i.i_18_79
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_18_77
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i.i_18_47
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_18_78
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))

-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_18_79
[handleStoreInst] BVToStore: storemerge.i.i_18_79
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(59)
[handleStoreInst] definingMemoryAccess: 59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_18_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i27.i.i_18_81
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i27.i.i_18_81
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleLoadInst] (= dst_reg_18_57 i27.i.i_18_81)
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:3
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))

-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_18_81
[handleStoreInst] BVToStore: i27.i.i_18_81
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(59)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i.i_18_81 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_18_79
[handleStoreInst] BVToStore: storemerge.i.i_18_79
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_56 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_18_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_18_30
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i6.i_18_83
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i6.i_18_83
[handleBinaryOperatorInst] AND instruction
(= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_18_32
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_18_31
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i13.i_18_84
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i13.i_18_84
[handleBinaryOperatorInst] XOR instruction
(= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i13.i_18_84
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i15.i_18_86
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i15.i_18_86
[handleICmpInst] (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:6
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))

-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_18_31
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i16.i_18_88
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i16.i_18_88
[handleBinaryOperatorInst] AND instruction
(= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_18_32
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i17.i_18_90
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i17.i_18_90
[handleBinaryOperatorInst] AND instruction
(= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_18_86
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i16.i_18_88
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0_18_92
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0_18_92
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_18_86
[handleSelectInst] z3ExprSelectOp2: and6.i16.i_18_88
[handleSelectInst] z3ExprSelectOp3: #x0000000000000000
[handleSelectInst] z3ExprRes: src_reg1.sroa.17.0_18_92
[handleSelectInst](ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 

[handleSelectInst]SelectMap:
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_18_86
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i17.i_18_90
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i20.i_18_94
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i20.i_18_94
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_18_86
[handleSelectInst] z3ExprSelectOp2: and8.i17.i_18_90
[handleSelectInst] z3ExprSelectOp3: #x00000000ffffffff
[handleSelectInst] z3ExprRes: storemerge.i20.i_18_94
[handleSelectInst](ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i6.i_18_83
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_18_96
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_18_96
[handleICmpInst] (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_18_92
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_18_94
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i.not_18_97
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i.not_18_97
[handleICmpInst] (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))

-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_18_92
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_18_94
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_18_98
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_18_98
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))

-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_49 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] definingMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_53 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}

-------------------
  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
i.i.i, dst_reg, [5, 0]
var_off.i.i.repack3, dst_reg, [5, 1]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack3, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack3, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_59 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_18_81 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_18_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] definingMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_18_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb247.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_49 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack3, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] definingMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_53 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack3, dst_reg, [5, 1]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_59 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_18_81 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_18_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] definingMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_18_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
sw.bb247.i
=========================
-------------------
  %cmp248.not.i = icmp ult i64 %storemerge.i20.i, 32
-------------------
[handleICmpInst]
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_18_94
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %cmp248.not.i = icmp ult i64 %storemerge.i20.i, 32
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp248.not.i_18_116
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp248.not.i_18_116
[handleICmpInst] (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))
[printBBAssertionsMap] 
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))

-------------------
  br i1 %cmp248.not.i, label %if.end251.i, label %if.then250.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then250.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_49 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
-------------------
  store i64 0, i64* %var_off.i185.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_53 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}

-------------------
  %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
-------------------
  store i64 -1, i64* %var_off.i185.i.repack2, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] definingMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] definingMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_18_81 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_18_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] definingMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end251.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_18_81 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] definingMemoryAccess: 32 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_18_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %shl.i = lshr i64 -9223372036854775808, %storemerge.i20.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -9223372036854775808
[handleBinaryOperatorInst] op1Val:   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[handleBinaryOperatorInst] opResVal:   %shl.i = lshr i64 -9223372036854775808, %storemerge.i20.i
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_18_94
[getBitVecSingValType]   %shl.i = lshr i64 -9223372036854775808, %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i_18_126
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i_18_126
[handleBinaryOperatorInst] LSHR instruction
(= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
-------------------
  %cmp256.i = icmp ugt i64 %storemerge.i.i, %shl.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_18_79
[getBitVecSingValType]   %shl.i = lshr i64 -9223372036854775808, %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i_18_126
[getBitVecSingValType]   %cmp256.i = icmp ugt i64 %storemerge.i.i, %shl.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp256.i_18_127
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp256.i_18_127
[handleICmpInst] (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
[printBBAssertionsMap] 
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))

-------------------
  br i1 %cmp256.i, label %if.then258.i, label %if.else261.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then258.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  br label %if.end266.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else261.i
=========================
-------------------
  %shl263.i = shl i64 %i27.i.i, %src_reg1.sroa.17.0
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[handleBinaryOperatorInst] opResVal:   %shl263.i = shl i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_18_81
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_18_92
[getBitVecSingValType]   %shl263.i = shl i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl263.i_18_129
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl263.i_18_129
[handleBinaryOperatorInst] SHL instruction
(= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
-------------------
  store i64 %shl263.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shl263.i = shl i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl263.i_18_129
[handleStoreInst] BVToStore: shl263.i_18_129
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 35 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shl263.i_18_129 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %shl265.i = shl i64 %storemerge.i.i, %storemerge.i20.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[handleBinaryOperatorInst] op1Val:   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[handleBinaryOperatorInst] opResVal:   %shl265.i = shl i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_18_79
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_18_94
[getBitVecSingValType]   %shl265.i = shl i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl265.i_18_130
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl265.i_18_130
[handleBinaryOperatorInst] SHL instruction
(= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
-------------------
  br label %if.end266.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end266.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_131
[lookInsideStruct] singleValueType:dst_reg_18_131
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_132
[lookInsideStruct] singleValueType:dst_reg_18_132
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_133
[lookInsideStruct] singleValueType:dst_reg_18_133
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_134
[lookInsideStruct] singleValueType:dst_reg_18_134
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_135
[lookInsideStruct] singleValueType:dst_reg_18_135
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_136
[lookInsideStruct] singleValueType:dst_reg_18_136
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_137
[lookInsideStruct] singleValueType:dst_reg_18_137
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_138
[lookInsideStruct] singleValueType:dst_reg_18_138
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_139
[lookInsideStruct] singleValueType:dst_reg_18_139
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_140
[lookInsideStruct] singleValueType:dst_reg_18_140
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_141
[lookInsideStruct] singleValueType:dst_reg_18_141
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_142
[lookInsideStruct] singleValueType:dst_reg_18_142
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_143
[lookInsideStruct] singleValueType:dst_reg_18_143
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_144
[lookInsideStruct] singleValueType:dst_reg_18_144
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_145
[lookInsideStruct] singleValueType:src_reg_18_145
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_146
[lookInsideStruct] singleValueType:src_reg_18_146
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_147
[lookInsideStruct] singleValueType:src_reg_18_147
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_148
[lookInsideStruct] singleValueType:src_reg_18_148
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_149
[lookInsideStruct] singleValueType:src_reg_18_149
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_150
[lookInsideStruct] singleValueType:src_reg_18_150
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_151
[lookInsideStruct] singleValueType:src_reg_18_151
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_152
[lookInsideStruct] singleValueType:src_reg_18_152
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_153
[lookInsideStruct] singleValueType:src_reg_18_153
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_154
[lookInsideStruct] singleValueType:src_reg_18_154
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_155
[lookInsideStruct] singleValueType:src_reg_18_155
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_156
[lookInsideStruct] singleValueType:src_reg_18_156
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_157
[lookInsideStruct] singleValueType:src_reg_18_157
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_158
[lookInsideStruct] singleValueType:src_reg_18_158
[setupBVTreeForArg] returning BVTree: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then258.i
[handleMemoryPhiNode] incomingAccessI: 34 = MemoryDef(33)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_18_63 src_reg_18_145)
(= src_reg_18_64 src_reg_18_146)
(= src_reg_18_65 src_reg_18_147)
(= src_reg_18_66 src_reg_18_148)
(= src_reg_18_67 src_reg_18_149)
(= src_reg_18_68 src_reg_18_150)
(= src_reg_18_69 src_reg_18_151)
(= src_reg_18_70 src_reg_18_152)
(= src_reg_18_71 src_reg_18_153)
(= src_reg_18_72 src_reg_18_154)
(= src_reg_18_73 src_reg_18_155)
(= src_reg_18_74 src_reg_18_156)
(= src_reg_18_75 src_reg_18_157)
(= src_reg_18_76 src_reg_18_158)
(= dst_reg_18_49 dst_reg_18_131)
(= dst_reg_18_50 dst_reg_18_132)
(= dst_reg_18_51 dst_reg_18_133)
(= dst_reg_18_52 dst_reg_18_134)
(= dst_reg_18_53 dst_reg_18_135)
(= dst_reg_18_54 dst_reg_18_136)
(= #x8000000000000000 dst_reg_18_137)
(= #x7fffffffffffffff dst_reg_18_138)
(= #x0000000000000000 dst_reg_18_139)
(= storemerge.i.i_18_79 dst_reg_18_140)
(= dst_reg_18_59 dst_reg_18_141)
(= dst_reg_18_60 dst_reg_18_142)
(= dst_reg_18_61 dst_reg_18_143)
(= dst_reg_18_62 dst_reg_18_144)
]
[handleMemoryPhiNode] incomingBBI: if.else261.i
[handleMemoryPhiNode] incomingAccessI: 35 = MemoryDef(33)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_18_63 src_reg_18_145)
(= src_reg_18_64 src_reg_18_146)
(= src_reg_18_65 src_reg_18_147)
(= src_reg_18_66 src_reg_18_148)
(= src_reg_18_67 src_reg_18_149)
(= src_reg_18_68 src_reg_18_150)
(= src_reg_18_69 src_reg_18_151)
(= src_reg_18_70 src_reg_18_152)
(= src_reg_18_71 src_reg_18_153)
(= src_reg_18_72 src_reg_18_154)
(= src_reg_18_73 src_reg_18_155)
(= src_reg_18_74 src_reg_18_156)
(= src_reg_18_75 src_reg_18_157)
(= src_reg_18_76 src_reg_18_158)
(= dst_reg_18_49 dst_reg_18_131)
(= dst_reg_18_50 dst_reg_18_132)
(= dst_reg_18_51 dst_reg_18_133)
(= dst_reg_18_52 dst_reg_18_134)
(= dst_reg_18_53 dst_reg_18_135)
(= dst_reg_18_54 dst_reg_18_136)
(= #x8000000000000000 dst_reg_18_137)
(= #x7fffffffffffffff dst_reg_18_138)
(= shl263.i_18_129 dst_reg_18_139)
(= storemerge.i.i_18_79 dst_reg_18_140)
(= dst_reg_18_59 dst_reg_18_141)
(= dst_reg_18_60 dst_reg_18_142)
(= dst_reg_18_61 dst_reg_18_143)
(= dst_reg_18_62 dst_reg_18_144)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else261.i, if.end266.i> :
  (= src_reg_18_63 src_reg_18_145)
  (= src_reg_18_64 src_reg_18_146)
  (= src_reg_18_65 src_reg_18_147)
  (= src_reg_18_66 src_reg_18_148)
  (= src_reg_18_67 src_reg_18_149)
  (= src_reg_18_68 src_reg_18_150)
  (= src_reg_18_69 src_reg_18_151)
  (= src_reg_18_70 src_reg_18_152)
  (= src_reg_18_71 src_reg_18_153)
  (= src_reg_18_72 src_reg_18_154)
  (= src_reg_18_73 src_reg_18_155)
  (= src_reg_18_74 src_reg_18_156)
  (= src_reg_18_75 src_reg_18_157)
  (= src_reg_18_76 src_reg_18_158)
  (= dst_reg_18_49 dst_reg_18_131)
  (= dst_reg_18_50 dst_reg_18_132)
  (= dst_reg_18_51 dst_reg_18_133)
  (= dst_reg_18_52 dst_reg_18_134)
  (= dst_reg_18_53 dst_reg_18_135)
  (= dst_reg_18_54 dst_reg_18_136)
  (= #x8000000000000000 dst_reg_18_137)
  (= #x7fffffffffffffff dst_reg_18_138)
  (= shl263.i_18_129 dst_reg_18_139)
  (= storemerge.i.i_18_79 dst_reg_18_140)
  (= dst_reg_18_59 dst_reg_18_141)
  (= dst_reg_18_60 dst_reg_18_142)
  (= dst_reg_18_61 dst_reg_18_143)
  (= dst_reg_18_62 dst_reg_18_144)
<if.then258.i, if.end266.i> :
  (= src_reg_18_63 src_reg_18_145)
  (= src_reg_18_64 src_reg_18_146)
  (= src_reg_18_65 src_reg_18_147)
  (= src_reg_18_66 src_reg_18_148)
  (= src_reg_18_67 src_reg_18_149)
  (= src_reg_18_68 src_reg_18_150)
  (= src_reg_18_69 src_reg_18_151)
  (= src_reg_18_70 src_reg_18_152)
  (= src_reg_18_71 src_reg_18_153)
  (= src_reg_18_72 src_reg_18_154)
  (= src_reg_18_73 src_reg_18_155)
  (= src_reg_18_74 src_reg_18_156)
  (= src_reg_18_75 src_reg_18_157)
  (= src_reg_18_76 src_reg_18_158)
  (= dst_reg_18_49 dst_reg_18_131)
  (= dst_reg_18_50 dst_reg_18_132)
  (= dst_reg_18_51 dst_reg_18_133)
  (= dst_reg_18_52 dst_reg_18_134)
  (= dst_reg_18_53 dst_reg_18_135)
  (= dst_reg_18_54 dst_reg_18_136)
  (= #x8000000000000000 dst_reg_18_137)
  (= #x7fffffffffffffff dst_reg_18_138)
  (= #x0000000000000000 dst_reg_18_139)
  (= storemerge.i.i_18_79 dst_reg_18_140)
  (= dst_reg_18_59 dst_reg_18_141)
  (= dst_reg_18_60 dst_reg_18_142)
  (= dst_reg_18_61 dst_reg_18_143)
  (= dst_reg_18_62 dst_reg_18_144)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= #x0000000000000000 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= and6.i.i_18_45 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
-------------------
  %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[handlePhiNodeSetupBitVecs] valueI:   %shl265.i = shl i64 %storemerge.i.i, %storemerge.i20.i
[getBool] returning unique bool w/ prefix: if.else261.i_if.end266.i_18_159
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else261.i_if.end266.i_18_159
[handlePhiNodeSetupBitVecs] valueI: i64 -1
[getBool] returning unique bool w/ prefix: if.then258.i_if.end266.i_18_160
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then258.i_if.end266.i_18_160
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i : [<shl265.i, if.else261.i>, <, if.then258.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then258.i, if.end266.i>: if.then258.i_if.end266.i_18_160
<if.else261.i, if.end266.i>: if.else261.i_if.end266.i_18_159
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_18_78
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_18_77
[getBitVecSingValType]   %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i_18_161
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i_18_161
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %shl265.i = shl i64 %storemerge.i.i, %storemerge.i20.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl265.i_18_130
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else261.i_if.end266.i_18_159
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then258.i_if.end266.i_18_160
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))

-------------------
  store i64 %storemerge.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i_18_161
[handleStoreInst] BVToStore: storemerge.i_18_161
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 36 = MemoryDef(57)
[handleStoreInst] definingMemoryAccess: 57 = MemoryPhi({if.then258.i,34},{if.else261.i,35})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_140 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i_18_161 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %sh_prom.i.i = and i64 %src_reg1.sroa.17.0, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[handleBinaryOperatorInst] op1Val: i64 255
[handleBinaryOperatorInst] opResVal:   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0, 255
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_18_92
[getBitVecSingValType] i64 255
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000000000ff
[getBitVecSingValType]   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0, 255
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i_18_164
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i_18_164
[handleBinaryOperatorInst] AND instruction
(= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
-------------------
  %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0, 255
[handleBinaryOperatorInst] opResVal:   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_18_36
[getBitVecSingValType]   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0, 255
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i_18_164
[getBitVecSingValType]   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i_18_165
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i_18_165
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
-------------------
  %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0, 255
[handleBinaryOperatorInst] opResVal:   %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_18_38
[getBitVecSingValType]   %sh_prom.i.i = and i64 %src_reg1.sroa.17.0, 255
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i_18_164
[getBitVecSingValType]   %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i_18_166
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i_18_166
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
-------------------
  store i64 %shl.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_18_165
[handleStoreInst] BVToStore: shl.i.i_18_165
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] definingMemoryAccess: 36 = MemoryDef(57)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_135 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shl.i.i_18_165 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 %shl5.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i_18_166
[handleStoreInst] BVToStore: shl5.i.i_18_166
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] definingMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_136 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ shl5.i.i_18_166 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val: i64 -9223372036854775808
[handleBinaryOperatorInst] opResVal:   %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
[getBitVecSingValType]   %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i_18_166
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i199.i_18_168
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i199.i_18_168
[handleBinaryOperatorInst] AND instruction
(= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
-------------------
  %or.i200.i = or i64 %and.i199.i, %shl.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
[handleBinaryOperatorInst] op1Val:   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[handleBinaryOperatorInst] opResVal:   %or.i200.i = or i64 %and.i199.i, %shl.i.i
[getBitVecSingValType]   %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i199.i_18_168
[getBitVecSingValType]   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_18_165
[getBitVecSingValType]   %or.i200.i = or i64 %and.i199.i, %shl.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i200.i_18_169
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i200.i_18_169
[handleBinaryOperatorInst] OR instruction
(= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
-------------------
  store i64 %or.i200.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i200.i = or i64 %and.i199.i, %shl.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i200.i_18_169
[handleStoreInst] BVToStore: or.i200.i_18_169
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] definingMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_137 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i200.i_18_169 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val: i64 9223372036854775807
[handleBinaryOperatorInst] opResVal:   %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
[getBitVecSingValType]   %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i_18_166
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and7.i205.i_18_171
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and7.i205.i_18_171
[handleBinaryOperatorInst] AND instruction
(= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
-------------------
  %or8.i206.i = or i64 %and7.i205.i, %shl.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
[handleBinaryOperatorInst] op1Val:   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[handleBinaryOperatorInst] opResVal:   %or8.i206.i = or i64 %and7.i205.i, %shl.i.i
[getBitVecSingValType]   %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and7.i205.i_18_171
[getBitVecSingValType]   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_18_165
[getBitVecSingValType]   %or8.i206.i = or i64 %and7.i205.i, %shl.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or8.i206.i_18_172
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or8.i206.i_18_172
[handleBinaryOperatorInst] OR instruction
(= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
-------------------
  store i64 %or8.i206.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or8.i206.i = or i64 %and7.i205.i, %shl.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i206.i_18_172
[handleStoreInst] BVToStore: or8.i206.i_18_172
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 40 = MemoryDef(39)
[handleStoreInst] definingMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_138 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or8.i206.i_18_172 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %i26.i210.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i26.i210.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 57 = MemoryPhi({if.then258.i,34},{if.else261.i,35})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
[getBitVecSingValType]   %i26.i210.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i26.i210.i_18_173
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i26.i210.i_18_173
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
[handleLoadInst] (= dst_reg_18_139 i26.i210.i_18_173)
[printBBAssertionsMap] 
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.end266.i, Size:10
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %cmp19.i211.i = icmp ugt i64 %i26.i210.i, %shl.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i26.i210.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i26.i210.i_18_173
[getBitVecSingValType]   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_18_165
[getBitVecSingValType]   %cmp19.i211.i = icmp ugt i64 %i26.i210.i, %shl.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp19.i211.i_18_174
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp19.i211.i_18_174
[handleICmpInst] (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.end266.i, Size:11
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %cond23.i212.i = select i1 %cmp19.i211.i, i64 %i26.i210.i, i64 %shl.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 40 = MemoryDef(39)
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 

[handleSelectInst]SelectMap:
cond23.i212.i,i26.i210.i,shl.i.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp19.i211.i = icmp ugt i64 %i26.i210.i, %shl.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp19.i211.i_18_174
[getBitVecSingValType]   %i26.i210.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i26.i210.i_18_173
[getBitVecSingValType]   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_18_165
[getBitVecSingValType]   %cond23.i212.i = select i1 %cmp19.i211.i, i64 %i26.i210.i, i64 %shl.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond23.i212.i_18_175
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond23.i212.i_18_175
[handleSelectInst] z3ExprSelectOp1: cmp19.i211.i_18_174
[handleSelectInst] z3ExprSelectOp2: i26.i210.i_18_173
[handleSelectInst] z3ExprSelectOp3: shl.i.i_18_165
[handleSelectInst] z3ExprRes: cond23.i212.i_18_175
[handleSelectInst](ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
-------------------
  store i64 %cond23.i212.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond23.i212.i = select i1 %cmp19.i211.i, i64 %i26.i210.i, i64 %shl.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond23.i212.i_18_175
[handleStoreInst] BVToStore: cond23.i212.i_18_175
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 41 = MemoryDef(40)
[handleStoreInst] definingMemoryAccess: 40 = MemoryDef(39)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_139 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond23.i212.i_18_175 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %or29.i215.i = or i64 %shl5.i.i, %shl.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
[handleBinaryOperatorInst] op1Val:   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[handleBinaryOperatorInst] opResVal:   %or29.i215.i = or i64 %shl5.i.i, %shl.i.i
[getBitVecSingValType]   %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i_18_166
[getBitVecSingValType]   %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i_18_165
[getBitVecSingValType]   %or29.i215.i = or i64 %shl5.i.i, %shl.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or29.i215.i_18_176
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or29.i215.i_18_176
[handleBinaryOperatorInst] OR instruction
(= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
-------------------
  %cmp31.i216.i = icmp ult i64 %storemerge.i, %or29.i215.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i_18_161
[getBitVecSingValType]   %or29.i215.i = or i64 %shl5.i.i, %shl.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or29.i215.i_18_176
[getBitVecSingValType]   %cmp31.i216.i = icmp ult i64 %storemerge.i, %or29.i215.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i216.i_18_177
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i216.i_18_177
[handleICmpInst] (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.end266.i, Size:14
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 41 = MemoryDef(40)
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 

[handleSelectInst]SelectMap:
cond23.i212.i,i26.i210.i,shl.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp31.i216.i = icmp ult i64 %storemerge.i, %or29.i215.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i216.i_18_177
[getBitVecSingValType]   %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i_18_161
[getBitVecSingValType]   %or29.i215.i = or i64 %shl5.i.i, %shl.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or29.i215.i_18_176
[getBitVecSingValType]   %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond35.i217.i_18_178
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond35.i217.i_18_178
[handleSelectInst] z3ExprSelectOp1: cmp31.i216.i_18_177
[handleSelectInst] z3ExprSelectOp2: storemerge.i_18_161
[handleSelectInst] z3ExprSelectOp3: or29.i215.i_18_176
[handleSelectInst] z3ExprRes: cond35.i217.i_18_178
[handleSelectInst](ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then308.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_179
[lookInsideStruct] singleValueType:dst_reg_18_179
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_180
[lookInsideStruct] singleValueType:dst_reg_18_180
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_181
[lookInsideStruct] singleValueType:dst_reg_18_181
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_182
[lookInsideStruct] singleValueType:dst_reg_18_182
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_183
[lookInsideStruct] singleValueType:dst_reg_18_183
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_184
[lookInsideStruct] singleValueType:dst_reg_18_184
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_185
[lookInsideStruct] singleValueType:dst_reg_18_185
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_186
[lookInsideStruct] singleValueType:dst_reg_18_186
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_187
[lookInsideStruct] singleValueType:dst_reg_18_187
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_188
[lookInsideStruct] singleValueType:dst_reg_18_188
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_189
[lookInsideStruct] singleValueType:dst_reg_18_189
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_190
[lookInsideStruct] singleValueType:dst_reg_18_190
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_191
[lookInsideStruct] singleValueType:dst_reg_18_191
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_192
[lookInsideStruct] singleValueType:dst_reg_18_192
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_193
[lookInsideStruct] singleValueType:src_reg_18_193
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_194
[lookInsideStruct] singleValueType:src_reg_18_194
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_195
[lookInsideStruct] singleValueType:src_reg_18_195
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_196
[lookInsideStruct] singleValueType:src_reg_18_196
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_197
[lookInsideStruct] singleValueType:src_reg_18_197
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_198
[lookInsideStruct] singleValueType:src_reg_18_198
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_199
[lookInsideStruct] singleValueType:src_reg_18_199
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_200
[lookInsideStruct] singleValueType:src_reg_18_200
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_201
[lookInsideStruct] singleValueType:src_reg_18_201
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_202
[lookInsideStruct] singleValueType:src_reg_18_202
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_203
[lookInsideStruct] singleValueType:src_reg_18_203
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_204
[lookInsideStruct] singleValueType:src_reg_18_204
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_205
[lookInsideStruct] singleValueType:src_reg_18_205
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_206
[lookInsideStruct] singleValueType:src_reg_18_206
[setupBVTreeForArg] returning BVTree: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 

[handleMemoryPhiNode] incomingBBI: if.end266.i
[handleMemoryPhiNode] incomingAccessI: 41 = MemoryDef(40)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_18_145 src_reg_18_193)
(= src_reg_18_146 src_reg_18_194)
(= src_reg_18_147 src_reg_18_195)
(= src_reg_18_148 src_reg_18_196)
(= src_reg_18_149 src_reg_18_197)
(= src_reg_18_150 src_reg_18_198)
(= src_reg_18_151 src_reg_18_199)
(= src_reg_18_152 src_reg_18_200)
(= src_reg_18_153 src_reg_18_201)
(= src_reg_18_154 src_reg_18_202)
(= src_reg_18_155 src_reg_18_203)
(= src_reg_18_156 src_reg_18_204)
(= src_reg_18_157 src_reg_18_205)
(= src_reg_18_158 src_reg_18_206)
(= dst_reg_18_131 dst_reg_18_179)
(= dst_reg_18_132 dst_reg_18_180)
(= dst_reg_18_133 dst_reg_18_181)
(= dst_reg_18_134 dst_reg_18_182)
(= shl.i.i_18_165 dst_reg_18_183)
(= shl5.i.i_18_166 dst_reg_18_184)
(= or.i200.i_18_169 dst_reg_18_185)
(= or8.i206.i_18_172 dst_reg_18_186)
(= cond23.i212.i_18_175 dst_reg_18_187)
(= storemerge.i_18_161 dst_reg_18_188)
(= dst_reg_18_141 dst_reg_18_189)
(= dst_reg_18_142 dst_reg_18_190)
(= dst_reg_18_143 dst_reg_18_191)
(= dst_reg_18_144 dst_reg_18_192)
]
[handleMemoryPhiNode] incomingBBI: if.then250.i
[handleMemoryPhiNode] incomingAccessI: 31 = MemoryDef(30)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_18_63 src_reg_18_193)
(= src_reg_18_64 src_reg_18_194)
(= src_reg_18_65 src_reg_18_195)
(= src_reg_18_66 src_reg_18_196)
(= src_reg_18_67 src_reg_18_197)
(= src_reg_18_68 src_reg_18_198)
(= src_reg_18_69 src_reg_18_199)
(= src_reg_18_70 src_reg_18_200)
(= src_reg_18_71 src_reg_18_201)
(= src_reg_18_72 src_reg_18_202)
(= src_reg_18_73 src_reg_18_203)
(= src_reg_18_74 src_reg_18_204)
(= src_reg_18_75 src_reg_18_205)
(= src_reg_18_76 src_reg_18_206)
(= #x00000001 dst_reg_18_179)
(= dst_reg_18_50 dst_reg_18_180)
(= dst_reg_18_51 dst_reg_18_181)
(= dst_reg_18_52 dst_reg_18_182)
(= #x0000000000000000 dst_reg_18_183)
(= #xffffffffffffffff dst_reg_18_184)
(= #x8000000000000000 dst_reg_18_185)
(= #x7fffffffffffffff dst_reg_18_186)
(= #x0000000000000000 dst_reg_18_187)
(= storemerge.i.i_18_79 dst_reg_18_188)
(= dst_reg_18_59 dst_reg_18_189)
(= dst_reg_18_60 dst_reg_18_190)
(= dst_reg_18_61 dst_reg_18_191)
(= dst_reg_18_62 dst_reg_18_192)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then250.i, if.then308.i> :
  (= src_reg_18_63 src_reg_18_193)
  (= src_reg_18_64 src_reg_18_194)
  (= src_reg_18_65 src_reg_18_195)
  (= src_reg_18_66 src_reg_18_196)
  (= src_reg_18_67 src_reg_18_197)
  (= src_reg_18_68 src_reg_18_198)
  (= src_reg_18_69 src_reg_18_199)
  (= src_reg_18_70 src_reg_18_200)
  (= src_reg_18_71 src_reg_18_201)
  (= src_reg_18_72 src_reg_18_202)
  (= src_reg_18_73 src_reg_18_203)
  (= src_reg_18_74 src_reg_18_204)
  (= src_reg_18_75 src_reg_18_205)
  (= src_reg_18_76 src_reg_18_206)
  (= #x00000001 dst_reg_18_179)
  (= dst_reg_18_50 dst_reg_18_180)
  (= dst_reg_18_51 dst_reg_18_181)
  (= dst_reg_18_52 dst_reg_18_182)
  (= #x0000000000000000 dst_reg_18_183)
  (= #xffffffffffffffff dst_reg_18_184)
  (= #x8000000000000000 dst_reg_18_185)
  (= #x7fffffffffffffff dst_reg_18_186)
  (= #x0000000000000000 dst_reg_18_187)
  (= storemerge.i.i_18_79 dst_reg_18_188)
  (= dst_reg_18_59 dst_reg_18_189)
  (= dst_reg_18_60 dst_reg_18_190)
  (= dst_reg_18_61 dst_reg_18_191)
  (= dst_reg_18_62 dst_reg_18_192)
<if.end266.i, if.then308.i> :
  (= src_reg_18_145 src_reg_18_193)
  (= src_reg_18_146 src_reg_18_194)
  (= src_reg_18_147 src_reg_18_195)
  (= src_reg_18_148 src_reg_18_196)
  (= src_reg_18_149 src_reg_18_197)
  (= src_reg_18_150 src_reg_18_198)
  (= src_reg_18_151 src_reg_18_199)
  (= src_reg_18_152 src_reg_18_200)
  (= src_reg_18_153 src_reg_18_201)
  (= src_reg_18_154 src_reg_18_202)
  (= src_reg_18_155 src_reg_18_203)
  (= src_reg_18_156 src_reg_18_204)
  (= src_reg_18_157 src_reg_18_205)
  (= src_reg_18_158 src_reg_18_206)
  (= dst_reg_18_131 dst_reg_18_179)
  (= dst_reg_18_132 dst_reg_18_180)
  (= dst_reg_18_133 dst_reg_18_181)
  (= dst_reg_18_134 dst_reg_18_182)
  (= shl.i.i_18_165 dst_reg_18_183)
  (= shl5.i.i_18_166 dst_reg_18_184)
  (= or.i200.i_18_169 dst_reg_18_185)
  (= or8.i206.i_18_172 dst_reg_18_186)
  (= cond23.i212.i_18_175 dst_reg_18_187)
  (= storemerge.i_18_161 dst_reg_18_188)
  (= dst_reg_18_141 dst_reg_18_189)
  (= dst_reg_18_142 dst_reg_18_190)
  (= dst_reg_18_143 dst_reg_18_191)
  (= dst_reg_18_144 dst_reg_18_192)
<if.else261.i, if.end266.i> :
  (= src_reg_18_63 src_reg_18_145)
  (= src_reg_18_64 src_reg_18_146)
  (= src_reg_18_65 src_reg_18_147)
  (= src_reg_18_66 src_reg_18_148)
  (= src_reg_18_67 src_reg_18_149)
  (= src_reg_18_68 src_reg_18_150)
  (= src_reg_18_69 src_reg_18_151)
  (= src_reg_18_70 src_reg_18_152)
  (= src_reg_18_71 src_reg_18_153)
  (= src_reg_18_72 src_reg_18_154)
  (= src_reg_18_73 src_reg_18_155)
  (= src_reg_18_74 src_reg_18_156)
  (= src_reg_18_75 src_reg_18_157)
  (= src_reg_18_76 src_reg_18_158)
  (= dst_reg_18_49 dst_reg_18_131)
  (= dst_reg_18_50 dst_reg_18_132)
  (= dst_reg_18_51 dst_reg_18_133)
  (= dst_reg_18_52 dst_reg_18_134)
  (= dst_reg_18_53 dst_reg_18_135)
  (= dst_reg_18_54 dst_reg_18_136)
  (= #x8000000000000000 dst_reg_18_137)
  (= #x7fffffffffffffff dst_reg_18_138)
  (= shl263.i_18_129 dst_reg_18_139)
  (= storemerge.i.i_18_79 dst_reg_18_140)
  (= dst_reg_18_59 dst_reg_18_141)
  (= dst_reg_18_60 dst_reg_18_142)
  (= dst_reg_18_61 dst_reg_18_143)
  (= dst_reg_18_62 dst_reg_18_144)
<if.then258.i, if.end266.i> :
  (= src_reg_18_63 src_reg_18_145)
  (= src_reg_18_64 src_reg_18_146)
  (= src_reg_18_65 src_reg_18_147)
  (= src_reg_18_66 src_reg_18_148)
  (= src_reg_18_67 src_reg_18_149)
  (= src_reg_18_68 src_reg_18_150)
  (= src_reg_18_69 src_reg_18_151)
  (= src_reg_18_70 src_reg_18_152)
  (= src_reg_18_71 src_reg_18_153)
  (= src_reg_18_72 src_reg_18_154)
  (= src_reg_18_73 src_reg_18_155)
  (= src_reg_18_74 src_reg_18_156)
  (= src_reg_18_75 src_reg_18_157)
  (= src_reg_18_76 src_reg_18_158)
  (= dst_reg_18_49 dst_reg_18_131)
  (= dst_reg_18_50 dst_reg_18_132)
  (= dst_reg_18_51 dst_reg_18_133)
  (= dst_reg_18_52 dst_reg_18_134)
  (= dst_reg_18_53 dst_reg_18_135)
  (= dst_reg_18_54 dst_reg_18_136)
  (= #x8000000000000000 dst_reg_18_137)
  (= #x7fffffffffffffff dst_reg_18_138)
  (= #x0000000000000000 dst_reg_18_139)
  (= storemerge.i.i_18_79 dst_reg_18_140)
  (= dst_reg_18_59 dst_reg_18_141)
  (= dst_reg_18_60 dst_reg_18_142)
  (= dst_reg_18_61 dst_reg_18_143)
  (= dst_reg_18_62 dst_reg_18_144)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= #x0000000000000000 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= and6.i.i_18_45 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
-------------------
  %storemerge = phi i64 [ -1, %if.then250.i ], [ %cond35.i217.i, %if.end266.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge = phi i64 [ -1, %if.then250.i ], [ %cond35.i217.i, %if.end266.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 -1
[getBool] returning unique bool w/ prefix: if.then250.i_if.then308.i_18_207
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then250.i_if.then308.i_18_207
[handlePhiNodeSetupBitVecs] valueI:   %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
[getBool] returning unique bool w/ prefix: if.end266.i_if.then308.i_18_208
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end266.i_if.then308.i_18_208
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge : [<, if.then250.i>, <cond35.i217.i, if.end266.i>, ]
storemerge.i : [<shl265.i, if.else261.i>, <, if.then258.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.end266.i, if.then308.i>: if.end266.i_if.then308.i_18_208
<if.then250.i, if.then308.i>: if.then250.i_if.then308.i_18_207
<if.then258.i, if.end266.i>: if.then258.i_if.end266.i_18_160
<if.else261.i, if.end266.i>: if.else261.i_if.end266.i_18_159
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_18_78
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_18_77
[getBitVecSingValType]   %storemerge = phi i64 [ -1, %if.then250.i ], [ %cond35.i217.i, %if.end266.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge_18_209
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge_18_209
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then250.i_if.then308.i_18_207
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
[getBitVecSingValType]   %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond35.i217.i_18_178
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end266.i_if.then308.i_18_208
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))

-------------------
  store i64 %storemerge, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge = phi i64 [ -1, %if.then250.i ], [ %cond35.i217.i, %if.end266.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge_18_209
[handleStoreInst] BVToStore: storemerge_18_209
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 42 = MemoryDef(58)
[handleStoreInst] definingMemoryAccess: 58 = MemoryPhi({if.end266.i,41},{if.then250.i,31})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_188 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge_18_209 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %i18.i298.i = load i64, i64* %i.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i18.i298.i = load i64, i64* %i.i.i, align 8
[handleLoadInst] pointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 58 = MemoryPhi({if.end266.i,41},{if.then250.i,31})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
[getBitVecSingValType]   %i18.i298.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i18.i298.i_18_211
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i18.i298.i_18_211
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleLoadInst] (= dst_reg_18_183 i18.i298.i_18_211)
[printBBAssertionsMap] 
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:3
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %i20.i300.i = load i64, i64* %i19.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[handleLoadInst] pointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 58 = MemoryPhi({if.end266.i,41},{if.then250.i,31})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
[getBitVecSingValType]   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i20.i300.i_18_212
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i20.i300.i_18_212
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleLoadInst] (= dst_reg_18_184 i20.i300.i_18_212)
[printBBAssertionsMap] 
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:4
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %and.i.i301.i = and i64 %i18.i298.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i18.i298.i = load i64, i64* %i.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType]   %i18.i298.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i18.i298.i_18_211
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i301.i_18_214
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i301.i_18_214
[handleBinaryOperatorInst] AND instruction
(= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
-------------------
  %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType]   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i20.i300.i_18_212
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i302.i_18_216
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i302.i_18_216
[handleBinaryOperatorInst] AND instruction
(= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_18_214
[handleStoreInst] BVToStore: and.i.i301.i_18_214
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 43 = MemoryDef(42)
[handleStoreInst] definingMemoryAccess: 42 = MemoryDef(58)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_183 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i301.i_18_214 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_18_216
[handleStoreInst] BVToStore: and6.i.i302.i_18_216
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 44 = MemoryDef(43)
[handleStoreInst] definingMemoryAccess: 43 = MemoryDef(42)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_184 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i302.i_18_216 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 58 = MemoryPhi({if.end266.i,41},{if.then250.i,31})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i23.i306.i_18_217
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i23.i306.i_18_217
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleLoadInst] (= dst_reg_18_187 i23.i306.i_18_217)
[printBBAssertionsMap] 
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:7
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 42 = MemoryDef(58)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i24.i308.i_18_218
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i24.i308.i_18_218
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleLoadInst] (= storemerge_18_209 i24.i308.i_18_218)
[printBBAssertionsMap] 
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:8
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i308.i_18_218
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i306.i_18_217
[getBitVecSingValType]   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i309.i_18_219
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i309.i_18_219
[handleBinaryOperatorInst] XOR instruction
(= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
-------------------
  %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i309.i_18_219
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i311.i_18_221
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i311.i_18_221
[handleICmpInst] (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  br i1 %cmp.i311.i, label %if.then.i314.i, label %if.else.i315.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i314.i
=========================
-------------------
  %and6.i312.i = and i64 %i23.i306.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i306.i_18_217
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i312.i_18_223
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i312.i_18_223
[handleBinaryOperatorInst] AND instruction
(= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i312.i_18_223
[handleStoreInst] BVToStore: and6.i312.i_18_223
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 45 = MemoryDef(44)
[handleStoreInst] definingMemoryAccess: 44 = MemoryDef(43)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_187 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i312.i_18_223 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %and8.i313.i = and i64 %i24.i308.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i308.i_18_218
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i313.i_18_225
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i313.i_18_225
[handleBinaryOperatorInst] AND instruction
(= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 46 = MemoryDef(44)
[handleStoreInst] definingMemoryAccess: 44 = MemoryDef(43)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_187 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
coerce_reg_to_size.exit320.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_227
[lookInsideStruct] singleValueType:dst_reg_18_227
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_228
[lookInsideStruct] singleValueType:dst_reg_18_228
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_229
[lookInsideStruct] singleValueType:dst_reg_18_229
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_230
[lookInsideStruct] singleValueType:dst_reg_18_230
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_231
[lookInsideStruct] singleValueType:dst_reg_18_231
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_232
[lookInsideStruct] singleValueType:dst_reg_18_232
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_233
[lookInsideStruct] singleValueType:dst_reg_18_233
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_234
[lookInsideStruct] singleValueType:dst_reg_18_234
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_235
[lookInsideStruct] singleValueType:dst_reg_18_235
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_236
[lookInsideStruct] singleValueType:dst_reg_18_236
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_237
[lookInsideStruct] singleValueType:dst_reg_18_237
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_238
[lookInsideStruct] singleValueType:dst_reg_18_238
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_239
[lookInsideStruct] singleValueType:dst_reg_18_239
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_240
[lookInsideStruct] singleValueType:dst_reg_18_240
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_241
[lookInsideStruct] singleValueType:src_reg_18_241
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_242
[lookInsideStruct] singleValueType:src_reg_18_242
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_243
[lookInsideStruct] singleValueType:src_reg_18_243
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_244
[lookInsideStruct] singleValueType:src_reg_18_244
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_245
[lookInsideStruct] singleValueType:src_reg_18_245
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_246
[lookInsideStruct] singleValueType:src_reg_18_246
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_247
[lookInsideStruct] singleValueType:src_reg_18_247
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_248
[lookInsideStruct] singleValueType:src_reg_18_248
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_249
[lookInsideStruct] singleValueType:src_reg_18_249
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_250
[lookInsideStruct] singleValueType:src_reg_18_250
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_251
[lookInsideStruct] singleValueType:src_reg_18_251
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_252
[lookInsideStruct] singleValueType:src_reg_18_252
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_253
[lookInsideStruct] singleValueType:src_reg_18_253
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_254
[lookInsideStruct] singleValueType:src_reg_18_254
[setupBVTreeForArg] returning BVTree: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i314.i
[handleMemoryPhiNode] incomingAccessI: 45 = MemoryDef(44)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_18_193 src_reg_18_241)
(= src_reg_18_194 src_reg_18_242)
(= src_reg_18_195 src_reg_18_243)
(= src_reg_18_196 src_reg_18_244)
(= src_reg_18_197 src_reg_18_245)
(= src_reg_18_198 src_reg_18_246)
(= src_reg_18_199 src_reg_18_247)
(= src_reg_18_200 src_reg_18_248)
(= src_reg_18_201 src_reg_18_249)
(= src_reg_18_202 src_reg_18_250)
(= src_reg_18_203 src_reg_18_251)
(= src_reg_18_204 src_reg_18_252)
(= src_reg_18_205 src_reg_18_253)
(= src_reg_18_206 src_reg_18_254)
(= dst_reg_18_179 dst_reg_18_227)
(= dst_reg_18_180 dst_reg_18_228)
(= dst_reg_18_181 dst_reg_18_229)
(= dst_reg_18_182 dst_reg_18_230)
(= and.i.i301.i_18_214 dst_reg_18_231)
(= and6.i.i302.i_18_216 dst_reg_18_232)
(= dst_reg_18_185 dst_reg_18_233)
(= dst_reg_18_186 dst_reg_18_234)
(= and6.i312.i_18_223 dst_reg_18_235)
(= storemerge_18_209 dst_reg_18_236)
(= dst_reg_18_189 dst_reg_18_237)
(= dst_reg_18_190 dst_reg_18_238)
(= dst_reg_18_191 dst_reg_18_239)
(= dst_reg_18_192 dst_reg_18_240)
]
[handleMemoryPhiNode] incomingBBI: if.else.i315.i
[handleMemoryPhiNode] incomingAccessI: 46 = MemoryDef(44)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_18_193 src_reg_18_241)
(= src_reg_18_194 src_reg_18_242)
(= src_reg_18_195 src_reg_18_243)
(= src_reg_18_196 src_reg_18_244)
(= src_reg_18_197 src_reg_18_245)
(= src_reg_18_198 src_reg_18_246)
(= src_reg_18_199 src_reg_18_247)
(= src_reg_18_200 src_reg_18_248)
(= src_reg_18_201 src_reg_18_249)
(= src_reg_18_202 src_reg_18_250)
(= src_reg_18_203 src_reg_18_251)
(= src_reg_18_204 src_reg_18_252)
(= src_reg_18_205 src_reg_18_253)
(= src_reg_18_206 src_reg_18_254)
(= dst_reg_18_179 dst_reg_18_227)
(= dst_reg_18_180 dst_reg_18_228)
(= dst_reg_18_181 dst_reg_18_229)
(= dst_reg_18_182 dst_reg_18_230)
(= and.i.i301.i_18_214 dst_reg_18_231)
(= and6.i.i302.i_18_216 dst_reg_18_232)
(= dst_reg_18_185 dst_reg_18_233)
(= dst_reg_18_186 dst_reg_18_234)
(= #x0000000000000000 dst_reg_18_235)
(= storemerge_18_209 dst_reg_18_236)
(= dst_reg_18_189 dst_reg_18_237)
(= dst_reg_18_190 dst_reg_18_238)
(= dst_reg_18_191 dst_reg_18_239)
(= dst_reg_18_192 dst_reg_18_240)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i315.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_18_193 src_reg_18_241)
  (= src_reg_18_194 src_reg_18_242)
  (= src_reg_18_195 src_reg_18_243)
  (= src_reg_18_196 src_reg_18_244)
  (= src_reg_18_197 src_reg_18_245)
  (= src_reg_18_198 src_reg_18_246)
  (= src_reg_18_199 src_reg_18_247)
  (= src_reg_18_200 src_reg_18_248)
  (= src_reg_18_201 src_reg_18_249)
  (= src_reg_18_202 src_reg_18_250)
  (= src_reg_18_203 src_reg_18_251)
  (= src_reg_18_204 src_reg_18_252)
  (= src_reg_18_205 src_reg_18_253)
  (= src_reg_18_206 src_reg_18_254)
  (= dst_reg_18_179 dst_reg_18_227)
  (= dst_reg_18_180 dst_reg_18_228)
  (= dst_reg_18_181 dst_reg_18_229)
  (= dst_reg_18_182 dst_reg_18_230)
  (= and.i.i301.i_18_214 dst_reg_18_231)
  (= and6.i.i302.i_18_216 dst_reg_18_232)
  (= dst_reg_18_185 dst_reg_18_233)
  (= dst_reg_18_186 dst_reg_18_234)
  (= #x0000000000000000 dst_reg_18_235)
  (= storemerge_18_209 dst_reg_18_236)
  (= dst_reg_18_189 dst_reg_18_237)
  (= dst_reg_18_190 dst_reg_18_238)
  (= dst_reg_18_191 dst_reg_18_239)
  (= dst_reg_18_192 dst_reg_18_240)
<if.then250.i, if.then308.i> :
  (= src_reg_18_63 src_reg_18_193)
  (= src_reg_18_64 src_reg_18_194)
  (= src_reg_18_65 src_reg_18_195)
  (= src_reg_18_66 src_reg_18_196)
  (= src_reg_18_67 src_reg_18_197)
  (= src_reg_18_68 src_reg_18_198)
  (= src_reg_18_69 src_reg_18_199)
  (= src_reg_18_70 src_reg_18_200)
  (= src_reg_18_71 src_reg_18_201)
  (= src_reg_18_72 src_reg_18_202)
  (= src_reg_18_73 src_reg_18_203)
  (= src_reg_18_74 src_reg_18_204)
  (= src_reg_18_75 src_reg_18_205)
  (= src_reg_18_76 src_reg_18_206)
  (= #x00000001 dst_reg_18_179)
  (= dst_reg_18_50 dst_reg_18_180)
  (= dst_reg_18_51 dst_reg_18_181)
  (= dst_reg_18_52 dst_reg_18_182)
  (= #x0000000000000000 dst_reg_18_183)
  (= #xffffffffffffffff dst_reg_18_184)
  (= #x8000000000000000 dst_reg_18_185)
  (= #x7fffffffffffffff dst_reg_18_186)
  (= #x0000000000000000 dst_reg_18_187)
  (= storemerge.i.i_18_79 dst_reg_18_188)
  (= dst_reg_18_59 dst_reg_18_189)
  (= dst_reg_18_60 dst_reg_18_190)
  (= dst_reg_18_61 dst_reg_18_191)
  (= dst_reg_18_62 dst_reg_18_192)
<if.end266.i, if.then308.i> :
  (= src_reg_18_145 src_reg_18_193)
  (= src_reg_18_146 src_reg_18_194)
  (= src_reg_18_147 src_reg_18_195)
  (= src_reg_18_148 src_reg_18_196)
  (= src_reg_18_149 src_reg_18_197)
  (= src_reg_18_150 src_reg_18_198)
  (= src_reg_18_151 src_reg_18_199)
  (= src_reg_18_152 src_reg_18_200)
  (= src_reg_18_153 src_reg_18_201)
  (= src_reg_18_154 src_reg_18_202)
  (= src_reg_18_155 src_reg_18_203)
  (= src_reg_18_156 src_reg_18_204)
  (= src_reg_18_157 src_reg_18_205)
  (= src_reg_18_158 src_reg_18_206)
  (= dst_reg_18_131 dst_reg_18_179)
  (= dst_reg_18_132 dst_reg_18_180)
  (= dst_reg_18_133 dst_reg_18_181)
  (= dst_reg_18_134 dst_reg_18_182)
  (= shl.i.i_18_165 dst_reg_18_183)
  (= shl5.i.i_18_166 dst_reg_18_184)
  (= or.i200.i_18_169 dst_reg_18_185)
  (= or8.i206.i_18_172 dst_reg_18_186)
  (= cond23.i212.i_18_175 dst_reg_18_187)
  (= storemerge.i_18_161 dst_reg_18_188)
  (= dst_reg_18_141 dst_reg_18_189)
  (= dst_reg_18_142 dst_reg_18_190)
  (= dst_reg_18_143 dst_reg_18_191)
  (= dst_reg_18_144 dst_reg_18_192)
<if.else261.i, if.end266.i> :
  (= src_reg_18_63 src_reg_18_145)
  (= src_reg_18_64 src_reg_18_146)
  (= src_reg_18_65 src_reg_18_147)
  (= src_reg_18_66 src_reg_18_148)
  (= src_reg_18_67 src_reg_18_149)
  (= src_reg_18_68 src_reg_18_150)
  (= src_reg_18_69 src_reg_18_151)
  (= src_reg_18_70 src_reg_18_152)
  (= src_reg_18_71 src_reg_18_153)
  (= src_reg_18_72 src_reg_18_154)
  (= src_reg_18_73 src_reg_18_155)
  (= src_reg_18_74 src_reg_18_156)
  (= src_reg_18_75 src_reg_18_157)
  (= src_reg_18_76 src_reg_18_158)
  (= dst_reg_18_49 dst_reg_18_131)
  (= dst_reg_18_50 dst_reg_18_132)
  (= dst_reg_18_51 dst_reg_18_133)
  (= dst_reg_18_52 dst_reg_18_134)
  (= dst_reg_18_53 dst_reg_18_135)
  (= dst_reg_18_54 dst_reg_18_136)
  (= #x8000000000000000 dst_reg_18_137)
  (= #x7fffffffffffffff dst_reg_18_138)
  (= shl263.i_18_129 dst_reg_18_139)
  (= storemerge.i.i_18_79 dst_reg_18_140)
  (= dst_reg_18_59 dst_reg_18_141)
  (= dst_reg_18_60 dst_reg_18_142)
  (= dst_reg_18_61 dst_reg_18_143)
  (= dst_reg_18_62 dst_reg_18_144)
<if.then258.i, if.end266.i> :
  (= src_reg_18_63 src_reg_18_145)
  (= src_reg_18_64 src_reg_18_146)
  (= src_reg_18_65 src_reg_18_147)
  (= src_reg_18_66 src_reg_18_148)
  (= src_reg_18_67 src_reg_18_149)
  (= src_reg_18_68 src_reg_18_150)
  (= src_reg_18_69 src_reg_18_151)
  (= src_reg_18_70 src_reg_18_152)
  (= src_reg_18_71 src_reg_18_153)
  (= src_reg_18_72 src_reg_18_154)
  (= src_reg_18_73 src_reg_18_155)
  (= src_reg_18_74 src_reg_18_156)
  (= src_reg_18_75 src_reg_18_157)
  (= src_reg_18_76 src_reg_18_158)
  (= dst_reg_18_49 dst_reg_18_131)
  (= dst_reg_18_50 dst_reg_18_132)
  (= dst_reg_18_51 dst_reg_18_133)
  (= dst_reg_18_52 dst_reg_18_134)
  (= dst_reg_18_53 dst_reg_18_135)
  (= dst_reg_18_54 dst_reg_18_136)
  (= #x8000000000000000 dst_reg_18_137)
  (= #x7fffffffffffffff dst_reg_18_138)
  (= #x0000000000000000 dst_reg_18_139)
  (= storemerge.i.i_18_79 dst_reg_18_140)
  (= dst_reg_18_59 dst_reg_18_141)
  (= dst_reg_18_60 dst_reg_18_142)
  (= dst_reg_18_61 dst_reg_18_143)
  (= dst_reg_18_62 dst_reg_18_144)
<if.then.i314.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_18_193 src_reg_18_241)
  (= src_reg_18_194 src_reg_18_242)
  (= src_reg_18_195 src_reg_18_243)
  (= src_reg_18_196 src_reg_18_244)
  (= src_reg_18_197 src_reg_18_245)
  (= src_reg_18_198 src_reg_18_246)
  (= src_reg_18_199 src_reg_18_247)
  (= src_reg_18_200 src_reg_18_248)
  (= src_reg_18_201 src_reg_18_249)
  (= src_reg_18_202 src_reg_18_250)
  (= src_reg_18_203 src_reg_18_251)
  (= src_reg_18_204 src_reg_18_252)
  (= src_reg_18_205 src_reg_18_253)
  (= src_reg_18_206 src_reg_18_254)
  (= dst_reg_18_179 dst_reg_18_227)
  (= dst_reg_18_180 dst_reg_18_228)
  (= dst_reg_18_181 dst_reg_18_229)
  (= dst_reg_18_182 dst_reg_18_230)
  (= and.i.i301.i_18_214 dst_reg_18_231)
  (= and6.i.i302.i_18_216 dst_reg_18_232)
  (= dst_reg_18_185 dst_reg_18_233)
  (= dst_reg_18_186 dst_reg_18_234)
  (= and6.i312.i_18_223 dst_reg_18_235)
  (= storemerge_18_209 dst_reg_18_236)
  (= dst_reg_18_189 dst_reg_18_237)
  (= dst_reg_18_190 dst_reg_18_238)
  (= dst_reg_18_191 dst_reg_18_239)
  (= dst_reg_18_192 dst_reg_18_240)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= #x0000000000000000 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= and6.i.i_18_45 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 4294967295
[getBool] returning unique bool w/ prefix: if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
[handlePhiNodeSetupBitVecs] valueI:   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBool] returning unique bool w/ prefix: if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i316.i : [<, if.else.i315.i>, <and8.i313.i, if.then.i314.i>, ]
storemerge : [<, if.then250.i>, <cond35.i217.i, if.end266.i>, ]
storemerge.i : [<shl265.i, if.else261.i>, <, if.then258.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.else.i315.i, coerce_reg_to_size.exit320.i>: if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
<if.end266.i, if.then308.i>: if.end266.i_if.then308.i_18_208
<if.then250.i, if.then308.i>: if.then250.i_if.then308.i_18_207
<if.then258.i, if.end266.i>: if.then258.i_if.end266.i_18_160
<if.else261.i, if.end266.i>: if.else261.i_if.end266.i_18_159
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_18_78
<if.then.i314.i, coerce_reg_to_size.exit320.i>: if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_18_77
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i316.i_18_257
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i316.i_18_257
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
[getBitVecSingValType]   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i313.i_18_225
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))

-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_18_257
[handleStoreInst] BVToStore: storemerge.i316.i_18_257
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 47 = MemoryDef(56)
[handleStoreInst] definingMemoryAccess: 56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_236 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_18_257 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
var_off.i185.i.repack, dst_reg, [5, 0]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
var_off.i185.i.repack2, dst_reg, [5, 1]
var_off.i.i.repack3, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i27.i317.i_18_259
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i27.i317.i_18_259
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
[handleLoadInst] (= dst_reg_18_235 i27.i317.i_18_259)
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit320.i, Size:3
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
  (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_18_259
[handleStoreInst] BVToStore: i27.i317.i_18_259
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 48 = MemoryDef(47)
[handleStoreInst] definingMemoryAccess: 47 = MemoryDef(56)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_233 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i317.i_18_259 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_18_257
[handleStoreInst] BVToStore: storemerge.i316.i_18_257
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 49 = MemoryDef(48)
[handleStoreInst] definingMemoryAccess: 48 = MemoryDef(47)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_234 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_18_257 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_18_259
[handleStoreInst] BVToStore: i27.i317.i_18_259
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 50 = MemoryDef(49)
[handleStoreInst] definingMemoryAccess: 49 = MemoryDef(48)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i317.i_18_259 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i317.i_18_259 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_18_257
[handleStoreInst] BVToStore: storemerge.i316.i_18_257
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 51 = MemoryDef(50)
[handleStoreInst] definingMemoryAccess: 50 = MemoryDef(49)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i316.i_18_257 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_18_257 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_18_257
[handleStoreInst] BVToStore: storemerge.i316.i_18_257
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 52 = MemoryDef(51)
[handleStoreInst] definingMemoryAccess: 51 = MemoryDef(50)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i316.i_18_257 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_18_257 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
52 = MemoryDef(51) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_18_259
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_18_257
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_18_260
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_18_260
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_18_260
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_18_262
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_18_262
[handleICmpInst] (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
  (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
  (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
  (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_18_260
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_18_264
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_18_264
[handleICmpInst] (ite (bvult xor.i.i.i_18_260 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= tobool.not.i.i.i.i.i_18_264 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
  (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
  (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
  (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_18_260 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= tobool.not.i.i.i.i.i_18_264 #b0))
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_18_260
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_18_266
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_18_266
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_18_266 (bvshl xor.i.i.i_18_260 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_18_264
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_18_266
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_18_260
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_18_267
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_18_267
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_18_264
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_18_266
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_18_260
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_18_267
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select.i.i.i.i.i_18_267 shl.i.i.i.i.i_18_266)
     (= spec.select.i.i.i.i.i_18_267 xor.i.i.i_18_260))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_18_264
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_18_270
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_18_270
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_18_264
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_18_270
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select17.i.i.i.i.i_18_270 #x0000001f)
     (= spec.select17.i.i.i.i.i_18_270 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_18_267
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_18_272
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_18_272
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_18_267 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= tobool2.not.i.i.i.i.i_18_272 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
  (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
  (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
  (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_18_260 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= tobool.not.i.i.i.i.i_18_264 #b0))
  (= shl.i.i.i.i.i_18_266 (bvshl xor.i.i.i_18_260 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select.i.i.i.i.i_18_267 shl.i.i.i.i.i_18_266)
     (= spec.select.i.i.i.i.i_18_267 xor.i.i.i_18_260))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select17.i.i.i.i.i_18_270 #x0000001f)
     (= spec.select17.i.i.i.i.i_18_270 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_18_267 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= tobool2.not.i.i.i.i.i_18_272 #b0))
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_18_270
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_18_274
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_18_274
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_18_274 (bvadd spec.select17.i.i.i.i.i_18_270 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_18_267
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_18_276
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_18_276
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_18_276
   (bvshl spec.select.i.i.i.i.i_18_267 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_18_272
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_18_276
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_18_267
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_18_277
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_18_277
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_18_272
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_18_276
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_18_267
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_18_277
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= word.addr.1.i.i.i.i.i_18_277 shl5.i.i.i.i.i_18_276)
     (= word.addr.1.i.i.i.i.i_18_277 spec.select.i.i.i.i.i_18_267))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_18_272
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_18_274
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_18_270
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_18_278
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_18_278
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_18_272
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_18_274
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_18_270
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_18_278
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= num.1.i.i.i.i.i_18_278 sub4.i.i.i.i.i_18_274)
     (= num.1.i.i.i.i.i_18_278 spec.select17.i.i.i.i.i_18_270))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_18_277
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_18_280
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_18_280
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_18_277 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= tobool8.not.i.i.i.i.i_18_280 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
  (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
  (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
  (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_18_260 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= tobool.not.i.i.i.i.i_18_264 #b0))
  (= shl.i.i.i.i.i_18_266 (bvshl xor.i.i.i_18_260 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select.i.i.i.i.i_18_267 shl.i.i.i.i.i_18_266)
     (= spec.select.i.i.i.i.i_18_267 xor.i.i.i_18_260))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select17.i.i.i.i.i_18_270 #x0000001f)
     (= spec.select17.i.i.i.i.i_18_270 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_18_267 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= tobool2.not.i.i.i.i.i_18_272 #b0))
  (= sub4.i.i.i.i.i_18_274 (bvadd spec.select17.i.i.i.i.i_18_270 #xfffffff0))
  (= shl5.i.i.i.i.i_18_276
   (bvshl spec.select.i.i.i.i.i_18_267 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= word.addr.1.i.i.i.i.i_18_277 shl5.i.i.i.i.i_18_276)
     (= word.addr.1.i.i.i.i.i_18_277 spec.select.i.i.i.i.i_18_267))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= num.1.i.i.i.i.i_18_278 sub4.i.i.i.i.i_18_274)
     (= num.1.i.i.i.i.i_18_278 spec.select17.i.i.i.i.i_18_270))
  (ite (bvult word.addr.1.i.i.i.i.i_18_277 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= tobool8.not.i.i.i.i.i_18_280 #b0))
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_18_278
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_18_282
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_18_282
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_18_282 (bvadd num.1.i.i.i.i.i_18_278 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_18_277
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_18_284
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_18_284
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_18_284
   (bvshl word.addr.1.i.i.i.i.i_18_277 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_18_280
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_18_284
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_18_277
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_18_285
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_18_285
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_18_280
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_18_284
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_18_277
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_18_285
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= word.addr.2.i.i.i.i.i_18_285 shl11.i.i.i.i.i_18_284)
     (= word.addr.2.i.i.i.i.i_18_285 word.addr.1.i.i.i.i.i_18_277))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_18_280
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_18_282
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_18_278
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_18_286
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_18_286
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_18_280
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_18_282
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_18_278
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_18_286
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= num.2.i.i.i.i.i_18_286 sub10.i.i.i.i.i_18_282)
     (= num.2.i.i.i.i.i_18_286 num.1.i.i.i.i.i_18_278))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_18_285
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_18_288
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_18_288
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_18_285 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= tobool14.not.i.i.i.i.i_18_288 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
  (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
  (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
  (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_18_260 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= tobool.not.i.i.i.i.i_18_264 #b0))
  (= shl.i.i.i.i.i_18_266 (bvshl xor.i.i.i_18_260 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select.i.i.i.i.i_18_267 shl.i.i.i.i.i_18_266)
     (= spec.select.i.i.i.i.i_18_267 xor.i.i.i_18_260))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select17.i.i.i.i.i_18_270 #x0000001f)
     (= spec.select17.i.i.i.i.i_18_270 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_18_267 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= tobool2.not.i.i.i.i.i_18_272 #b0))
  (= sub4.i.i.i.i.i_18_274 (bvadd spec.select17.i.i.i.i.i_18_270 #xfffffff0))
  (= shl5.i.i.i.i.i_18_276
   (bvshl spec.select.i.i.i.i.i_18_267 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= word.addr.1.i.i.i.i.i_18_277 shl5.i.i.i.i.i_18_276)
     (= word.addr.1.i.i.i.i.i_18_277 spec.select.i.i.i.i.i_18_267))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= num.1.i.i.i.i.i_18_278 sub4.i.i.i.i.i_18_274)
     (= num.1.i.i.i.i.i_18_278 spec.select17.i.i.i.i.i_18_270))
  (ite (bvult word.addr.1.i.i.i.i.i_18_277 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= tobool8.not.i.i.i.i.i_18_280 #b0))
  (= sub10.i.i.i.i.i_18_282 (bvadd num.1.i.i.i.i.i_18_278 #xfffffff8))
  (= shl11.i.i.i.i.i_18_284
   (bvshl word.addr.1.i.i.i.i.i_18_277 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= word.addr.2.i.i.i.i.i_18_285 shl11.i.i.i.i.i_18_284)
     (= word.addr.2.i.i.i.i.i_18_285 word.addr.1.i.i.i.i.i_18_277))
  (ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= num.2.i.i.i.i.i_18_286 sub10.i.i.i.i.i_18_282)
     (= num.2.i.i.i.i.i_18_286 num.1.i.i.i.i.i_18_278))
  (ite (bvult word.addr.2.i.i.i.i.i_18_285 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= tobool14.not.i.i.i.i.i_18_288 #b0))
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_18_286
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_18_290
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_18_290
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_18_290 (bvadd num.2.i.i.i.i.i_18_286 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_18_285
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_18_292
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_18_292
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_18_292
   (bvshl word.addr.2.i.i.i.i.i_18_285 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_18_288
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_18_292
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_18_285
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_18_293
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_18_293
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_18_288
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_18_292
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_18_285
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_18_293
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= word.addr.3.i.i.i.i.i_18_293 shl17.i.i.i.i.i_18_292)
     (= word.addr.3.i.i.i.i.i_18_293 word.addr.2.i.i.i.i.i_18_285))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_18_288
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_18_290
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_18_286
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_18_294
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_18_294
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_18_288
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_18_290
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_18_286
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_18_294
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= num.3.i.i.i.i.i_18_294 sub16.i.i.i.i.i_18_290)
     (= num.3.i.i.i.i.i_18_294 num.2.i.i.i.i.i_18_286))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_18_293
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_18_296
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_18_296
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_18_293 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= tobool20.not.i.i.i.i.i_18_296 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
  (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
  (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
  (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_18_260 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= tobool.not.i.i.i.i.i_18_264 #b0))
  (= shl.i.i.i.i.i_18_266 (bvshl xor.i.i.i_18_260 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select.i.i.i.i.i_18_267 shl.i.i.i.i.i_18_266)
     (= spec.select.i.i.i.i.i_18_267 xor.i.i.i_18_260))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select17.i.i.i.i.i_18_270 #x0000001f)
     (= spec.select17.i.i.i.i.i_18_270 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_18_267 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= tobool2.not.i.i.i.i.i_18_272 #b0))
  (= sub4.i.i.i.i.i_18_274 (bvadd spec.select17.i.i.i.i.i_18_270 #xfffffff0))
  (= shl5.i.i.i.i.i_18_276
   (bvshl spec.select.i.i.i.i.i_18_267 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= word.addr.1.i.i.i.i.i_18_277 shl5.i.i.i.i.i_18_276)
     (= word.addr.1.i.i.i.i.i_18_277 spec.select.i.i.i.i.i_18_267))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= num.1.i.i.i.i.i_18_278 sub4.i.i.i.i.i_18_274)
     (= num.1.i.i.i.i.i_18_278 spec.select17.i.i.i.i.i_18_270))
  (ite (bvult word.addr.1.i.i.i.i.i_18_277 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= tobool8.not.i.i.i.i.i_18_280 #b0))
  (= sub10.i.i.i.i.i_18_282 (bvadd num.1.i.i.i.i.i_18_278 #xfffffff8))
  (= shl11.i.i.i.i.i_18_284
   (bvshl word.addr.1.i.i.i.i.i_18_277 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= word.addr.2.i.i.i.i.i_18_285 shl11.i.i.i.i.i_18_284)
     (= word.addr.2.i.i.i.i.i_18_285 word.addr.1.i.i.i.i.i_18_277))
  (ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= num.2.i.i.i.i.i_18_286 sub10.i.i.i.i.i_18_282)
     (= num.2.i.i.i.i.i_18_286 num.1.i.i.i.i.i_18_278))
  (ite (bvult word.addr.2.i.i.i.i.i_18_285 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= tobool14.not.i.i.i.i.i_18_288 #b0))
  (= sub16.i.i.i.i.i_18_290 (bvadd num.2.i.i.i.i.i_18_286 #xfffffffc))
  (= shl17.i.i.i.i.i_18_292
   (bvshl word.addr.2.i.i.i.i.i_18_285 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= word.addr.3.i.i.i.i.i_18_293 shl17.i.i.i.i.i_18_292)
     (= word.addr.3.i.i.i.i.i_18_293 word.addr.2.i.i.i.i.i_18_285))
  (ite (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= num.3.i.i.i.i.i_18_294 sub16.i.i.i.i.i_18_290)
     (= num.3.i.i.i.i.i_18_294 num.2.i.i.i.i.i_18_286))
  (ite (bvult word.addr.3.i.i.i.i.i_18_293 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= tobool20.not.i.i.i.i.i_18_296 #b0))
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_18_294
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_18_298
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_18_298
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_18_298 (bvadd num.3.i.i.i.i.i_18_294 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_18_293
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_18_300
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_18_300
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_18_300
   (bvshl word.addr.3.i.i.i.i.i_18_293 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
cond35.i217.i,storemerge.i,or29.i215.i
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_18_296
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_18_300
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_18_293
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_18_301
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_18_301
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_18_296
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_18_300
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_18_293
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_18_301
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= word.addr.4.i.i.i.i.i_18_301 shl23.i.i.i.i.i_18_300)
     (= word.addr.4.i.i.i.i.i_18_301 word.addr.3.i.i.i.i.i_18_293))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
storemerge.i20.i,and8.i17.i,
cond35.i217.i,storemerge.i,or29.i215.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_18_296
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_18_298
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_18_294
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_18_302
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_18_302
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_18_296
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_18_298
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_18_294
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_18_302
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= num.4.i.i.i.i.i_18_302 sub22.i.i.i.i.i_18_298)
     (= num.4.i.i.i.i.i_18_302 num.3.i.i.i.i.i_18_294))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_18_301
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_18_304
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_18_304
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_18_304
   (bvlshr word.addr.4.i.i.i.i.i_18_301 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_18_304
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_18_305
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_18_305
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_18_305
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_18_304))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_18_302
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_18_305
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_18_306
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_18_306
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_18_306 (bvadd num.4.i.i.i.i.i_18_302 i.i.i.i.i.i.neg_18_305))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_18_306
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_18_308
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_18_308
[handleBinaryOperatorInst] AND instruction
(= phi.bo_18_308 (bvand add.i.i.i335.i_18_306 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
[handlePhiNodeSetupBitVecs] phiConditionBoolI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, coerce_reg_to_size.exit320.i>, ]
storemerge.i316.i : [<, if.else.i315.i>, <and8.i313.i, if.then.i314.i>, ]
storemerge : [<, if.then250.i>, <cond35.i217.i, if.end266.i>, ]
storemerge.i : [<shl265.i, if.else261.i>, <, if.then258.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.else.i315.i, coerce_reg_to_size.exit320.i>: if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
<if.end266.i, if.then308.i>: if.end266.i_if.then308.i_18_208
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i>: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
<if.then250.i, if.then308.i>: if.then250.i_if.then308.i_18_207
<if.then258.i, if.end266.i>: if.then258.i_if.end266.i_18_160
<if.else261.i, if.end266.i>: if.else261.i_if.end266.i_18_159
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_18_78
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
<if.then.i314.i, coerce_reg_to_size.exit320.i>: if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_18_77
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_18_311
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_18_311
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_18_308
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
    (= retval.0.i.i.i.i_18_311 phi.bo_18_308))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
    (= retval.0.i.i.i.i_18_311 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
    (= retval.0.i.i.i.i_18_311 phi.bo_18_308))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
    (= retval.0.i.i.i.i_18_311 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_18_311
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_18_314
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_18_314
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_18_311 #x0000003f)
     (= cmp.i.i.i_18_314 #b1)
     (= cmp.i.i.i_18_314 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
    (= retval.0.i.i.i.i_18_311 phi.bo_18_308))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
    (= retval.0.i.i.i.i_18_311 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_18_311 #x0000003f)
     (= cmp.i.i.i_18_314 #b1)
     (= cmp.i.i.i_18_314 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
  (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
  (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
  (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:11
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:10
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
BasicBlock: if.end266.i, Size:15
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_18_260 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= tobool.not.i.i.i.i.i_18_264 #b0))
  (= shl.i.i.i.i.i_18_266 (bvshl xor.i.i.i_18_260 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select.i.i.i.i.i_18_267 shl.i.i.i.i.i_18_266)
     (= spec.select.i.i.i.i.i_18_267 xor.i.i.i_18_260))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select17.i.i.i.i.i_18_270 #x0000001f)
     (= spec.select17.i.i.i.i.i_18_270 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_18_267 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= tobool2.not.i.i.i.i.i_18_272 #b0))
  (= sub4.i.i.i.i.i_18_274 (bvadd spec.select17.i.i.i.i.i_18_270 #xfffffff0))
  (= shl5.i.i.i.i.i_18_276
   (bvshl spec.select.i.i.i.i.i_18_267 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= word.addr.1.i.i.i.i.i_18_277 shl5.i.i.i.i.i_18_276)
     (= word.addr.1.i.i.i.i.i_18_277 spec.select.i.i.i.i.i_18_267))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= num.1.i.i.i.i.i_18_278 sub4.i.i.i.i.i_18_274)
     (= num.1.i.i.i.i.i_18_278 spec.select17.i.i.i.i.i_18_270))
  (ite (bvult word.addr.1.i.i.i.i.i_18_277 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= tobool8.not.i.i.i.i.i_18_280 #b0))
  (= sub10.i.i.i.i.i_18_282 (bvadd num.1.i.i.i.i.i_18_278 #xfffffff8))
  (= shl11.i.i.i.i.i_18_284
   (bvshl word.addr.1.i.i.i.i.i_18_277 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= word.addr.2.i.i.i.i.i_18_285 shl11.i.i.i.i.i_18_284)
     (= word.addr.2.i.i.i.i.i_18_285 word.addr.1.i.i.i.i.i_18_277))
  (ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= num.2.i.i.i.i.i_18_286 sub10.i.i.i.i.i_18_282)
     (= num.2.i.i.i.i.i_18_286 num.1.i.i.i.i.i_18_278))
  (ite (bvult word.addr.2.i.i.i.i.i_18_285 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= tobool14.not.i.i.i.i.i_18_288 #b0))
  (= sub16.i.i.i.i.i_18_290 (bvadd num.2.i.i.i.i.i_18_286 #xfffffffc))
  (= shl17.i.i.i.i.i_18_292
   (bvshl word.addr.2.i.i.i.i.i_18_285 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= word.addr.3.i.i.i.i.i_18_293 shl17.i.i.i.i.i_18_292)
     (= word.addr.3.i.i.i.i.i_18_293 word.addr.2.i.i.i.i.i_18_285))
  (ite (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= num.3.i.i.i.i.i_18_294 sub16.i.i.i.i.i_18_290)
     (= num.3.i.i.i.i.i_18_294 num.2.i.i.i.i.i_18_286))
  (ite (bvult word.addr.3.i.i.i.i.i_18_293 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= tobool20.not.i.i.i.i.i_18_296 #b0))
  (= sub22.i.i.i.i.i_18_298 (bvadd num.3.i.i.i.i.i_18_294 #x000000fe))
  (= shl23.i.i.i.i.i_18_300
   (bvshl word.addr.3.i.i.i.i.i_18_293 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= word.addr.4.i.i.i.i.i_18_301 shl23.i.i.i.i.i_18_300)
     (= word.addr.4.i.i.i.i.i_18_301 word.addr.3.i.i.i.i.i_18_293))
  (ite (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= num.4.i.i.i.i.i_18_302 sub22.i.i.i.i.i_18_298)
     (= num.4.i.i.i.i.i_18_302 num.3.i.i.i.i.i_18_294))
  (= word.addr.4.lobit.i.i.i.i.i.neg_18_304
   (bvlshr word.addr.4.i.i.i.i.i_18_301 #x000000000000003f))
  (= i.i.i.i.i.i.neg_18_305
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_18_304))
  (= add.i.i.i335.i_18_306 (bvadd num.4.i.i.i.i.i_18_302 i.i.i.i.i.i.neg_18_305))
  (= phi.bo_18_308 (bvand add.i.i.i335.i_18_306 #x000000ff))
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_18_311
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_18_315
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_18_315
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_18_315 ((_ zero_extend 32) retval.0.i.i.i.i_18_311))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_18_315
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_18_317
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_18_317
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_18_317 (bvshl #xffffffffffffffff sh_prom.i.i.i_18_315))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_18_317
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_18_319
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_18_319
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_18_319 (bvxor notmask.i.i.i_18_317 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_18_317
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_18_259
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_18_320
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_18_320
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_18_320 (bvand notmask.i.i.i_18_317 i27.i317.i_18_259))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
storemerge.i20.i,and8.i17.i,
cond35.i217.i,storemerge.i,or29.i215.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_18_314
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_18_320
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_18_322
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_18_322
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_18_314
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_18_320
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_18_322
[handleSelectInst](ite (= cmp.i.i.i_18_314 #b1)
     (= retval.sroa.0.0.i.i.i_18_322 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_18_322 and.i.i336.i_18_320))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 52 = MemoryDef(51)
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleSelectInst]SelectMap:
storemerge.i20.i,and8.i17.i,
cond35.i217.i,storemerge.i,or29.i215.i
retval.sroa.3.0.i.i.i,,sub.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
cond23.i212.i,i26.i210.i,shl.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_18_314
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_18_319
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_18_324
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_18_324
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_18_314
[handleSelectInst] z3ExprSelectOp2: #x00000000ffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_18_319
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_18_324
[handleSelectInst](ite (= cmp.i.i.i_18_314 #b1)
     (= retval.sroa.3.0.i.i.i_18_324 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_18_324 sub.i.i.i_18_319))
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_18_322
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_18_214
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_18_325
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_18_325
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_18_325 (bvor retval.sroa.0.0.i.i.i_18_322 and.i.i301.i_18_214))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_18_324
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_18_216
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_18_326
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_18_326
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_18_326 (bvand retval.sroa.3.0.i.i.i_18_324 and6.i.i302.i_18_216))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_18_326
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_18_328
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_18_328
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_18_328 (bvxor and.i1.i.i_18_326 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_18_325
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_18_328
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_18_329
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_18_329
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_18_329 (bvand or.i.i.i_18_325 neg.i.i.i_18_328))
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_18_329
[handleStoreInst] BVToStore: and4.i.i.i_18_329
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 53 = MemoryDef(52)
[handleStoreInst] definingMemoryAccess: 52 = MemoryDef(51)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_231 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_18_329 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
53 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
52 = MemoryDef(51) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_18_326
[handleStoreInst] BVToStore: and.i1.i.i_18_326
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 54 = MemoryDef(53)
[handleStoreInst] definingMemoryAccess: 53 = MemoryDef(52)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_18_232 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_18_326 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
53 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
52 = MemoryDef(51) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
54 = MemoryDef(53) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ and.i1.i.i_18_326 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_330
[lookInsideStruct] singleValueType:dst_reg_18_330
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_331
[lookInsideStruct] singleValueType:dst_reg_18_331
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_332
[lookInsideStruct] singleValueType:dst_reg_18_332
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_333
[lookInsideStruct] singleValueType:dst_reg_18_333
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_334
[lookInsideStruct] singleValueType:dst_reg_18_334
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_335
[lookInsideStruct] singleValueType:dst_reg_18_335
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_336
[lookInsideStruct] singleValueType:dst_reg_18_336
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_337
[lookInsideStruct] singleValueType:dst_reg_18_337
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_338
[lookInsideStruct] singleValueType:dst_reg_18_338
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_339
[lookInsideStruct] singleValueType:dst_reg_18_339
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_340
[lookInsideStruct] singleValueType:dst_reg_18_340
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_341
[lookInsideStruct] singleValueType:dst_reg_18_341
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_342
[lookInsideStruct] singleValueType:dst_reg_18_342
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_343
[lookInsideStruct] singleValueType:dst_reg_18_343
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_18_330 ] [ ] [ dst_reg_18_331 ] [ dst_reg_18_332 ] [ dst_reg_18_333 ] [ [ dst_reg_18_334 ] [ dst_reg_18_335 ] ] [ dst_reg_18_336 ] [ dst_reg_18_337 ] [ dst_reg_18_338 ] [ dst_reg_18_339 ] [ ] [ dst_reg_18_340 ] [ dst_reg_18_341 ] [ dst_reg_18_342 ] [ dst_reg_18_343 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_344
[lookInsideStruct] singleValueType:src_reg_18_344
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_345
[lookInsideStruct] singleValueType:src_reg_18_345
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_346
[lookInsideStruct] singleValueType:src_reg_18_346
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_347
[lookInsideStruct] singleValueType:src_reg_18_347
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_348
[lookInsideStruct] singleValueType:src_reg_18_348
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_349
[lookInsideStruct] singleValueType:src_reg_18_349
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_350
[lookInsideStruct] singleValueType:src_reg_18_350
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_351
[lookInsideStruct] singleValueType:src_reg_18_351
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_352
[lookInsideStruct] singleValueType:src_reg_18_352
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_353
[lookInsideStruct] singleValueType:src_reg_18_353
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_354
[lookInsideStruct] singleValueType:src_reg_18_354
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_355
[lookInsideStruct] singleValueType:src_reg_18_355
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_356
[lookInsideStruct] singleValueType:src_reg_18_356
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_357
[lookInsideStruct] singleValueType:src_reg_18_357
[setupBVTreeForArg] returning BVTree: [ [ src_reg_18_344 ] [ ] [ src_reg_18_345 ] [ src_reg_18_346 ] [ src_reg_18_347 ] [ [ src_reg_18_348 ] [ src_reg_18_349 ] ] [ src_reg_18_350 ] [ src_reg_18_351 ] [ src_reg_18_352 ] [ src_reg_18_353 ] [ ] [ src_reg_18_354 ] [ src_reg_18_355 ] [ src_reg_18_356 ] [ src_reg_18_357 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_18_344 ] [ ] [ src_reg_18_345 ] [ src_reg_18_346 ] [ src_reg_18_347 ] [ [ src_reg_18_348 ] [ src_reg_18_349 ] ] [ src_reg_18_350 ] [ src_reg_18_351 ] [ src_reg_18_352 ] [ src_reg_18_353 ] [ ] [ src_reg_18_354 ] [ src_reg_18_355 ] [ src_reg_18_356 ] [ src_reg_18_357 ] ] 
- dst_reg: [ [ dst_reg_18_330 ] [ ] [ dst_reg_18_331 ] [ dst_reg_18_332 ] [ dst_reg_18_333 ] [ [ dst_reg_18_334 ] [ dst_reg_18_335 ] ] [ dst_reg_18_336 ] [ dst_reg_18_337 ] [ dst_reg_18_338 ] [ dst_reg_18_339 ] [ ] [ dst_reg_18_340 ] [ dst_reg_18_341 ] [ dst_reg_18_342 ] [ dst_reg_18_343 ] ] 

[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 54 = MemoryDef(53)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ and.i1.i.i_18_326 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_344 ] [ ] [ src_reg_18_345 ] [ src_reg_18_346 ] [ src_reg_18_347 ] [ [ src_reg_18_348 ] [ src_reg_18_349 ] ] [ src_reg_18_350 ] [ src_reg_18_351 ] [ src_reg_18_352 ] [ src_reg_18_353 ] [ ] [ src_reg_18_354 ] [ src_reg_18_355 ] [ src_reg_18_356 ] [ src_reg_18_357 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ and.i1.i.i_18_326 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_330 ] [ ] [ dst_reg_18_331 ] [ dst_reg_18_332 ] [ dst_reg_18_333 ] [ [ dst_reg_18_334 ] [ dst_reg_18_335 ] ] [ dst_reg_18_336 ] [ dst_reg_18_337 ] [ dst_reg_18_338 ] [ dst_reg_18_339 ] [ ] [ dst_reg_18_340 ] [ dst_reg_18_341 ] [ dst_reg_18_342 ] [ dst_reg_18_343 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_18_241 src_reg_18_344)
(= src_reg_18_242 src_reg_18_345)
(= src_reg_18_243 src_reg_18_346)
(= src_reg_18_244 src_reg_18_347)
(= src_reg_18_245 src_reg_18_348)
(= src_reg_18_246 src_reg_18_349)
(= src_reg_18_247 src_reg_18_350)
(= src_reg_18_248 src_reg_18_351)
(= src_reg_18_249 src_reg_18_352)
(= src_reg_18_250 src_reg_18_353)
(= src_reg_18_251 src_reg_18_354)
(= src_reg_18_252 src_reg_18_355)
(= src_reg_18_253 src_reg_18_356)
(= src_reg_18_254 src_reg_18_357)
(= dst_reg_18_227 dst_reg_18_330)
(= dst_reg_18_228 dst_reg_18_331)
(= dst_reg_18_229 dst_reg_18_332)
(= dst_reg_18_230 dst_reg_18_333)
(= and4.i.i.i_18_329 dst_reg_18_334)
(= and.i1.i.i_18_326 dst_reg_18_335)
(= i27.i317.i_18_259 dst_reg_18_336)
(= storemerge.i316.i_18_257 dst_reg_18_337)
(= dst_reg_18_235 dst_reg_18_338)
(= storemerge.i316.i_18_257 dst_reg_18_339)
(= dst_reg_18_237 dst_reg_18_340)
(= dst_reg_18_238 dst_reg_18_341)
(= dst_reg_18_239 dst_reg_18_342)
(= dst_reg_18_240 dst_reg_18_343)
]
[handleMemoryPhiNode] incomingBBI: if.then41.i
[handleMemoryPhiNode] incomingAccessI: 25 = MemoryDef(24)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_344 ] [ ] [ src_reg_18_345 ] [ src_reg_18_346 ] [ src_reg_18_347 ] [ [ src_reg_18_348 ] [ src_reg_18_349 ] ] [ src_reg_18_350 ] [ src_reg_18_351 ] [ src_reg_18_352 ] [ src_reg_18_353 ] [ ] [ src_reg_18_354 ] [ src_reg_18_355 ] [ src_reg_18_356 ] [ src_reg_18_357 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_330 ] [ ] [ dst_reg_18_331 ] [ dst_reg_18_332 ] [ dst_reg_18_333 ] [ [ dst_reg_18_334 ] [ dst_reg_18_335 ] ] [ dst_reg_18_336 ] [ dst_reg_18_337 ] [ dst_reg_18_338 ] [ dst_reg_18_339 ] [ ] [ dst_reg_18_340 ] [ dst_reg_18_341 ] [ dst_reg_18_342 ] [ dst_reg_18_343 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_18_63 src_reg_18_344)
(= src_reg_18_64 src_reg_18_345)
(= src_reg_18_65 src_reg_18_346)
(= src_reg_18_66 src_reg_18_347)
(= src_reg_18_67 src_reg_18_348)
(= src_reg_18_68 src_reg_18_349)
(= src_reg_18_69 src_reg_18_350)
(= src_reg_18_70 src_reg_18_351)
(= src_reg_18_71 src_reg_18_352)
(= src_reg_18_72 src_reg_18_353)
(= src_reg_18_73 src_reg_18_354)
(= src_reg_18_74 src_reg_18_355)
(= src_reg_18_75 src_reg_18_356)
(= src_reg_18_76 src_reg_18_357)
(= #x00000001 dst_reg_18_330)
(= dst_reg_18_50 dst_reg_18_331)
(= dst_reg_18_51 dst_reg_18_332)
(= dst_reg_18_52 dst_reg_18_333)
(= #x0000000000000000 dst_reg_18_334)
(= #xffffffffffffffff dst_reg_18_335)
(= #x8000000000000000 dst_reg_18_336)
(= #x7fffffffffffffff dst_reg_18_337)
(= #x0000000000000000 dst_reg_18_338)
(= #xffffffffffffffff dst_reg_18_339)
(= #x00000000 dst_reg_18_340)
(= dst_reg_18_60 dst_reg_18_341)
(= dst_reg_18_61 dst_reg_18_342)
(= dst_reg_18_62 dst_reg_18_343)
]
[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 17 = MemoryDef(16)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_18_344 ] [ ] [ src_reg_18_345 ] [ src_reg_18_346 ] [ src_reg_18_347 ] [ [ src_reg_18_348 ] [ src_reg_18_349 ] ] [ src_reg_18_350 ] [ src_reg_18_351 ] [ src_reg_18_352 ] [ src_reg_18_353 ] [ ] [ src_reg_18_354 ] [ src_reg_18_355 ] [ src_reg_18_356 ] [ src_reg_18_357 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_18_330 ] [ ] [ dst_reg_18_331 ] [ dst_reg_18_332 ] [ dst_reg_18_333 ] [ [ dst_reg_18_334 ] [ dst_reg_18_335 ] ] [ dst_reg_18_336 ] [ dst_reg_18_337 ] [ dst_reg_18_338 ] [ dst_reg_18_339 ] [ ] [ dst_reg_18_340 ] [ dst_reg_18_341 ] [ dst_reg_18_342 ] [ dst_reg_18_343 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_18_63 src_reg_18_344)
(= src_reg_18_64 src_reg_18_345)
(= src_reg_18_65 src_reg_18_346)
(= src_reg_18_66 src_reg_18_347)
(= src_reg_18_67 src_reg_18_348)
(= src_reg_18_68 src_reg_18_349)
(= src_reg_18_69 src_reg_18_350)
(= src_reg_18_70 src_reg_18_351)
(= src_reg_18_71 src_reg_18_352)
(= src_reg_18_72 src_reg_18_353)
(= src_reg_18_73 src_reg_18_354)
(= src_reg_18_74 src_reg_18_355)
(= src_reg_18_75 src_reg_18_356)
(= src_reg_18_76 src_reg_18_357)
(= #x00000001 dst_reg_18_330)
(= dst_reg_18_50 dst_reg_18_331)
(= dst_reg_18_51 dst_reg_18_332)
(= dst_reg_18_52 dst_reg_18_333)
(= #x0000000000000000 dst_reg_18_334)
(= #xffffffffffffffff dst_reg_18_335)
(= #x8000000000000000 dst_reg_18_336)
(= #x7fffffffffffffff dst_reg_18_337)
(= #x0000000000000000 dst_reg_18_338)
(= #xffffffffffffffff dst_reg_18_339)
(= #x00000000 dst_reg_18_340)
(= dst_reg_18_60 dst_reg_18_341)
(= dst_reg_18_61 dst_reg_18_342)
(= dst_reg_18_62 dst_reg_18_343)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_18_63 src_reg_18_344)
  (= src_reg_18_64 src_reg_18_345)
  (= src_reg_18_65 src_reg_18_346)
  (= src_reg_18_66 src_reg_18_347)
  (= src_reg_18_67 src_reg_18_348)
  (= src_reg_18_68 src_reg_18_349)
  (= src_reg_18_69 src_reg_18_350)
  (= src_reg_18_70 src_reg_18_351)
  (= src_reg_18_71 src_reg_18_352)
  (= src_reg_18_72 src_reg_18_353)
  (= src_reg_18_73 src_reg_18_354)
  (= src_reg_18_74 src_reg_18_355)
  (= src_reg_18_75 src_reg_18_356)
  (= src_reg_18_76 src_reg_18_357)
  (= #x00000001 dst_reg_18_330)
  (= dst_reg_18_50 dst_reg_18_331)
  (= dst_reg_18_51 dst_reg_18_332)
  (= dst_reg_18_52 dst_reg_18_333)
  (= #x0000000000000000 dst_reg_18_334)
  (= #xffffffffffffffff dst_reg_18_335)
  (= #x8000000000000000 dst_reg_18_336)
  (= #x7fffffffffffffff dst_reg_18_337)
  (= #x0000000000000000 dst_reg_18_338)
  (= #xffffffffffffffff dst_reg_18_339)
  (= #x00000000 dst_reg_18_340)
  (= dst_reg_18_60 dst_reg_18_341)
  (= dst_reg_18_61 dst_reg_18_342)
  (= dst_reg_18_62 dst_reg_18_343)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_18_193 src_reg_18_241)
  (= src_reg_18_194 src_reg_18_242)
  (= src_reg_18_195 src_reg_18_243)
  (= src_reg_18_196 src_reg_18_244)
  (= src_reg_18_197 src_reg_18_245)
  (= src_reg_18_198 src_reg_18_246)
  (= src_reg_18_199 src_reg_18_247)
  (= src_reg_18_200 src_reg_18_248)
  (= src_reg_18_201 src_reg_18_249)
  (= src_reg_18_202 src_reg_18_250)
  (= src_reg_18_203 src_reg_18_251)
  (= src_reg_18_204 src_reg_18_252)
  (= src_reg_18_205 src_reg_18_253)
  (= src_reg_18_206 src_reg_18_254)
  (= dst_reg_18_179 dst_reg_18_227)
  (= dst_reg_18_180 dst_reg_18_228)
  (= dst_reg_18_181 dst_reg_18_229)
  (= dst_reg_18_182 dst_reg_18_230)
  (= and.i.i301.i_18_214 dst_reg_18_231)
  (= and6.i.i302.i_18_216 dst_reg_18_232)
  (= dst_reg_18_185 dst_reg_18_233)
  (= dst_reg_18_186 dst_reg_18_234)
  (= #x0000000000000000 dst_reg_18_235)
  (= storemerge_18_209 dst_reg_18_236)
  (= dst_reg_18_189 dst_reg_18_237)
  (= dst_reg_18_190 dst_reg_18_238)
  (= dst_reg_18_191 dst_reg_18_239)
  (= dst_reg_18_192 dst_reg_18_240)
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_18_241 src_reg_18_344)
  (= src_reg_18_242 src_reg_18_345)
  (= src_reg_18_243 src_reg_18_346)
  (= src_reg_18_244 src_reg_18_347)
  (= src_reg_18_245 src_reg_18_348)
  (= src_reg_18_246 src_reg_18_349)
  (= src_reg_18_247 src_reg_18_350)
  (= src_reg_18_248 src_reg_18_351)
  (= src_reg_18_249 src_reg_18_352)
  (= src_reg_18_250 src_reg_18_353)
  (= src_reg_18_251 src_reg_18_354)
  (= src_reg_18_252 src_reg_18_355)
  (= src_reg_18_253 src_reg_18_356)
  (= src_reg_18_254 src_reg_18_357)
  (= dst_reg_18_227 dst_reg_18_330)
  (= dst_reg_18_228 dst_reg_18_331)
  (= dst_reg_18_229 dst_reg_18_332)
  (= dst_reg_18_230 dst_reg_18_333)
  (= and4.i.i.i_18_329 dst_reg_18_334)
  (= and.i1.i.i_18_326 dst_reg_18_335)
  (= i27.i317.i_18_259 dst_reg_18_336)
  (= storemerge.i316.i_18_257 dst_reg_18_337)
  (= dst_reg_18_235 dst_reg_18_338)
  (= storemerge.i316.i_18_257 dst_reg_18_339)
  (= dst_reg_18_237 dst_reg_18_340)
  (= dst_reg_18_238 dst_reg_18_341)
  (= dst_reg_18_239 dst_reg_18_342)
  (= dst_reg_18_240 dst_reg_18_343)
<if.then250.i, if.then308.i> :
  (= src_reg_18_63 src_reg_18_193)
  (= src_reg_18_64 src_reg_18_194)
  (= src_reg_18_65 src_reg_18_195)
  (= src_reg_18_66 src_reg_18_196)
  (= src_reg_18_67 src_reg_18_197)
  (= src_reg_18_68 src_reg_18_198)
  (= src_reg_18_69 src_reg_18_199)
  (= src_reg_18_70 src_reg_18_200)
  (= src_reg_18_71 src_reg_18_201)
  (= src_reg_18_72 src_reg_18_202)
  (= src_reg_18_73 src_reg_18_203)
  (= src_reg_18_74 src_reg_18_204)
  (= src_reg_18_75 src_reg_18_205)
  (= src_reg_18_76 src_reg_18_206)
  (= #x00000001 dst_reg_18_179)
  (= dst_reg_18_50 dst_reg_18_180)
  (= dst_reg_18_51 dst_reg_18_181)
  (= dst_reg_18_52 dst_reg_18_182)
  (= #x0000000000000000 dst_reg_18_183)
  (= #xffffffffffffffff dst_reg_18_184)
  (= #x8000000000000000 dst_reg_18_185)
  (= #x7fffffffffffffff dst_reg_18_186)
  (= #x0000000000000000 dst_reg_18_187)
  (= storemerge.i.i_18_79 dst_reg_18_188)
  (= dst_reg_18_59 dst_reg_18_189)
  (= dst_reg_18_60 dst_reg_18_190)
  (= dst_reg_18_61 dst_reg_18_191)
  (= dst_reg_18_62 dst_reg_18_192)
<if.then41.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_18_63 src_reg_18_344)
  (= src_reg_18_64 src_reg_18_345)
  (= src_reg_18_65 src_reg_18_346)
  (= src_reg_18_66 src_reg_18_347)
  (= src_reg_18_67 src_reg_18_348)
  (= src_reg_18_68 src_reg_18_349)
  (= src_reg_18_69 src_reg_18_350)
  (= src_reg_18_70 src_reg_18_351)
  (= src_reg_18_71 src_reg_18_352)
  (= src_reg_18_72 src_reg_18_353)
  (= src_reg_18_73 src_reg_18_354)
  (= src_reg_18_74 src_reg_18_355)
  (= src_reg_18_75 src_reg_18_356)
  (= src_reg_18_76 src_reg_18_357)
  (= #x00000001 dst_reg_18_330)
  (= dst_reg_18_50 dst_reg_18_331)
  (= dst_reg_18_51 dst_reg_18_332)
  (= dst_reg_18_52 dst_reg_18_333)
  (= #x0000000000000000 dst_reg_18_334)
  (= #xffffffffffffffff dst_reg_18_335)
  (= #x8000000000000000 dst_reg_18_336)
  (= #x7fffffffffffffff dst_reg_18_337)
  (= #x0000000000000000 dst_reg_18_338)
  (= #xffffffffffffffff dst_reg_18_339)
  (= #x00000000 dst_reg_18_340)
  (= dst_reg_18_60 dst_reg_18_341)
  (= dst_reg_18_61 dst_reg_18_342)
  (= dst_reg_18_62 dst_reg_18_343)
<if.end266.i, if.then308.i> :
  (= src_reg_18_145 src_reg_18_193)
  (= src_reg_18_146 src_reg_18_194)
  (= src_reg_18_147 src_reg_18_195)
  (= src_reg_18_148 src_reg_18_196)
  (= src_reg_18_149 src_reg_18_197)
  (= src_reg_18_150 src_reg_18_198)
  (= src_reg_18_151 src_reg_18_199)
  (= src_reg_18_152 src_reg_18_200)
  (= src_reg_18_153 src_reg_18_201)
  (= src_reg_18_154 src_reg_18_202)
  (= src_reg_18_155 src_reg_18_203)
  (= src_reg_18_156 src_reg_18_204)
  (= src_reg_18_157 src_reg_18_205)
  (= src_reg_18_158 src_reg_18_206)
  (= dst_reg_18_131 dst_reg_18_179)
  (= dst_reg_18_132 dst_reg_18_180)
  (= dst_reg_18_133 dst_reg_18_181)
  (= dst_reg_18_134 dst_reg_18_182)
  (= shl.i.i_18_165 dst_reg_18_183)
  (= shl5.i.i_18_166 dst_reg_18_184)
  (= or.i200.i_18_169 dst_reg_18_185)
  (= or8.i206.i_18_172 dst_reg_18_186)
  (= cond23.i212.i_18_175 dst_reg_18_187)
  (= storemerge.i_18_161 dst_reg_18_188)
  (= dst_reg_18_141 dst_reg_18_189)
  (= dst_reg_18_142 dst_reg_18_190)
  (= dst_reg_18_143 dst_reg_18_191)
  (= dst_reg_18_144 dst_reg_18_192)
<if.else261.i, if.end266.i> :
  (= src_reg_18_63 src_reg_18_145)
  (= src_reg_18_64 src_reg_18_146)
  (= src_reg_18_65 src_reg_18_147)
  (= src_reg_18_66 src_reg_18_148)
  (= src_reg_18_67 src_reg_18_149)
  (= src_reg_18_68 src_reg_18_150)
  (= src_reg_18_69 src_reg_18_151)
  (= src_reg_18_70 src_reg_18_152)
  (= src_reg_18_71 src_reg_18_153)
  (= src_reg_18_72 src_reg_18_154)
  (= src_reg_18_73 src_reg_18_155)
  (= src_reg_18_74 src_reg_18_156)
  (= src_reg_18_75 src_reg_18_157)
  (= src_reg_18_76 src_reg_18_158)
  (= dst_reg_18_49 dst_reg_18_131)
  (= dst_reg_18_50 dst_reg_18_132)
  (= dst_reg_18_51 dst_reg_18_133)
  (= dst_reg_18_52 dst_reg_18_134)
  (= dst_reg_18_53 dst_reg_18_135)
  (= dst_reg_18_54 dst_reg_18_136)
  (= #x8000000000000000 dst_reg_18_137)
  (= #x7fffffffffffffff dst_reg_18_138)
  (= shl263.i_18_129 dst_reg_18_139)
  (= storemerge.i.i_18_79 dst_reg_18_140)
  (= dst_reg_18_59 dst_reg_18_141)
  (= dst_reg_18_60 dst_reg_18_142)
  (= dst_reg_18_61 dst_reg_18_143)
  (= dst_reg_18_62 dst_reg_18_144)
<if.then258.i, if.end266.i> :
  (= src_reg_18_63 src_reg_18_145)
  (= src_reg_18_64 src_reg_18_146)
  (= src_reg_18_65 src_reg_18_147)
  (= src_reg_18_66 src_reg_18_148)
  (= src_reg_18_67 src_reg_18_149)
  (= src_reg_18_68 src_reg_18_150)
  (= src_reg_18_69 src_reg_18_151)
  (= src_reg_18_70 src_reg_18_152)
  (= src_reg_18_71 src_reg_18_153)
  (= src_reg_18_72 src_reg_18_154)
  (= src_reg_18_73 src_reg_18_155)
  (= src_reg_18_74 src_reg_18_156)
  (= src_reg_18_75 src_reg_18_157)
  (= src_reg_18_76 src_reg_18_158)
  (= dst_reg_18_49 dst_reg_18_131)
  (= dst_reg_18_50 dst_reg_18_132)
  (= dst_reg_18_51 dst_reg_18_133)
  (= dst_reg_18_52 dst_reg_18_134)
  (= dst_reg_18_53 dst_reg_18_135)
  (= dst_reg_18_54 dst_reg_18_136)
  (= #x8000000000000000 dst_reg_18_137)
  (= #x7fffffffffffffff dst_reg_18_138)
  (= #x0000000000000000 dst_reg_18_139)
  (= storemerge.i.i_18_79 dst_reg_18_140)
  (= dst_reg_18_59 dst_reg_18_141)
  (= dst_reg_18_60 dst_reg_18_142)
  (= dst_reg_18_61 dst_reg_18_143)
  (= dst_reg_18_62 dst_reg_18_144)
<if.then.i314.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_18_193 src_reg_18_241)
  (= src_reg_18_194 src_reg_18_242)
  (= src_reg_18_195 src_reg_18_243)
  (= src_reg_18_196 src_reg_18_244)
  (= src_reg_18_197 src_reg_18_245)
  (= src_reg_18_198 src_reg_18_246)
  (= src_reg_18_199 src_reg_18_247)
  (= src_reg_18_200 src_reg_18_248)
  (= src_reg_18_201 src_reg_18_249)
  (= src_reg_18_202 src_reg_18_250)
  (= src_reg_18_203 src_reg_18_251)
  (= src_reg_18_204 src_reg_18_252)
  (= src_reg_18_205 src_reg_18_253)
  (= src_reg_18_206 src_reg_18_254)
  (= dst_reg_18_179 dst_reg_18_227)
  (= dst_reg_18_180 dst_reg_18_228)
  (= dst_reg_18_181 dst_reg_18_229)
  (= dst_reg_18_182 dst_reg_18_230)
  (= and.i.i301.i_18_214 dst_reg_18_231)
  (= and6.i.i302.i_18_216 dst_reg_18_232)
  (= dst_reg_18_185 dst_reg_18_233)
  (= dst_reg_18_186 dst_reg_18_234)
  (= and6.i312.i_18_223 dst_reg_18_235)
  (= storemerge_18_209 dst_reg_18_236)
  (= dst_reg_18_189 dst_reg_18_237)
  (= dst_reg_18_190 dst_reg_18_238)
  (= dst_reg_18_191 dst_reg_18_239)
  (= dst_reg_18_192 dst_reg_18_240)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= #x0000000000000000 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_18_63)
  (= src_reg_18_15 src_reg_18_64)
  (= src_reg_18_16 src_reg_18_65)
  (= src_reg_18_17 src_reg_18_66)
  (= src_reg_18_18 src_reg_18_67)
  (= src_reg_18_19 src_reg_18_68)
  (= src_reg_18_20 src_reg_18_69)
  (= src_reg_18_21 src_reg_18_70)
  (= src_reg_18_22 src_reg_18_71)
  (= src_reg_18_23 src_reg_18_72)
  (= src_reg_18_24 src_reg_18_73)
  (= src_reg_18_25 src_reg_18_74)
  (= src_reg_18_26 src_reg_18_75)
  (= src_reg_18_27 src_reg_18_76)
  (= #x00000001 dst_reg_18_49)
  (= dst_reg_18_1 dst_reg_18_50)
  (= dst_reg_18_2 dst_reg_18_51)
  (= dst_reg_18_3 dst_reg_18_52)
  (= and.i.i.i_18_36 dst_reg_18_53)
  (= and6.i.i.i_18_38 dst_reg_18_54)
  (= dst_reg_18_6 dst_reg_18_55)
  (= dst_reg_18_7 dst_reg_18_56)
  (= and6.i.i_18_45 dst_reg_18_57)
  (= dst_reg_18_9 dst_reg_18_58)
  (= dst_reg_18_10 dst_reg_18_59)
  (= dst_reg_18_11 dst_reg_18_60)
  (= dst_reg_18_12 dst_reg_18_61)
  (= dst_reg_18_13 dst_reg_18_62)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i_18_43
[handleBranchInst] Edge Assertions:
<entry, if.then.i.i>: (= cmp.i.i_18_43 #b1)
<entry, if.else.i.i>: (= cmp.i.i_18_43 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i.i: (= cmp.i.i_18_43 #b1)
[handleBranchInst] if.else.i.i: (= cmp.i.i_18_43 #b0)
[handleBranchInst] <entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] <entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_18_43 #b1)
[handleBranchInst] coerce_reg_to_size.exit.i: (= cmp.i.i_18_43 #b1)
[handleBranchInst] <if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_18_43 #b1)
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_18_43 #b1)
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_18_43 #b0)
[handleBranchInst] coerce_reg_to_size.exit.i: (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
[handleBranchInst] <if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_18_96
[handleBranchInst] Edge Assertions:
<coerce_reg_to_size.exit.i, land.lhs.true.i>: (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i>: (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] lor.lhs.false20.i: (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i.not_18_97
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.end27.i>: (and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i>: (and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.end27.i: (and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] if.then26.i: (and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_18_98
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.end27.i>: (and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
[handleBranchInst] if.end27.i: (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack3, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb247.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_18_96
[handleBranchInst] Edge Assertions:
<if.end27.i, sw.bb247.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<if.end27.i, if.then41.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] Path Conditions:
[handleBranchInst] sw.bb247.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] if.then41.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] <if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] <if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
[handleBranchInst] <if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
sw.bb247.i
=========================
-------------------
  %cmp248.not.i = icmp ult i64 %storemerge.i20.i, 32
-------------------
-------------------
  br i1 %cmp248.not.i, label %if.end251.i, label %if.then250.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp248.not.i = icmp ult i64 %storemerge.i20.i, 32
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp248.not.i_18_116
[handleBranchInst] Edge Assertions:
<sw.bb247.i, if.end251.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.end251.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] if.then250.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] <sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] <sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] EdgeAssertionsMap:
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
if.then250.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i185.i.repack, align 8
-------------------
-------------------
  %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i185.i.repack2, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.then308.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] if.then308.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] <if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
=========================
if.end251.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %shl.i = lshr i64 -9223372036854775808, %storemerge.i20.i
-------------------
-------------------
  %cmp256.i = icmp ugt i64 %storemerge.i.i, %shl.i
-------------------
-------------------
  br i1 %cmp256.i, label %if.then258.i, label %if.else261.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp256.i = icmp ugt i64 %storemerge.i.i, %shl.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp256.i_18_127
[handleBranchInst] Edge Assertions:
<if.end251.i, if.then258.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then258.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] if.else261.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] <if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] <if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
if.then258.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %if.end266.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end266.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] if.end266.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] <if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
if.else261.i
=========================
-------------------
  %shl263.i = shl i64 %i27.i.i, %src_reg1.sroa.17.0
-------------------
-------------------
  store i64 %shl263.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %shl265.i = shl i64 %storemerge.i.i, %storemerge.i20.i
-------------------
-------------------
  br label %if.end266.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end266.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] if.end266.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
[handleBranchInst] <if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
if.end266.i
=========================
-------------------
  %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
-------------------
-------------------
  store i64 %storemerge.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %sh_prom.i.i = and i64 %src_reg1.sroa.17.0, 255
-------------------
-------------------
  %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
-------------------
-------------------
  %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
-------------------
-------------------
  store i64 %shl.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %shl5.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
-------------------
-------------------
  %or.i200.i = or i64 %and.i199.i, %shl.i.i
-------------------
-------------------
  store i64 %or.i200.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
-------------------
-------------------
  %or8.i206.i = or i64 %and7.i205.i, %shl.i.i
-------------------
-------------------
  store i64 %or8.i206.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %i26.i210.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %cmp19.i211.i = icmp ugt i64 %i26.i210.i, %shl.i.i
-------------------
-------------------
  %cond23.i212.i = select i1 %cmp19.i211.i, i64 %i26.i210.i, i64 %shl.i.i
-------------------
-------------------
  store i64 %cond23.i212.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %or29.i215.i = or i64 %shl5.i.i, %shl.i.i
-------------------
-------------------
  %cmp31.i216.i = icmp ult i64 %storemerge.i, %or29.i215.i
-------------------
-------------------
  %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
-------------------
-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.then308.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
[handleBranchInst] if.then308.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
[handleBranchInst] <if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
if.then308.i
=========================
-------------------
  %storemerge = phi i64 [ -1, %if.then250.i ], [ %cond35.i217.i, %if.end266.i ]
-------------------
-------------------
  store i64 %storemerge, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i18.i298.i = load i64, i64* %i.i.i, align 8
-------------------
-------------------
  %i20.i300.i = load i64, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i301.i = and i64 %i18.i298.i, 4294967295
-------------------
-------------------
  %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
-------------------
-------------------
  %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
-------------------
-------------------
  br i1 %cmp.i311.i, label %if.then.i314.i, label %if.else.i315.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i311.i_18_221
[handleBranchInst] Edge Assertions:
<if.then308.i, if.then.i314.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.then308.i, if.else.i315.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i314.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
[handleBranchInst] if.else.i315.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
[handleBranchInst] <if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
[handleBranchInst] <if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
if.then.i314.i
=========================
-------------------
  %and6.i312.i = and i64 %i23.i306.i, 4294967295
-------------------
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %and8.i313.i = and i64 %i24.i308.i, 4294967295
-------------------
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit320.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
[handleBranchInst] coerce_reg_to_size.exit320.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
[handleBranchInst] <if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit320.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
[handleBranchInst] coerce_reg_to_size.exit320.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or (and (= cmp.i311.i_18_221 #b0) a!4) (and (= cmp.i311.i_18_221 #b1) a!4)))))
[handleBranchInst] <if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or (and (= cmp.i311.i_18_221 #b0) a!4) (and (= cmp.i311.i_18_221 #b1) a!4)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
coerce_reg_to_size.exit320.i
=========================
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or (and (= cmp.i311.i_18_221 #b0) a!4) (and (= cmp.i311.i_18_221 #b1) a!4)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_18_262
[handleBranchInst] Edge Assertions:
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i>: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handleBranchInst] <coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handleBranchInst] <coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or (and (= cmp.i311.i_18_221 #b0) a!4) (and (= cmp.i311.i_18_221 #b1) a!4)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or (and (= cmp.i311.i_18_221 #b0) a!4) (and (= cmp.i311.i_18_221 #b1) a!4)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!5) (and (= cmp.i.i.i.i_18_262 #b1) a!5))))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!5) (and (= cmp.i.i.i.i_18_262 #b1) a!5))))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or (and (= cmp.i311.i_18_221 #b0) a!4) (and (= cmp.i311.i_18_221 #b1) a!4)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!5) (and (= cmp.i.i.i.i_18_262 #b1) a!5))))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or (and (= cmp.i311.i_18_221 #b0) a!4) (and (= cmp.i311.i_18_221 #b1) a!4)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_18_96 #b0)
                (or (and (= cmp24.old.i_18_98 #b0) a!1)
                    (and (= cmp18.not.i.not_18_97 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!5) (and (= cmp.i.i.i.i_18_262 #b1) a!5))))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_18_98 #b0) a!1)
               (and (= cmp18.not.i.not_18_97 #b1) a!2))))
(let ((a!4 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!3))))
      (a!5 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!3)))))
(let ((a!6 (or a!4
               a!5
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!3)))))
(let ((a!7 (or (and (= cmp.i311.i_18_221 #b0) a!6)
               (and (= cmp.i311.i_18_221 #b1) a!6))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!7)
      (and (= cmp.i.i.i.i_18_262 #b1) a!7)
      (and (= tobool.not.i.i_18_96 #b0) a!3)
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2)))))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!5) (and (= cmp.i.i.i.i_18_262 #b1) a!5))))))
[handleBranchInst] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!5) (and (= cmp.i.i.i.i_18_262 #b1) a!5))))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!5) (and (= cmp.i.i.i.i_18_262 #b1) a!5))))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or (and (= cmp.i311.i_18_221 #b0) a!4) (and (= cmp.i311.i_18_221 #b1) a!4)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_18_98 #b0) a!1)
               (and (= cmp18.not.i.not_18_97 #b1) a!2))))
(let ((a!4 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!3))))
      (a!5 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!3)))))
(let ((a!6 (or a!4
               a!5
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!3)))))
(let ((a!7 (or (and (= cmp.i311.i_18_221 #b0) a!6)
               (and (= cmp.i311.i_18_221 #b1) a!6))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!7)
      (and (= cmp.i.i.i.i_18_262 #b1) a!7)
      (and (= tobool.not.i.i_18_96 #b0) a!3)
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2)))))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
if.then.i.i
=========================
=========================
if.else.i.i
=========================
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (= cmp.i.i_18_43 #b1)
    (and (= #x00000001 src_reg_18_63)
         (= src_reg_18_15 src_reg_18_64)
         (= src_reg_18_16 src_reg_18_65)
         (= src_reg_18_17 src_reg_18_66)
         (= src_reg_18_18 src_reg_18_67)
         (= src_reg_18_19 src_reg_18_68)
         (= src_reg_18_20 src_reg_18_69)
         (= src_reg_18_21 src_reg_18_70)
         (= src_reg_18_22 src_reg_18_71)
         (= src_reg_18_23 src_reg_18_72)
         (= src_reg_18_24 src_reg_18_73)
         (= src_reg_18_25 src_reg_18_74)
         (= src_reg_18_26 src_reg_18_75)
         (= src_reg_18_27 src_reg_18_76)
         (= #x00000001 dst_reg_18_49)
         (= dst_reg_18_1 dst_reg_18_50)
         (= dst_reg_18_2 dst_reg_18_51)
         (= dst_reg_18_3 dst_reg_18_52)
         (= and.i.i.i_18_36 dst_reg_18_53)
         (= and6.i.i.i_18_38 dst_reg_18_54)
         (= dst_reg_18_6 dst_reg_18_55)
         (= dst_reg_18_7 dst_reg_18_56)
         (= and6.i.i_18_45 dst_reg_18_57)
         (= dst_reg_18_9 dst_reg_18_58)
         (= dst_reg_18_10 dst_reg_18_59)
         (= dst_reg_18_11 dst_reg_18_60)
         (= dst_reg_18_12 dst_reg_18_61)
         (= dst_reg_18_13 dst_reg_18_62)))
phiResolveI (i=1) (=> (= cmp.i.i_18_43 #b0)
    (and (= #x00000001 src_reg_18_63)
         (= src_reg_18_15 src_reg_18_64)
         (= src_reg_18_16 src_reg_18_65)
         (= src_reg_18_17 src_reg_18_66)
         (= src_reg_18_18 src_reg_18_67)
         (= src_reg_18_19 src_reg_18_68)
         (= src_reg_18_20 src_reg_18_69)
         (= src_reg_18_21 src_reg_18_70)
         (= src_reg_18_22 src_reg_18_71)
         (= src_reg_18_23 src_reg_18_72)
         (= src_reg_18_24 src_reg_18_73)
         (= src_reg_18_25 src_reg_18_74)
         (= src_reg_18_26 src_reg_18_75)
         (= src_reg_18_27 src_reg_18_76)
         (= #x00000001 dst_reg_18_49)
         (= dst_reg_18_1 dst_reg_18_50)
         (= dst_reg_18_2 dst_reg_18_51)
         (= dst_reg_18_3 dst_reg_18_52)
         (= and.i.i.i_18_36 dst_reg_18_53)
         (= and6.i.i.i_18_38 dst_reg_18_54)
         (= dst_reg_18_6 dst_reg_18_55)
         (= dst_reg_18_7 dst_reg_18_56)
         (= #x0000000000000000 dst_reg_18_57)
         (= dst_reg_18_9 dst_reg_18_58)
         (= dst_reg_18_10 dst_reg_18_59)
         (= dst_reg_18_11 dst_reg_18_60)
         (= dst_reg_18_12 dst_reg_18_61)
         (= dst_reg_18_13 dst_reg_18_62)))
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else.i.i_coerce_reg_to_size.exit.i_18_77
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_18_43 #b0)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.else.i.i_coerce_reg_to_size.exit.i_18_77 (= cmp.i.i_18_43 #b0))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then.i.i_coerce_reg_to_size.exit.i_18_78
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_18_43 #b1)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.then.i.i_coerce_reg_to_size.exit.i_18_78 (= cmp.i.i_18_43 #b1))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
  (=> (= cmp.i.i_18_43 #b1)
    (and (= #x00000001 src_reg_18_63)
         (= src_reg_18_15 src_reg_18_64)
         (= src_reg_18_16 src_reg_18_65)
         (= src_reg_18_17 src_reg_18_66)
         (= src_reg_18_18 src_reg_18_67)
         (= src_reg_18_19 src_reg_18_68)
         (= src_reg_18_20 src_reg_18_69)
         (= src_reg_18_21 src_reg_18_70)
         (= src_reg_18_22 src_reg_18_71)
         (= src_reg_18_23 src_reg_18_72)
         (= src_reg_18_24 src_reg_18_73)
         (= src_reg_18_25 src_reg_18_74)
         (= src_reg_18_26 src_reg_18_75)
         (= src_reg_18_27 src_reg_18_76)
         (= #x00000001 dst_reg_18_49)
         (= dst_reg_18_1 dst_reg_18_50)
         (= dst_reg_18_2 dst_reg_18_51)
         (= dst_reg_18_3 dst_reg_18_52)
         (= and.i.i.i_18_36 dst_reg_18_53)
         (= and6.i.i.i_18_38 dst_reg_18_54)
         (= dst_reg_18_6 dst_reg_18_55)
         (= dst_reg_18_7 dst_reg_18_56)
         (= and6.i.i_18_45 dst_reg_18_57)
         (= dst_reg_18_9 dst_reg_18_58)
         (= dst_reg_18_10 dst_reg_18_59)
         (= dst_reg_18_11 dst_reg_18_60)
         (= dst_reg_18_12 dst_reg_18_61)
         (= dst_reg_18_13 dst_reg_18_62)))
  (=> (= cmp.i.i_18_43 #b0)
    (and (= #x00000001 src_reg_18_63)
         (= src_reg_18_15 src_reg_18_64)
         (= src_reg_18_16 src_reg_18_65)
         (= src_reg_18_17 src_reg_18_66)
         (= src_reg_18_18 src_reg_18_67)
         (= src_reg_18_19 src_reg_18_68)
         (= src_reg_18_20 src_reg_18_69)
         (= src_reg_18_21 src_reg_18_70)
         (= src_reg_18_22 src_reg_18_71)
         (= src_reg_18_23 src_reg_18_72)
         (= src_reg_18_24 src_reg_18_73)
         (= src_reg_18_25 src_reg_18_74)
         (= src_reg_18_26 src_reg_18_75)
         (= src_reg_18_27 src_reg_18_76)
         (= #x00000001 dst_reg_18_49)
         (= dst_reg_18_1 dst_reg_18_50)
         (= dst_reg_18_2 dst_reg_18_51)
         (= dst_reg_18_3 dst_reg_18_52)
         (= and.i.i.i_18_36 dst_reg_18_53)
         (= and6.i.i.i_18_38 dst_reg_18_54)
         (= dst_reg_18_6 dst_reg_18_55)
         (= dst_reg_18_7 dst_reg_18_56)
         (= #x0000000000000000 dst_reg_18_57)
         (= dst_reg_18_9 dst_reg_18_58)
         (= dst_reg_18_10 dst_reg_18_59)
         (= dst_reg_18_11 dst_reg_18_60)
         (= dst_reg_18_12 dst_reg_18_61)
         (= dst_reg_18_13 dst_reg_18_62)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_18_77 (= cmp.i.i_18_43 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_18_78 (= cmp.i.i_18_43 #b1))

=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
=========================
sw.bb247.i
=========================
=========================
if.then250.i
=========================
=========================
if.end251.i
=========================
=========================
if.then258.i
=========================
=========================
if.else261.i
=========================
=========================
if.end266.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= cmp256.i_18_127 #b1)
           (= cmp248.not.i_18_116 #b1)
           (= tobool.not.i.i_18_96 #b1)
           a!1)
      (and (= src_reg_18_63 src_reg_18_145)
           (= src_reg_18_64 src_reg_18_146)
           (= src_reg_18_65 src_reg_18_147)
           (= src_reg_18_66 src_reg_18_148)
           (= src_reg_18_67 src_reg_18_149)
           (= src_reg_18_68 src_reg_18_150)
           (= src_reg_18_69 src_reg_18_151)
           (= src_reg_18_70 src_reg_18_152)
           (= src_reg_18_71 src_reg_18_153)
           (= src_reg_18_72 src_reg_18_154)
           (= src_reg_18_73 src_reg_18_155)
           (= src_reg_18_74 src_reg_18_156)
           (= src_reg_18_75 src_reg_18_157)
           (= src_reg_18_76 src_reg_18_158)
           (= dst_reg_18_49 dst_reg_18_131)
           (= dst_reg_18_50 dst_reg_18_132)
           (= dst_reg_18_51 dst_reg_18_133)
           (= dst_reg_18_52 dst_reg_18_134)
           (= dst_reg_18_53 dst_reg_18_135)
           (= dst_reg_18_54 dst_reg_18_136)
           (= #x8000000000000000 dst_reg_18_137)
           (= #x7fffffffffffffff dst_reg_18_138)
           (= #x0000000000000000 dst_reg_18_139)
           (= storemerge.i.i_18_79 dst_reg_18_140)
           (= dst_reg_18_59 dst_reg_18_141)
           (= dst_reg_18_60 dst_reg_18_142)
           (= dst_reg_18_61 dst_reg_18_143)
           (= dst_reg_18_62 dst_reg_18_144))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= cmp256.i_18_127 #b0)
           (= cmp248.not.i_18_116 #b1)
           (= tobool.not.i.i_18_96 #b1)
           a!1)
      (and (= src_reg_18_63 src_reg_18_145)
           (= src_reg_18_64 src_reg_18_146)
           (= src_reg_18_65 src_reg_18_147)
           (= src_reg_18_66 src_reg_18_148)
           (= src_reg_18_67 src_reg_18_149)
           (= src_reg_18_68 src_reg_18_150)
           (= src_reg_18_69 src_reg_18_151)
           (= src_reg_18_70 src_reg_18_152)
           (= src_reg_18_71 src_reg_18_153)
           (= src_reg_18_72 src_reg_18_154)
           (= src_reg_18_73 src_reg_18_155)
           (= src_reg_18_74 src_reg_18_156)
           (= src_reg_18_75 src_reg_18_157)
           (= src_reg_18_76 src_reg_18_158)
           (= dst_reg_18_49 dst_reg_18_131)
           (= dst_reg_18_50 dst_reg_18_132)
           (= dst_reg_18_51 dst_reg_18_133)
           (= dst_reg_18_52 dst_reg_18_134)
           (= dst_reg_18_53 dst_reg_18_135)
           (= dst_reg_18_54 dst_reg_18_136)
           (= #x8000000000000000 dst_reg_18_137)
           (= #x7fffffffffffffff dst_reg_18_138)
           (= shl263.i_18_129 dst_reg_18_139)
           (= storemerge.i.i_18_79 dst_reg_18_140)
           (= dst_reg_18_59 dst_reg_18_141)
           (= dst_reg_18_60 dst_reg_18_142)
           (= dst_reg_18_61 dst_reg_18_143)
           (= dst_reg_18_62 dst_reg_18_144))))
-------------------
  %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else261.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else261.i_if.end266.i_18_159
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (= if.else261.i_if.end266.i_18_159
     (and (= cmp256.i_18_127 #b0)
          (= cmp248.not.i_18_116 #b1)
          (= tobool.not.i.i_18_96 #b1)
          a!1)))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then258.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then258.i_if.end266.i_18_160
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (= if.then258.i_if.end266.i_18_160
     (and (= cmp256.i_18_127 #b1)
          (= cmp248.not.i_18_116 #b1)
          (= tobool.not.i.i_18_96 #b1)
          a!1)))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= cmp256.i_18_127 #b1)
           (= cmp248.not.i_18_116 #b1)
           (= tobool.not.i.i_18_96 #b1)
           a!1)
      (and (= src_reg_18_63 src_reg_18_145)
           (= src_reg_18_64 src_reg_18_146)
           (= src_reg_18_65 src_reg_18_147)
           (= src_reg_18_66 src_reg_18_148)
           (= src_reg_18_67 src_reg_18_149)
           (= src_reg_18_68 src_reg_18_150)
           (= src_reg_18_69 src_reg_18_151)
           (= src_reg_18_70 src_reg_18_152)
           (= src_reg_18_71 src_reg_18_153)
           (= src_reg_18_72 src_reg_18_154)
           (= src_reg_18_73 src_reg_18_155)
           (= src_reg_18_74 src_reg_18_156)
           (= src_reg_18_75 src_reg_18_157)
           (= src_reg_18_76 src_reg_18_158)
           (= dst_reg_18_49 dst_reg_18_131)
           (= dst_reg_18_50 dst_reg_18_132)
           (= dst_reg_18_51 dst_reg_18_133)
           (= dst_reg_18_52 dst_reg_18_134)
           (= dst_reg_18_53 dst_reg_18_135)
           (= dst_reg_18_54 dst_reg_18_136)
           (= #x8000000000000000 dst_reg_18_137)
           (= #x7fffffffffffffff dst_reg_18_138)
           (= #x0000000000000000 dst_reg_18_139)
           (= storemerge.i.i_18_79 dst_reg_18_140)
           (= dst_reg_18_59 dst_reg_18_141)
           (= dst_reg_18_60 dst_reg_18_142)
           (= dst_reg_18_61 dst_reg_18_143)
           (= dst_reg_18_62 dst_reg_18_144))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= cmp256.i_18_127 #b0)
           (= cmp248.not.i_18_116 #b1)
           (= tobool.not.i.i_18_96 #b1)
           a!1)
      (and (= src_reg_18_63 src_reg_18_145)
           (= src_reg_18_64 src_reg_18_146)
           (= src_reg_18_65 src_reg_18_147)
           (= src_reg_18_66 src_reg_18_148)
           (= src_reg_18_67 src_reg_18_149)
           (= src_reg_18_68 src_reg_18_150)
           (= src_reg_18_69 src_reg_18_151)
           (= src_reg_18_70 src_reg_18_152)
           (= src_reg_18_71 src_reg_18_153)
           (= src_reg_18_72 src_reg_18_154)
           (= src_reg_18_73 src_reg_18_155)
           (= src_reg_18_74 src_reg_18_156)
           (= src_reg_18_75 src_reg_18_157)
           (= src_reg_18_76 src_reg_18_158)
           (= dst_reg_18_49 dst_reg_18_131)
           (= dst_reg_18_50 dst_reg_18_132)
           (= dst_reg_18_51 dst_reg_18_133)
           (= dst_reg_18_52 dst_reg_18_134)
           (= dst_reg_18_53 dst_reg_18_135)
           (= dst_reg_18_54 dst_reg_18_136)
           (= #x8000000000000000 dst_reg_18_137)
           (= #x7fffffffffffffff dst_reg_18_138)
           (= shl263.i_18_129 dst_reg_18_139)
           (= storemerge.i.i_18_79 dst_reg_18_140)
           (= dst_reg_18_59 dst_reg_18_141)
           (= dst_reg_18_60 dst_reg_18_142)
           (= dst_reg_18_61 dst_reg_18_143)
           (= dst_reg_18_62 dst_reg_18_144))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (= if.else261.i_if.end266.i_18_159
     (and (= cmp256.i_18_127 #b0)
          (= cmp248.not.i_18_116 #b1)
          (= tobool.not.i.i_18_96 #b1)
          a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (= if.then258.i_if.end266.i_18_160
     (and (= cmp256.i_18_127 #b1)
          (= cmp248.not.i_18_116 #b1)
          (= tobool.not.i.i_18_96 #b1)
          a!1)))

=========================
if.then308.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (or (and (= cmp256.i_18_127 #b0)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1))
               (and (= cmp256.i_18_127 #b1)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1)))))
  (=> a!2
      (and (= src_reg_18_145 src_reg_18_193)
           (= src_reg_18_146 src_reg_18_194)
           (= src_reg_18_147 src_reg_18_195)
           (= src_reg_18_148 src_reg_18_196)
           (= src_reg_18_149 src_reg_18_197)
           (= src_reg_18_150 src_reg_18_198)
           (= src_reg_18_151 src_reg_18_199)
           (= src_reg_18_152 src_reg_18_200)
           (= src_reg_18_153 src_reg_18_201)
           (= src_reg_18_154 src_reg_18_202)
           (= src_reg_18_155 src_reg_18_203)
           (= src_reg_18_156 src_reg_18_204)
           (= src_reg_18_157 src_reg_18_205)
           (= src_reg_18_158 src_reg_18_206)
           (= dst_reg_18_131 dst_reg_18_179)
           (= dst_reg_18_132 dst_reg_18_180)
           (= dst_reg_18_133 dst_reg_18_181)
           (= dst_reg_18_134 dst_reg_18_182)
           (= shl.i.i_18_165 dst_reg_18_183)
           (= shl5.i.i_18_166 dst_reg_18_184)
           (= or.i200.i_18_169 dst_reg_18_185)
           (= or8.i206.i_18_172 dst_reg_18_186)
           (= cond23.i212.i_18_175 dst_reg_18_187)
           (= storemerge.i_18_161 dst_reg_18_188)
           (= dst_reg_18_141 dst_reg_18_189)
           (= dst_reg_18_142 dst_reg_18_190)
           (= dst_reg_18_143 dst_reg_18_191)
           (= dst_reg_18_144 dst_reg_18_192)))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1)
      (and (= src_reg_18_63 src_reg_18_193)
           (= src_reg_18_64 src_reg_18_194)
           (= src_reg_18_65 src_reg_18_195)
           (= src_reg_18_66 src_reg_18_196)
           (= src_reg_18_67 src_reg_18_197)
           (= src_reg_18_68 src_reg_18_198)
           (= src_reg_18_69 src_reg_18_199)
           (= src_reg_18_70 src_reg_18_200)
           (= src_reg_18_71 src_reg_18_201)
           (= src_reg_18_72 src_reg_18_202)
           (= src_reg_18_73 src_reg_18_203)
           (= src_reg_18_74 src_reg_18_204)
           (= src_reg_18_75 src_reg_18_205)
           (= src_reg_18_76 src_reg_18_206)
           (= #x00000001 dst_reg_18_179)
           (= dst_reg_18_50 dst_reg_18_180)
           (= dst_reg_18_51 dst_reg_18_181)
           (= dst_reg_18_52 dst_reg_18_182)
           (= #x0000000000000000 dst_reg_18_183)
           (= #xffffffffffffffff dst_reg_18_184)
           (= #x8000000000000000 dst_reg_18_185)
           (= #x7fffffffffffffff dst_reg_18_186)
           (= #x0000000000000000 dst_reg_18_187)
           (= storemerge.i.i_18_79 dst_reg_18_188)
           (= dst_reg_18_59 dst_reg_18_189)
           (= dst_reg_18_60 dst_reg_18_190)
           (= dst_reg_18_61 dst_reg_18_191)
           (= dst_reg_18_62 dst_reg_18_192))))
-------------------
  %storemerge = phi i64 [ -1, %if.then250.i ], [ %cond35.i217.i, %if.end266.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.then250.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then250.i_if.then308.i_18_207
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (= if.then250.i_if.then308.i_18_207
     (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1)))
[handlePhiNodeResolvePathConditions] incomingBlockI if.end266.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end266.i_if.then308.i_18_208
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (or (and (= cmp256.i_18_127 #b0)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1))
               (and (= cmp256.i_18_127 #b1)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1)))))
  (= if.end266.i_if.then308.i_18_208 a!2)))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (or (and (= cmp256.i_18_127 #b0)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1))
               (and (= cmp256.i_18_127 #b1)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1)))))
  (=> a!2
      (and (= src_reg_18_145 src_reg_18_193)
           (= src_reg_18_146 src_reg_18_194)
           (= src_reg_18_147 src_reg_18_195)
           (= src_reg_18_148 src_reg_18_196)
           (= src_reg_18_149 src_reg_18_197)
           (= src_reg_18_150 src_reg_18_198)
           (= src_reg_18_151 src_reg_18_199)
           (= src_reg_18_152 src_reg_18_200)
           (= src_reg_18_153 src_reg_18_201)
           (= src_reg_18_154 src_reg_18_202)
           (= src_reg_18_155 src_reg_18_203)
           (= src_reg_18_156 src_reg_18_204)
           (= src_reg_18_157 src_reg_18_205)
           (= src_reg_18_158 src_reg_18_206)
           (= dst_reg_18_131 dst_reg_18_179)
           (= dst_reg_18_132 dst_reg_18_180)
           (= dst_reg_18_133 dst_reg_18_181)
           (= dst_reg_18_134 dst_reg_18_182)
           (= shl.i.i_18_165 dst_reg_18_183)
           (= shl5.i.i_18_166 dst_reg_18_184)
           (= or.i200.i_18_169 dst_reg_18_185)
           (= or8.i206.i_18_172 dst_reg_18_186)
           (= cond23.i212.i_18_175 dst_reg_18_187)
           (= storemerge.i_18_161 dst_reg_18_188)
           (= dst_reg_18_141 dst_reg_18_189)
           (= dst_reg_18_142 dst_reg_18_190)
           (= dst_reg_18_143 dst_reg_18_191)
           (= dst_reg_18_144 dst_reg_18_192)))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1)
      (and (= src_reg_18_63 src_reg_18_193)
           (= src_reg_18_64 src_reg_18_194)
           (= src_reg_18_65 src_reg_18_195)
           (= src_reg_18_66 src_reg_18_196)
           (= src_reg_18_67 src_reg_18_197)
           (= src_reg_18_68 src_reg_18_198)
           (= src_reg_18_69 src_reg_18_199)
           (= src_reg_18_70 src_reg_18_200)
           (= src_reg_18_71 src_reg_18_201)
           (= src_reg_18_72 src_reg_18_202)
           (= src_reg_18_73 src_reg_18_203)
           (= src_reg_18_74 src_reg_18_204)
           (= src_reg_18_75 src_reg_18_205)
           (= src_reg_18_76 src_reg_18_206)
           (= #x00000001 dst_reg_18_179)
           (= dst_reg_18_50 dst_reg_18_180)
           (= dst_reg_18_51 dst_reg_18_181)
           (= dst_reg_18_52 dst_reg_18_182)
           (= #x0000000000000000 dst_reg_18_183)
           (= #xffffffffffffffff dst_reg_18_184)
           (= #x8000000000000000 dst_reg_18_185)
           (= #x7fffffffffffffff dst_reg_18_186)
           (= #x0000000000000000 dst_reg_18_187)
           (= storemerge.i.i_18_79 dst_reg_18_188)
           (= dst_reg_18_59 dst_reg_18_189)
           (= dst_reg_18_60 dst_reg_18_190)
           (= dst_reg_18_61 dst_reg_18_191)
           (= dst_reg_18_62 dst_reg_18_192))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (= if.then250.i_if.then308.i_18_207
     (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (or (and (= cmp256.i_18_127 #b0)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1))
               (and (= cmp256.i_18_127 #b1)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1)))))
  (= if.end266.i_if.then308.i_18_208 a!2)))

=========================
if.then.i314.i
=========================
=========================
if.else.i315.i
=========================
=========================
coerce_reg_to_size.exit320.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (=> (and (= cmp.i311.i_18_221 #b1) a!4)
      (and (= src_reg_18_193 src_reg_18_241)
           (= src_reg_18_194 src_reg_18_242)
           (= src_reg_18_195 src_reg_18_243)
           (= src_reg_18_196 src_reg_18_244)
           (= src_reg_18_197 src_reg_18_245)
           (= src_reg_18_198 src_reg_18_246)
           (= src_reg_18_199 src_reg_18_247)
           (= src_reg_18_200 src_reg_18_248)
           (= src_reg_18_201 src_reg_18_249)
           (= src_reg_18_202 src_reg_18_250)
           (= src_reg_18_203 src_reg_18_251)
           (= src_reg_18_204 src_reg_18_252)
           (= src_reg_18_205 src_reg_18_253)
           (= src_reg_18_206 src_reg_18_254)
           (= dst_reg_18_179 dst_reg_18_227)
           (= dst_reg_18_180 dst_reg_18_228)
           (= dst_reg_18_181 dst_reg_18_229)
           (= dst_reg_18_182 dst_reg_18_230)
           (= and.i.i301.i_18_214 dst_reg_18_231)
           (= and6.i.i302.i_18_216 dst_reg_18_232)
           (= dst_reg_18_185 dst_reg_18_233)
           (= dst_reg_18_186 dst_reg_18_234)
           (= and6.i312.i_18_223 dst_reg_18_235)
           (= storemerge_18_209 dst_reg_18_236)
           (= dst_reg_18_189 dst_reg_18_237)
           (= dst_reg_18_190 dst_reg_18_238)
           (= dst_reg_18_191 dst_reg_18_239)
           (= dst_reg_18_192 dst_reg_18_240))))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (=> (and (= cmp.i311.i_18_221 #b0) a!4)
      (and (= src_reg_18_193 src_reg_18_241)
           (= src_reg_18_194 src_reg_18_242)
           (= src_reg_18_195 src_reg_18_243)
           (= src_reg_18_196 src_reg_18_244)
           (= src_reg_18_197 src_reg_18_245)
           (= src_reg_18_198 src_reg_18_246)
           (= src_reg_18_199 src_reg_18_247)
           (= src_reg_18_200 src_reg_18_248)
           (= src_reg_18_201 src_reg_18_249)
           (= src_reg_18_202 src_reg_18_250)
           (= src_reg_18_203 src_reg_18_251)
           (= src_reg_18_204 src_reg_18_252)
           (= src_reg_18_205 src_reg_18_253)
           (= src_reg_18_206 src_reg_18_254)
           (= dst_reg_18_179 dst_reg_18_227)
           (= dst_reg_18_180 dst_reg_18_228)
           (= dst_reg_18_181 dst_reg_18_229)
           (= dst_reg_18_182 dst_reg_18_230)
           (= and.i.i301.i_18_214 dst_reg_18_231)
           (= and6.i.i302.i_18_216 dst_reg_18_232)
           (= dst_reg_18_185 dst_reg_18_233)
           (= dst_reg_18_186 dst_reg_18_234)
           (= #x0000000000000000 dst_reg_18_235)
           (= storemerge_18_209 dst_reg_18_236)
           (= dst_reg_18_189 dst_reg_18_237)
           (= dst_reg_18_190 dst_reg_18_238)
           (= dst_reg_18_191 dst_reg_18_239)
           (= dst_reg_18_192 dst_reg_18_240))))))
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else.i315.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
     (and (= cmp.i311.i_18_221 #b0) a!4)))))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then.i314.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
     (and (= cmp.i311.i_18_221 #b1) a!4)))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
  (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
  (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (=> (and (= cmp.i311.i_18_221 #b1) a!4)
      (and (= src_reg_18_193 src_reg_18_241)
           (= src_reg_18_194 src_reg_18_242)
           (= src_reg_18_195 src_reg_18_243)
           (= src_reg_18_196 src_reg_18_244)
           (= src_reg_18_197 src_reg_18_245)
           (= src_reg_18_198 src_reg_18_246)
           (= src_reg_18_199 src_reg_18_247)
           (= src_reg_18_200 src_reg_18_248)
           (= src_reg_18_201 src_reg_18_249)
           (= src_reg_18_202 src_reg_18_250)
           (= src_reg_18_203 src_reg_18_251)
           (= src_reg_18_204 src_reg_18_252)
           (= src_reg_18_205 src_reg_18_253)
           (= src_reg_18_206 src_reg_18_254)
           (= dst_reg_18_179 dst_reg_18_227)
           (= dst_reg_18_180 dst_reg_18_228)
           (= dst_reg_18_181 dst_reg_18_229)
           (= dst_reg_18_182 dst_reg_18_230)
           (= and.i.i301.i_18_214 dst_reg_18_231)
           (= and6.i.i302.i_18_216 dst_reg_18_232)
           (= dst_reg_18_185 dst_reg_18_233)
           (= dst_reg_18_186 dst_reg_18_234)
           (= and6.i312.i_18_223 dst_reg_18_235)
           (= storemerge_18_209 dst_reg_18_236)
           (= dst_reg_18_189 dst_reg_18_237)
           (= dst_reg_18_190 dst_reg_18_238)
           (= dst_reg_18_191 dst_reg_18_239)
           (= dst_reg_18_192 dst_reg_18_240))))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (=> (and (= cmp.i311.i_18_221 #b0) a!4)
      (and (= src_reg_18_193 src_reg_18_241)
           (= src_reg_18_194 src_reg_18_242)
           (= src_reg_18_195 src_reg_18_243)
           (= src_reg_18_196 src_reg_18_244)
           (= src_reg_18_197 src_reg_18_245)
           (= src_reg_18_198 src_reg_18_246)
           (= src_reg_18_199 src_reg_18_247)
           (= src_reg_18_200 src_reg_18_248)
           (= src_reg_18_201 src_reg_18_249)
           (= src_reg_18_202 src_reg_18_250)
           (= src_reg_18_203 src_reg_18_251)
           (= src_reg_18_204 src_reg_18_252)
           (= src_reg_18_205 src_reg_18_253)
           (= src_reg_18_206 src_reg_18_254)
           (= dst_reg_18_179 dst_reg_18_227)
           (= dst_reg_18_180 dst_reg_18_228)
           (= dst_reg_18_181 dst_reg_18_229)
           (= dst_reg_18_182 dst_reg_18_230)
           (= and.i.i301.i_18_214 dst_reg_18_231)
           (= and6.i.i302.i_18_216 dst_reg_18_232)
           (= dst_reg_18_185 dst_reg_18_233)
           (= dst_reg_18_186 dst_reg_18_234)
           (= #x0000000000000000 dst_reg_18_235)
           (= storemerge_18_209 dst_reg_18_236)
           (= dst_reg_18_189 dst_reg_18_237)
           (= dst_reg_18_190 dst_reg_18_238)
           (= dst_reg_18_191 dst_reg_18_239)
           (= dst_reg_18_192 dst_reg_18_240))))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
     (and (= cmp.i311.i_18_221 #b0) a!4)))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
     (and (= cmp.i311.i_18_221 #b1) a!4)))))

=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (and (= cmp.i.i.i.i_18_262 #b0)
                (or (and (= cmp.i311.i_18_221 #b0) a!4)
                    (and (= cmp.i311.i_18_221 #b1) a!4)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_18_309 a!5)))))
[handlePhiNodeResolvePathConditions] incomingBlockI coerce_reg_to_size.exit320.i
[handlePhiNodeResolvePathConditions] phiConditionI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (and (= cmp.i.i.i.i_18_262 #b1)
                (or (and (= cmp.i311.i_18_221 #b0) a!4)
                    (and (= cmp.i311.i_18_221 #b1) a!4)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310 a!5)))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
    (= retval.0.i.i.i.i_18_311 phi.bo_18_308))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
    (= retval.0.i.i.i.i_18_311 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_18_311 #x0000003f)
     (= cmp.i.i.i_18_314 #b1)
     (= cmp.i.i.i_18_314 #b0))
  (= sh_prom.i.i.i_18_315 ((_ zero_extend 32) retval.0.i.i.i.i_18_311))
  (= notmask.i.i.i_18_317 (bvshl #xffffffffffffffff sh_prom.i.i.i_18_315))
  (= sub.i.i.i_18_319 (bvxor notmask.i.i.i_18_317 #xffffffffffffffff))
  (= and.i.i336.i_18_320 (bvand notmask.i.i.i_18_317 i27.i317.i_18_259))
  (ite (= cmp.i.i.i_18_314 #b1)
     (= retval.sroa.0.0.i.i.i_18_322 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_18_322 and.i.i336.i_18_320))
  (ite (= cmp.i.i.i_18_314 #b1)
     (= retval.sroa.3.0.i.i.i_18_324 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_18_324 sub.i.i.i_18_319))
  (= or.i.i.i_18_325 (bvor retval.sroa.0.0.i.i.i_18_322 and.i.i301.i_18_214))
  (= and.i1.i.i_18_326 (bvand retval.sroa.3.0.i.i.i_18_324 and6.i.i302.i_18_216))
  (= neg.i.i.i_18_328 (bvxor and.i1.i.i_18_326 #xffffffffffffffff))
  (= and4.i.i.i_18_329 (bvand or.i.i.i_18_325 neg.i.i.i_18_328))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (and (= cmp.i.i.i.i_18_262 #b0)
                (or (and (= cmp.i311.i_18_221 #b0) a!4)
                    (and (= cmp.i311.i_18_221 #b1) a!4)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_18_309 a!5)))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (and (= cmp.i.i.i.i_18_262 #b1)
                (or (and (= cmp.i311.i_18_221 #b0) a!4)
                    (and (= cmp.i311.i_18_221 #b1) a!4)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310 a!5)))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (=> (or (and (= cmp.i.i.i.i_18_262 #b0) a!5)
          (and (= cmp.i.i.i.i_18_262 #b1) a!5))
      (and (= src_reg_18_241 src_reg_18_344)
           (= src_reg_18_242 src_reg_18_345)
           (= src_reg_18_243 src_reg_18_346)
           (= src_reg_18_244 src_reg_18_347)
           (= src_reg_18_245 src_reg_18_348)
           (= src_reg_18_246 src_reg_18_349)
           (= src_reg_18_247 src_reg_18_350)
           (= src_reg_18_248 src_reg_18_351)
           (= src_reg_18_249 src_reg_18_352)
           (= src_reg_18_250 src_reg_18_353)
           (= src_reg_18_251 src_reg_18_354)
           (= src_reg_18_252 src_reg_18_355)
           (= src_reg_18_253 src_reg_18_356)
           (= src_reg_18_254 src_reg_18_357)
           (= dst_reg_18_227 dst_reg_18_330)
           (= dst_reg_18_228 dst_reg_18_331)
           (= dst_reg_18_229 dst_reg_18_332)
           (= dst_reg_18_230 dst_reg_18_333)
           (= and4.i.i.i_18_329 dst_reg_18_334)
           (= and.i1.i.i_18_326 dst_reg_18_335)
           (= i27.i317.i_18_259 dst_reg_18_336)
           (= storemerge.i316.i_18_257 dst_reg_18_337)
           (= dst_reg_18_235 dst_reg_18_338)
           (= storemerge.i316.i_18_257 dst_reg_18_339)
           (= dst_reg_18_237 dst_reg_18_340)
           (= dst_reg_18_238 dst_reg_18_341)
           (= dst_reg_18_239 dst_reg_18_342)
           (= dst_reg_18_240 dst_reg_18_343)))))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= tobool.not.i.i_18_96 #b0) a!1)
      (and (= src_reg_18_63 src_reg_18_344)
           (= src_reg_18_64 src_reg_18_345)
           (= src_reg_18_65 src_reg_18_346)
           (= src_reg_18_66 src_reg_18_347)
           (= src_reg_18_67 src_reg_18_348)
           (= src_reg_18_68 src_reg_18_349)
           (= src_reg_18_69 src_reg_18_350)
           (= src_reg_18_70 src_reg_18_351)
           (= src_reg_18_71 src_reg_18_352)
           (= src_reg_18_72 src_reg_18_353)
           (= src_reg_18_73 src_reg_18_354)
           (= src_reg_18_74 src_reg_18_355)
           (= src_reg_18_75 src_reg_18_356)
           (= src_reg_18_76 src_reg_18_357)
           (= #x00000001 dst_reg_18_330)
           (= dst_reg_18_50 dst_reg_18_331)
           (= dst_reg_18_51 dst_reg_18_332)
           (= dst_reg_18_52 dst_reg_18_333)
           (= #x0000000000000000 dst_reg_18_334)
           (= #xffffffffffffffff dst_reg_18_335)
           (= #x8000000000000000 dst_reg_18_336)
           (= #x7fffffffffffffff dst_reg_18_337)
           (= #x0000000000000000 dst_reg_18_338)
           (= #xffffffffffffffff dst_reg_18_339)
           (= #x00000000 dst_reg_18_340)
           (= dst_reg_18_60 dst_reg_18_341)
           (= dst_reg_18_61 dst_reg_18_342)
           (= dst_reg_18_62 dst_reg_18_343))))
phiResolveI (i=2) (let ((a!1 (or (and (= cmp24.old.i_18_98 #b1)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b0)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> a!1
      (and (= src_reg_18_63 src_reg_18_344)
           (= src_reg_18_64 src_reg_18_345)
           (= src_reg_18_65 src_reg_18_346)
           (= src_reg_18_66 src_reg_18_347)
           (= src_reg_18_67 src_reg_18_348)
           (= src_reg_18_68 src_reg_18_349)
           (= src_reg_18_69 src_reg_18_350)
           (= src_reg_18_70 src_reg_18_351)
           (= src_reg_18_71 src_reg_18_352)
           (= src_reg_18_72 src_reg_18_353)
           (= src_reg_18_73 src_reg_18_354)
           (= src_reg_18_74 src_reg_18_355)
           (= src_reg_18_75 src_reg_18_356)
           (= src_reg_18_76 src_reg_18_357)
           (= #x00000001 dst_reg_18_330)
           (= dst_reg_18_50 dst_reg_18_331)
           (= dst_reg_18_51 dst_reg_18_332)
           (= dst_reg_18_52 dst_reg_18_333)
           (= #x0000000000000000 dst_reg_18_334)
           (= #xffffffffffffffff dst_reg_18_335)
           (= #x8000000000000000 dst_reg_18_336)
           (= #x7fffffffffffffff dst_reg_18_337)
           (= #x0000000000000000 dst_reg_18_338)
           (= #xffffffffffffffff dst_reg_18_339)
           (= #x00000000 dst_reg_18_340)
           (= dst_reg_18_60 dst_reg_18_341)
           (= dst_reg_18_61 dst_reg_18_342)
           (= dst_reg_18_62 dst_reg_18_343))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
=========================
if.then.i.i
=========================
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack3, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
=========================
sw.bb247.i
=========================
=========================
if.then250.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i185.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i185.i.repack2, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
if.end251.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
=========================
if.then258.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else261.i
=========================
-------------------
  store i64 %shl263.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.end266.i
=========================
-------------------
  store i64 %storemerge.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %shl.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %shl5.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 %or.i200.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %or8.i206.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %cond23.i212.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.then308.i
=========================
-------------------
  store i64 %storemerge, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
=========================
if.then.i314.i
=========================
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
coerce_reg_to_size.exit320.i
=========================
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 55 = MemoryPhi({__reg_bound_offset.exit.i,54},{if.then41.i,25},{if.then26.i,17})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
55 = MemoryPhi({__reg_bound_offset.exit.i,54},{if.then41.i,25},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_18_344 ] [ ] [ src_reg_18_345 ] [ src_reg_18_346 ] [ src_reg_18_347 ] [ [ src_reg_18_348 ] [ src_reg_18_349 ] ] [ src_reg_18_350 ] [ src_reg_18_351 ] [ src_reg_18_352 ] [ src_reg_18_353 ] [ ] [ src_reg_18_354 ] [ src_reg_18_355 ] [ src_reg_18_356 ] [ src_reg_18_357 ] ] 
- dst_reg: [ [ dst_reg_18_330 ] [ ] [ dst_reg_18_331 ] [ dst_reg_18_332 ] [ dst_reg_18_333 ] [ [ dst_reg_18_334 ] [ dst_reg_18_335 ] ] [ dst_reg_18_336 ] [ dst_reg_18_337 ] [ dst_reg_18_338 ] [ dst_reg_18_339 ] [ ] [ dst_reg_18_340 ] [ dst_reg_18_341 ] [ dst_reg_18_342 ] [ dst_reg_18_343 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
54 = MemoryDef(53) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ and.i1.i.i_18_326 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
52 = MemoryDef(51) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
53 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 55 = MemoryPhi({__reg_bound_offset.exit.i,54},{if.then41.i,25},{if.then26.i,17})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_358
[lookInsideStruct] singleValueType:dst_reg_18_358
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_359
[lookInsideStruct] singleValueType:dst_reg_18_359
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_360
[lookInsideStruct] singleValueType:dst_reg_18_360
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_361
[lookInsideStruct] singleValueType:dst_reg_18_361
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_362
[lookInsideStruct] singleValueType:dst_reg_18_362
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_363
[lookInsideStruct] singleValueType:dst_reg_18_363
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_364
[lookInsideStruct] singleValueType:dst_reg_18_364
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_365
[lookInsideStruct] singleValueType:dst_reg_18_365
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_366
[lookInsideStruct] singleValueType:dst_reg_18_366
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_367
[lookInsideStruct] singleValueType:dst_reg_18_367
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_368
[lookInsideStruct] singleValueType:dst_reg_18_368
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_369
[lookInsideStruct] singleValueType:dst_reg_18_369
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_370
[lookInsideStruct] singleValueType:dst_reg_18_370
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_18_371
[lookInsideStruct] singleValueType:dst_reg_18_371
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_18_358 ] [ ] [ dst_reg_18_359 ] [ dst_reg_18_360 ] [ dst_reg_18_361 ] [ [ dst_reg_18_362 ] [ dst_reg_18_363 ] ] [ dst_reg_18_364 ] [ dst_reg_18_365 ] [ dst_reg_18_366 ] [ dst_reg_18_367 ] [ ] [ dst_reg_18_368 ] [ dst_reg_18_369 ] [ dst_reg_18_370 ] [ dst_reg_18_371 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_18_330 ] [ ] [ dst_reg_18_331 ] [ dst_reg_18_332 ] [ dst_reg_18_333 ] [ [ dst_reg_18_334 ] [ dst_reg_18_335 ] ] [ dst_reg_18_336 ] [ dst_reg_18_337 ] [ dst_reg_18_338 ] [ dst_reg_18_339 ] [ ] [ dst_reg_18_340 ] [ dst_reg_18_341 ] [ dst_reg_18_342 ] [ dst_reg_18_343 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_18_330 dst_reg_18_358)
(= dst_reg_18_331 dst_reg_18_359)
(= dst_reg_18_332 dst_reg_18_360)
(= dst_reg_18_333 dst_reg_18_361)
(= dst_reg_18_334 dst_reg_18_362)
(= dst_reg_18_335 dst_reg_18_363)
(= dst_reg_18_336 dst_reg_18_364)
(= dst_reg_18_337 dst_reg_18_365)
(= dst_reg_18_338 dst_reg_18_366)
(= dst_reg_18_339 dst_reg_18_367)
(= dst_reg_18_340 dst_reg_18_368)
(= dst_reg_18_341 dst_reg_18_369)
(= dst_reg_18_342 dst_reg_18_370)
(= dst_reg_18_343 dst_reg_18_371)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_372
[lookInsideStruct] singleValueType:src_reg_18_372
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_373
[lookInsideStruct] singleValueType:src_reg_18_373
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_374
[lookInsideStruct] singleValueType:src_reg_18_374
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_375
[lookInsideStruct] singleValueType:src_reg_18_375
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_376
[lookInsideStruct] singleValueType:src_reg_18_376
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_377
[lookInsideStruct] singleValueType:src_reg_18_377
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_378
[lookInsideStruct] singleValueType:src_reg_18_378
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_379
[lookInsideStruct] singleValueType:src_reg_18_379
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_380
[lookInsideStruct] singleValueType:src_reg_18_380
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_381
[lookInsideStruct] singleValueType:src_reg_18_381
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_382
[lookInsideStruct] singleValueType:src_reg_18_382
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_383
[lookInsideStruct] singleValueType:src_reg_18_383
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_384
[lookInsideStruct] singleValueType:src_reg_18_384
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_18_385
[lookInsideStruct] singleValueType:src_reg_18_385
[setupBVTreeForArg] returning BVTree: [ [ src_reg_18_372 ] [ ] [ src_reg_18_373 ] [ src_reg_18_374 ] [ src_reg_18_375 ] [ [ src_reg_18_376 ] [ src_reg_18_377 ] ] [ src_reg_18_378 ] [ src_reg_18_379 ] [ src_reg_18_380 ] [ src_reg_18_381 ] [ ] [ src_reg_18_382 ] [ src_reg_18_383 ] [ src_reg_18_384 ] [ src_reg_18_385 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_18_344 ] [ ] [ src_reg_18_345 ] [ src_reg_18_346 ] [ src_reg_18_347 ] [ [ src_reg_18_348 ] [ src_reg_18_349 ] ] [ src_reg_18_350 ] [ src_reg_18_351 ] [ src_reg_18_352 ] [ src_reg_18_353 ] [ ] [ src_reg_18_354 ] [ src_reg_18_355 ] [ src_reg_18_356 ] [ src_reg_18_357 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_18_344 src_reg_18_372)
(= src_reg_18_345 src_reg_18_373)
(= src_reg_18_346 src_reg_18_374)
(= src_reg_18_347 src_reg_18_375)
(= src_reg_18_348 src_reg_18_376)
(= src_reg_18_349 src_reg_18_377)
(= src_reg_18_350 src_reg_18_378)
(= src_reg_18_351 src_reg_18_379)
(= src_reg_18_352 src_reg_18_380)
(= src_reg_18_353 src_reg_18_381)
(= src_reg_18_354 src_reg_18_382)
(= src_reg_18_355 src_reg_18_383)
(= src_reg_18_356 src_reg_18_384)
(= src_reg_18_357 src_reg_18_385)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_18_372 ] [ ] [ src_reg_18_373 ] [ src_reg_18_374 ] [ src_reg_18_375 ] [ [ src_reg_18_376 ] [ src_reg_18_377 ] ] [ src_reg_18_378 ] [ src_reg_18_379 ] [ src_reg_18_380 ] [ src_reg_18_381 ] [ ] [ src_reg_18_382 ] [ src_reg_18_383 ] [ src_reg_18_384 ] [ src_reg_18_385 ] ] 
- dst_reg: [ [ dst_reg_18_358 ] [ ] [ dst_reg_18_359 ] [ dst_reg_18_360 ] [ dst_reg_18_361 ] [ [ dst_reg_18_362 ] [ dst_reg_18_363 ] ] [ dst_reg_18_364 ] [ dst_reg_18_365 ] [ dst_reg_18_366 ] [ dst_reg_18_367 ] [ ] [ dst_reg_18_368 ] [ dst_reg_18_369 ] [ dst_reg_18_370 ] [ dst_reg_18_371 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (=> (or (and (= cmp.i.i.i.i_18_262 #b0) a!5)
          (and (= cmp.i.i.i.i_18_262 #b1) a!5))
      (and (= src_reg_18_241 src_reg_18_344)
           (= src_reg_18_242 src_reg_18_345)
           (= src_reg_18_243 src_reg_18_346)
           (= src_reg_18_244 src_reg_18_347)
           (= src_reg_18_245 src_reg_18_348)
           (= src_reg_18_246 src_reg_18_349)
           (= src_reg_18_247 src_reg_18_350)
           (= src_reg_18_248 src_reg_18_351)
           (= src_reg_18_249 src_reg_18_352)
           (= src_reg_18_250 src_reg_18_353)
           (= src_reg_18_251 src_reg_18_354)
           (= src_reg_18_252 src_reg_18_355)
           (= src_reg_18_253 src_reg_18_356)
           (= src_reg_18_254 src_reg_18_357)
           (= dst_reg_18_227 dst_reg_18_330)
           (= dst_reg_18_228 dst_reg_18_331)
           (= dst_reg_18_229 dst_reg_18_332)
           (= dst_reg_18_230 dst_reg_18_333)
           (= and4.i.i.i_18_329 dst_reg_18_334)
           (= and.i1.i.i_18_326 dst_reg_18_335)
           (= i27.i317.i_18_259 dst_reg_18_336)
           (= storemerge.i316.i_18_257 dst_reg_18_337)
           (= dst_reg_18_235 dst_reg_18_338)
           (= storemerge.i316.i_18_257 dst_reg_18_339)
           (= dst_reg_18_237 dst_reg_18_340)
           (= dst_reg_18_238 dst_reg_18_341)
           (= dst_reg_18_239 dst_reg_18_342)
           (= dst_reg_18_240 dst_reg_18_343)))))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= tobool.not.i.i_18_96 #b0) a!1)
      (and (= src_reg_18_63 src_reg_18_344)
           (= src_reg_18_64 src_reg_18_345)
           (= src_reg_18_65 src_reg_18_346)
           (= src_reg_18_66 src_reg_18_347)
           (= src_reg_18_67 src_reg_18_348)
           (= src_reg_18_68 src_reg_18_349)
           (= src_reg_18_69 src_reg_18_350)
           (= src_reg_18_70 src_reg_18_351)
           (= src_reg_18_71 src_reg_18_352)
           (= src_reg_18_72 src_reg_18_353)
           (= src_reg_18_73 src_reg_18_354)
           (= src_reg_18_74 src_reg_18_355)
           (= src_reg_18_75 src_reg_18_356)
           (= src_reg_18_76 src_reg_18_357)
           (= #x00000001 dst_reg_18_330)
           (= dst_reg_18_50 dst_reg_18_331)
           (= dst_reg_18_51 dst_reg_18_332)
           (= dst_reg_18_52 dst_reg_18_333)
           (= #x0000000000000000 dst_reg_18_334)
           (= #xffffffffffffffff dst_reg_18_335)
           (= #x8000000000000000 dst_reg_18_336)
           (= #x7fffffffffffffff dst_reg_18_337)
           (= #x0000000000000000 dst_reg_18_338)
           (= #xffffffffffffffff dst_reg_18_339)
           (= #x00000000 dst_reg_18_340)
           (= dst_reg_18_60 dst_reg_18_341)
           (= dst_reg_18_61 dst_reg_18_342)
           (= dst_reg_18_62 dst_reg_18_343))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b1)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b0)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> a!1
      (and (= src_reg_18_63 src_reg_18_344)
           (= src_reg_18_64 src_reg_18_345)
           (= src_reg_18_65 src_reg_18_346)
           (= src_reg_18_66 src_reg_18_347)
           (= src_reg_18_67 src_reg_18_348)
           (= src_reg_18_68 src_reg_18_349)
           (= src_reg_18_69 src_reg_18_350)
           (= src_reg_18_70 src_reg_18_351)
           (= src_reg_18_71 src_reg_18_352)
           (= src_reg_18_72 src_reg_18_353)
           (= src_reg_18_73 src_reg_18_354)
           (= src_reg_18_74 src_reg_18_355)
           (= src_reg_18_75 src_reg_18_356)
           (= src_reg_18_76 src_reg_18_357)
           (= #x00000001 dst_reg_18_330)
           (= dst_reg_18_50 dst_reg_18_331)
           (= dst_reg_18_51 dst_reg_18_332)
           (= dst_reg_18_52 dst_reg_18_333)
           (= #x0000000000000000 dst_reg_18_334)
           (= #xffffffffffffffff dst_reg_18_335)
           (= #x8000000000000000 dst_reg_18_336)
           (= #x7fffffffffffffff dst_reg_18_337)
           (= #x0000000000000000 dst_reg_18_338)
           (= #xffffffffffffffff dst_reg_18_339)
           (= #x00000000 dst_reg_18_340)
           (= dst_reg_18_60 dst_reg_18_341)
           (= dst_reg_18_61 dst_reg_18_342)
           (= dst_reg_18_62 dst_reg_18_343))))
  (= dst_reg_18_330 dst_reg_18_358)
  (= dst_reg_18_331 dst_reg_18_359)
  (= dst_reg_18_332 dst_reg_18_360)
  (= dst_reg_18_333 dst_reg_18_361)
  (= dst_reg_18_334 dst_reg_18_362)
  (= dst_reg_18_335 dst_reg_18_363)
  (= dst_reg_18_336 dst_reg_18_364)
  (= dst_reg_18_337 dst_reg_18_365)
  (= dst_reg_18_338 dst_reg_18_366)
  (= dst_reg_18_339 dst_reg_18_367)
  (= dst_reg_18_340 dst_reg_18_368)
  (= dst_reg_18_341 dst_reg_18_369)
  (= dst_reg_18_342 dst_reg_18_370)
  (= dst_reg_18_343 dst_reg_18_371)
  (= src_reg_18_344 src_reg_18_372)
  (= src_reg_18_345 src_reg_18_373)
  (= src_reg_18_346 src_reg_18_374)
  (= src_reg_18_347 src_reg_18_375)
  (= src_reg_18_348 src_reg_18_376)
  (= src_reg_18_349 src_reg_18_377)
  (= src_reg_18_350 src_reg_18_378)
  (= src_reg_18_351 src_reg_18_379)
  (= src_reg_18_352 src_reg_18_380)
  (= src_reg_18_353 src_reg_18_381)
  (= src_reg_18_354 src_reg_18_382)
  (= src_reg_18_355 src_reg_18_383)
  (= src_reg_18_356 src_reg_18_384)
  (= src_reg_18_357 src_reg_18_385)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:15
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_18_309
    (= retval.0.i.i.i.i_18_311 phi.bo_18_308))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310
    (= retval.0.i.i.i.i_18_311 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_18_311 #x0000003f)
     (= cmp.i.i.i_18_314 #b1)
     (= cmp.i.i.i_18_314 #b0))
  (= sh_prom.i.i.i_18_315 ((_ zero_extend 32) retval.0.i.i.i.i_18_311))
  (= notmask.i.i.i_18_317 (bvshl #xffffffffffffffff sh_prom.i.i.i_18_315))
  (= sub.i.i.i_18_319 (bvxor notmask.i.i.i_18_317 #xffffffffffffffff))
  (= and.i.i336.i_18_320 (bvand notmask.i.i.i_18_317 i27.i317.i_18_259))
  (ite (= cmp.i.i.i_18_314 #b1)
     (= retval.sroa.0.0.i.i.i_18_322 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_18_322 and.i.i336.i_18_320))
  (ite (= cmp.i.i.i_18_314 #b1)
     (= retval.sroa.3.0.i.i.i_18_324 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_18_324 sub.i.i.i_18_319))
  (= or.i.i.i_18_325 (bvor retval.sroa.0.0.i.i.i_18_322 and.i.i301.i_18_214))
  (= and.i1.i.i_18_326 (bvand retval.sroa.3.0.i.i.i_18_324 and6.i.i302.i_18_216))
  (= neg.i.i.i_18_328 (bvxor and.i1.i.i_18_326 #xffffffffffffffff))
  (= and4.i.i.i_18_329 (bvand or.i.i.i_18_325 neg.i.i.i_18_328))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (and (= cmp.i.i.i.i_18_262 #b0)
                (or (and (= cmp.i311.i_18_221 #b0) a!4)
                    (and (= cmp.i311.i_18_221 #b1) a!4)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_18_309 a!5)))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (and (= cmp.i.i.i.i_18_262 #b1)
                (or (and (= cmp.i311.i_18_221 #b0) a!4)
                    (and (= cmp.i311.i_18_221 #b1) a!4)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310 a!5)))))
BasicBlock: coerce_reg_to_size.exit320.i, Size:9
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
    (= storemerge.i316.i_18_257 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
    (= storemerge.i316.i_18_257 and8.i313.i_18_225))
  (= dst_reg_18_235 i27.i317.i_18_259)
  (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))
  (ite (= xor.i.i.i_18_260 #x0000000000000000)
     (= cmp.i.i.i.i_18_262 #b1)
     (= cmp.i.i.i.i_18_262 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (=> (and (= cmp.i311.i_18_221 #b1) a!4)
      (and (= src_reg_18_193 src_reg_18_241)
           (= src_reg_18_194 src_reg_18_242)
           (= src_reg_18_195 src_reg_18_243)
           (= src_reg_18_196 src_reg_18_244)
           (= src_reg_18_197 src_reg_18_245)
           (= src_reg_18_198 src_reg_18_246)
           (= src_reg_18_199 src_reg_18_247)
           (= src_reg_18_200 src_reg_18_248)
           (= src_reg_18_201 src_reg_18_249)
           (= src_reg_18_202 src_reg_18_250)
           (= src_reg_18_203 src_reg_18_251)
           (= src_reg_18_204 src_reg_18_252)
           (= src_reg_18_205 src_reg_18_253)
           (= src_reg_18_206 src_reg_18_254)
           (= dst_reg_18_179 dst_reg_18_227)
           (= dst_reg_18_180 dst_reg_18_228)
           (= dst_reg_18_181 dst_reg_18_229)
           (= dst_reg_18_182 dst_reg_18_230)
           (= and.i.i301.i_18_214 dst_reg_18_231)
           (= and6.i.i302.i_18_216 dst_reg_18_232)
           (= dst_reg_18_185 dst_reg_18_233)
           (= dst_reg_18_186 dst_reg_18_234)
           (= and6.i312.i_18_223 dst_reg_18_235)
           (= storemerge_18_209 dst_reg_18_236)
           (= dst_reg_18_189 dst_reg_18_237)
           (= dst_reg_18_190 dst_reg_18_238)
           (= dst_reg_18_191 dst_reg_18_239)
           (= dst_reg_18_192 dst_reg_18_240))))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (=> (and (= cmp.i311.i_18_221 #b0) a!4)
      (and (= src_reg_18_193 src_reg_18_241)
           (= src_reg_18_194 src_reg_18_242)
           (= src_reg_18_195 src_reg_18_243)
           (= src_reg_18_196 src_reg_18_244)
           (= src_reg_18_197 src_reg_18_245)
           (= src_reg_18_198 src_reg_18_246)
           (= src_reg_18_199 src_reg_18_247)
           (= src_reg_18_200 src_reg_18_248)
           (= src_reg_18_201 src_reg_18_249)
           (= src_reg_18_202 src_reg_18_250)
           (= src_reg_18_203 src_reg_18_251)
           (= src_reg_18_204 src_reg_18_252)
           (= src_reg_18_205 src_reg_18_253)
           (= src_reg_18_206 src_reg_18_254)
           (= dst_reg_18_179 dst_reg_18_227)
           (= dst_reg_18_180 dst_reg_18_228)
           (= dst_reg_18_181 dst_reg_18_229)
           (= dst_reg_18_182 dst_reg_18_230)
           (= and.i.i301.i_18_214 dst_reg_18_231)
           (= and6.i.i302.i_18_216 dst_reg_18_232)
           (= dst_reg_18_185 dst_reg_18_233)
           (= dst_reg_18_186 dst_reg_18_234)
           (= #x0000000000000000 dst_reg_18_235)
           (= storemerge_18_209 dst_reg_18_236)
           (= dst_reg_18_189 dst_reg_18_237)
           (= dst_reg_18_190 dst_reg_18_238)
           (= dst_reg_18_191 dst_reg_18_239)
           (= dst_reg_18_192 dst_reg_18_240))))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_18_255
     (and (= cmp.i311.i_18_221 #b0) a!4)))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_18_256
     (and (= cmp.i311.i_18_221 #b1) a!4)))))
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 #x00000000ffffffff))
  (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 #x00000000ffffffff))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_18_45 (bvand i23.i.i_18_39 #x00000000ffffffff))
  (= and8.i.i_18_47 (bvand i24.i.i_18_40 #x00000000ffffffff))
BasicBlock: coerce_reg_to_size.exit.i, Size:15
  (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77
    (= storemerge.i.i_18_79 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78
    (= storemerge.i.i_18_79 and8.i.i_18_47))
  (= dst_reg_18_57 i27.i.i_18_81)
  (= and6.i.i6.i_18_83
   (bvand src_reg1.sroa.10.0.copyload_18_30 #x00000000ffffffff))
  (= i25.i13.i_18_84
   (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31))
  (ite (bvult i25.i13.i_18_84 #x0000000100000000)
     (= cmp.i15.i_18_86 #b1)
     (= cmp.i15.i_18_86 #b0))
  (= and6.i16.i_18_88
   (bvand src_reg1.sroa.17.0.copyload_18_31 #x00000000ffffffff))
  (= and8.i17.i_18_90
   (bvand src_reg1.sroa.22.0.copyload_18_32 #x00000000ffffffff))
  (ite (= cmp.i15.i_18_86 #b1)
     (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88)
     (= src_reg1.sroa.17.0_18_92 #x0000000000000000))
  (ite (= cmp.i15.i_18_86 #b1)
     (= storemerge.i20.i_18_94 and8.i17.i_18_90)
     (= storemerge.i20.i_18_94 #x00000000ffffffff))
  (ite (= and6.i.i6.i_18_83 #x0000000000000000)
     (= tobool.not.i.i_18_96 #b1)
     (= tobool.not.i.i_18_96 #b0))
  (=> (= cmp.i.i_18_43 #b1)
    (and (= #x00000001 src_reg_18_63)
         (= src_reg_18_15 src_reg_18_64)
         (= src_reg_18_16 src_reg_18_65)
         (= src_reg_18_17 src_reg_18_66)
         (= src_reg_18_18 src_reg_18_67)
         (= src_reg_18_19 src_reg_18_68)
         (= src_reg_18_20 src_reg_18_69)
         (= src_reg_18_21 src_reg_18_70)
         (= src_reg_18_22 src_reg_18_71)
         (= src_reg_18_23 src_reg_18_72)
         (= src_reg_18_24 src_reg_18_73)
         (= src_reg_18_25 src_reg_18_74)
         (= src_reg_18_26 src_reg_18_75)
         (= src_reg_18_27 src_reg_18_76)
         (= #x00000001 dst_reg_18_49)
         (= dst_reg_18_1 dst_reg_18_50)
         (= dst_reg_18_2 dst_reg_18_51)
         (= dst_reg_18_3 dst_reg_18_52)
         (= and.i.i.i_18_36 dst_reg_18_53)
         (= and6.i.i.i_18_38 dst_reg_18_54)
         (= dst_reg_18_6 dst_reg_18_55)
         (= dst_reg_18_7 dst_reg_18_56)
         (= and6.i.i_18_45 dst_reg_18_57)
         (= dst_reg_18_9 dst_reg_18_58)
         (= dst_reg_18_10 dst_reg_18_59)
         (= dst_reg_18_11 dst_reg_18_60)
         (= dst_reg_18_12 dst_reg_18_61)
         (= dst_reg_18_13 dst_reg_18_62)))
  (=> (= cmp.i.i_18_43 #b0)
    (and (= #x00000001 src_reg_18_63)
         (= src_reg_18_15 src_reg_18_64)
         (= src_reg_18_16 src_reg_18_65)
         (= src_reg_18_17 src_reg_18_66)
         (= src_reg_18_18 src_reg_18_67)
         (= src_reg_18_19 src_reg_18_68)
         (= src_reg_18_20 src_reg_18_69)
         (= src_reg_18_21 src_reg_18_70)
         (= src_reg_18_22 src_reg_18_71)
         (= src_reg_18_23 src_reg_18_72)
         (= src_reg_18_24 src_reg_18_73)
         (= src_reg_18_25 src_reg_18_74)
         (= src_reg_18_26 src_reg_18_75)
         (= src_reg_18_27 src_reg_18_76)
         (= #x00000001 dst_reg_18_49)
         (= dst_reg_18_1 dst_reg_18_50)
         (= dst_reg_18_2 dst_reg_18_51)
         (= dst_reg_18_3 dst_reg_18_52)
         (= and.i.i.i_18_36 dst_reg_18_53)
         (= and6.i.i.i_18_38 dst_reg_18_54)
         (= dst_reg_18_6 dst_reg_18_55)
         (= dst_reg_18_7 dst_reg_18_56)
         (= #x0000000000000000 dst_reg_18_57)
         (= dst_reg_18_9 dst_reg_18_58)
         (= dst_reg_18_10 dst_reg_18_59)
         (= dst_reg_18_11 dst_reg_18_60)
         (= dst_reg_18_12 dst_reg_18_61)
         (= dst_reg_18_13 dst_reg_18_62)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_18_77 (= cmp.i.i_18_43 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_18_78 (= cmp.i.i_18_43 #b1))
BasicBlock: adjust_scalar_min_max_vals.exit, Size:31
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (=> (or (and (= cmp.i.i.i.i_18_262 #b0) a!5)
          (and (= cmp.i.i.i.i_18_262 #b1) a!5))
      (and (= src_reg_18_241 src_reg_18_344)
           (= src_reg_18_242 src_reg_18_345)
           (= src_reg_18_243 src_reg_18_346)
           (= src_reg_18_244 src_reg_18_347)
           (= src_reg_18_245 src_reg_18_348)
           (= src_reg_18_246 src_reg_18_349)
           (= src_reg_18_247 src_reg_18_350)
           (= src_reg_18_248 src_reg_18_351)
           (= src_reg_18_249 src_reg_18_352)
           (= src_reg_18_250 src_reg_18_353)
           (= src_reg_18_251 src_reg_18_354)
           (= src_reg_18_252 src_reg_18_355)
           (= src_reg_18_253 src_reg_18_356)
           (= src_reg_18_254 src_reg_18_357)
           (= dst_reg_18_227 dst_reg_18_330)
           (= dst_reg_18_228 dst_reg_18_331)
           (= dst_reg_18_229 dst_reg_18_332)
           (= dst_reg_18_230 dst_reg_18_333)
           (= and4.i.i.i_18_329 dst_reg_18_334)
           (= and.i1.i.i_18_326 dst_reg_18_335)
           (= i27.i317.i_18_259 dst_reg_18_336)
           (= storemerge.i316.i_18_257 dst_reg_18_337)
           (= dst_reg_18_235 dst_reg_18_338)
           (= storemerge.i316.i_18_257 dst_reg_18_339)
           (= dst_reg_18_237 dst_reg_18_340)
           (= dst_reg_18_238 dst_reg_18_341)
           (= dst_reg_18_239 dst_reg_18_342)
           (= dst_reg_18_240 dst_reg_18_343)))))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= tobool.not.i.i_18_96 #b0) a!1)
      (and (= src_reg_18_63 src_reg_18_344)
           (= src_reg_18_64 src_reg_18_345)
           (= src_reg_18_65 src_reg_18_346)
           (= src_reg_18_66 src_reg_18_347)
           (= src_reg_18_67 src_reg_18_348)
           (= src_reg_18_68 src_reg_18_349)
           (= src_reg_18_69 src_reg_18_350)
           (= src_reg_18_70 src_reg_18_351)
           (= src_reg_18_71 src_reg_18_352)
           (= src_reg_18_72 src_reg_18_353)
           (= src_reg_18_73 src_reg_18_354)
           (= src_reg_18_74 src_reg_18_355)
           (= src_reg_18_75 src_reg_18_356)
           (= src_reg_18_76 src_reg_18_357)
           (= #x00000001 dst_reg_18_330)
           (= dst_reg_18_50 dst_reg_18_331)
           (= dst_reg_18_51 dst_reg_18_332)
           (= dst_reg_18_52 dst_reg_18_333)
           (= #x0000000000000000 dst_reg_18_334)
           (= #xffffffffffffffff dst_reg_18_335)
           (= #x8000000000000000 dst_reg_18_336)
           (= #x7fffffffffffffff dst_reg_18_337)
           (= #x0000000000000000 dst_reg_18_338)
           (= #xffffffffffffffff dst_reg_18_339)
           (= #x00000000 dst_reg_18_340)
           (= dst_reg_18_60 dst_reg_18_341)
           (= dst_reg_18_61 dst_reg_18_342)
           (= dst_reg_18_62 dst_reg_18_343))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b1)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b0)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> a!1
      (and (= src_reg_18_63 src_reg_18_344)
           (= src_reg_18_64 src_reg_18_345)
           (= src_reg_18_65 src_reg_18_346)
           (= src_reg_18_66 src_reg_18_347)
           (= src_reg_18_67 src_reg_18_348)
           (= src_reg_18_68 src_reg_18_349)
           (= src_reg_18_69 src_reg_18_350)
           (= src_reg_18_70 src_reg_18_351)
           (= src_reg_18_71 src_reg_18_352)
           (= src_reg_18_72 src_reg_18_353)
           (= src_reg_18_73 src_reg_18_354)
           (= src_reg_18_74 src_reg_18_355)
           (= src_reg_18_75 src_reg_18_356)
           (= src_reg_18_76 src_reg_18_357)
           (= #x00000001 dst_reg_18_330)
           (= dst_reg_18_50 dst_reg_18_331)
           (= dst_reg_18_51 dst_reg_18_332)
           (= dst_reg_18_52 dst_reg_18_333)
           (= #x0000000000000000 dst_reg_18_334)
           (= #xffffffffffffffff dst_reg_18_335)
           (= #x8000000000000000 dst_reg_18_336)
           (= #x7fffffffffffffff dst_reg_18_337)
           (= #x0000000000000000 dst_reg_18_338)
           (= #xffffffffffffffff dst_reg_18_339)
           (= #x00000000 dst_reg_18_340)
           (= dst_reg_18_60 dst_reg_18_341)
           (= dst_reg_18_61 dst_reg_18_342)
           (= dst_reg_18_62 dst_reg_18_343))))
  (= dst_reg_18_330 dst_reg_18_358)
  (= dst_reg_18_331 dst_reg_18_359)
  (= dst_reg_18_332 dst_reg_18_360)
  (= dst_reg_18_333 dst_reg_18_361)
  (= dst_reg_18_334 dst_reg_18_362)
  (= dst_reg_18_335 dst_reg_18_363)
  (= dst_reg_18_336 dst_reg_18_364)
  (= dst_reg_18_337 dst_reg_18_365)
  (= dst_reg_18_338 dst_reg_18_366)
  (= dst_reg_18_339 dst_reg_18_367)
  (= dst_reg_18_340 dst_reg_18_368)
  (= dst_reg_18_341 dst_reg_18_369)
  (= dst_reg_18_342 dst_reg_18_370)
  (= dst_reg_18_343 dst_reg_18_371)
  (= src_reg_18_344 src_reg_18_372)
  (= src_reg_18_345 src_reg_18_373)
  (= src_reg_18_346 src_reg_18_374)
  (= src_reg_18_347 src_reg_18_375)
  (= src_reg_18_348 src_reg_18_376)
  (= src_reg_18_349 src_reg_18_377)
  (= src_reg_18_350 src_reg_18_378)
  (= src_reg_18_351 src_reg_18_379)
  (= src_reg_18_352 src_reg_18_380)
  (= src_reg_18_353 src_reg_18_381)
  (= src_reg_18_354 src_reg_18_382)
  (= src_reg_18_355 src_reg_18_383)
  (= src_reg_18_356 src_reg_18_384)
  (= src_reg_18_357 src_reg_18_385)
BasicBlock: if.else.i315.i, Size:0
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp18.not.i.not_18_97 #b1)
     (= cmp18.not.i.not_18_97 #b0))
BasicBlock: entry, Size:39
  (= dst_reg_18_0 dst_reg_18_0)
  (= dst_reg_18_1 dst_reg_18_1)
  (= dst_reg_18_2 dst_reg_18_2)
  (= dst_reg_18_3 dst_reg_18_3)
  (= dst_reg_18_4 dst_reg_18_4)
  (= dst_reg_18_5 dst_reg_18_5)
  (= dst_reg_18_6 dst_reg_18_6)
  (= dst_reg_18_7 dst_reg_18_7)
  (= dst_reg_18_8 dst_reg_18_8)
  (= dst_reg_18_9 dst_reg_18_9)
  (= dst_reg_18_10 dst_reg_18_10)
  (= dst_reg_18_11 dst_reg_18_11)
  (= dst_reg_18_12 dst_reg_18_12)
  (= dst_reg_18_13 dst_reg_18_13)
  (= src_reg_18_14 src_reg_18_14)
  (= src_reg_18_15 src_reg_18_15)
  (= src_reg_18_16 src_reg_18_16)
  (= src_reg_18_17 src_reg_18_17)
  (= src_reg_18_18 src_reg_18_18)
  (= src_reg_18_19 src_reg_18_19)
  (= src_reg_18_20 src_reg_18_20)
  (= src_reg_18_21 src_reg_18_21)
  (= src_reg_18_22 src_reg_18_22)
  (= src_reg_18_23 src_reg_18_23)
  (= src_reg_18_24 src_reg_18_24)
  (= src_reg_18_25 src_reg_18_25)
  (= src_reg_18_26 src_reg_18_26)
  (= src_reg_18_27 src_reg_18_27)
  (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)
  (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)
  (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)
  (= dst_reg_18_4 i18.i.i_18_33)
  (= dst_reg_18_5 i20.i.i_18_34)
  (= and.i.i.i_18_36 (bvand i18.i.i_18_33 #x00000000ffffffff))
  (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 #x00000000ffffffff))
  (= dst_reg_18_8 i23.i.i_18_39)
  (= dst_reg_18_9 i24.i.i_18_40)
  (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))
  (ite (bvult i25.i.i_18_41 #x0000000100000000)
     (= cmp.i.i_18_43 #b1)
     (= cmp.i.i_18_43 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94)
     (= cmp24.old.i_18_98 #b1)
     (= cmp24.old.i_18_98 #b0))
BasicBlock: if.then308.i, Size:14
  (=> if.then250.i_if.then308.i_18_207 (= storemerge_18_209 #xffffffffffffffff))
  (=> if.end266.i_if.then308.i_18_208 (= storemerge_18_209 cond35.i217.i_18_178))
  (= dst_reg_18_183 i18.i298.i_18_211)
  (= dst_reg_18_184 i20.i300.i_18_212)
  (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 #x00000000ffffffff))
  (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 #x00000000ffffffff))
  (= dst_reg_18_187 i23.i306.i_18_217)
  (= storemerge_18_209 i24.i308.i_18_218)
  (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))
  (ite (bvult i25.i309.i_18_219 #x0000000100000000)
     (= cmp.i311.i_18_221 #b1)
     (= cmp.i311.i_18_221 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (or (and (= cmp256.i_18_127 #b0)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1))
               (and (= cmp256.i_18_127 #b1)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1)))))
  (=> a!2
      (and (= src_reg_18_145 src_reg_18_193)
           (= src_reg_18_146 src_reg_18_194)
           (= src_reg_18_147 src_reg_18_195)
           (= src_reg_18_148 src_reg_18_196)
           (= src_reg_18_149 src_reg_18_197)
           (= src_reg_18_150 src_reg_18_198)
           (= src_reg_18_151 src_reg_18_199)
           (= src_reg_18_152 src_reg_18_200)
           (= src_reg_18_153 src_reg_18_201)
           (= src_reg_18_154 src_reg_18_202)
           (= src_reg_18_155 src_reg_18_203)
           (= src_reg_18_156 src_reg_18_204)
           (= src_reg_18_157 src_reg_18_205)
           (= src_reg_18_158 src_reg_18_206)
           (= dst_reg_18_131 dst_reg_18_179)
           (= dst_reg_18_132 dst_reg_18_180)
           (= dst_reg_18_133 dst_reg_18_181)
           (= dst_reg_18_134 dst_reg_18_182)
           (= shl.i.i_18_165 dst_reg_18_183)
           (= shl5.i.i_18_166 dst_reg_18_184)
           (= or.i200.i_18_169 dst_reg_18_185)
           (= or8.i206.i_18_172 dst_reg_18_186)
           (= cond23.i212.i_18_175 dst_reg_18_187)
           (= storemerge.i_18_161 dst_reg_18_188)
           (= dst_reg_18_141 dst_reg_18_189)
           (= dst_reg_18_142 dst_reg_18_190)
           (= dst_reg_18_143 dst_reg_18_191)
           (= dst_reg_18_144 dst_reg_18_192)))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1)
      (and (= src_reg_18_63 src_reg_18_193)
           (= src_reg_18_64 src_reg_18_194)
           (= src_reg_18_65 src_reg_18_195)
           (= src_reg_18_66 src_reg_18_196)
           (= src_reg_18_67 src_reg_18_197)
           (= src_reg_18_68 src_reg_18_198)
           (= src_reg_18_69 src_reg_18_199)
           (= src_reg_18_70 src_reg_18_200)
           (= src_reg_18_71 src_reg_18_201)
           (= src_reg_18_72 src_reg_18_202)
           (= src_reg_18_73 src_reg_18_203)
           (= src_reg_18_74 src_reg_18_204)
           (= src_reg_18_75 src_reg_18_205)
           (= src_reg_18_76 src_reg_18_206)
           (= #x00000001 dst_reg_18_179)
           (= dst_reg_18_50 dst_reg_18_180)
           (= dst_reg_18_51 dst_reg_18_181)
           (= dst_reg_18_52 dst_reg_18_182)
           (= #x0000000000000000 dst_reg_18_183)
           (= #xffffffffffffffff dst_reg_18_184)
           (= #x8000000000000000 dst_reg_18_185)
           (= #x7fffffffffffffff dst_reg_18_186)
           (= #x0000000000000000 dst_reg_18_187)
           (= storemerge.i.i_18_79 dst_reg_18_188)
           (= dst_reg_18_59 dst_reg_18_189)
           (= dst_reg_18_60 dst_reg_18_190)
           (= dst_reg_18_61 dst_reg_18_191)
           (= dst_reg_18_62 dst_reg_18_192))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (= if.then250.i_if.then308.i_18_207
     (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (or (and (= cmp256.i_18_127 #b0)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1))
               (and (= cmp256.i_18_127 #b1)
                    (and (= cmp248.not.i_18_116 #b1)
                         (= tobool.not.i.i_18_96 #b1)
                         a!1)))))
  (= if.end266.i_if.then308.i_18_208 a!2)))
BasicBlock: if.end266.i, Size:19
  (=> if.else261.i_if.end266.i_18_159 (= storemerge.i_18_161 shl265.i_18_130))
  (=> if.then258.i_if.end266.i_18_160 (= storemerge.i_18_161 #xffffffffffffffff))
  (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 #x00000000000000ff))
  (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))
  (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))
  (= and.i199.i_18_168 (bvand shl5.i.i_18_166 #x8000000000000000))
  (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))
  (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 #x7fffffffffffffff))
  (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))
  (= dst_reg_18_139 i26.i210.i_18_173)
  (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165)
     (= cmp19.i211.i_18_174 #b1)
     (= cmp19.i211.i_18_174 #b0))
  (ite (= cmp19.i211.i_18_174 #b1)
     (= cond23.i212.i_18_175 i26.i210.i_18_173)
     (= cond23.i212.i_18_175 shl.i.i_18_165))
  (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))
  (ite (bvult storemerge.i_18_161 or29.i215.i_18_176)
     (= cmp31.i216.i_18_177 #b1)
     (= cmp31.i216.i_18_177 #b0))
  (ite (= cmp31.i216.i_18_177 #b1)
     (= cond35.i217.i_18_178 storemerge.i_18_161)
     (= cond35.i217.i_18_178 or29.i215.i_18_176))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= cmp256.i_18_127 #b1)
           (= cmp248.not.i_18_116 #b1)
           (= tobool.not.i.i_18_96 #b1)
           a!1)
      (and (= src_reg_18_63 src_reg_18_145)
           (= src_reg_18_64 src_reg_18_146)
           (= src_reg_18_65 src_reg_18_147)
           (= src_reg_18_66 src_reg_18_148)
           (= src_reg_18_67 src_reg_18_149)
           (= src_reg_18_68 src_reg_18_150)
           (= src_reg_18_69 src_reg_18_151)
           (= src_reg_18_70 src_reg_18_152)
           (= src_reg_18_71 src_reg_18_153)
           (= src_reg_18_72 src_reg_18_154)
           (= src_reg_18_73 src_reg_18_155)
           (= src_reg_18_74 src_reg_18_156)
           (= src_reg_18_75 src_reg_18_157)
           (= src_reg_18_76 src_reg_18_158)
           (= dst_reg_18_49 dst_reg_18_131)
           (= dst_reg_18_50 dst_reg_18_132)
           (= dst_reg_18_51 dst_reg_18_133)
           (= dst_reg_18_52 dst_reg_18_134)
           (= dst_reg_18_53 dst_reg_18_135)
           (= dst_reg_18_54 dst_reg_18_136)
           (= #x8000000000000000 dst_reg_18_137)
           (= #x7fffffffffffffff dst_reg_18_138)
           (= #x0000000000000000 dst_reg_18_139)
           (= storemerge.i.i_18_79 dst_reg_18_140)
           (= dst_reg_18_59 dst_reg_18_141)
           (= dst_reg_18_60 dst_reg_18_142)
           (= dst_reg_18_61 dst_reg_18_143)
           (= dst_reg_18_62 dst_reg_18_144))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (=> (and (= cmp256.i_18_127 #b0)
           (= cmp248.not.i_18_116 #b1)
           (= tobool.not.i.i_18_96 #b1)
           a!1)
      (and (= src_reg_18_63 src_reg_18_145)
           (= src_reg_18_64 src_reg_18_146)
           (= src_reg_18_65 src_reg_18_147)
           (= src_reg_18_66 src_reg_18_148)
           (= src_reg_18_67 src_reg_18_149)
           (= src_reg_18_68 src_reg_18_150)
           (= src_reg_18_69 src_reg_18_151)
           (= src_reg_18_70 src_reg_18_152)
           (= src_reg_18_71 src_reg_18_153)
           (= src_reg_18_72 src_reg_18_154)
           (= src_reg_18_73 src_reg_18_155)
           (= src_reg_18_74 src_reg_18_156)
           (= src_reg_18_75 src_reg_18_157)
           (= src_reg_18_76 src_reg_18_158)
           (= dst_reg_18_49 dst_reg_18_131)
           (= dst_reg_18_50 dst_reg_18_132)
           (= dst_reg_18_51 dst_reg_18_133)
           (= dst_reg_18_52 dst_reg_18_134)
           (= dst_reg_18_53 dst_reg_18_135)
           (= dst_reg_18_54 dst_reg_18_136)
           (= #x8000000000000000 dst_reg_18_137)
           (= #x7fffffffffffffff dst_reg_18_138)
           (= shl263.i_18_129 dst_reg_18_139)
           (= storemerge.i.i_18_79 dst_reg_18_140)
           (= dst_reg_18_59 dst_reg_18_141)
           (= dst_reg_18_60 dst_reg_18_142)
           (= dst_reg_18_61 dst_reg_18_143)
           (= dst_reg_18_62 dst_reg_18_144))))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (= if.else261.i_if.end266.i_18_159
     (and (= cmp256.i_18_127 #b0)
          (= cmp248.not.i_18_116 #b1)
          (= tobool.not.i.i_18_96 #b1)
          a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (= if.then258.i_if.end266.i_18_160
     (and (= cmp256.i_18_127 #b1)
          (= cmp248.not.i_18_116 #b1)
          (= tobool.not.i.i_18_96 #b1)
          a!1)))
BasicBlock: if.then250.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_18_260 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= tobool.not.i.i.i.i.i_18_264 #b0))
  (= shl.i.i.i.i.i_18_266 (bvshl xor.i.i.i_18_260 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select.i.i.i.i.i_18_267 shl.i.i.i.i.i_18_266)
     (= spec.select.i.i.i.i.i_18_267 xor.i.i.i_18_260))
  (ite (= tobool.not.i.i.i.i.i_18_264 #b1)
     (= spec.select17.i.i.i.i.i_18_270 #x0000001f)
     (= spec.select17.i.i.i.i.i_18_270 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_18_267 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= tobool2.not.i.i.i.i.i_18_272 #b0))
  (= sub4.i.i.i.i.i_18_274 (bvadd spec.select17.i.i.i.i.i_18_270 #xfffffff0))
  (= shl5.i.i.i.i.i_18_276
   (bvshl spec.select.i.i.i.i.i_18_267 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= word.addr.1.i.i.i.i.i_18_277 shl5.i.i.i.i.i_18_276)
     (= word.addr.1.i.i.i.i.i_18_277 spec.select.i.i.i.i.i_18_267))
  (ite (= tobool2.not.i.i.i.i.i_18_272 #b1)
     (= num.1.i.i.i.i.i_18_278 sub4.i.i.i.i.i_18_274)
     (= num.1.i.i.i.i.i_18_278 spec.select17.i.i.i.i.i_18_270))
  (ite (bvult word.addr.1.i.i.i.i.i_18_277 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= tobool8.not.i.i.i.i.i_18_280 #b0))
  (= sub10.i.i.i.i.i_18_282 (bvadd num.1.i.i.i.i.i_18_278 #xfffffff8))
  (= shl11.i.i.i.i.i_18_284
   (bvshl word.addr.1.i.i.i.i.i_18_277 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= word.addr.2.i.i.i.i.i_18_285 shl11.i.i.i.i.i_18_284)
     (= word.addr.2.i.i.i.i.i_18_285 word.addr.1.i.i.i.i.i_18_277))
  (ite (= tobool8.not.i.i.i.i.i_18_280 #b1)
     (= num.2.i.i.i.i.i_18_286 sub10.i.i.i.i.i_18_282)
     (= num.2.i.i.i.i.i_18_286 num.1.i.i.i.i.i_18_278))
  (ite (bvult word.addr.2.i.i.i.i.i_18_285 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= tobool14.not.i.i.i.i.i_18_288 #b0))
  (= sub16.i.i.i.i.i_18_290 (bvadd num.2.i.i.i.i.i_18_286 #xfffffffc))
  (= shl17.i.i.i.i.i_18_292
   (bvshl word.addr.2.i.i.i.i.i_18_285 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= word.addr.3.i.i.i.i.i_18_293 shl17.i.i.i.i.i_18_292)
     (= word.addr.3.i.i.i.i.i_18_293 word.addr.2.i.i.i.i.i_18_285))
  (ite (= tobool14.not.i.i.i.i.i_18_288 #b1)
     (= num.3.i.i.i.i.i_18_294 sub16.i.i.i.i.i_18_290)
     (= num.3.i.i.i.i.i_18_294 num.2.i.i.i.i.i_18_286))
  (ite (bvult word.addr.3.i.i.i.i.i_18_293 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= tobool20.not.i.i.i.i.i_18_296 #b0))
  (= sub22.i.i.i.i.i_18_298 (bvadd num.3.i.i.i.i.i_18_294 #x000000fe))
  (= shl23.i.i.i.i.i_18_300
   (bvshl word.addr.3.i.i.i.i.i_18_293 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= word.addr.4.i.i.i.i.i_18_301 shl23.i.i.i.i.i_18_300)
     (= word.addr.4.i.i.i.i.i_18_301 word.addr.3.i.i.i.i.i_18_293))
  (ite (= tobool20.not.i.i.i.i.i_18_296 #b1)
     (= num.4.i.i.i.i.i_18_302 sub22.i.i.i.i.i_18_298)
     (= num.4.i.i.i.i.i_18_302 num.3.i.i.i.i.i_18_294))
  (= word.addr.4.lobit.i.i.i.i.i.neg_18_304
   (bvlshr word.addr.4.i.i.i.i.i_18_301 #x000000000000003f))
  (= i.i.i.i.i.i.neg_18_305
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_18_304))
  (= add.i.i.i335.i_18_306 (bvadd num.4.i.i.i.i.i_18_302 i.i.i.i.i.i.neg_18_305))
  (= phi.bo_18_308 (bvand add.i.i.i335.i_18_306 #x000000ff))
BasicBlock: if.else261.i, Size:2
  (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))
  (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))
BasicBlock: if.end251.i, Size:2
  (= shl.i_18_126 (bvlshr #x8000000000000000 storemerge.i20.i_18_94))
  (ite (bvugt storemerge.i.i_18_79 shl.i_18_126)
     (= cmp256.i_18_127 #b1)
     (= cmp256.i_18_127 #b0))
BasicBlock: if.then258.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb247.i, Size:1
  (ite (bvult storemerge.i20.i_18_94 #x0000000000000020)
     (= cmp248.not.i_18_116 #b1)
     (= cmp248.not.i_18_116 #b0))

[encodeFunctionBody] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!5) (and (= cmp.i.i.i.i_18_262 #b1) a!5))))))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or (and (= cmp.i311.i_18_221 #b0) a!4) (and (= cmp.i311.i_18_221 #b1) a!4)))))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
if.then258.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.else.i.i
  (= cmp.i.i_18_43 #b0)
if.then.i.i
  (= cmp.i.i_18_43 #b1)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_18_96 #b0)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
      (a!2 (and (= tobool.not.i.i_18_96 #b1)
                (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_18_98 #b0) a!1)
               (and (= cmp18.not.i.not_18_97 #b1) a!2))))
(let ((a!4 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!3))))
      (a!5 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!3)))))
(let ((a!6 (or a!4
               a!5
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!3)))))
(let ((a!7 (or (and (= cmp.i311.i_18_221 #b0) a!6)
               (and (= cmp.i311.i_18_221 #b1) a!6))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!7)
      (and (= cmp.i.i.i.i_18_262 #b1) a!7)
      (and (= tobool.not.i.i_18_96 #b0) a!3)
      (and (= cmp24.old.i_18_98 #b1) a!1)
      (and (= cmp18.not.i.not_18_97 #b0) a!2)))))))
land.lhs.true.i
  (and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
if.else261.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
if.end251.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
sw.bb247.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
if.end266.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
if.then250.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
if.end27.i
  (or (and (= cmp24.old.i_18_98 #b0)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b1)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (or a!2
      a!3
      (and (= cmp248.not.i_18_116 #b0) (and (= tobool.not.i.i_18_96 #b1) a!1)))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
[encodeFunctionBody] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!5 (or (and (= cmp.i311.i_18_221 #b0) a!4)
               (and (= cmp.i311.i_18_221 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_18_262 #b0) a!5) (and (= cmp.i.i.i.i_18_262 #b1) a!5))))))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_18_98 #b1)
         (= tobool.not.i.i_18_96 #b0)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
    (and (= cmp18.not.i.not_18_97 #b0)
         (= tobool.not.i.i_18_96 #b1)
         (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b0)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
<if.end27.i, sw.bb247.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_18_97 #b0)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_18_43 #b1)
<sw.bb247.i, if.end251.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.then.i.i> :(= cmp.i.i_18_43 #b1)
<if.end251.i, if.then258.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.then258.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b1)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<entry, if.else.i.i> :(= cmp.i.i_18_43 #b0)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= tobool.not.i.i_18_96 #b0) a!1))
<sw.bb247.i, if.then250.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.then250.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp248.not.i_18_116 #b0) (= tobool.not.i.i_18_96 #b1) a!1))
<if.end266.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (or (and (= cmp256.i_18_127 #b0)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))
      (and (= cmp256.i_18_127 #b1)
           (and (= cmp248.not.i_18_116 #b1) (= tobool.not.i.i_18_96 #b1) a!1))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_18_98 #b0)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.end251.i, if.else261.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<if.else261.i, if.end266.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
  (and (= cmp256.i_18_127 #b0)
       (= cmp248.not.i_18_116 #b1)
       (= tobool.not.i.i_18_96 #b1)
       a!1))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_18_98 #b1)
     (= tobool.not.i.i_18_96 #b0)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_18_97 #b1)
     (= tobool.not.i.i_18_96 #b1)
     (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b0) a!4))))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i311.i_18_221 #b1) a!4))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_18_98 #b0)
                    (= tobool.not.i.i_18_96 #b0)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1)))
               (and (= cmp18.not.i.not_18_97 #b1)
                    (= tobool.not.i.i_18_96 #b1)
                    (or (= cmp.i.i_18_43 #b0) (= cmp.i.i_18_43 #b1))))))
(let ((a!2 (and (= cmp256.i_18_127 #b0)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1))))
      (a!3 (and (= cmp256.i_18_127 #b1)
                (and (= cmp248.not.i_18_116 #b1)
                     (and (= tobool.not.i.i_18_96 #b1) a!1)))))
(let ((a!4 (or a!2
               a!3
               (and (= cmp248.not.i_18_116 #b0)
                    (and (= tobool.not.i.i_18_96 #b1) a!1)))))
  (and (= cmp.i.i.i.i_18_262 #b1)
       (or (and (= cmp.i311.i_18_221 #b0) a!4)
           (and (= cmp.i311.i_18_221 #b1) a!4))))))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
55 = MemoryPhi({__reg_bound_offset.exit.i,54},{if.then41.i,25},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_18_344 ] [ ] [ src_reg_18_345 ] [ src_reg_18_346 ] [ src_reg_18_347 ] [ [ src_reg_18_348 ] [ src_reg_18_349 ] ] [ src_reg_18_350 ] [ src_reg_18_351 ] [ src_reg_18_352 ] [ src_reg_18_353 ] [ ] [ src_reg_18_354 ] [ src_reg_18_355 ] [ src_reg_18_356 ] [ src_reg_18_357 ] ] 
- dst_reg: [ [ dst_reg_18_330 ] [ ] [ dst_reg_18_331 ] [ dst_reg_18_332 ] [ dst_reg_18_333 ] [ [ dst_reg_18_334 ] [ dst_reg_18_335 ] ] [ dst_reg_18_336 ] [ dst_reg_18_337 ] [ dst_reg_18_338 ] [ dst_reg_18_339 ] [ ] [ dst_reg_18_340 ] [ dst_reg_18_341 ] [ dst_reg_18_342 ] [ dst_reg_18_343 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
54 = MemoryDef(53) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ and.i1.i.i_18_326 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
35 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ shl263.i_18_129 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ #x0000000000000000 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ and6.i.i_18_45 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
36 = MemoryDef(57) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
59 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ dst_reg_18_58 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
7 = MemoryDef(59) : {
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ dst_reg_18_55 ] [ dst_reg_18_56 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ and.i.i.i_18_36 ] [ and6.i.i.i_18_38 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
}
47 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
32 = MemoryDef(9) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ dst_reg_18_49 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ dst_reg_18_53 ] [ dst_reg_18_54 ] ] [ #x8000000000000000 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ dst_reg_18_54 ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
}
57 = MemoryPhi({if.then258.i,34},{if.else261.i,35}) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ dst_reg_18_135 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ dst_reg_18_140 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ dst_reg_18_136 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ dst_reg_18_137 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ dst_reg_18_138 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
40 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ dst_reg_18_139 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
}
56 = MemoryPhi({if.then.i314.i,45},{if.else.i315.i,46}) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ dst_reg_18_233 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ dst_reg_18_236 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_18_145 ] [ ] [ src_reg_18_146 ] [ src_reg_18_147 ] [ src_reg_18_148 ] [ [ src_reg_18_149 ] [ src_reg_18_150 ] ] [ src_reg_18_151 ] [ src_reg_18_152 ] [ src_reg_18_153 ] [ src_reg_18_154 ] [ ] [ src_reg_18_155 ] [ src_reg_18_156 ] [ src_reg_18_157 ] [ src_reg_18_158 ] ] 
- dst_reg: [ [ dst_reg_18_131 ] [ ] [ dst_reg_18_132 ] [ dst_reg_18_133 ] [ dst_reg_18_134 ] [ [ shl.i.i_18_165 ] [ shl5.i.i_18_166 ] ] [ or.i200.i_18_169 ] [ or8.i206.i_18_172 ] [ cond23.i212.i_18_175 ] [ storemerge.i_18_161 ] [ ] [ dst_reg_18_141 ] [ dst_reg_18_142 ] [ dst_reg_18_143 ] [ dst_reg_18_144 ] ] 
}
58 = MemoryPhi({if.end266.i,41},{if.then250.i,31}) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ dst_reg_18_188 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ dst_reg_18_234 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
42 = MemoryDef(58) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ dst_reg_18_183 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ dst_reg_18_184 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_18_63 ] [ ] [ src_reg_18_64 ] [ src_reg_18_65 ] [ src_reg_18_66 ] [ [ src_reg_18_67 ] [ src_reg_18_68 ] ] [ src_reg_18_69 ] [ src_reg_18_70 ] [ src_reg_18_71 ] [ src_reg_18_72 ] [ ] [ src_reg_18_73 ] [ src_reg_18_74 ] [ src_reg_18_75 ] [ src_reg_18_76 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_18_50 ] [ dst_reg_18_51 ] [ dst_reg_18_52 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_18_81 ] [ storemerge.i.i_18_79 ] [ dst_reg_18_57 ] [ storemerge.i.i_18_79 ] [ ] [ dst_reg_18_59 ] [ dst_reg_18_60 ] [ dst_reg_18_61 ] [ dst_reg_18_62 ] ] 
}
45 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ and6.i312.i_18_223 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
46 = MemoryDef(44) : {
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ #x0000000000000000 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_18_179 ] [ ] [ dst_reg_18_180 ] [ dst_reg_18_181 ] [ dst_reg_18_182 ] [ [ and.i.i301.i_18_214 ] [ and6.i.i302.i_18_216 ] ] [ dst_reg_18_185 ] [ dst_reg_18_186 ] [ dst_reg_18_187 ] [ storemerge_18_209 ] [ ] [ dst_reg_18_189 ] [ dst_reg_18_190 ] [ dst_reg_18_191 ] [ dst_reg_18_192 ] ] 
- src_reg: [ [ src_reg_18_193 ] [ ] [ src_reg_18_194 ] [ src_reg_18_195 ] [ src_reg_18_196 ] [ [ src_reg_18_197 ] [ src_reg_18_198 ] ] [ src_reg_18_199 ] [ src_reg_18_200 ] [ src_reg_18_201 ] [ src_reg_18_202 ] [ ] [ src_reg_18_203 ] [ src_reg_18_204 ] [ src_reg_18_205 ] [ src_reg_18_206 ] ] 
}
52 = MemoryDef(51) : {
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ dst_reg_18_231 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
}
53 = MemoryDef(52) : {
- dst_reg: [ [ dst_reg_18_227 ] [ ] [ dst_reg_18_228 ] [ dst_reg_18_229 ] [ dst_reg_18_230 ] [ [ and4.i.i.i_18_329 ] [ dst_reg_18_232 ] ] [ i27.i317.i_18_259 ] [ storemerge.i316.i_18_257 ] [ dst_reg_18_235 ] [ storemerge.i316.i_18_257 ] [ ] [ dst_reg_18_237 ] [ dst_reg_18_238 ] [ dst_reg_18_239 ] [ dst_reg_18_240 ] ] 
- src_reg: [ [ src_reg_18_241 ] [ ] [ src_reg_18_242 ] [ src_reg_18_243 ] [ src_reg_18_244 ] [ [ src_reg_18_245 ] [ src_reg_18_246 ] ] [ src_reg_18_247 ] [ src_reg_18_248 ] [ src_reg_18_249 ] [ src_reg_18_250 ] [ ] [ src_reg_18_251 ] [ src_reg_18_252 ] [ src_reg_18_253 ] [ src_reg_18_254 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_18_0 ] [ ] [ dst_reg_18_1 ] [ dst_reg_18_2 ] [ dst_reg_18_3 ] [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] [ dst_reg_18_6 ] [ dst_reg_18_7 ] [ dst_reg_18_8 ] [ dst_reg_18_9 ] [ ] [ dst_reg_18_10 ] [ dst_reg_18_11 ] [ dst_reg_18_12 ] [ dst_reg_18_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_18_4 ] [ dst_reg_18_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_4",
	"dst_reg_18_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3",
	[
		"dst_reg_18_4",
		"dst_reg_18_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3",
	[
		"dst_reg_18_4",
		"dst_reg_18_5"
	],
	"dst_reg_18_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3",
	[
		"dst_reg_18_4",
		"dst_reg_18_5"
	],
	"dst_reg_18_6",
	"dst_reg_18_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3",
	[
		"dst_reg_18_4",
		"dst_reg_18_5"
	],
	"dst_reg_18_6",
	"dst_reg_18_7",
	"dst_reg_18_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3",
	[
		"dst_reg_18_4",
		"dst_reg_18_5"
	],
	"dst_reg_18_6",
	"dst_reg_18_7",
	"dst_reg_18_8",
	"dst_reg_18_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3",
	[
		"dst_reg_18_4",
		"dst_reg_18_5"
	],
	"dst_reg_18_6",
	"dst_reg_18_7",
	"dst_reg_18_8",
	"dst_reg_18_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3",
	[
		"dst_reg_18_4",
		"dst_reg_18_5"
	],
	"dst_reg_18_6",
	"dst_reg_18_7",
	"dst_reg_18_8",
	"dst_reg_18_9",
	"",
	"",
	"dst_reg_18_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3",
	[
		"dst_reg_18_4",
		"dst_reg_18_5"
	],
	"dst_reg_18_6",
	"dst_reg_18_7",
	"dst_reg_18_8",
	"dst_reg_18_9",
	"",
	"",
	"dst_reg_18_10",
	"dst_reg_18_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_18_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_0",
	[
		""
	],
	"dst_reg_18_1",
	"dst_reg_18_2",
	"dst_reg_18_3",
	[
		"dst_reg_18_4",
		"dst_reg_18_5"
	],
	"dst_reg_18_6",
	"dst_reg_18_7",
	"dst_reg_18_8",
	"dst_reg_18_9",
	"",
	"",
	"dst_reg_18_10",
	"dst_reg_18_11",
	"dst_reg_18_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_18_14 ] [ ] [ src_reg_18_15 ] [ src_reg_18_16 ] [ src_reg_18_17 ] [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] [ src_reg_18_20 ] [ src_reg_18_21 ] [ src_reg_18_22 ] [ src_reg_18_23 ] [ ] [ src_reg_18_24 ] [ src_reg_18_25 ] [ src_reg_18_26 ] [ src_reg_18_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_18_18 ] [ src_reg_18_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_18_18 ] [ src_reg_18_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_18",
	"src_reg_18_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17",
	[
		"src_reg_18_18",
		"src_reg_18_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17",
	[
		"src_reg_18_18",
		"src_reg_18_19"
	],
	"src_reg_18_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17",
	[
		"src_reg_18_18",
		"src_reg_18_19"
	],
	"src_reg_18_20",
	"src_reg_18_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17",
	[
		"src_reg_18_18",
		"src_reg_18_19"
	],
	"src_reg_18_20",
	"src_reg_18_21",
	"src_reg_18_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17",
	[
		"src_reg_18_18",
		"src_reg_18_19"
	],
	"src_reg_18_20",
	"src_reg_18_21",
	"src_reg_18_22",
	"src_reg_18_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17",
	[
		"src_reg_18_18",
		"src_reg_18_19"
	],
	"src_reg_18_20",
	"src_reg_18_21",
	"src_reg_18_22",
	"src_reg_18_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17",
	[
		"src_reg_18_18",
		"src_reg_18_19"
	],
	"src_reg_18_20",
	"src_reg_18_21",
	"src_reg_18_22",
	"src_reg_18_23",
	"",
	"",
	"src_reg_18_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17",
	[
		"src_reg_18_18",
		"src_reg_18_19"
	],
	"src_reg_18_20",
	"src_reg_18_21",
	"src_reg_18_22",
	"src_reg_18_23",
	"",
	"",
	"src_reg_18_24",
	"src_reg_18_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_18_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_14",
	[
		""
	],
	"src_reg_18_15",
	"src_reg_18_16",
	"src_reg_18_17",
	[
		"src_reg_18_18",
		"src_reg_18_19"
	],
	"src_reg_18_20",
	"src_reg_18_21",
	"src_reg_18_22",
	"src_reg_18_23",
	"",
	"",
	"src_reg_18_24",
	"src_reg_18_25",
	"src_reg_18_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_18_372 ] [ ] [ src_reg_18_373 ] [ src_reg_18_374 ] [ src_reg_18_375 ] [ [ src_reg_18_376 ] [ src_reg_18_377 ] ] [ src_reg_18_378 ] [ src_reg_18_379 ] [ src_reg_18_380 ] [ src_reg_18_381 ] [ ] [ src_reg_18_382 ] [ src_reg_18_383 ] [ src_reg_18_384 ] [ src_reg_18_385 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_18_372 ] [ ] [ src_reg_18_373 ] [ src_reg_18_374 ] [ src_reg_18_375 ] [ [ src_reg_18_376 ] [ src_reg_18_377 ] ] [ src_reg_18_378 ] [ src_reg_18_379 ] [ src_reg_18_380 ] [ src_reg_18_381 ] [ ] [ src_reg_18_382 ] [ src_reg_18_383 ] [ src_reg_18_384 ] [ src_reg_18_385 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_372 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_373 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_374 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_375 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_18_376 ] [ src_reg_18_377 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_18_376 ] [ src_reg_18_377 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_376 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_376"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_377 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_376",
	"src_reg_18_377"
]

[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375",
	[
		"src_reg_18_376",
		"src_reg_18_377"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_378 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375",
	[
		"src_reg_18_376",
		"src_reg_18_377"
	],
	"src_reg_18_378"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_379 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375",
	[
		"src_reg_18_376",
		"src_reg_18_377"
	],
	"src_reg_18_378",
	"src_reg_18_379"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_380 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375",
	[
		"src_reg_18_376",
		"src_reg_18_377"
	],
	"src_reg_18_378",
	"src_reg_18_379",
	"src_reg_18_380"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_18_381 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375",
	[
		"src_reg_18_376",
		"src_reg_18_377"
	],
	"src_reg_18_378",
	"src_reg_18_379",
	"src_reg_18_380",
	"src_reg_18_381"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375",
	[
		"src_reg_18_376",
		"src_reg_18_377"
	],
	"src_reg_18_378",
	"src_reg_18_379",
	"src_reg_18_380",
	"src_reg_18_381",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_382 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375",
	[
		"src_reg_18_376",
		"src_reg_18_377"
	],
	"src_reg_18_378",
	"src_reg_18_379",
	"src_reg_18_380",
	"src_reg_18_381",
	"",
	"",
	"src_reg_18_382"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_18_383 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375",
	[
		"src_reg_18_376",
		"src_reg_18_377"
	],
	"src_reg_18_378",
	"src_reg_18_379",
	"src_reg_18_380",
	"src_reg_18_381",
	"",
	"",
	"src_reg_18_382",
	"src_reg_18_383"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_18_384 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_18_372",
	[
		""
	],
	"src_reg_18_373",
	"src_reg_18_374",
	"src_reg_18_375",
	[
		"src_reg_18_376",
		"src_reg_18_377"
	],
	"src_reg_18_378",
	"src_reg_18_379",
	"src_reg_18_380",
	"src_reg_18_381",
	"",
	"",
	"src_reg_18_382",
	"src_reg_18_383",
	"src_reg_18_384"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_18_358 ] [ ] [ dst_reg_18_359 ] [ dst_reg_18_360 ] [ dst_reg_18_361 ] [ [ dst_reg_18_362 ] [ dst_reg_18_363 ] ] [ dst_reg_18_364 ] [ dst_reg_18_365 ] [ dst_reg_18_366 ] [ dst_reg_18_367 ] [ ] [ dst_reg_18_368 ] [ dst_reg_18_369 ] [ dst_reg_18_370 ] [ dst_reg_18_371 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_18_358 ] [ ] [ dst_reg_18_359 ] [ dst_reg_18_360 ] [ dst_reg_18_361 ] [ [ dst_reg_18_362 ] [ dst_reg_18_363 ] ] [ dst_reg_18_364 ] [ dst_reg_18_365 ] [ dst_reg_18_366 ] [ dst_reg_18_367 ] [ ] [ dst_reg_18_368 ] [ dst_reg_18_369 ] [ dst_reg_18_370 ] [ dst_reg_18_371 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_358 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_359 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_360 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_361 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_18_362 ] [ dst_reg_18_363 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_18_362 ] [ dst_reg_18_363 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_362 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_362"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_363 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_362",
	"dst_reg_18_363"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361",
	[
		"dst_reg_18_362",
		"dst_reg_18_363"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_364 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361",
	[
		"dst_reg_18_362",
		"dst_reg_18_363"
	],
	"dst_reg_18_364"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_365 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361",
	[
		"dst_reg_18_362",
		"dst_reg_18_363"
	],
	"dst_reg_18_364",
	"dst_reg_18_365"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_366 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361",
	[
		"dst_reg_18_362",
		"dst_reg_18_363"
	],
	"dst_reg_18_364",
	"dst_reg_18_365",
	"dst_reg_18_366"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_18_367 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361",
	[
		"dst_reg_18_362",
		"dst_reg_18_363"
	],
	"dst_reg_18_364",
	"dst_reg_18_365",
	"dst_reg_18_366",
	"dst_reg_18_367"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361",
	[
		"dst_reg_18_362",
		"dst_reg_18_363"
	],
	"dst_reg_18_364",
	"dst_reg_18_365",
	"dst_reg_18_366",
	"dst_reg_18_367",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_368 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361",
	[
		"dst_reg_18_362",
		"dst_reg_18_363"
	],
	"dst_reg_18_364",
	"dst_reg_18_365",
	"dst_reg_18_366",
	"dst_reg_18_367",
	"",
	"",
	"dst_reg_18_368"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_18_369 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361",
	[
		"dst_reg_18_362",
		"dst_reg_18_363"
	],
	"dst_reg_18_364",
	"dst_reg_18_365",
	"dst_reg_18_366",
	"dst_reg_18_367",
	"",
	"",
	"dst_reg_18_368",
	"dst_reg_18_369"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_18_370 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_18_358",
	[
		""
	],
	"dst_reg_18_359",
	"dst_reg_18_360",
	"dst_reg_18_361",
	[
		"dst_reg_18_362",
		"dst_reg_18_363"
	],
	"dst_reg_18_364",
	"dst_reg_18_365",
	"dst_reg_18_366",
	"dst_reg_18_367",
	"",
	"",
	"dst_reg_18_368",
	"dst_reg_18_369",
	"dst_reg_18_370"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_LSH_32
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_18_0",
      [ "" ],
      "dst_reg_18_1",
      "dst_reg_18_2",
      "dst_reg_18_3",
      [ "dst_reg_18_4", "dst_reg_18_5" ],
      "dst_reg_18_6",
      "dst_reg_18_7",
      "dst_reg_18_8",
      "dst_reg_18_9",
      "",
      "",
      "dst_reg_18_10",
      "dst_reg_18_11",
      "dst_reg_18_12"
   ],
   "src_reg" : [
      "src_reg_18_14",
      [ "" ],
      "src_reg_18_15",
      "src_reg_18_16",
      "src_reg_18_17",
      [ "src_reg_18_18", "src_reg_18_19" ],
      "src_reg_18_20",
      "src_reg_18_21",
      "src_reg_18_22",
      "src_reg_18_23",
      "",
      "",
      "src_reg_18_24",
      "src_reg_18_25",
      "src_reg_18_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_18_358",
      [ "" ],
      "dst_reg_18_359",
      "dst_reg_18_360",
      "dst_reg_18_361",
      [ "dst_reg_18_362", "dst_reg_18_363" ],
      "dst_reg_18_364",
      "dst_reg_18_365",
      "dst_reg_18_366",
      "dst_reg_18_367",
      "",
      "",
      "dst_reg_18_368",
      "dst_reg_18_369",
      "dst_reg_18_370"
   ],
   "src_reg" : [
      "src_reg_18_372",
      [ "" ],
      "src_reg_18_373",
      "src_reg_18_374",
      "src_reg_18_375",
      [ "src_reg_18_376", "src_reg_18_377" ],
      "src_reg_18_378",
      "src_reg_18_379",
      "src_reg_18_380",
      "src_reg_18_381",
      "",
      "",
      "src_reg_18_382",
      "src_reg_18_383",
      "src_reg_18_384"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun cmp248.not.i_18_116 () (_ BitVec 1))
(declare-fun storemerge.i20.i_18_94 () (_ BitVec 64))
(declare-fun cmp.i.i_18_43 () (_ BitVec 1))
(declare-fun tobool.not.i.i_18_96 () (_ BitVec 1))
(declare-fun cmp18.not.i.not_18_97 () (_ BitVec 1))
(declare-fun cmp24.old.i_18_98 () (_ BitVec 1))
(declare-fun cmp256.i_18_127 () (_ BitVec 1))
(declare-fun shl.i_18_126 () (_ BitVec 64))
(declare-fun storemerge.i.i_18_79 () (_ BitVec 64))
(declare-fun shl265.i_18_130 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0_18_92 () (_ BitVec 64))
(declare-fun i27.i.i_18_81 () (_ BitVec 64))
(declare-fun shl263.i_18_129 () (_ BitVec 64))
(declare-fun add.i.i.i335.i_18_306 () (_ BitVec 32))
(declare-fun phi.bo_18_308 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_18_305 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_18_302 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_18_304 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_18_301 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_18_294 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_18_298 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_18_296 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_18_293 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_18_300 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_18_286 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_18_290 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_18_288 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_18_285 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_18_292 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_18_278 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_18_282 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_18_280 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_18_277 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_18_284 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_18_270 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_18_274 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_18_272 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_18_267 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_18_276 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_18_264 () (_ BitVec 1))
(declare-fun xor.i.i.i_18_260 () (_ BitVec 64))
(declare-fun shl.i.i.i.i.i_18_266 () (_ BitVec 64))
(declare-fun cmp.i311.i_18_221 () (_ BitVec 1))
(declare-fun cmp.i.i.i.i_18_262 () (_ BitVec 1))
(declare-fun if.then258.i_if.end266.i_18_160 () Bool)
(declare-fun if.else261.i_if.end266.i_18_159 () Bool)
(declare-fun dst_reg_18_144 () (_ BitVec 8))
(declare-fun dst_reg_18_62 () (_ BitVec 8))
(declare-fun dst_reg_18_143 () (_ BitVec 32))
(declare-fun dst_reg_18_61 () (_ BitVec 32))
(declare-fun dst_reg_18_142 () (_ BitVec 32))
(declare-fun dst_reg_18_60 () (_ BitVec 32))
(declare-fun dst_reg_18_141 () (_ BitVec 32))
(declare-fun dst_reg_18_59 () (_ BitVec 32))
(declare-fun dst_reg_18_140 () (_ BitVec 64))
(declare-fun dst_reg_18_139 () (_ BitVec 64))
(declare-fun dst_reg_18_138 () (_ BitVec 64))
(declare-fun dst_reg_18_137 () (_ BitVec 64))
(declare-fun dst_reg_18_136 () (_ BitVec 64))
(declare-fun dst_reg_18_54 () (_ BitVec 64))
(declare-fun dst_reg_18_135 () (_ BitVec 64))
(declare-fun dst_reg_18_53 () (_ BitVec 64))
(declare-fun dst_reg_18_134 () (_ BitVec 32))
(declare-fun dst_reg_18_52 () (_ BitVec 32))
(declare-fun dst_reg_18_133 () (_ BitVec 32))
(declare-fun dst_reg_18_51 () (_ BitVec 32))
(declare-fun dst_reg_18_132 () (_ BitVec 32))
(declare-fun dst_reg_18_50 () (_ BitVec 32))
(declare-fun dst_reg_18_131 () (_ BitVec 32))
(declare-fun dst_reg_18_49 () (_ BitVec 32))
(declare-fun src_reg_18_158 () (_ BitVec 8))
(declare-fun src_reg_18_76 () (_ BitVec 8))
(declare-fun src_reg_18_157 () (_ BitVec 32))
(declare-fun src_reg_18_75 () (_ BitVec 32))
(declare-fun src_reg_18_156 () (_ BitVec 32))
(declare-fun src_reg_18_74 () (_ BitVec 32))
(declare-fun src_reg_18_155 () (_ BitVec 32))
(declare-fun src_reg_18_73 () (_ BitVec 32))
(declare-fun src_reg_18_154 () (_ BitVec 64))
(declare-fun src_reg_18_72 () (_ BitVec 64))
(declare-fun src_reg_18_153 () (_ BitVec 64))
(declare-fun src_reg_18_71 () (_ BitVec 64))
(declare-fun src_reg_18_152 () (_ BitVec 64))
(declare-fun src_reg_18_70 () (_ BitVec 64))
(declare-fun src_reg_18_151 () (_ BitVec 64))
(declare-fun src_reg_18_69 () (_ BitVec 64))
(declare-fun src_reg_18_150 () (_ BitVec 64))
(declare-fun src_reg_18_68 () (_ BitVec 64))
(declare-fun src_reg_18_149 () (_ BitVec 64))
(declare-fun src_reg_18_67 () (_ BitVec 64))
(declare-fun src_reg_18_148 () (_ BitVec 32))
(declare-fun src_reg_18_66 () (_ BitVec 32))
(declare-fun src_reg_18_147 () (_ BitVec 32))
(declare-fun src_reg_18_65 () (_ BitVec 32))
(declare-fun src_reg_18_146 () (_ BitVec 32))
(declare-fun src_reg_18_64 () (_ BitVec 32))
(declare-fun src_reg_18_145 () (_ BitVec 32))
(declare-fun src_reg_18_63 () (_ BitVec 32))
(declare-fun or29.i215.i_18_176 () (_ BitVec 64))
(declare-fun cond35.i217.i_18_178 () (_ BitVec 64))
(declare-fun storemerge.i_18_161 () (_ BitVec 64))
(declare-fun cmp31.i216.i_18_177 () (_ BitVec 1))
(declare-fun shl.i.i_18_165 () (_ BitVec 64))
(declare-fun shl5.i.i_18_166 () (_ BitVec 64))
(declare-fun cond23.i212.i_18_175 () (_ BitVec 64))
(declare-fun i26.i210.i_18_173 () (_ BitVec 64))
(declare-fun cmp19.i211.i_18_174 () (_ BitVec 1))
(declare-fun and7.i205.i_18_171 () (_ BitVec 64))
(declare-fun or8.i206.i_18_172 () (_ BitVec 64))
(declare-fun and.i199.i_18_168 () (_ BitVec 64))
(declare-fun or.i200.i_18_169 () (_ BitVec 64))
(declare-fun sh_prom.i.i_18_164 () (_ BitVec 64))
(declare-fun and6.i.i.i_18_38 () (_ BitVec 64))
(declare-fun and.i.i.i_18_36 () (_ BitVec 64))
(declare-fun if.end266.i_if.then308.i_18_208 () Bool)
(declare-fun if.then250.i_if.then308.i_18_207 () Bool)
(declare-fun dst_reg_18_192 () (_ BitVec 8))
(declare-fun dst_reg_18_191 () (_ BitVec 32))
(declare-fun dst_reg_18_190 () (_ BitVec 32))
(declare-fun dst_reg_18_189 () (_ BitVec 32))
(declare-fun dst_reg_18_188 () (_ BitVec 64))
(declare-fun dst_reg_18_187 () (_ BitVec 64))
(declare-fun dst_reg_18_186 () (_ BitVec 64))
(declare-fun dst_reg_18_185 () (_ BitVec 64))
(declare-fun dst_reg_18_184 () (_ BitVec 64))
(declare-fun dst_reg_18_183 () (_ BitVec 64))
(declare-fun dst_reg_18_182 () (_ BitVec 32))
(declare-fun dst_reg_18_181 () (_ BitVec 32))
(declare-fun dst_reg_18_180 () (_ BitVec 32))
(declare-fun dst_reg_18_179 () (_ BitVec 32))
(declare-fun src_reg_18_206 () (_ BitVec 8))
(declare-fun src_reg_18_205 () (_ BitVec 32))
(declare-fun src_reg_18_204 () (_ BitVec 32))
(declare-fun src_reg_18_203 () (_ BitVec 32))
(declare-fun src_reg_18_202 () (_ BitVec 64))
(declare-fun src_reg_18_201 () (_ BitVec 64))
(declare-fun src_reg_18_200 () (_ BitVec 64))
(declare-fun src_reg_18_199 () (_ BitVec 64))
(declare-fun src_reg_18_198 () (_ BitVec 64))
(declare-fun src_reg_18_197 () (_ BitVec 64))
(declare-fun src_reg_18_196 () (_ BitVec 32))
(declare-fun src_reg_18_195 () (_ BitVec 32))
(declare-fun src_reg_18_194 () (_ BitVec 32))
(declare-fun src_reg_18_193 () (_ BitVec 32))
(declare-fun i25.i309.i_18_219 () (_ BitVec 64))
(declare-fun i23.i306.i_18_217 () (_ BitVec 64))
(declare-fun i24.i308.i_18_218 () (_ BitVec 64))
(declare-fun storemerge_18_209 () (_ BitVec 64))
(declare-fun i20.i300.i_18_212 () (_ BitVec 64))
(declare-fun and6.i.i302.i_18_216 () (_ BitVec 64))
(declare-fun i18.i298.i_18_211 () (_ BitVec 64))
(declare-fun and.i.i301.i_18_214 () (_ BitVec 64))
(declare-fun i25.i.i_18_41 () (_ BitVec 64))
(declare-fun i23.i.i_18_39 () (_ BitVec 64))
(declare-fun i24.i.i_18_40 () (_ BitVec 64))
(declare-fun dst_reg_18_9 () (_ BitVec 64))
(declare-fun dst_reg_18_8 () (_ BitVec 64))
(declare-fun i20.i.i_18_34 () (_ BitVec 64))
(declare-fun i18.i.i_18_33 () (_ BitVec 64))
(declare-fun dst_reg_18_5 () (_ BitVec 64))
(declare-fun dst_reg_18_4 () (_ BitVec 64))
(declare-fun src_reg1.sroa.22.0.copyload_18_32 () (_ BitVec 64))
(declare-fun src_reg_18_23 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_18_31 () (_ BitVec 64))
(declare-fun src_reg_18_22 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_18_30 () (_ BitVec 64))
(declare-fun src_reg_18_19 () (_ BitVec 64))
(declare-fun src_reg_18_27 () (_ BitVec 8))
(declare-fun src_reg_18_26 () (_ BitVec 32))
(declare-fun src_reg_18_25 () (_ BitVec 32))
(declare-fun src_reg_18_24 () (_ BitVec 32))
(declare-fun src_reg_18_21 () (_ BitVec 64))
(declare-fun src_reg_18_20 () (_ BitVec 64))
(declare-fun src_reg_18_18 () (_ BitVec 64))
(declare-fun src_reg_18_17 () (_ BitVec 32))
(declare-fun src_reg_18_16 () (_ BitVec 32))
(declare-fun src_reg_18_15 () (_ BitVec 32))
(declare-fun src_reg_18_14 () (_ BitVec 32))
(declare-fun dst_reg_18_13 () (_ BitVec 8))
(declare-fun dst_reg_18_12 () (_ BitVec 32))
(declare-fun dst_reg_18_11 () (_ BitVec 32))
(declare-fun dst_reg_18_10 () (_ BitVec 32))
(declare-fun dst_reg_18_7 () (_ BitVec 64))
(declare-fun dst_reg_18_6 () (_ BitVec 64))
(declare-fun dst_reg_18_3 () (_ BitVec 32))
(declare-fun dst_reg_18_2 () (_ BitVec 32))
(declare-fun dst_reg_18_1 () (_ BitVec 32))
(declare-fun dst_reg_18_0 () (_ BitVec 32))
(declare-fun src_reg_18_385 () (_ BitVec 8))
(declare-fun src_reg_18_357 () (_ BitVec 8))
(declare-fun src_reg_18_384 () (_ BitVec 32))
(declare-fun src_reg_18_356 () (_ BitVec 32))
(declare-fun src_reg_18_383 () (_ BitVec 32))
(declare-fun src_reg_18_355 () (_ BitVec 32))
(declare-fun src_reg_18_382 () (_ BitVec 32))
(declare-fun src_reg_18_354 () (_ BitVec 32))
(declare-fun src_reg_18_381 () (_ BitVec 64))
(declare-fun src_reg_18_353 () (_ BitVec 64))
(declare-fun src_reg_18_380 () (_ BitVec 64))
(declare-fun src_reg_18_352 () (_ BitVec 64))
(declare-fun src_reg_18_379 () (_ BitVec 64))
(declare-fun src_reg_18_351 () (_ BitVec 64))
(declare-fun src_reg_18_378 () (_ BitVec 64))
(declare-fun src_reg_18_350 () (_ BitVec 64))
(declare-fun src_reg_18_377 () (_ BitVec 64))
(declare-fun src_reg_18_349 () (_ BitVec 64))
(declare-fun src_reg_18_376 () (_ BitVec 64))
(declare-fun src_reg_18_348 () (_ BitVec 64))
(declare-fun src_reg_18_375 () (_ BitVec 32))
(declare-fun src_reg_18_347 () (_ BitVec 32))
(declare-fun src_reg_18_374 () (_ BitVec 32))
(declare-fun src_reg_18_346 () (_ BitVec 32))
(declare-fun src_reg_18_373 () (_ BitVec 32))
(declare-fun src_reg_18_345 () (_ BitVec 32))
(declare-fun src_reg_18_372 () (_ BitVec 32))
(declare-fun src_reg_18_344 () (_ BitVec 32))
(declare-fun dst_reg_18_371 () (_ BitVec 8))
(declare-fun dst_reg_18_343 () (_ BitVec 8))
(declare-fun dst_reg_18_370 () (_ BitVec 32))
(declare-fun dst_reg_18_342 () (_ BitVec 32))
(declare-fun dst_reg_18_369 () (_ BitVec 32))
(declare-fun dst_reg_18_341 () (_ BitVec 32))
(declare-fun dst_reg_18_368 () (_ BitVec 32))
(declare-fun dst_reg_18_340 () (_ BitVec 32))
(declare-fun dst_reg_18_367 () (_ BitVec 64))
(declare-fun dst_reg_18_339 () (_ BitVec 64))
(declare-fun dst_reg_18_366 () (_ BitVec 64))
(declare-fun dst_reg_18_338 () (_ BitVec 64))
(declare-fun dst_reg_18_365 () (_ BitVec 64))
(declare-fun dst_reg_18_337 () (_ BitVec 64))
(declare-fun dst_reg_18_364 () (_ BitVec 64))
(declare-fun dst_reg_18_336 () (_ BitVec 64))
(declare-fun dst_reg_18_363 () (_ BitVec 64))
(declare-fun dst_reg_18_335 () (_ BitVec 64))
(declare-fun dst_reg_18_362 () (_ BitVec 64))
(declare-fun dst_reg_18_334 () (_ BitVec 64))
(declare-fun dst_reg_18_361 () (_ BitVec 32))
(declare-fun dst_reg_18_333 () (_ BitVec 32))
(declare-fun dst_reg_18_360 () (_ BitVec 32))
(declare-fun dst_reg_18_332 () (_ BitVec 32))
(declare-fun dst_reg_18_359 () (_ BitVec 32))
(declare-fun dst_reg_18_331 () (_ BitVec 32))
(declare-fun dst_reg_18_358 () (_ BitVec 32))
(declare-fun dst_reg_18_330 () (_ BitVec 32))
(declare-fun dst_reg_18_240 () (_ BitVec 8))
(declare-fun dst_reg_18_239 () (_ BitVec 32))
(declare-fun dst_reg_18_238 () (_ BitVec 32))
(declare-fun dst_reg_18_237 () (_ BitVec 32))
(declare-fun storemerge.i316.i_18_257 () (_ BitVec 64))
(declare-fun dst_reg_18_235 () (_ BitVec 64))
(declare-fun i27.i317.i_18_259 () (_ BitVec 64))
(declare-fun and.i1.i.i_18_326 () (_ BitVec 64))
(declare-fun and4.i.i.i_18_329 () (_ BitVec 64))
(declare-fun dst_reg_18_230 () (_ BitVec 32))
(declare-fun dst_reg_18_229 () (_ BitVec 32))
(declare-fun dst_reg_18_228 () (_ BitVec 32))
(declare-fun dst_reg_18_227 () (_ BitVec 32))
(declare-fun src_reg_18_254 () (_ BitVec 8))
(declare-fun src_reg_18_253 () (_ BitVec 32))
(declare-fun src_reg_18_252 () (_ BitVec 32))
(declare-fun src_reg_18_251 () (_ BitVec 32))
(declare-fun src_reg_18_250 () (_ BitVec 64))
(declare-fun src_reg_18_249 () (_ BitVec 64))
(declare-fun src_reg_18_248 () (_ BitVec 64))
(declare-fun src_reg_18_247 () (_ BitVec 64))
(declare-fun src_reg_18_246 () (_ BitVec 64))
(declare-fun src_reg_18_245 () (_ BitVec 64))
(declare-fun src_reg_18_244 () (_ BitVec 32))
(declare-fun src_reg_18_243 () (_ BitVec 32))
(declare-fun src_reg_18_242 () (_ BitVec 32))
(declare-fun src_reg_18_241 () (_ BitVec 32))
(declare-fun if.then.i.i_coerce_reg_to_size.exit.i_18_78 () Bool)
(declare-fun if.else.i.i_coerce_reg_to_size.exit.i_18_77 () Bool)
(declare-fun dst_reg_18_58 () (_ BitVec 64))
(declare-fun dst_reg_18_57 () (_ BitVec 64))
(declare-fun dst_reg_18_56 () (_ BitVec 64))
(declare-fun dst_reg_18_55 () (_ BitVec 64))
(declare-fun and6.i.i_18_45 () (_ BitVec 64))
(declare-fun and6.i.i6.i_18_83 () (_ BitVec 64))
(declare-fun and8.i17.i_18_90 () (_ BitVec 64))
(declare-fun cmp.i15.i_18_86 () (_ BitVec 1))
(declare-fun and6.i16.i_18_88 () (_ BitVec 64))
(declare-fun i25.i13.i_18_84 () (_ BitVec 64))
(declare-fun and8.i.i_18_47 () (_ BitVec 64))
(declare-fun and8.i313.i_18_225 () (_ BitVec 64))
(declare-fun and6.i312.i_18_223 () (_ BitVec 64))
(declare-fun if.then.i314.i_coerce_reg_to_size.exit320.i_18_256 () Bool)
(declare-fun if.else.i315.i_coerce_reg_to_size.exit320.i_18_255 () Bool)
(declare-fun dst_reg_18_236 () (_ BitVec 64))
(declare-fun dst_reg_18_234 () (_ BitVec 64))
(declare-fun dst_reg_18_233 () (_ BitVec 64))
(declare-fun dst_reg_18_232 () (_ BitVec 64))
(declare-fun dst_reg_18_231 () (_ BitVec 64))
(declare-fun coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_18_309 () Bool)
(declare-fun neg.i.i.i_18_328 () (_ BitVec 64))
(declare-fun or.i.i.i_18_325 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_18_324 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_18_322 () (_ BitVec 64))
(declare-fun sub.i.i.i_18_319 () (_ BitVec 64))
(declare-fun cmp.i.i.i_18_314 () (_ BitVec 1))
(declare-fun and.i.i336.i_18_320 () (_ BitVec 64))
(declare-fun notmask.i.i.i_18_317 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_18_315 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_18_311 () (_ BitVec 32))
(assert
 (let (($x214 (= cmp248.not.i_18_116 (_ bv0 1))))
 (let (($x215 (= cmp248.not.i_18_116 (_ bv1 1))))
 (let (($x216 (ite (bvult storemerge.i20.i_18_94 (_ bv32 64)) $x215 $x214)))
 (let (($x92 (= cmp.i.i_18_43 (_ bv1 1))))
 (let (($x90 (= cmp.i.i_18_43 (_ bv0 1))))
 (let (($x781 (or $x90 $x92)))
 (let (($x195 (= tobool.not.i.i_18_96 (_ bv1 1))))
 (let (($x782 (and $x195 $x781)))
 (let (($x200 (= cmp18.not.i.not_18_97 (_ bv1 1))))
 (let (($x784 (and $x200 $x782)))
 (let (($x194 (= tobool.not.i.i_18_96 (_ bv0 1))))
 (let (($x783 (and $x194 $x781)))
 (let (($x204 (= cmp24.old.i_18_98 (_ bv0 1))))
 (let (($x787 (and $x204 $x783)))
 (let (($x789 (or $x787 $x784)))
 (let (($x790 (and $x195 $x789)))
 (let (($x920 (=> $x790 (and $x216))))
 (let (($x222 (= cmp256.i_18_127 (_ bv0 1))))
 (let (($x223 (= cmp256.i_18_127 (_ bv1 1))))
 (let (($x224 (ite (bvugt storemerge.i.i_18_79 shl.i_18_126) $x223 $x222)))
 (let (($x219 (= shl.i_18_126 (bvlshr (_ bv9223372036854775808 64) storemerge.i20.i_18_94))))
 (let (($x793 (and $x215 $x790)))
 (let (($x918 (=> $x793 (and $x219 $x224))))
 (let (($x230 (= shl265.i_18_130 (bvshl storemerge.i.i_18_79 storemerge.i20.i_18_94))))
 (let (($x227 (= shl263.i_18_129 (bvshl i27.i.i_18_81 src_reg1.sroa.17.0_18_92))))
 (let (($x915 (and $x227 $x230)))
 (let (($x796 (and $x222 $x793)))
 (let (($x916 (=> $x796 $x915)))
 (let (($x652 (= phi.bo_18_308 (bvand add.i.i.i335.i_18_306 (_ bv255 32)))))
 (let (($x648 (= add.i.i.i335.i_18_306 (bvadd num.4.i.i.i.i.i_18_302 i.i.i.i.i.i.neg_18_305))))
 (let (($x645 (= i.i.i.i.i.i.neg_18_305 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_18_304))))
 (let (($x642 (= word.addr.4.lobit.i.i.i.i.i.neg_18_304 (bvlshr word.addr.4.i.i.i.i.i_18_301 (_ bv63 64)))))
 (let (($x621 (= tobool20.not.i.i.i.i.i_18_296 (_ bv1 1))))
 (let (($x638 (ite $x621 (= num.4.i.i.i.i.i_18_302 sub22.i.i.i.i.i_18_298) (= num.4.i.i.i.i.i_18_302 num.3.i.i.i.i.i_18_294))))
 (let (($x634 (ite $x621 (= word.addr.4.i.i.i.i.i_18_301 shl23.i.i.i.i.i_18_300) (= word.addr.4.i.i.i.i.i_18_301 word.addr.3.i.i.i.i.i_18_293))))
 (let (($x630 (= shl23.i.i.i.i.i_18_300 (bvshl word.addr.3.i.i.i.i.i_18_293 (_ bv2 64)))))
 (let (($x626 (= sub22.i.i.i.i.i_18_298 (bvadd num.3.i.i.i.i.i_18_294 (_ bv254 32)))))
 (let (($x620 (= tobool20.not.i.i.i.i.i_18_296 (_ bv0 1))))
 (let (($x622 (ite (bvult word.addr.3.i.i.i.i.i_18_293 (_ bv4611686018427387904 64)) $x621 $x620)))
 (let (($x599 (= tobool14.not.i.i.i.i.i_18_288 (_ bv1 1))))
 (let (($x616 (ite $x599 (= num.3.i.i.i.i.i_18_294 sub16.i.i.i.i.i_18_290) (= num.3.i.i.i.i.i_18_294 num.2.i.i.i.i.i_18_286))))
 (let (($x612 (ite $x599 (= word.addr.3.i.i.i.i.i_18_293 shl17.i.i.i.i.i_18_292) (= word.addr.3.i.i.i.i.i_18_293 word.addr.2.i.i.i.i.i_18_285))))
 (let (($x608 (= shl17.i.i.i.i.i_18_292 (bvshl word.addr.2.i.i.i.i.i_18_285 (_ bv4 64)))))
 (let (($x604 (= sub16.i.i.i.i.i_18_290 (bvadd num.2.i.i.i.i.i_18_286 (_ bv4294967292 32)))))
 (let (($x598 (= tobool14.not.i.i.i.i.i_18_288 (_ bv0 1))))
 (let (($x600 (ite (bvult word.addr.2.i.i.i.i.i_18_285 (_ bv1152921504606846976 64)) $x599 $x598)))
 (let (($x577 (= tobool8.not.i.i.i.i.i_18_280 (_ bv1 1))))
 (let (($x594 (ite $x577 (= num.2.i.i.i.i.i_18_286 sub10.i.i.i.i.i_18_282) (= num.2.i.i.i.i.i_18_286 num.1.i.i.i.i.i_18_278))))
 (let (($x590 (ite $x577 (= word.addr.2.i.i.i.i.i_18_285 shl11.i.i.i.i.i_18_284) (= word.addr.2.i.i.i.i.i_18_285 word.addr.1.i.i.i.i.i_18_277))))
 (let (($x586 (= shl11.i.i.i.i.i_18_284 (bvshl word.addr.1.i.i.i.i.i_18_277 (_ bv8 64)))))
 (let (($x582 (= sub10.i.i.i.i.i_18_282 (bvadd num.1.i.i.i.i.i_18_278 (_ bv4294967288 32)))))
 (let (($x576 (= tobool8.not.i.i.i.i.i_18_280 (_ bv0 1))))
 (let (($x578 (ite (bvult word.addr.1.i.i.i.i.i_18_277 (_ bv72057594037927936 64)) $x577 $x576)))
 (let (($x555 (= tobool2.not.i.i.i.i.i_18_272 (_ bv1 1))))
 (let (($x572 (ite $x555 (= num.1.i.i.i.i.i_18_278 sub4.i.i.i.i.i_18_274) (= num.1.i.i.i.i.i_18_278 spec.select17.i.i.i.i.i_18_270))))
 (let (($x568 (ite $x555 (= word.addr.1.i.i.i.i.i_18_277 shl5.i.i.i.i.i_18_276) (= word.addr.1.i.i.i.i.i_18_277 spec.select.i.i.i.i.i_18_267))))
 (let (($x564 (= shl5.i.i.i.i.i_18_276 (bvshl spec.select.i.i.i.i.i_18_267 (_ bv16 64)))))
 (let (($x560 (= sub4.i.i.i.i.i_18_274 (bvadd spec.select17.i.i.i.i.i_18_270 (_ bv4294967280 32)))))
 (let (($x554 (= tobool2.not.i.i.i.i.i_18_272 (_ bv0 1))))
 (let (($x556 (ite (bvult spec.select.i.i.i.i.i_18_267 (_ bv281474976710656 64)) $x555 $x554)))
 (let (($x536 (= tobool.not.i.i.i.i.i_18_264 (_ bv1 1))))
 (let (($x550 (ite $x536 (= spec.select17.i.i.i.i.i_18_270 (_ bv31 32)) (= spec.select17.i.i.i.i.i_18_270 (_ bv63 32)))))
 (let (($x544 (ite $x536 (= spec.select.i.i.i.i.i_18_267 shl.i.i.i.i.i_18_266) (= spec.select.i.i.i.i.i_18_267 xor.i.i.i_18_260))))
 (let (($x540 (= shl.i.i.i.i.i_18_266 (bvshl xor.i.i.i_18_260 (_ bv32 64)))))
 (let (($x535 (= tobool.not.i.i.i.i.i_18_264 (_ bv0 1))))
 (let (($x537 (ite (bvult xor.i.i.i_18_260 (_ bv4294967296 64)) $x536 $x535)))
 (let (($x913 (and $x537 $x540 $x544 $x550 $x556 $x560 $x564 $x568 $x572 $x578 $x582 $x586 $x590 $x594 $x600 $x604 $x608 $x612 $x616 $x622 $x626 $x630 $x634 $x638 $x642 $x645 $x648 $x652)))
 (let (($x794 (and $x214 $x790)))
 (let (($x795 (and $x223 $x793)))
 (let (($x797 (or $x796 $x795)))
 (let (($x798 (or $x797 $x794)))
 (let (($x451 (= cmp.i311.i_18_221 (_ bv1 1))))
 (let (($x799 (and $x451 $x798)))
 (let (($x450 (= cmp.i311.i_18_221 (_ bv0 1))))
 (let (($x800 (and $x450 $x798)))
 (let (($x801 (or $x800 $x799)))
 (let (($x530 (= cmp.i.i.i.i_18_262 (_ bv0 1))))
 (let (($x803 (and $x530 $x801)))
 (let (($x914 (=> $x803 $x913)))
 (let (($x817 (= if.then258.i_if.end266.i_18_160 $x795)))
 (let (($x816 (= if.else261.i_if.end266.i_18_159 $x796)))
 (let (($x286 (= dst_reg_18_62 dst_reg_18_144)))
 (let (($x285 (= dst_reg_18_61 dst_reg_18_143)))
 (let (($x284 (= dst_reg_18_60 dst_reg_18_142)))
 (let (($x283 (= dst_reg_18_59 dst_reg_18_141)))
 (let (($x282 (= storemerge.i.i_18_79 dst_reg_18_140)))
 (let (($x287 (= shl263.i_18_129 dst_reg_18_139)))
 (let (($x280 (= (_ bv9223372036854775807 64) dst_reg_18_138)))
 (let (($x279 (= (_ bv9223372036854775808 64) dst_reg_18_137)))
 (let (($x278 (= dst_reg_18_54 dst_reg_18_136)))
 (let (($x277 (= dst_reg_18_53 dst_reg_18_135)))
 (let (($x276 (= dst_reg_18_52 dst_reg_18_134)))
 (let (($x275 (= dst_reg_18_51 dst_reg_18_133)))
 (let (($x274 (= dst_reg_18_50 dst_reg_18_132)))
 (let (($x273 (= dst_reg_18_49 dst_reg_18_131)))
 (let (($x272 (= src_reg_18_76 src_reg_18_158)))
 (let (($x271 (= src_reg_18_75 src_reg_18_157)))
 (let (($x270 (= src_reg_18_74 src_reg_18_156)))
 (let (($x269 (= src_reg_18_73 src_reg_18_155)))
 (let (($x268 (= src_reg_18_72 src_reg_18_154)))
 (let (($x267 (= src_reg_18_71 src_reg_18_153)))
 (let (($x266 (= src_reg_18_70 src_reg_18_152)))
 (let (($x265 (= src_reg_18_69 src_reg_18_151)))
 (let (($x264 (= src_reg_18_68 src_reg_18_150)))
 (let (($x263 (= src_reg_18_67 src_reg_18_149)))
 (let (($x262 (= src_reg_18_66 src_reg_18_148)))
 (let (($x261 (= src_reg_18_65 src_reg_18_147)))
 (let (($x260 (= src_reg_18_64 src_reg_18_146)))
 (let (($x259 (= src_reg_18_63 src_reg_18_145)))
 (let (($x814 (and $x259 $x260 $x261 $x262 $x263 $x264 $x265 $x266 $x267 $x268 $x269 $x270 $x271 $x272 $x273 $x274 $x275 $x276 $x277 $x278 $x279 $x280 $x287 $x282 $x283 $x284 $x285 $x286)))
 (let (($x815 (=> $x796 $x814)))
 (let (($x281 (= (_ bv0 64) dst_reg_18_139)))
 (let (($x812 (and $x259 $x260 $x261 $x262 $x263 $x264 $x265 $x266 $x267 $x268 $x269 $x270 $x271 $x272 $x273 $x274 $x275 $x276 $x277 $x278 $x279 $x280 $x281 $x282 $x283 $x284 $x285 $x286)))
 (let (($x813 (=> $x795 $x812)))
 (let (($x334 (= cmp31.i216.i_18_177 (_ bv1 1))))
 (let (($x339 (ite $x334 (= cond35.i217.i_18_178 storemerge.i_18_161) (= cond35.i217.i_18_178 or29.i215.i_18_176))))
 (let (($x333 (= cmp31.i216.i_18_177 (_ bv0 1))))
 (let (($x335 (ite (bvult storemerge.i_18_161 or29.i215.i_18_176) $x334 $x333)))
 (let (($x330 (= or29.i215.i_18_176 (bvor shl5.i.i_18_166 shl.i.i_18_165))))
 (let (($x322 (= cmp19.i211.i_18_174 (_ bv1 1))))
 (let (($x327 (ite $x322 (= cond23.i212.i_18_175 i26.i210.i_18_173) (= cond23.i212.i_18_175 shl.i.i_18_165))))
 (let (($x321 (= cmp19.i211.i_18_174 (_ bv0 1))))
 (let (($x323 (ite (bvugt i26.i210.i_18_173 shl.i.i_18_165) $x322 $x321)))
 (let (($x318 (= dst_reg_18_139 i26.i210.i_18_173)))
 (let (($x316 (= or8.i206.i_18_172 (bvor and7.i205.i_18_171 shl.i.i_18_165))))
 (let (($x313 (= and7.i205.i_18_171 (bvand shl5.i.i_18_166 (_ bv9223372036854775807 64)))))
 (let (($x310 (= or.i200.i_18_169 (bvor and.i199.i_18_168 shl.i.i_18_165))))
 (let (($x307 (= and.i199.i_18_168 (bvand shl5.i.i_18_166 (_ bv9223372036854775808 64)))))
 (let (($x304 (= shl5.i.i_18_166 (bvshl and6.i.i.i_18_38 sh_prom.i.i_18_164))))
 (let (($x301 (= shl.i.i_18_165 (bvshl and.i.i.i_18_36 sh_prom.i.i_18_164))))
 (let (($x298 (= sh_prom.i.i_18_164 (bvand src_reg1.sroa.17.0_18_92 (_ bv255 64)))))
 (let (($x293 (= storemerge.i_18_161 (_ bv18446744073709551615 64))))
 (let (($x294 (=> if.then258.i_if.end266.i_18_160 $x293)))
 (let (($x291 (= storemerge.i_18_161 shl265.i_18_130)))
 (let (($x292 (=> if.else261.i_if.end266.i_18_159 $x291)))
 (let (($x911 (and $x292 $x294 $x298 $x301 $x304 $x307 $x310 $x313 $x316 $x318 $x323 $x327 $x330 $x335 $x339 $x813 $x815 $x816 $x817)))
 (let (($x912 (=> $x797 $x911)))
 (let (($x823 (= if.end266.i_if.then308.i_18_208 $x797)))
 (let (($x822 (= if.then250.i_if.then308.i_18_207 $x794)))
 (let (($x423 (= dst_reg_18_62 dst_reg_18_192)))
 (let (($x422 (= dst_reg_18_61 dst_reg_18_191)))
 (let (($x421 (= dst_reg_18_60 dst_reg_18_190)))
 (let (($x420 (= dst_reg_18_59 dst_reg_18_189)))
 (let (($x419 (= storemerge.i.i_18_79 dst_reg_18_188)))
 (let (($x418 (= (_ bv0 64) dst_reg_18_187)))
 (let (($x417 (= (_ bv9223372036854775807 64) dst_reg_18_186)))
 (let (($x416 (= (_ bv9223372036854775808 64) dst_reg_18_185)))
 (let (($x415 (= (_ bv18446744073709551615 64) dst_reg_18_184)))
 (let (($x414 (= (_ bv0 64) dst_reg_18_183)))
 (let (($x413 (= dst_reg_18_52 dst_reg_18_182)))
 (let (($x412 (= dst_reg_18_51 dst_reg_18_181)))
 (let (($x411 (= dst_reg_18_50 dst_reg_18_180)))
 (let (($x410 (= (_ bv1 32) dst_reg_18_179)))
 (let (($x409 (= src_reg_18_76 src_reg_18_206)))
 (let (($x408 (= src_reg_18_75 src_reg_18_205)))
 (let (($x407 (= src_reg_18_74 src_reg_18_204)))
 (let (($x406 (= src_reg_18_73 src_reg_18_203)))
 (let (($x405 (= src_reg_18_72 src_reg_18_202)))
 (let (($x404 (= src_reg_18_71 src_reg_18_201)))
 (let (($x403 (= src_reg_18_70 src_reg_18_200)))
 (let (($x402 (= src_reg_18_69 src_reg_18_199)))
 (let (($x401 (= src_reg_18_68 src_reg_18_198)))
 (let (($x400 (= src_reg_18_67 src_reg_18_197)))
 (let (($x399 (= src_reg_18_66 src_reg_18_196)))
 (let (($x398 (= src_reg_18_65 src_reg_18_195)))
 (let (($x397 (= src_reg_18_64 src_reg_18_194)))
 (let (($x396 (= src_reg_18_63 src_reg_18_193)))
 (let (($x820 (and $x396 $x397 $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x417 $x418 $x419 $x420 $x421 $x422 $x423)))
 (let (($x821 (=> $x794 $x820)))
 (let (($x395 (= dst_reg_18_144 dst_reg_18_192)))
 (let (($x394 (= dst_reg_18_143 dst_reg_18_191)))
 (let (($x393 (= dst_reg_18_142 dst_reg_18_190)))
 (let (($x392 (= dst_reg_18_141 dst_reg_18_189)))
 (let (($x391 (= storemerge.i_18_161 dst_reg_18_188)))
 (let (($x390 (= cond23.i212.i_18_175 dst_reg_18_187)))
 (let (($x389 (= or8.i206.i_18_172 dst_reg_18_186)))
 (let (($x388 (= or.i200.i_18_169 dst_reg_18_185)))
 (let (($x387 (= shl5.i.i_18_166 dst_reg_18_184)))
 (let (($x386 (= shl.i.i_18_165 dst_reg_18_183)))
 (let (($x385 (= dst_reg_18_134 dst_reg_18_182)))
 (let (($x384 (= dst_reg_18_133 dst_reg_18_181)))
 (let (($x383 (= dst_reg_18_132 dst_reg_18_180)))
 (let (($x382 (= dst_reg_18_131 dst_reg_18_179)))
 (let (($x381 (= src_reg_18_158 src_reg_18_206)))
 (let (($x380 (= src_reg_18_157 src_reg_18_205)))
 (let (($x379 (= src_reg_18_156 src_reg_18_204)))
 (let (($x378 (= src_reg_18_155 src_reg_18_203)))
 (let (($x377 (= src_reg_18_154 src_reg_18_202)))
 (let (($x376 (= src_reg_18_153 src_reg_18_201)))
 (let (($x375 (= src_reg_18_152 src_reg_18_200)))
 (let (($x374 (= src_reg_18_151 src_reg_18_199)))
 (let (($x373 (= src_reg_18_150 src_reg_18_198)))
 (let (($x372 (= src_reg_18_149 src_reg_18_197)))
 (let (($x371 (= src_reg_18_148 src_reg_18_196)))
 (let (($x370 (= src_reg_18_147 src_reg_18_195)))
 (let (($x369 (= src_reg_18_146 src_reg_18_194)))
 (let (($x368 (= src_reg_18_145 src_reg_18_193)))
 (let (($x818 (and $x368 $x369 $x370 $x371 $x372 $x373 $x374 $x375 $x376 $x377 $x378 $x379 $x380 $x381 $x382 $x383 $x384 $x385 $x386 $x387 $x388 $x389 $x390 $x391 $x392 $x393 $x394 $x395)))
 (let (($x819 (=> $x797 $x818)))
 (let (($x452 (ite (bvult i25.i309.i_18_219 (_ bv4294967296 64)) $x451 $x450)))
 (let (($x447 (= i25.i309.i_18_219 (bvxor i24.i308.i_18_218 i23.i306.i_18_217))))
 (let (($x444 (= storemerge_18_209 i24.i308.i_18_218)))
 (let (($x442 (= dst_reg_18_187 i23.i306.i_18_217)))
 (let (($x440 (= and6.i.i302.i_18_216 (bvand i20.i300.i_18_212 (_ bv4294967295 64)))))
 (let (($x437 (= and.i.i301.i_18_214 (bvand i18.i298.i_18_211 (_ bv4294967295 64)))))
 (let (($x434 (= dst_reg_18_184 i20.i300.i_18_212)))
 (let (($x432 (= dst_reg_18_183 i18.i298.i_18_211)))
 (let (($x429 (= storemerge_18_209 cond35.i217.i_18_178)))
 (let (($x430 (=> if.end266.i_if.then308.i_18_208 $x429)))
 (let (($x427 (= storemerge_18_209 (_ bv18446744073709551615 64))))
 (let (($x428 (=> if.then250.i_if.then308.i_18_207 $x427)))
 (let (($x909 (and $x428 $x430 $x432 $x434 $x437 $x440 $x442 $x444 $x447 $x452 $x819 $x821 $x822 $x823)))
 (let (($x910 (=> $x798 $x909)))
 (let (($x205 (= cmp24.old.i_18_98 (_ bv1 1))))
 (let (($x206 (ite (bvugt src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94) $x205 $x204)))
 (let (($x908 (=> $x783 (and $x206))))
 (let (($x93 (ite (bvult i25.i.i_18_41 (_ bv4294967296 64)) $x92 $x90)))
 (let (($x85 (= i25.i.i_18_41 (bvxor i24.i.i_18_40 i23.i.i_18_39))))
 (let (($x82 (= dst_reg_18_9 i24.i.i_18_40)))
 (let (($x80 (= dst_reg_18_8 i23.i.i_18_39)))
 (let (($x78 (= and6.i.i.i_18_38 (bvand i20.i.i_18_34 (_ bv4294967295 64)))))
 (let (($x75 (= and.i.i.i_18_36 (bvand i18.i.i_18_33 (_ bv4294967295 64)))))
 (let (($x71 (= dst_reg_18_5 i20.i.i_18_34)))
 (let (($x69 (= dst_reg_18_4 i18.i.i_18_33)))
 (let (($x67 (= src_reg_18_23 src_reg1.sroa.22.0.copyload_18_32)))
 (let (($x65 (= src_reg_18_22 src_reg1.sroa.17.0.copyload_18_31)))
 (let (($x63 (= src_reg_18_19 src_reg1.sroa.10.0.copyload_18_30)))
 (let (($x60 (= src_reg_18_27 src_reg_18_27)))
 (let (($x59 (= src_reg_18_26 src_reg_18_26)))
 (let (($x58 (= src_reg_18_25 src_reg_18_25)))
 (let (($x57 (= src_reg_18_24 src_reg_18_24)))
 (let (($x56 (= src_reg_18_23 src_reg_18_23)))
 (let (($x55 (= src_reg_18_22 src_reg_18_22)))
 (let (($x54 (= src_reg_18_21 src_reg_18_21)))
 (let (($x53 (= src_reg_18_20 src_reg_18_20)))
 (let (($x52 (= src_reg_18_19 src_reg_18_19)))
 (let (($x51 (= src_reg_18_18 src_reg_18_18)))
 (let (($x50 (= src_reg_18_17 src_reg_18_17)))
 (let (($x49 (= src_reg_18_16 src_reg_18_16)))
 (let (($x48 (= src_reg_18_15 src_reg_18_15)))
 (let (($x47 (= src_reg_18_14 src_reg_18_14)))
 (let (($x32 (= dst_reg_18_13 dst_reg_18_13)))
 (let (($x31 (= dst_reg_18_12 dst_reg_18_12)))
 (let (($x30 (= dst_reg_18_11 dst_reg_18_11)))
 (let (($x29 (= dst_reg_18_10 dst_reg_18_10)))
 (let (($x28 (= dst_reg_18_9 dst_reg_18_9)))
 (let (($x27 (= dst_reg_18_8 dst_reg_18_8)))
 (let (($x26 (= dst_reg_18_7 dst_reg_18_7)))
 (let (($x25 (= dst_reg_18_6 dst_reg_18_6)))
 (let (($x24 (= dst_reg_18_5 dst_reg_18_5)))
 (let (($x23 (= dst_reg_18_4 dst_reg_18_4)))
 (let (($x22 (= dst_reg_18_3 dst_reg_18_3)))
 (let (($x21 (= dst_reg_18_2 dst_reg_18_2)))
 (let (($x20 (= dst_reg_18_1 dst_reg_18_1)))
 (let (($x19 (= dst_reg_18_0 dst_reg_18_0)))
 (let (($x199 (= cmp18.not.i.not_18_97 (_ bv0 1))))
 (let (($x201 (ite (= src_reg1.sroa.17.0_18_92 storemerge.i20.i_18_94) $x200 $x199)))
 (let (($x906 (=> $x782 (and $x201))))
 (let (($x892 (= src_reg_18_357 src_reg_18_385)))
 (let (($x891 (= src_reg_18_356 src_reg_18_384)))
 (let (($x890 (= src_reg_18_355 src_reg_18_383)))
 (let (($x889 (= src_reg_18_354 src_reg_18_382)))
 (let (($x888 (= src_reg_18_353 src_reg_18_381)))
 (let (($x887 (= src_reg_18_352 src_reg_18_380)))
 (let (($x886 (= src_reg_18_351 src_reg_18_379)))
 (let (($x885 (= src_reg_18_350 src_reg_18_378)))
 (let (($x884 (= src_reg_18_349 src_reg_18_377)))
 (let (($x883 (= src_reg_18_348 src_reg_18_376)))
 (let (($x882 (= src_reg_18_347 src_reg_18_375)))
 (let (($x881 (= src_reg_18_346 src_reg_18_374)))
 (let (($x880 (= src_reg_18_345 src_reg_18_373)))
 (let (($x879 (= src_reg_18_344 src_reg_18_372)))
 (let (($x864 (= dst_reg_18_343 dst_reg_18_371)))
 (let (($x863 (= dst_reg_18_342 dst_reg_18_370)))
 (let (($x862 (= dst_reg_18_341 dst_reg_18_369)))
 (let (($x861 (= dst_reg_18_340 dst_reg_18_368)))
 (let (($x860 (= dst_reg_18_339 dst_reg_18_367)))
 (let (($x859 (= dst_reg_18_338 dst_reg_18_366)))
 (let (($x858 (= dst_reg_18_337 dst_reg_18_365)))
 (let (($x857 (= dst_reg_18_336 dst_reg_18_364)))
 (let (($x856 (= dst_reg_18_335 dst_reg_18_363)))
 (let (($x855 (= dst_reg_18_334 dst_reg_18_362)))
 (let (($x854 (= dst_reg_18_333 dst_reg_18_361)))
 (let (($x853 (= dst_reg_18_332 dst_reg_18_360)))
 (let (($x852 (= dst_reg_18_331 dst_reg_18_359)))
 (let (($x851 (= dst_reg_18_330 dst_reg_18_358)))
 (let (($x780 (= dst_reg_18_62 dst_reg_18_343)))
 (let (($x779 (= dst_reg_18_61 dst_reg_18_342)))
 (let (($x778 (= dst_reg_18_60 dst_reg_18_341)))
 (let (($x777 (= (_ bv0 32) dst_reg_18_340)))
 (let (($x776 (= (_ bv18446744073709551615 64) dst_reg_18_339)))
 (let (($x775 (= (_ bv0 64) dst_reg_18_338)))
 (let (($x774 (= (_ bv9223372036854775807 64) dst_reg_18_337)))
 (let (($x773 (= (_ bv9223372036854775808 64) dst_reg_18_336)))
 (let (($x772 (= (_ bv18446744073709551615 64) dst_reg_18_335)))
 (let (($x771 (= (_ bv0 64) dst_reg_18_334)))
 (let (($x770 (= dst_reg_18_52 dst_reg_18_333)))
 (let (($x769 (= dst_reg_18_51 dst_reg_18_332)))
 (let (($x768 (= dst_reg_18_50 dst_reg_18_331)))
 (let (($x767 (= (_ bv1 32) dst_reg_18_330)))
 (let (($x766 (= src_reg_18_76 src_reg_18_357)))
 (let (($x765 (= src_reg_18_75 src_reg_18_356)))
 (let (($x764 (= src_reg_18_74 src_reg_18_355)))
 (let (($x763 (= src_reg_18_73 src_reg_18_354)))
 (let (($x762 (= src_reg_18_72 src_reg_18_353)))
 (let (($x761 (= src_reg_18_71 src_reg_18_352)))
 (let (($x760 (= src_reg_18_70 src_reg_18_351)))
 (let (($x759 (= src_reg_18_69 src_reg_18_350)))
 (let (($x758 (= src_reg_18_68 src_reg_18_349)))
 (let (($x757 (= src_reg_18_67 src_reg_18_348)))
 (let (($x756 (= src_reg_18_66 src_reg_18_347)))
 (let (($x755 (= src_reg_18_65 src_reg_18_346)))
 (let (($x754 (= src_reg_18_64 src_reg_18_345)))
 (let (($x753 (= src_reg_18_63 src_reg_18_344)))
 (let (($x834 (and $x753 $x754 $x755 $x756 $x757 $x758 $x759 $x760 $x761 $x762 $x763 $x764 $x765 $x766 $x767 $x768 $x769 $x770 $x771 $x772 $x773 $x774 $x775 $x776 $x777 $x778 $x779 $x780)))
 (let (($x785 (and $x199 $x782)))
 (let (($x786 (and $x205 $x783)))
 (let (($x788 (or $x786 $x785)))
 (let (($x836 (=> $x788 $x834)))
 (let (($x791 (and $x194 $x789)))
 (let (($x835 (=> $x791 $x834)))
 (let (($x752 (= dst_reg_18_240 dst_reg_18_343)))
 (let (($x751 (= dst_reg_18_239 dst_reg_18_342)))
 (let (($x750 (= dst_reg_18_238 dst_reg_18_341)))
 (let (($x749 (= dst_reg_18_237 dst_reg_18_340)))
 (let (($x748 (= storemerge.i316.i_18_257 dst_reg_18_339)))
 (let (($x747 (= dst_reg_18_235 dst_reg_18_338)))
 (let (($x746 (= storemerge.i316.i_18_257 dst_reg_18_337)))
 (let (($x745 (= i27.i317.i_18_259 dst_reg_18_336)))
 (let (($x744 (= and.i1.i.i_18_326 dst_reg_18_335)))
 (let (($x743 (= and4.i.i.i_18_329 dst_reg_18_334)))
 (let (($x742 (= dst_reg_18_230 dst_reg_18_333)))
 (let (($x741 (= dst_reg_18_229 dst_reg_18_332)))
 (let (($x740 (= dst_reg_18_228 dst_reg_18_331)))
 (let (($x739 (= dst_reg_18_227 dst_reg_18_330)))
 (let (($x738 (= src_reg_18_254 src_reg_18_357)))
 (let (($x737 (= src_reg_18_253 src_reg_18_356)))
 (let (($x736 (= src_reg_18_252 src_reg_18_355)))
 (let (($x735 (= src_reg_18_251 src_reg_18_354)))
 (let (($x734 (= src_reg_18_250 src_reg_18_353)))
 (let (($x733 (= src_reg_18_249 src_reg_18_352)))
 (let (($x732 (= src_reg_18_248 src_reg_18_351)))
 (let (($x731 (= src_reg_18_247 src_reg_18_350)))
 (let (($x730 (= src_reg_18_246 src_reg_18_349)))
 (let (($x729 (= src_reg_18_245 src_reg_18_348)))
 (let (($x728 (= src_reg_18_244 src_reg_18_347)))
 (let (($x727 (= src_reg_18_243 src_reg_18_346)))
 (let (($x726 (= src_reg_18_242 src_reg_18_345)))
 (let (($x725 (= src_reg_18_241 src_reg_18_344)))
 (let (($x832 (and $x725 $x726 $x727 $x728 $x729 $x730 $x731 $x732 $x733 $x734 $x735 $x736 $x737 $x738 $x739 $x740 $x741 $x742 $x743 $x744 $x745 $x746 $x747 $x748 $x749 $x750 $x751 $x752)))
 (let (($x531 (= cmp.i.i.i.i_18_262 (_ bv1 1))))
 (let (($x802 (and $x531 $x801)))
 (let (($x804 (or $x803 $x802)))
 (let (($x833 (=> $x804 $x832)))
 (let (($x903 (and $x833 $x835 $x836 $x851 $x852 $x853 $x854 $x855 $x856 $x857 $x858 $x859 $x860 $x861 $x862 $x863 $x864 $x879 $x880 $x881 $x882 $x883 $x884 $x885 $x886 $x887 $x888 $x889 $x890 $x891 $x892)))
 (let (($x805 (or $x804 (or $x791 $x788))))
 (let (($x904 (=> $x805 $x903)))
 (let (($x811 (= if.then.i.i_coerce_reg_to_size.exit.i_18_78 $x92)))
 (let (($x810 (= if.else.i.i_coerce_reg_to_size.exit.i_18_77 $x90)))
 (let (($x156 (= dst_reg_18_13 dst_reg_18_62)))
 (let (($x155 (= dst_reg_18_12 dst_reg_18_61)))
 (let (($x154 (= dst_reg_18_11 dst_reg_18_60)))
 (let (($x153 (= dst_reg_18_10 dst_reg_18_59)))
 (let (($x152 (= dst_reg_18_9 dst_reg_18_58)))
 (let (($x157 (= (_ bv0 64) dst_reg_18_57)))
 (let (($x150 (= dst_reg_18_7 dst_reg_18_56)))
 (let (($x149 (= dst_reg_18_6 dst_reg_18_55)))
 (let (($x148 (= and6.i.i.i_18_38 dst_reg_18_54)))
 (let (($x147 (= and.i.i.i_18_36 dst_reg_18_53)))
 (let (($x146 (= dst_reg_18_3 dst_reg_18_52)))
 (let (($x145 (= dst_reg_18_2 dst_reg_18_51)))
 (let (($x144 (= dst_reg_18_1 dst_reg_18_50)))
 (let (($x143 (= (_ bv1 32) dst_reg_18_49)))
 (let (($x142 (= src_reg_18_27 src_reg_18_76)))
 (let (($x141 (= src_reg_18_26 src_reg_18_75)))
 (let (($x140 (= src_reg_18_25 src_reg_18_74)))
 (let (($x139 (= src_reg_18_24 src_reg_18_73)))
 (let (($x138 (= src_reg_18_23 src_reg_18_72)))
 (let (($x137 (= src_reg_18_22 src_reg_18_71)))
 (let (($x136 (= src_reg_18_21 src_reg_18_70)))
 (let (($x135 (= src_reg_18_20 src_reg_18_69)))
 (let (($x134 (= src_reg_18_19 src_reg_18_68)))
 (let (($x133 (= src_reg_18_18 src_reg_18_67)))
 (let (($x132 (= src_reg_18_17 src_reg_18_66)))
 (let (($x131 (= src_reg_18_16 src_reg_18_65)))
 (let (($x130 (= src_reg_18_15 src_reg_18_64)))
 (let (($x129 (= (_ bv1 32) src_reg_18_63)))
 (let (($x808 (and $x129 $x130 $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x157 $x152 $x153 $x154 $x155 $x156)))
 (let (($x809 (=> $x90 $x808)))
 (let (($x151 (= and6.i.i_18_45 dst_reg_18_57)))
 (let (($x806 (and $x129 $x130 $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x151 $x152 $x153 $x154 $x155 $x156)))
 (let (($x807 (=> $x92 $x806)))
 (let (($x196 (ite (= and6.i.i6.i_18_83 (_ bv0 64)) $x195 $x194)))
 (let (($x176 (= cmp.i15.i_18_86 (_ bv1 1))))
 (let (($x191 (ite $x176 (= storemerge.i20.i_18_94 and8.i17.i_18_90) (= storemerge.i20.i_18_94 (_ bv4294967295 64)))))
 (let (($x187 (ite $x176 (= src_reg1.sroa.17.0_18_92 and6.i16.i_18_88) (= src_reg1.sroa.17.0_18_92 (_ bv0 64)))))
 (let (($x183 (= and8.i17.i_18_90 (bvand src_reg1.sroa.22.0.copyload_18_32 (_ bv4294967295 64)))))
 (let (($x180 (= and6.i16.i_18_88 (bvand src_reg1.sroa.17.0.copyload_18_31 (_ bv4294967295 64)))))
 (let (($x175 (= cmp.i15.i_18_86 (_ bv0 1))))
 (let (($x177 (ite (bvult i25.i13.i_18_84 (_ bv4294967296 64)) $x176 $x175)))
 (let ((?x171 (bvxor src_reg1.sroa.22.0.copyload_18_32 src_reg1.sroa.17.0.copyload_18_31)))
 (let (($x172 (= i25.i13.i_18_84 ?x171)))
 (let (($x169 (= and6.i.i6.i_18_83 (bvand src_reg1.sroa.10.0.copyload_18_30 (_ bv4294967295 64)))))
 (let (($x166 (= dst_reg_18_57 i27.i.i_18_81)))
 (let (($x163 (= storemerge.i.i_18_79 and8.i.i_18_47)))
 (let (($x164 (=> if.then.i.i_coerce_reg_to_size.exit.i_18_78 $x163)))
 (let (($x161 (= storemerge.i.i_18_79 (_ bv4294967295 64))))
 (let (($x162 (=> if.else.i.i_coerce_reg_to_size.exit.i_18_77 $x161)))
 (let (($x901 (and $x162 $x164 $x166 $x169 $x172 $x177 $x180 $x183 $x187 $x191 $x196 $x807 $x809 $x810 $x811)))
 (let (($x902 (=> $x781 $x901)))
 (let (($x99 (= and8.i.i_18_47 (bvand i24.i.i_18_40 (_ bv4294967295 64)))))
 (let (($x96 (= and6.i.i_18_45 (bvand i23.i.i_18_39 (_ bv4294967295 64)))))
 (let (($x900 (=> $x92 (and $x96 $x99))))
 (let (($x458 (= and8.i313.i_18_225 (bvand i24.i308.i_18_218 (_ bv4294967295 64)))))
 (let (($x455 (= and6.i312.i_18_223 (bvand i23.i306.i_18_217 (_ bv4294967295 64)))))
 (let (($x898 (=> $x799 (and $x455 $x458))))
 (let (($x829 (= if.then.i314.i_coerce_reg_to_size.exit320.i_18_256 $x799)))
 (let (($x828 (= if.else.i315.i_coerce_reg_to_size.exit320.i_18_255 $x800)))
 (let (($x514 (= dst_reg_18_192 dst_reg_18_240)))
 (let (($x513 (= dst_reg_18_191 dst_reg_18_239)))
 (let (($x512 (= dst_reg_18_190 dst_reg_18_238)))
 (let (($x511 (= dst_reg_18_189 dst_reg_18_237)))
 (let (($x510 (= storemerge_18_209 dst_reg_18_236)))
 (let (($x515 (= (_ bv0 64) dst_reg_18_235)))
 (let (($x508 (= dst_reg_18_186 dst_reg_18_234)))
 (let (($x507 (= dst_reg_18_185 dst_reg_18_233)))
 (let (($x506 (= and6.i.i302.i_18_216 dst_reg_18_232)))
 (let (($x505 (= and.i.i301.i_18_214 dst_reg_18_231)))
 (let (($x504 (= dst_reg_18_182 dst_reg_18_230)))
 (let (($x503 (= dst_reg_18_181 dst_reg_18_229)))
 (let (($x502 (= dst_reg_18_180 dst_reg_18_228)))
 (let (($x501 (= dst_reg_18_179 dst_reg_18_227)))
 (let (($x500 (= src_reg_18_206 src_reg_18_254)))
 (let (($x499 (= src_reg_18_205 src_reg_18_253)))
 (let (($x498 (= src_reg_18_204 src_reg_18_252)))
 (let (($x497 (= src_reg_18_203 src_reg_18_251)))
 (let (($x496 (= src_reg_18_202 src_reg_18_250)))
 (let (($x495 (= src_reg_18_201 src_reg_18_249)))
 (let (($x494 (= src_reg_18_200 src_reg_18_248)))
 (let (($x493 (= src_reg_18_199 src_reg_18_247)))
 (let (($x492 (= src_reg_18_198 src_reg_18_246)))
 (let (($x491 (= src_reg_18_197 src_reg_18_245)))
 (let (($x490 (= src_reg_18_196 src_reg_18_244)))
 (let (($x489 (= src_reg_18_195 src_reg_18_243)))
 (let (($x488 (= src_reg_18_194 src_reg_18_242)))
 (let (($x487 (= src_reg_18_193 src_reg_18_241)))
 (let (($x826 (and $x487 $x488 $x489 $x490 $x491 $x492 $x493 $x494 $x495 $x496 $x497 $x498 $x499 $x500 $x501 $x502 $x503 $x504 $x505 $x506 $x507 $x508 $x515 $x510 $x511 $x512 $x513 $x514)))
 (let (($x827 (=> $x800 $x826)))
 (let (($x509 (= and6.i312.i_18_223 dst_reg_18_235)))
 (let (($x824 (and $x487 $x488 $x489 $x490 $x491 $x492 $x493 $x494 $x495 $x496 $x497 $x498 $x499 $x500 $x501 $x502 $x503 $x504 $x505 $x506 $x507 $x508 $x509 $x510 $x511 $x512 $x513 $x514)))
 (let (($x825 (=> $x799 $x824)))
 (let (($x532 (ite (= xor.i.i.i_18_260 (_ bv0 64)) $x531 $x530)))
 (let (($x527 (= xor.i.i.i_18_260 (bvxor i27.i317.i_18_259 storemerge.i316.i_18_257))))
 (let (($x524 (= dst_reg_18_235 i27.i317.i_18_259)))
 (let (($x521 (= storemerge.i316.i_18_257 and8.i313.i_18_225)))
 (let (($x522 (=> if.then.i314.i_coerce_reg_to_size.exit320.i_18_256 $x521)))
 (let (($x519 (= storemerge.i316.i_18_257 (_ bv4294967295 64))))
 (let (($x520 (=> if.else.i315.i_coerce_reg_to_size.exit320.i_18_255 $x519)))
 (let (($x896 (=> $x801 (and $x520 $x522 $x524 $x527 $x532 $x825 $x827 $x828 $x829))))
 (let (($x831 (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310 $x802)))
 (let (($x830 (= if.end.i.i.i.i___reg_bound_offset.exit.i_18_309 $x803)))
 (let (($x696 (= and4.i.i.i_18_329 (bvand or.i.i.i_18_325 neg.i.i.i_18_328))))
 (let (($x693 (= neg.i.i.i_18_328 (bvxor and.i1.i.i_18_326 (_ bv18446744073709551615 64)))))
 (let (($x690 (= and.i1.i.i_18_326 (bvand retval.sroa.3.0.i.i.i_18_324 and6.i.i302.i_18_216))))
 (let (($x687 (= or.i.i.i_18_325 (bvor retval.sroa.0.0.i.i.i_18_322 and.i.i301.i_18_214))))
 (let (($x663 (= cmp.i.i.i_18_314 (_ bv1 1))))
 (let (($x684 (ite $x663 (= retval.sroa.3.0.i.i.i_18_324 (_ bv4294967295 64)) (= retval.sroa.3.0.i.i.i_18_324 sub.i.i.i_18_319))))
 (let (($x680 (ite $x663 (= retval.sroa.0.0.i.i.i_18_322 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_18_322 and.i.i336.i_18_320))))
 (let (($x676 (= and.i.i336.i_18_320 (bvand notmask.i.i.i_18_317 i27.i317.i_18_259))))
 (let (($x673 (= sub.i.i.i_18_319 (bvxor notmask.i.i.i_18_317 (_ bv18446744073709551615 64)))))
 (let (($x670 (= notmask.i.i.i_18_317 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_18_315))))
 (let (($x667 (= sh_prom.i.i.i_18_315 ((_ zero_extend 32) retval.0.i.i.i.i_18_311))))
 (let (($x662 (= cmp.i.i.i_18_314 (_ bv0 1))))
 (let (($x664 (ite (bvugt retval.0.i.i.i.i_18_311 (_ bv63 32)) $x663 $x662)))
 (let (($x658 (= retval.0.i.i.i.i_18_311 (_ bv0 32))))
 (let (($x659 (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_18_310 $x658)))
 (let (($x656 (= retval.0.i.i.i.i_18_311 phi.bo_18_308)))
 (let (($x657 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_18_309 $x656)))
 (let (($x893 (and $x657 $x659 $x664 $x667 $x670 $x673 $x676 $x680 $x684 $x687 $x690 $x693 $x696 $x830 $x831)))
 (let (($x894 (=> $x804 $x893)))
 (and $x894 $x896 $x898 $x900 $x902 $x904 $x906 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x75 $x78 $x80 $x82 $x85 $x93 $x908 $x910 $x912 $x914 $x916 $x918 $x920))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32 BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_LSH_32 18 BPF_LSH_32.smt2

Finished llvm_to_smt_pass
