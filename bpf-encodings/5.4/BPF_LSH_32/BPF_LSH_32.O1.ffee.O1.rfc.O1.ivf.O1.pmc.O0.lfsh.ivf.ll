; ModuleID = '/home/pchaigno/agni/bpf-encodings/5.4/BPF_LSH_32/BPF_LSH_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

module asm "\09.section \22___ksymtab_gpl+tnum_strn\22, \22a\22\09"
module asm "\09.balign 4\09\09\09\09\09"
module asm "__ksymtab_tnum_strn:\09\09\09\09"
module asm "\09.long\09tnum_strn- .\09\09\09\09"
module asm "\09.long\09__kstrtab_tnum_strn- .\09\09\09"
module asm "\09.long\090\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"
module asm "\09.section \22___ksymtab_gpl+bpf_verifier_log_write\22, \22a\22\09"
module asm "\09.balign 4\09\09\09\09\09"
module asm "__ksymtab_bpf_verifier_log_write:\09\09\09\09"
module asm "\09.long\09bpf_verifier_log_write- .\09\09\09\09"
module asm "\09.long\09__kstrtab_bpf_verifier_log_write- .\09\09\09"
module asm "\09.long\090\09\09\09\09\09"
module asm "\09.previous\09\09\09\09\09"

%struct.bpf_verifier_ops = type { %struct.bpf_func_proto* (i32, %struct.bpf_prog*)*, i1 (i32, i32, i32, %struct.bpf_prog*, %struct.util_est*)*, i32 (%struct.bpf_insn*, i1, %struct.bpf_prog*)*, i32 (%struct.bpf_insn*, %struct.bpf_insn*)*, i32 (i32, %struct.bpf_insn*, %struct.bpf_insn*, %struct.bpf_prog*, i32*)* }
%struct.bpf_func_proto = type { i64 (i64, i64, i64, i64, i64)*, i8, i8, i32, i32, i32, i32, i32, i32 }
%struct.bpf_prog = type { i16, i16, i32, i32, i32, i32, [8 x i8], %struct.bpf_prog_aux*, %struct.sock_fprog_kern*, i32 (i8*, %struct.bpf_insn*)*, %union.anon.146 }
%struct.bpf_prog_aux = type { %struct.atomic_t, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, %struct.bpf_prog**, i8*, %struct.latch_tree_node, %struct.list_head, %struct.bpf_prog_ops*, %struct.bpf_map**, %struct.bpf_prog*, %struct.user_struct*, i64, [2 x %struct.bpf_map*], [16 x i8], i8*, %struct.bpf_prog_offload*, %struct.btf*, %struct.util_est*, %struct.ethtool_pauseparam*, i8**, i32, i32, i32, %struct.bpf_prog_stats*, %union.anon.145 }
%struct.atomic_t = type { i32 }
%struct.latch_tree_node = type { [2 x %struct.rb_node] }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.bpf_prog_ops = type { i32 (%struct.bpf_prog*, %union.bpf_attr*, %union.bpf_attr*)* }
%union.bpf_attr = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32, i64, i64, i32, i32, i64, i32, i32, [16 x i8], i32, i32, i32, i32, i64, i32, i32, i64, i32 }
%struct.bpf_map = type { %struct.bpf_map_ops*, %struct.bpf_map*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.btf*, %struct.bpf_map_memory, i8, i8, [38 x i8], %struct.atomic_t, %struct.atomic_t, %struct.work_struct, [16 x i8], [8 x i8] }
%struct.bpf_map_ops = type { i32 (%union.bpf_attr*)*, %struct.bpf_map* (%union.bpf_attr*)*, void (%struct.bpf_map*, %struct.file*)*, void (%struct.bpf_map*)*, i32 (%struct.bpf_map*, i8*, i8*)*, void (%struct.bpf_map*)*, i8* (%struct.bpf_map*, i8*)*, i8* (%struct.bpf_map*, i8*)*, i32 (%struct.bpf_map*, i8*, i8*, i64)*, i32 (%struct.bpf_map*, i8*)*, i32 (%struct.bpf_map*, i8*, i64)*, i32 (%struct.bpf_map*, i8*)*, i32 (%struct.bpf_map*, i8*)*, i8* (%struct.bpf_map*, %struct.file*, i32)*, void (i8*)*, i32 (%struct.bpf_map*, %struct.bpf_insn*)*, i32 (i8*)*, void (%struct.bpf_map*, i8*, %struct.seq_file*)*, i32 (%struct.bpf_map*, %struct.btf*, %struct.btf_type*, %struct.btf_type*)*, i32 (%struct.bpf_map*, i64*, i32)*, i32 (%struct.bpf_map*, i64, i32*)* }
%struct.file = type { %union.anon.12, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %union.anon.13, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, i8*, %struct.list_head, %struct.list_head, %struct.address_space*, i32 }
%union.anon.12 = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.atomic_t, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.local_t, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %struct.sysv_shm, %struct.list_head, %struct.list_head, %union.anon.75 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.13, i8* }
%struct.local_t = type { %union.anon.13 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, i8*, %struct.xattr_handler**, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, i8*, i32, i64, i64, i32, %struct.fsnotify_mark_connector*, [32 x i8], %union.anon.127, i32, i32, %struct.mutex, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %union.anon.13, %union.anon.13, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, [52 x i8], %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head, [16 x i8] }
%struct.file_system_type = type { i8*, i32, i32 (%struct.fs_context*)*, %struct.fs_parameter_description*, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.u64_stats_sync, %struct.u64_stats_sync, %struct.u64_stats_sync, [3 x %struct.u64_stats_sync], %struct.u64_stats_sync, %struct.u64_stats_sync, %struct.u64_stats_sync }
%struct.fs_context = type opaque
%struct.fs_parameter_description = type opaque
%struct.module = type { i32, %struct.list_head, [56 x i8], %struct.module_kobject, %struct.module_attribute*, i8*, i8*, %struct.kobject*, %struct.uid_gid_extent*, i32*, i32, %struct.mutex, %struct.kernel_param*, i32, i32, %struct.uid_gid_extent*, i32*, i8, %struct.uid_gid_extent*, i32*, i32, i32, %struct.uid_gid_extent*, i32 ()*, [40 x i8], %struct.module_layout, %struct.module_layout, %struct.mod_arch_specific, i64, i32, %struct.list_head, %struct.bug_entry*, %struct.mod_kallsyms*, %struct.mod_kallsyms, %struct.module_sect_attrs*, %struct.module_notes_attrs*, i8*, i8*, i32, i32, i32*, i32, %struct.srcu_struct**, i32, %struct.bpf_raw_event_map*, %struct.jump_entry*, i32, i32, i8**, %struct.trace_event_call**, i32, %struct.trace_eval_map**, i32, %struct.list_head, %struct.list_head, void ()*, %struct.atomic_t, %struct.thread_info*, i32, [52 x i8] }
%struct.module_kobject = type { %struct.kobject, %struct.module*, %struct.kobject*, %struct.module_param_attrs*, %struct.completion* }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.qspinlock, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [32 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.attribute_group**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)*, void (%struct.kobject*, %struct.atomic_t*, %struct.atomic_t*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %union.anon.13, i64, %struct.timerqueue_node, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %union.anon.13, %struct.mempolicy*, %struct.u64_stats_sync }
%struct.mm_struct = type { %struct.anon.15, [0 x i64] }
%struct.anon.15 = type { %struct.vm_area_struct*, %struct.rb_root, i64, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, i64, i64, %union.anon.13*, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %union.anon.13, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, %union.anon.13, i64, i64, i64, i64, %struct.spinlock, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [46 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_mm*, %struct.atomic_t, i8, %struct.uprobes_state, %union.anon.13, %struct.work_struct }
%struct.rb_root = type { %struct.rb_node* }
%struct.mm_rss_stat = type { [4 x %union.anon.13] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i64, %union.anon.13, %struct.rw_semaphore, %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %union.anon.17, i32, i32, %struct.llist_node, i32, i32, i32, i64, %struct.task_struct*, i32, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.task_group*, %struct.sched_dl_entity, i32, i32, i32, %struct.cpumask*, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.plist_node, %struct.rb_node, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, %struct.task_rss_stat, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, i64, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.pid*, [4 x %struct.hlist_node], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.posix_cputimers, %struct.cred*, %struct.cred*, %struct.cred*, %struct.key*, [16 x i8], %struct.nameidata*, %struct.sysv_sem, %struct.sysv_shm, %struct.fs_struct*, %struct.files_struct*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.cpumask, %struct.cpumask, %struct.cpumask, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.audit_context*, %struct.atomic_t, i32, %struct.seccomp, i32, i32, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root_cached, %struct.task_struct*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, %struct.capture_control*, i64, %struct.kernel_siginfo*, %struct.task_io_accounting, i64, i64, i64, %struct.cpumask, %struct.atomic_t, i32, i32, %struct.css_set*, %struct.list_head, %struct.robust_list_head*, %struct.compat_robust_list_head*, %struct.list_head, %struct.futex_pi_state*, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.mempolicy*, i16, i16, %struct.rseq*, i32, i64, %struct.tlbflush_unmap_batch, %union.anon.12, %struct.pipe_inode_info*, %struct.page_frag, %struct.task_delay_info*, i32, i32, i64, i64, i64, i64, i64, %struct.uprobe_task*, i32, %struct.task_struct*, %struct.vm_struct*, %union.anon.17, i8*, %struct.thread_struct }
%struct.thread_info = type { i64, i32 }
%struct.llist_node = type { %struct.llist_node* }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.thread_info, i64, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics, i32, %struct.sched_entity*, %struct.cfs_rq*, %struct.cfs_rq*, [24 x i8], %struct.sched_avg }
%struct.sched_statistics = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.cfs_rq = type opaque
%struct.sched_avg = type { i64, i64, i64, i32, i32, i64, i64, i64, %struct.util_est }
%struct.util_est = type { i32, i32 }
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.task_group = type opaque
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i64, i32, i8, %struct.hrtimer, %struct.hrtimer }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8, i8, i8 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.atomic_t, %struct.hrtimer*, %struct.timerqueue_head, i64 ()*, i64 }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, i32, i8, i32, i16, i16, i32, i64, %struct.hrtimer*, i64, %struct.hrtimer*, [8 x %struct.hrtimer_clock_base] }
%struct.timerqueue_head = type { %struct.rb_root_cached }
%struct.sched_info = type { i64, i64, i64, i64 }
%struct.plist_node = type { i32, %struct.list_head, %struct.list_head }
%struct.vmacache = type { i64, [4 x %struct.vm_area_struct*] }
%struct.task_rss_stat = type { i32, [4 x i32] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.20 }
%union.anon.20 = type { %struct.anon.21 }
%struct.anon.21 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid = type { %union.anon.17, i32, [4 x %struct.hlist_head], %struct.wait_queue_head, %struct.callback_head, [1 x %struct.upid] }
%struct.wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.upid = type { i32, %struct.pid_namespace* }
%struct.pid_namespace = type { %struct.qspinlock, %struct.idr, %struct.callback_head, i32, %struct.task_struct*, %struct.kmem_cache*, i32, %struct.pid_namespace*, %struct.vfsmount*, %struct.dentry*, %struct.dentry*, %struct.fs_pin*, %struct.user_namespace*, %struct.ucounts*, %struct.work_struct, %struct.atomic_t, i32, i32, %struct.ns_common }
%struct.idr = type { %struct.xarray, i32, i32 }
%struct.xarray = type { %struct.spinlock, i32, i8* }
%struct.kmem_cache = type opaque
%struct.fs_pin = type opaque
%struct.ucounts = type { %struct.hlist_node, %struct.user_namespace*, %struct.atomic_t, i32, [9 x %struct.atomic_t] }
%struct.ns_common = type { %union.anon.13, %struct.proc_ns_operations*, i32 }
%struct.proc_ns_operations = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.posix_cputimers = type { [3 x %struct.posix_cputimer_base], i32, i32 }
%struct.posix_cputimer_base = type { i64, %struct.timerqueue_head }
%struct.key = type { %union.anon.17, i32, %union.anon.27, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.13, i64, %struct.atomic_t, %struct.atomic_t, i32, i16, i16, i16, i64, %union.anon.29, %union.anon.33, %struct.key_restriction* }
%union.anon.27 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.29 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { i64, %union.anon.13, %struct.key_type*, %struct.key_tag*, i8* }
%struct.key_type = type opaque
%struct.key_tag = type { %struct.callback_head, %union.anon.17, i8 }
%union.anon.33 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.key_restriction = type { i32 (%struct.key*, %struct.key_type*, %union.key_payload*, %struct.key*)*, %struct.key*, %struct.key_type* }
%struct.nameidata = type opaque
%struct.sysv_sem = type { %struct.sem_undo_list* }
%struct.sem_undo_list = type opaque
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.nsproxy = type { %struct.atomic_t, %struct.uts_namespace*, %struct.ipc_namespace*, %struct.mnt_namespace*, %struct.pid_namespace*, %struct.net*, %struct.cgroup_namespace* }
%struct.uts_namespace = type opaque
%struct.ipc_namespace = type opaque
%struct.mnt_namespace = type opaque
%struct.net = type { %union.anon.17, %union.anon.17, %struct.spinlock, i32, i32, i32, %struct.spinlock, %struct.atomic_t, %struct.list_head, %struct.list_head, %struct.llist_node, %struct.key_tag*, %struct.user_namespace*, %struct.ucounts*, %struct.idr, %struct.ns_common, %struct.list_head, %struct.proc_dir_entry*, %struct.proc_dir_entry*, %struct.ctl_table_set, %struct.sock*, %struct.sock*, %struct.uevent_sock*, %struct.hlist_head*, %struct.hlist_head*, i32, %struct.net_device*, %struct.list_head, %struct.netns_core, %struct.netns_mib, %struct.netns_packet, %struct.netns_unix, %struct.netns_nexthop, [16 x i8], %struct.netns_ipv4, %struct.netns_ipv6, %struct.netns_nf, %struct.netns_xt, %struct.netns_ct, %struct.netns_nf_frag, %struct.ctl_table_header*, %struct.sock*, %struct.sock*, %struct.net_generic*, %struct.bpf_prog*, [56 x i8], %struct.netns_xfrm, %struct.sock*, [56 x i8] }
%struct.proc_dir_entry = type opaque
%struct.ctl_table_set = type { i32 (%struct.ctl_table_set*)*, %struct.ctl_dir }
%struct.ctl_dir = type { %struct.ctl_table_header, %struct.rb_root }
%struct.ctl_table_header = type { %union.anon.35, %struct.completion*, %struct.ctl_table*, %struct.ctl_table_root*, %struct.ctl_table_set*, %struct.ctl_dir*, %struct.ctl_node*, %struct.hlist_head }
%union.anon.35 = type { %struct.anon.36 }
%struct.anon.36 = type { %struct.ctl_table*, i32, i32, i32 }
%struct.ctl_table = type { i8*, i8*, i32, i16, %struct.ctl_table*, i32 (%struct.ctl_table*, i32, i8*, i64*, i64*)*, %struct.ctl_table_poll*, i8*, i8* }
%struct.ctl_table_poll = type { %struct.atomic_t, %struct.wait_queue_head }
%struct.ctl_table_root = type { %struct.ctl_table_set, %struct.ctl_table_set* (%struct.ctl_table_root*)*, void (%struct.ctl_table_header*, %struct.ctl_table*, %struct.atomic_t*, %struct.atomic_t*)*, i32 (%struct.ctl_table_header*, %struct.ctl_table*)* }
%struct.ctl_node = type { %struct.rb_node, %struct.ctl_table_header* }
%struct.uevent_sock = type opaque
%struct.net_device = type { [16 x i8], %struct.hlist_node, %struct.dev_ifalias*, i64, i64, i64, i32, i64, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %struct.anon.126, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.net_device_stats, %union.anon.13, %union.anon.13, %union.anon.13, %struct.atomic_t, %struct.atomic_t, %struct.net_device_ops*, %struct.ethtool_ops*, %struct.ndisc_ops*, %struct.header_ops*, i32, i32, i16, i16, i8, i8, i8, i8, i32, i32, i32, i16, i16, i8, i16, i16, [32 x i8], i8, i8, i8, i8, i16, i16, i16, %struct.spinlock, i8, i8, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.netdev_hw_addr_list, %struct.kset*, i32, i32, %struct.in_device*, %struct.inet6_dev*, %struct.wireless_dev*, %struct.wpan_dev*, i8*, %struct.netdev_rx_queue*, i32, i32, %struct.bpf_prog*, i64, i32 (%struct.sk_buff**)*, i8*, %struct.mini_Qdisc*, %struct.netdev_queue*, %struct.nf_hook_entries*, [32 x i8], %struct.cpu_rmap*, %struct.hlist_node, [32 x i8], %struct.netdev_queue*, i32, i32, %struct.Qdisc*, [16 x %struct.hlist_head], i32, %struct.spinlock, i32, %struct.xps_dev_maps*, %struct.xps_dev_maps*, %struct.mini_Qdisc*, %struct.timer_list, i32*, %struct.list_head, %struct.list_head, i8, i8, i16, i8, void (%struct.net_device*)*, %struct.netpoll_info*, %struct.possible_net_t, %union.anon.142, %struct.device, [4 x %struct.attribute_group*], %struct.attribute_group*, %struct.rtnl_link_ops*, i32, i16, i16, [16 x %struct.nlattr], [16 x i8], %struct.phy_device*, %struct.sfp_bus*, %struct.u64_stats_sync, %struct.u64_stats_sync, %struct.u64_stats_sync, %struct.u64_stats_sync, i8, i8, [38 x i8] }
%struct.dev_ifalias = type { %struct.callback_head, [0 x i8] }
%struct.anon.126 = type { %struct.list_head, %struct.list_head }
%struct.net_device_stats = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.net_device_ops = type { i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i64 (%struct.sk_buff*, %struct.net_device*, i64)*, i16 (%struct.net_device*, %struct.sk_buff*, %struct.net_device*)*, void (%struct.net_device*, i32)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i8*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ifreq*, i32)*, i32 (%struct.net_device*, %struct.ifmap*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.neigh_parms*)*, void (%struct.net_device*)*, void (%struct.net_device*, %struct.rtnl_link_stats64*)*, i1 (%struct.net_device*, i32)*, i32 (i32, %struct.net_device*, i8*)*, %struct.net_device_stats* (%struct.net_device*)*, i32 (%struct.net_device*, i16, i16)*, i32 (%struct.net_device*, i16, i16)*, void (%struct.net_device*)*, i32 (%struct.net_device*, %struct.netpoll_info*)*, void (%struct.net_device*)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32, i16, i8, i16)*, i32 (%struct.net_device*, i32, i32, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_info*)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*, i32, %struct.ifla_vf_stats*)*, i32 (%struct.net_device*, i32, %struct.nlattr**)*, i32 (%struct.net_device*, i32, %struct.sk_buff*)*, i32 (%struct.net_device*, i32, i64, i32)*, i32 (%struct.net_device*, i32, i1)*, i32 (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, %struct.sk_buff*, i16, i32)*, i32 (%struct.net_device*, %struct.net_device*, %struct.netlink_ext_ack*)*, i32 (%struct.net_device*, %struct.net_device*)*, i64 (%struct.net_device*, i64)*, i32 (%struct.net_device*, i64)*, i32 (%struct.net_device*, %struct.neighbour*)*, void (%struct.net_device*, %struct.neighbour*)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16, i16, %struct.netlink_ext_ack*)*, i32 (%struct.ndmsg*, %struct.nlattr**, %struct.net_device*, i8*, i16)*, i32 (%struct.sk_buff*, %struct.netlink_callback*, %struct.net_device*, %struct.net_device*, i32*)*, i32 (%struct.sk_buff*, %struct.nlattr**, %struct.net_device*, i8*, i16, i32, i32, %struct.netlink_ext_ack*)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16, %struct.netlink_ext_ack*)*, i32 (%struct.sk_buff*, i32, i32, %struct.net_device*, i32, i32)*, i32 (%struct.net_device*, %struct.nlmsghdr*, i16)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.netdev_phys_item_id*)*, i32 (%struct.net_device*, %struct.netdev_phys_item_id*)*, i32 (%struct.net_device*, i8*, i64)*, void (%struct.net_device*, %struct.udp_tunnel_info*)*, void (%struct.net_device*, %struct.udp_tunnel_info*)*, i8* (%struct.net_device*, %struct.net_device*)*, void (%struct.net_device*, i8*)*, i32 (%struct.net_device*, i32, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i1)*, i32 (%struct.net_device*, %struct.sk_buff*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.netdev_bpf*)*, i32 (%struct.net_device*, i32, %struct.xdp_frame**, i32)*, i32 (%struct.net_device*, i32, i32)*, %struct.devlink_port* (%struct.net_device*)* }
%struct.sk_buff = type { %union.anon.40, %union.anon.43, %union.anon.13, [48 x i8], %union.anon.45, i64, i32, i32, i16, i16, i16, [0 x i8], i8, i8, [0 x i32], [0 x i8], i16, [0 x i8], i16, i16, %struct.atomic_t, i32, i32, i32, i16, i16, %struct.atomic_t, i32, %struct.atomic_t, %union.anon.51, i16, i16, i16, i16, i16, i16, i16, [0 x i32], i32, i32, i8*, i8*, i32, %union.anon.17, %struct.skb_ext* }
%union.anon.40 = type { %struct.anon.41 }
%struct.anon.41 = type { %struct.sk_buff*, %struct.sk_buff*, %union.anon.42 }
%union.anon.42 = type { %struct.net_device* }
%union.anon.43 = type { %struct.sock* }
%union.anon.45 = type { %struct.anon.46 }
%struct.anon.46 = type { i64, void (%struct.sk_buff*)* }
%union.anon.51 = type { i16 }
%struct.skb_ext = type { %union.anon.17, [1 x i8], i8, [2 x i8], [0 x i8] }
%struct.ifreq = type { %union.anon.127, %union.anon.128 }
%union.anon.128 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.neigh_parms = type opaque
%struct.rtnl_link_stats64 = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.ifla_vf_info = type { i32, [32 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.ifla_vf_stats = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.nlattr = type { i16, i16 }
%struct.netlink_ext_ack = type { i8*, %struct.nlattr*, [20 x i8], i8 }
%struct.neighbour = type opaque
%struct.ndmsg = type { i8, i8, i16, i32, i16, i8, i8 }
%struct.netlink_callback = type { %struct.sk_buff*, %struct.nlmsghdr*, i32 (%struct.sk_buff*, %struct.netlink_callback*)*, i32 (%struct.netlink_callback*)*, i8*, %struct.module*, %struct.netlink_ext_ack*, i16, i16, i8, i16, i32, i32, %union.anon.130 }
%struct.nlmsghdr = type { i32, i16, i16, i32, i32 }
%union.anon.130 = type { [6 x i64] }
%struct.netdev_phys_item_id = type { [32 x i8], i8 }
%struct.udp_tunnel_info = type opaque
%struct.netdev_bpf = type { i32, %union.anon.131 }
%union.anon.131 = type { %struct.anon.132 }
%struct.anon.132 = type { i32, %struct.bpf_prog*, %struct.netlink_ext_ack* }
%struct.xdp_frame = type { i8*, i16, i16, i16, %struct.util_est, %struct.net_device* }
%struct.devlink_port = type opaque
%struct.ethtool_ops = type { void (%struct.net_device*, %struct.ethtool_drvinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, %struct.ethtool_regs*, i8*)*, void (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*, %struct.ethtool_wolinfo*)*, i32 (%struct.net_device*)*, void (%struct.net_device*, i32)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_coalesce*)*, void (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_ringparam*)*, void (%struct.net_device*, %struct.ethtool_pauseparam*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, void (%struct.net_device*, %struct.ethtool_test*, i64*)*, void (%struct.net_device*, i32, i8*)*, i32 (%struct.net_device*, i32)*, void (%struct.net_device*, %struct.ethtool_stats*, i64*)*, i32 (%struct.net_device*)*, void (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, i32)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*, i32*)*, i32 (%struct.net_device*, %struct.ethtool_rxnfc*)*, i32 (%struct.net_device*, %struct.ethtool_flash*)*, i32 (%struct.net_device*, i32*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*)*, i32 (%struct.net_device*, i32*, i8*, i8*)*, i32 (%struct.net_device*, i32*, i8*, i8)*, i32 (%struct.net_device*, i32*, i8*, i8*, i32)*, i32 (%struct.net_device*, i32*, i8*, i8, i32*, i1)*, void (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_ringparam*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*)*, i32 (%struct.net_device*, %struct.ethtool_ts_info*)*, i32 (%struct.net_device*, %struct.ethtool_modinfo*)*, i32 (%struct.net_device*, %struct.ethtool_eeprom*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_eee*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, %struct.ethtool_tunable*, i8*)*, i32 (%struct.net_device*, i32, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, i32, %struct.ethtool_coalesce*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)*, i32 (%struct.net_device*, %struct.ethtool_link_ksettings*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, i32 (%struct.net_device*, %struct.ethtool_pauseparam*)*, void (%struct.net_device*, %struct.ethtool_stats*, i64*)* }
%struct.ethtool_drvinfo = type { i32, [32 x i8], [32 x i8], [32 x i8], [32 x i8], [32 x i8], [12 x i8], i32, i32, i32, i32, i32 }
%struct.ethtool_regs = type { i32, i32, i32, [0 x i8] }
%struct.ethtool_wolinfo = type { i32, i32, i32, [6 x i8] }
%struct.ethtool_coalesce = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_test = type { i32, i32, i32, i32, [0 x i64] }
%struct.ethtool_rxnfc = type { i32, i32, i64, %struct.ethtool_rx_flow_spec, %struct.atomic_t, [0 x i32] }
%struct.ethtool_rx_flow_spec = type { i32, %union.ethtool_flow_union, %struct.ethtool_flow_ext, %union.ethtool_flow_union, %struct.ethtool_flow_ext, i64, i32 }
%union.ethtool_flow_union = type { %struct.ethtool_tcpip6_spec, [12 x i8] }
%struct.ethtool_tcpip6_spec = type { [4 x i32], [4 x i32], i16, i16, i8 }
%struct.ethtool_flow_ext = type { [2 x i8], [6 x i8], i16, i16, [2 x i32] }
%struct.ethtool_flash = type { i32, i32, [128 x i8] }
%struct.ethtool_ringparam = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ethtool_eeprom = type { i32, i32, i32, i32, [0 x i8] }
%struct.ethtool_ts_info = type { i32, i32, i32, i32, [3 x i32], i32, [3 x i32] }
%struct.ethtool_modinfo = type { i32, i32, i32, [8 x i32] }
%struct.ethtool_eee = type { i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.ethtool_tunable = type { i32, i32, i32, i32, [0 x i8*] }
%struct.ethtool_link_ksettings = type { %struct.ethtool_link_settings, %struct.anon.137 }
%struct.ethtool_link_settings = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x i8], [7 x i32], [0 x i32] }
%struct.anon.137 = type { [2 x i64], [2 x i64], [2 x i64] }
%struct.ethtool_stats = type { i32, i32, [0 x i64] }
%struct.ndisc_ops = type opaque
%struct.header_ops = type { i32 (%struct.sk_buff*, %struct.net_device*, i16, i8*, i8*, i32)*, i32 (%struct.sk_buff*, i8*)*, i32 (%struct.neighbour*, %struct.hh_cache*, i16)*, void (%struct.hh_cache*, %struct.net_device*, i8*)*, i1 (i8*, i32)*, i16 (%struct.sk_buff*)* }
%struct.hh_cache = type { i32, %struct.seqlock_t, [12 x i64] }
%struct.seqlock_t = type { %struct.atomic_t, %struct.spinlock }
%struct.netdev_hw_addr_list = type { %struct.list_head, i32 }
%struct.in_device = type opaque
%struct.inet6_dev = type opaque
%struct.wireless_dev = type opaque
%struct.wpan_dev = type opaque
%struct.netdev_rx_queue = type { %struct.rps_map*, %struct.rps_dev_flow_table*, %struct.kobject, %struct.net_device*, [40 x i8], %struct.xdp_rxq_info }
%struct.rps_map = type { i32, %struct.callback_head, [0 x i16] }
%struct.rps_dev_flow_table = type { i32, %struct.callback_head, [0 x %struct.rps_dev_flow] }
%struct.rps_dev_flow = type { i16, i16, i32 }
%struct.xdp_rxq_info = type { %struct.net_device*, i32, i32, %struct.util_est, [40 x i8] }
%struct.nf_hook_entries = type opaque
%struct.cpu_rmap = type opaque
%struct.netdev_queue = type { %struct.net_device*, %struct.Qdisc*, %struct.Qdisc*, %struct.kobject, i32, i64, i64, %struct.net_device*, [8 x i8], %struct.spinlock, i32, i64, i64, [40 x i8], %struct.dql }
%struct.dql = type { i32, i32, i32, [52 x i8], i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, [20 x i8] }
%struct.Qdisc = type { i32 (%struct.sk_buff*, %struct.Qdisc*, %struct.sk_buff**)*, %struct.sk_buff* (%struct.Qdisc*)*, i32, i32, %struct.Qdisc_ops*, %struct.qdisc_size_table*, %struct.hlist_node, i32, i32, %struct.netdev_queue*, %struct.net_rate_estimator*, %struct.gnet_stats_basic_cpu*, %struct.gnet_stats_queue*, i32, %union.anon.17, [24 x i8], %struct.sk_buff_head, %struct.sk_buff_head, %struct.gnet_stats_basic_packed, %struct.atomic_t, %struct.gnet_stats_queue, i64, %struct.Qdisc*, %struct.sk_buff_head, %struct.spinlock, %struct.spinlock, i8, %struct.callback_head, [32 x i8] }
%struct.Qdisc_ops = type { %struct.Qdisc_ops*, %struct.Qdisc_class_ops*, [16 x i8], i32, i32, i32 (%struct.sk_buff*, %struct.Qdisc*, %struct.sk_buff**)*, %struct.sk_buff* (%struct.Qdisc*)*, %struct.sk_buff* (%struct.Qdisc*)*, i32 (%struct.Qdisc*, %struct.nlattr*, %struct.netlink_ext_ack*)*, void (%struct.Qdisc*)*, void (%struct.Qdisc*)*, i32 (%struct.Qdisc*, %struct.nlattr*, %struct.netlink_ext_ack*)*, void (%struct.Qdisc*)*, i32 (%struct.Qdisc*, i32)*, i32 (%struct.Qdisc*, %struct.sk_buff*)*, i32 (%struct.Qdisc*, %struct.gnet_dump*)*, void (%struct.Qdisc*, i32)*, void (%struct.Qdisc*, i32)*, i32 (%struct.Qdisc*)*, i32 (%struct.Qdisc*)*, %struct.module* }
%struct.Qdisc_class_ops = type { i32, %struct.netdev_queue* (%struct.Qdisc*, %struct.tcmsg*)*, i32 (%struct.Qdisc*, i64, %struct.Qdisc*, %struct.Qdisc**, %struct.netlink_ext_ack*)*, %struct.Qdisc* (%struct.Qdisc*, i64)*, void (%struct.Qdisc*, i64)*, i64 (%struct.Qdisc*, i32)*, i32 (%struct.Qdisc*, i32, i32, %struct.nlattr**, i64*, %struct.netlink_ext_ack*)*, i32 (%struct.Qdisc*, i64)*, void (%struct.Qdisc*, %struct.qdisc_walker*)*, %struct.tcf_block* (%struct.Qdisc*, i64, %struct.netlink_ext_ack*)*, i64 (%struct.Qdisc*, i64, i32)*, void (%struct.Qdisc*, i64)*, i32 (%struct.Qdisc*, i64, %struct.sk_buff*, %struct.tcmsg*)*, i32 (%struct.Qdisc*, i64, %struct.gnet_dump*)* }
%struct.tcmsg = type { i8, i8, i16, i32, i32, i32, i32 }
%struct.qdisc_walker = type opaque
%struct.tcf_block = type { %struct.mutex, %struct.list_head, i32, %union.anon.17, %struct.net*, %struct.Qdisc*, %struct.rw_semaphore, %struct.sysv_shm, %struct.list_head, i8, %struct.atomic_t, i32, i32, %struct.anon.141, %struct.callback_head, [128 x %struct.hlist_head], %struct.mutex }
%struct.anon.141 = type { %struct.tcf_chain*, %struct.list_head }
%struct.tcf_chain = type { %struct.mutex, %struct.tcf_proto*, %struct.list_head, %struct.tcf_block*, i32, i32, i32, i8, i8, %struct.tcf_proto_ops*, i8*, %struct.callback_head }
%struct.tcf_proto = type { %struct.tcf_proto*, i8*, i32 (%struct.sk_buff*, %struct.tcf_proto*, %struct.tcf_result*)*, i16, i32, i8*, %struct.tcf_proto_ops*, %struct.tcf_chain*, %struct.spinlock, i8, %union.anon.17, %struct.callback_head, %struct.hlist_node }
%struct.tcf_result = type { %union.anon.138 }
%union.anon.138 = type { %struct.thread_info }
%struct.tcf_proto_ops = type { %struct.list_head, [16 x i8], i32 (%struct.sk_buff*, %struct.tcf_proto*, %struct.tcf_result*)*, i32 (%struct.tcf_proto*)*, void (%struct.tcf_proto*, i1, %struct.netlink_ext_ack*)*, i8* (%struct.tcf_proto*, i32)*, void (%struct.tcf_proto*, i8*)*, i32 (%struct.net*, %struct.sk_buff*, %struct.tcf_proto*, i64, i32, %struct.nlattr**, i8**, i1, i1, %struct.netlink_ext_ack*)*, i32 (%struct.tcf_proto*, i8*, i8*, i1, %struct.netlink_ext_ack*)*, void (%struct.tcf_proto*, %struct.tcf_walker*, i1)*, i32 (%struct.tcf_proto*, i1, i32 (i32, i8*, i8*)*, i8*, %struct.netlink_ext_ack*)*, void (%struct.tcf_proto*, i8*)*, void (%struct.tcf_proto*, i8*)*, void (i8*, i32, i64)*, i8* (%struct.net*, %struct.tcf_chain*, %struct.nlattr**, %struct.netlink_ext_ack*)*, void (i8*)*, i32 (%struct.net*, %struct.tcf_proto*, i8*, %struct.sk_buff*, %struct.tcmsg*, i1)*, i32 (%struct.sk_buff*, %struct.net*, i8*)*, %struct.module*, i32 }
%struct.tcf_walker = type opaque
%struct.gnet_dump = type { %struct.spinlock*, %struct.sk_buff*, %struct.nlattr*, i32, i32, i32, i8*, i32, %struct.tc_stats }
%struct.tc_stats = type { i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.qdisc_size_table = type { %struct.callback_head, %struct.list_head, %struct.tc_sizespec, i32, [0 x i16] }
%struct.tc_sizespec = type { i8, i8, i16, i32, i32, i32, i32, i32 }
%struct.net_rate_estimator = type opaque
%struct.gnet_stats_basic_cpu = type { %struct.gnet_stats_basic_packed, %struct.u64_stats_sync, [4 x i8] }
%struct.gnet_stats_basic_packed = type <{ i64, i32 }>
%struct.gnet_stats_queue = type { i32, i32, i32, i32, i32 }
%struct.sk_buff_head = type { %struct.sk_buff*, %struct.sk_buff*, i32, %struct.spinlock }
%struct.xps_dev_maps = type { %struct.callback_head, [0 x %struct.xps_map*] }
%struct.xps_map = type { i32, i32, %struct.callback_head, [0 x i16] }
%struct.mini_Qdisc = type { %struct.tcf_proto*, %struct.gnet_stats_basic_cpu*, %struct.gnet_stats_queue*, %struct.callback_head }
%struct.timer_list = type { %struct.hlist_node, i64, void (%struct.timer_list*)*, i32 }
%struct.netpoll_info = type opaque
%struct.possible_net_t = type { %struct.net* }
%union.anon.142 = type { i8* }
%struct.device = type { %struct.kobject, %struct.device*, %struct.device_private*, i8*, %struct.device_type*, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.mutex, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, %struct.dma_map_ops*, i64*, i64, i64, i64, %struct.device_dma_parameters*, %struct.list_head, %union.anon.142, %struct.device_node*, %struct.fwnode_handle*, i32, i32, i32, %struct.spinlock, %struct.list_head, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.iommu_fwspec*, %struct.iommu_param*, i8 }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.atomic_t*, %struct.atomic_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.u64_stats_sync, i8 }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.attribute_group**, %struct.dev_pm_ops*, void (%struct.device*)*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, i32 }
%struct.dev_pm_info = type { %struct.atomic_t, i16, i32, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.hrtimer, i64, %struct.work_struct, %struct.wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.wakeup_source = type { i8*, i32, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.device*, i8 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head }
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type { i8* (%struct.device*, i64, i64*, i32, i64)*, void (%struct.device*, i64, i8*, i64, i64)*, i32 (%struct.device*, %struct.vm_area_struct*, i8*, i64, i64, i64)*, i32 (%struct.device*, %struct.sg_table*, i8*, i64, i64, i64)*, i64 (%struct.device*, %struct.page*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, i32 (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, void (%struct.device*, %struct.scatterlist*, i32, i32, i64)*, i64 (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32, i64)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, i64, i64, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, %struct.scatterlist*, i32, i32)*, void (%struct.device*, i8*, i64, i32)*, i32 (%struct.device*, i64)*, i64 (%struct.device*)*, i64 (%struct.device*)*, i64 (%struct.device*)* }
%struct.sg_table = type { %struct.scatterlist*, i32, i32 }
%struct.scatterlist = type { i64, i32, i32, i64, i32 }
%struct.page = type { i64, %union.anon.57, %union.anon.17, %struct.atomic_t, [8 x i8] }
%union.anon.57 = type { %struct.anon.58 }
%struct.anon.58 = type { %struct.list_head, %struct.address_space*, i64, i64 }
%struct.device_dma_parameters = type { i32, i64 }
%struct.device_node = type opaque
%struct.fwnode_handle = type { %struct.fwnode_handle*, %struct.fwnode_operations* }
%struct.fwnode_operations = type { %struct.fwnode_handle* (%struct.fwnode_handle*)*, void (%struct.fwnode_handle*)*, i1 (%struct.fwnode_handle*)*, i8* (%struct.fwnode_handle*, %struct.device*)*, i1 (%struct.fwnode_handle*, i8*)*, i32 (%struct.fwnode_handle*, i8*, i32, i8*, i64)*, i32 (%struct.fwnode_handle*, i8*, i8**, i64)*, %struct.fwnode_handle* (%struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*, %struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*, i8*)*, i32 (%struct.fwnode_handle*, i8*, i8*, i32, i32, %struct.fwnode_reference_args*)*, %struct.fwnode_handle* (%struct.fwnode_handle*, %struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*)*, i32 (%struct.fwnode_handle*, %struct.fwnode_endpoint*)* }
%struct.fwnode_reference_args = type { %struct.fwnode_handle*, i32, [8 x i64] }
%struct.fwnode_endpoint = type { i32, i32, %struct.fwnode_handle* }
%struct.class = type { i8*, %struct.module*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, void (%struct.device*, %struct.atomic_t*, %struct.atomic_t*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.iommu_group = type opaque
%struct.iommu_fwspec = type opaque
%struct.iommu_param = type opaque
%struct.rtnl_link_ops = type { %struct.list_head, i8*, i64, void (%struct.net_device*)*, i32, %struct.nla_policy*, i32 (%struct.nlattr**, %struct.nlattr**, %struct.netlink_ext_ack*)*, i32 (%struct.net*, %struct.net_device*, %struct.nlattr**, %struct.nlattr**, %struct.netlink_ext_ack*)*, i32 (%struct.net_device*, %struct.nlattr**, %struct.nlattr**, %struct.netlink_ext_ack*)*, void (%struct.net_device*, %struct.list_head*)*, i64 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i64 (%struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*)*, i32 ()*, i32 ()*, i32, %struct.nla_policy*, i32 (%struct.net_device*, %struct.net_device*, %struct.nlattr**, %struct.nlattr**, %struct.netlink_ext_ack*)*, i64 (%struct.net_device*, %struct.net_device*)*, i32 (%struct.sk_buff*, %struct.net_device*, %struct.net_device*)*, %struct.net* (%struct.net_device*)*, i64 (%struct.net_device*, i32)*, i32 (%struct.sk_buff*, %struct.net_device*, i32*, i32)* }
%struct.nla_policy = type { i8, i8, i16, %union.anon.142 }
%struct.phy_device = type opaque
%struct.sfp_bus = type opaque
%struct.netns_core = type { %struct.ctl_table_header*, i32, i32*, %struct.prot_inuse* }
%struct.prot_inuse = type opaque
%struct.netns_mib = type { %struct.tcp_mib*, %struct.ipstats_mib*, %struct.linux_mib*, %struct.udp_mib*, %struct.udp_mib*, %struct.icmp_mib*, %struct.icmpmsg_mib*, %struct.proc_dir_entry*, %struct.udp_mib*, %struct.udp_mib*, %struct.ipstats_mib*, %union.anon.130*, %struct.icmpmsg_mib* }
%struct.tcp_mib = type { [16 x i64] }
%struct.linux_mib = type { [120 x i64] }
%struct.icmp_mib = type { [28 x i64] }
%struct.udp_mib = type { [9 x i64] }
%struct.ipstats_mib = type { [37 x i64], %struct.u64_stats_sync }
%struct.icmpmsg_mib = type { [512 x %union.anon.13] }
%struct.netns_packet = type { %struct.mutex, %struct.hlist_head }
%struct.netns_unix = type { i32, %struct.ctl_table_header* }
%struct.netns_nexthop = type { %struct.rb_root, %struct.hlist_head*, i32, i32 }
%struct.netns_ipv4 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ipv4_devconf*, %struct.ipv4_devconf*, %struct.ip_ra_chain*, %struct.mutex, %struct.fib_rules_ops*, i8, i32, %struct.fib_table*, %struct.fib_table*, i8, %struct.hlist_head*, i8, %struct.sock*, %struct.sock**, %struct.sock*, %struct.inet_peer_base*, %struct.sock**, %struct.fqdir*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, i32, i32, i32, i32, i32, i32, %struct.local_ports, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, i64, %struct.inet_timewait_death_row, i32, i32, %struct.tcp_congestion_ops*, %struct.tcp_fastopen_context*, %struct.spinlock, i32, %struct.atomic_t, i64, i32, i32, i32, i32, i32, i32, %struct.ping_group_range, %struct.atomic_t, i64*, i32, %struct.mr_table*, i32, i32, %struct.fib_notifier_ops*, i32, %struct.fib_notifier_ops*, i32, %struct.atomic_t, %struct.siphash_key_t, [16 x i8] }
%struct.ipv4_devconf = type opaque
%struct.ip_ra_chain = type opaque
%struct.fib_rules_ops = type opaque
%struct.fib_table = type opaque
%struct.inet_peer_base = type opaque
%struct.fqdir = type { i64, i64, i32, i32, %struct.inet_frags*, %struct.net*, i8, [23 x i8], %struct.rhashtable, [56 x i8], %union.anon.13, %struct.work_struct, [24 x i8] }
%struct.inet_frags = type { i32, void (%struct.inet_frag_queue*, i8*)*, void (%struct.inet_frag_queue*)*, void (%struct.timer_list*)*, %struct.kmem_cache*, i8*, %struct.rhashtable_params, %union.anon.17, %struct.completion }
%struct.inet_frag_queue = type { %struct.rhash_head, %union.anon.38, %struct.timer_list, %struct.spinlock, %union.anon.17, %struct.rb_root, %struct.sk_buff*, %struct.sk_buff*, i64, i32, i32, i8, i16, %struct.fqdir*, %struct.callback_head }
%struct.rhash_head = type { %struct.rhash_head* }
%union.anon.38 = type { %struct.frag_v6_compare_key }
%struct.frag_v6_compare_key = type { %struct.in6_addr, %struct.in6_addr, i32, i32, i32 }
%struct.in6_addr = type { %union.anon.39 }
%union.anon.39 = type { [4 x i32] }
%struct.rhashtable_params = type { i16, i16, i16, i16, i32, i16, i8, i32 (i8*, i32, i32)*, i32 (i8*, i32, i32)*, i32 (%struct.rhashtable_compare_arg*, i8*)* }
%struct.rhashtable_compare_arg = type { %struct.rhashtable*, i8* }
%struct.rhashtable = type { %struct.bucket_table*, i32, i32, %struct.rhashtable_params, i8, %struct.work_struct, %struct.mutex, %struct.spinlock, %struct.atomic_t }
%struct.bucket_table = type { i32, i32, i32, %struct.list_head, %struct.callback_head, %struct.bucket_table*, %struct.u64_stats_sync, [8 x i8], [0 x %struct.u64_stats_sync*] }
%struct.xt_table = type opaque
%struct.local_ports = type { %struct.seqlock_t, [2 x i32], i8 }
%struct.inet_timewait_death_row = type { %struct.atomic_t, [60 x i8], %struct.inet_hashinfo*, i32, [52 x i8] }
%struct.inet_hashinfo = type opaque
%struct.tcp_congestion_ops = type opaque
%struct.tcp_fastopen_context = type opaque
%struct.ping_group_range = type { %struct.seqlock_t, [2 x %struct.atomic_t] }
%struct.mr_table = type opaque
%struct.fib_notifier_ops = type opaque
%struct.siphash_key_t = type { [2 x i64] }
%struct.netns_ipv6 = type { %struct.netns_sysctl_ipv6, %struct.ipv6_devconf*, %struct.ipv6_devconf*, %struct.inet_peer_base*, %struct.fqdir*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.xt_table*, %struct.fib6_info*, %struct.rt6_info*, %struct.rt6_statistics*, %struct.timer_list, %struct.hlist_head*, %struct.fib6_table*, %struct.list_head, [16 x i8], %struct.dst_ops, %struct.rwlock_t, %struct.spinlock, i32, i64, %struct.sock**, %struct.sock*, %struct.sock*, %struct.sock*, %struct.sock*, %struct.atomic_t, %struct.atomic_t, %struct.seg6_pernet_data*, %struct.fib_notifier_ops*, %struct.fib_notifier_ops*, i32, %struct.anon.54, [8 x i8] }
%struct.netns_sysctl_ipv6 = type { %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, %struct.ctl_table_header*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i64], i64*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct.ipv6_devconf = type opaque
%struct.fib6_info = type opaque
%struct.rt6_info = type opaque
%struct.rt6_statistics = type opaque
%struct.fib6_table = type opaque
%struct.dst_ops = type { i16, i32, i32 (%struct.dst_ops*)*, %struct.dst_entry* (%struct.dst_entry*, i32)*, i32 (%struct.dst_entry*)*, i32 (%struct.dst_entry*)*, i32* (%struct.dst_entry*, i64)*, void (%struct.dst_entry*)*, void (%struct.dst_entry*, %struct.net_device*, i32)*, %struct.dst_entry* (%struct.dst_entry*)*, void (%struct.sk_buff*)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*, i32)*, void (%struct.dst_entry*, %struct.sock*, %struct.sk_buff*)*, i32 (%struct.net*, %struct.sock*, %struct.sk_buff*)*, %struct.neighbour* (%struct.dst_entry*, %struct.sk_buff*, i8*)*, void (%struct.dst_entry*, i8*)*, %struct.kmem_cache*, %struct.percpu_counter, [24 x i8] }
%struct.dst_entry = type opaque
%struct.percpu_counter = type { %struct.raw_spinlock, i64, %struct.list_head, i32* }
%struct.rwlock_t = type { %struct.qrwlock }
%struct.qrwlock = type { %union.anon.17, %struct.qspinlock }
%struct.seg6_pernet_data = type opaque
%struct.anon.54 = type { %struct.hlist_head, %struct.spinlock, i32 }
%struct.netns_nf = type { %struct.proc_dir_entry*, %struct.nf_queue_handler*, [13 x %struct.nf_logger*], %struct.ctl_table_header*, [5 x %struct.nf_hook_entries*], [5 x %struct.nf_hook_entries*], i8, i8 }
%struct.nf_queue_handler = type opaque
%struct.nf_logger = type opaque
%struct.netns_xt = type { [13 x %struct.list_head], i8, i8 }
%struct.netns_ct = type { %struct.atomic_t, i32, i8, %struct.ctl_table_header*, i32, i32, i32, i32, i32, i32, %struct.ct_pcpu*, %struct.ip_conntrack_stat*, %struct.nf_ct_event_notifier*, %struct.nf_exp_event_notifier*, %struct.nf_ip_net }
%struct.ct_pcpu = type { %struct.spinlock, %struct.hlist_nulls_head, %struct.hlist_nulls_head }
%struct.hlist_nulls_head = type { %struct.hlist_nulls_node* }
%struct.hlist_nulls_node = type { %struct.hlist_nulls_node*, %struct.hlist_nulls_node** }
%struct.ip_conntrack_stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.nf_ct_event_notifier = type opaque
%struct.nf_exp_event_notifier = type opaque
%struct.nf_ip_net = type { %struct.atomic_t, %struct.nf_tcp_net, %struct.kernel_cap_struct, %struct.atomic_t, %struct.atomic_t }
%struct.nf_tcp_net = type { [14 x i32], i32, i32, i32 }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.netns_nf_frag = type { %struct.fqdir* }
%struct.net_generic = type opaque
%struct.netns_xfrm = type { %struct.list_head, %struct.hlist_head*, %struct.hlist_head*, %struct.hlist_head*, i32, i32, %struct.work_struct, %struct.list_head, %struct.hlist_head*, i32, [3 x %struct.hlist_head], [3 x %struct.xfrm_policy_hash], [6 x i32], %struct.work_struct, %struct.xfrm_policy_hthresh, %struct.list_head, %struct.sock*, %struct.sock*, i32, i32, i32, i32, %struct.ctl_table_header*, [40 x i8], %struct.dst_ops, %struct.dst_ops, %struct.spinlock, %struct.spinlock, %struct.mutex, [24 x i8] }
%struct.xfrm_policy_hash = type { %struct.hlist_head*, i32, i8, i8, i8, i8 }
%struct.xfrm_policy_hthresh = type { %struct.work_struct, %struct.seqlock_t, i8, i8, i8, i8 }
%struct.sock = type opaque
%struct.cgroup_namespace = type { %union.anon.17, %struct.ns_common, %struct.user_namespace*, %struct.ucounts*, %struct.css_set* }
%struct.signal_struct = type { %union.anon.17, %struct.atomic_t, i32, %struct.list_head, %struct.wait_queue_head, %struct.task_struct*, %struct.sigpending, %struct.hlist_head, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, i64, [2 x %struct.tnum], %struct.thread_group_cputimer, %struct.posix_cputimers, [4 x %struct.pid*], %struct.pid*, i32, %struct.tty_struct*, %struct.seqlock_t, i64, i64, i64, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.tnum], %struct.pacct_struct, %struct.taskstats*, i32, %struct.tty_audit_buf*, i8, i16, i16, %struct.mm_struct*, %struct.mutex }
%struct.tnum = type { i64, i64 }
%struct.thread_group_cputimer = type { %struct.task_cputime_atomic }
%struct.task_cputime_atomic = type { %union.anon.13, %union.anon.13, %union.anon.13 }
%struct.tty_struct = type opaque
%struct.pacct_struct = type { i32, i64, i64, i64, i64, i64, i64 }
%struct.taskstats = type { i16, i32, i8, i8, i64, i64, i64, i64, i64, i64, i64, i64, [32 x i8], i8, [3 x i8], [4 x i8], i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.tty_audit_buf = type opaque
%struct.sighand_struct = type { %struct.spinlock, %union.anon.17, %struct.wait_queue_head, [64 x %struct.k_sigaction] }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.cpumask }
%struct.sigpending = type { %struct.list_head, %struct.cpumask }
%struct.audit_context = type opaque
%struct.seccomp = type { i32, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.raw_spinlock = type { %struct.qspinlock }
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root_cached = type { %struct.rb_root, %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type { %union.anon.13, %struct.atomic_t, %struct.atomic_t, %struct.spinlock, i16, i32, i64, %struct.xarray, %struct.io_cq*, %struct.hlist_head, %struct.work_struct }
%struct.io_cq = type { %struct.request_queue*, %struct.io_context*, %struct.sysv_shm, %union.anon.75, i32 }
%struct.request_queue = type opaque
%struct.capture_control = type opaque
%struct.kernel_siginfo = type { %struct.anon.76 }
%struct.anon.76 = type { i32, i32, i32, %union.__sifields }
%union.__sifields = type { %struct.anon.80 }
%struct.anon.80 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type { i64, i64, i64, i64, i64, i64, i64 }
%struct.cpumask = type { [1 x i64] }
%struct.css_set = type { [4 x %struct.cgroup_subsys_state*], %union.anon.17, %struct.css_set*, %struct.cgroup*, i32, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, [4 x %struct.list_head], %struct.list_head, %struct.list_head, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.cgroup*, %struct.cgroup*, %struct.css_set*, i8, %struct.callback_head }
%struct.cgroup_subsys_state = type { %struct.cgroup*, %struct.cgroup_subsys*, %struct.percpu_ref, %struct.list_head, %struct.list_head, %struct.list_head, i32, i32, i64, %struct.atomic_t, %struct.work_struct, %struct.rcu_work, %struct.cgroup_subsys_state* }
%struct.cgroup_subsys = type { %struct.cgroup_subsys_state* (%struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*)*, void (%struct.cgroup_subsys_state*, i32)*, i32 (%struct.seq_file*, %struct.cgroup_subsys_state*)*, i32 (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void (%struct.cgroup_taskset*)*, void ()*, i32 (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.task_struct*)*, void (%struct.cgroup_subsys_state*)*, i8, i32, i8*, i8*, %struct.cgroup_root*, %struct.idr, %struct.list_head, %struct.cftype*, %struct.cftype*, i32 }
%struct.seq_file = type { i8*, i64, i64, i64, i64, i64, i64, i64, %struct.mutex, %struct.seq_operations*, i32, %struct.file*, i8* }
%struct.seq_operations = type { i8* (%struct.seq_file*, i64*)*, void (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i8*, i64*)*, i32 (%struct.seq_file*, i8*)* }
%struct.cgroup_taskset = type opaque
%struct.cgroup_root = type { %struct.kernfs_root*, i32, i32, %struct.cgroup, i32, %struct.atomic_t, %struct.list_head, i32, %struct.idr, [4096 x i8], [64 x i8] }
%struct.kernfs_root = type { %struct.kernfs_node*, i32, %struct.idr, i32, %struct.kernfs_syscall_ops*, %struct.list_head, %struct.wait_queue_head }
%struct.kernfs_syscall_ops = type { i32 (%struct.seq_file*, %struct.kernfs_root*)*, i32 (%struct.kernfs_node*, i8*, i16)*, i32 (%struct.kernfs_node*)*, i32 (%struct.kernfs_node*, %struct.kernfs_node*, i8*)*, i32 (%struct.seq_file*, %struct.kernfs_node*, %struct.kernfs_root*)* }
%struct.cgroup = type { %struct.cgroup_subsys_state, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.kernfs_node*, %struct.cgroup_file, %struct.cgroup_file, i16, i16, i16, i16, [4 x %struct.cgroup_subsys_state*], %struct.cgroup_root*, %struct.list_head, [4 x %struct.list_head], %struct.cgroup*, %struct.cgroup*, %struct.cgroup_rstat_cpu*, %struct.list_head, %struct.cgroup_base_stat, %struct.cgroup_base_stat, %struct.prev_cputime, %struct.list_head, %struct.mutex, %struct.wait_queue_head, %struct.work_struct, %struct.u64_stats_sync, %struct.u64_stats_sync, %struct.atomic_t, %struct.cgroup_freezer_state, [0 x i32] }
%struct.cgroup_file = type { %struct.kernfs_node*, i64, %struct.timer_list }
%struct.cgroup_rstat_cpu = type { %struct.u64_stats_sync, %struct.cgroup_base_stat, %struct.cgroup_base_stat, %struct.cgroup*, %struct.cgroup* }
%struct.cgroup_base_stat = type { %struct.task_cputime }
%struct.task_cputime = type { i64, i64, i64 }
%struct.cgroup_freezer_state = type { i8, i32, i32, i32 }
%struct.cftype = type { [64 x i8], i64, i64, i32, i32, %struct.cgroup_subsys*, %struct.list_head, %struct.kernfs_ops*, i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i64 (%struct.cgroup_subsys_state*, %struct.cftype*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i32 (%struct.cgroup_subsys_state*, %struct.cftype*, i64)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.poll_table_struct*)* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.poll_table_struct*)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.poll_table_struct = type opaque
%struct.percpu_ref = type { %union.anon.13, i64, void (%struct.percpu_ref*)*, void (%struct.percpu_ref*)*, i8, %struct.callback_head }
%struct.rcu_work = type { %struct.work_struct, %struct.callback_head, %struct.workqueue_struct* }
%struct.robust_list_head = type opaque
%struct.compat_robust_list_head = type { %struct.atomic_t, i32, i32 }
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type { %struct.pmu*, %struct.raw_spinlock, %struct.mutex, %struct.list_head, %struct.perf_event_groups, %struct.perf_event_groups, %struct.list_head, %struct.list_head, %struct.list_head, i32, i32, i32, i32, i32, i32, i32, %union.anon.17, %struct.task_struct*, i64, i64, %struct.perf_event_context*, i64, i64, i32, i8*, %struct.callback_head }
%struct.pmu = type { %struct.list_head, %struct.module*, %struct.device*, %struct.attribute_group**, %struct.attribute_group**, i8*, i32, i32, i32*, %struct.perf_cpu_context*, %struct.atomic_t, i32, i32, i32, void (%struct.pmu*)*, void (%struct.pmu*)*, i32 (%struct.perf_event*)*, void (%struct.perf_event*, %struct.mm_struct*)*, void (%struct.perf_event*, %struct.mm_struct*)*, i32 (%struct.perf_event*, i32)*, void (%struct.perf_event*, i32)*, void (%struct.perf_event*, i32)*, void (%struct.perf_event*, i32)*, void (%struct.perf_event*)*, void (%struct.pmu*, i32)*, i32 (%struct.pmu*)*, void (%struct.pmu*)*, i32 (%struct.perf_event*)*, void (%struct.perf_event_context*, i1)*, i64, i8* (%struct.perf_event*, i8**, i32, i1)*, void (i8*)*, i32 (%struct.list_head*)*, void (%struct.perf_event*)*, i32 (%struct.perf_event*)*, i32 (%struct.perf_event*)*, i32 (%struct.perf_event*, i64)* }
%struct.perf_cpu_context = type { %struct.perf_event_context, %struct.perf_event_context*, i32, i32, %struct.raw_spinlock, %struct.hrtimer, i64, i32, %struct.list_head, i32, i32 }
%struct.perf_event = type { %struct.list_head, %struct.list_head, %struct.list_head, %struct.rb_node, i64, %struct.list_head, %struct.hlist_node, %struct.list_head, i32, i32, i32, %struct.perf_event*, %struct.pmu*, i8*, i32, i32, %struct.local64_t, %union.anon.13, i64, i64, i64, i64, %struct.perf_event_attr, i16, i16, i16, %struct.hw_perf_event, %struct.perf_event_context*, %union.anon.13, %union.anon.13, %union.anon.13, %struct.mutex, %struct.list_head, %struct.perf_event*, i32, i32, %struct.list_head, %struct.task_struct*, %struct.mutex, %struct.atomic_t, %struct.ring_buffer*, %struct.list_head, i64, i32, %struct.wait_queue_head, %struct.fasync_struct*, i32, i32, i32, %struct.irq_work, %struct.atomic_t, %struct.perf_addr_filters_head, %struct.tnum*, i64, %struct.perf_event*, void (%struct.perf_event*)*, %struct.callback_head, %struct.pid_namespace*, i64, i64 ()*, void (%struct.perf_event*, %struct.perf_sample_data*, %struct.pt_regs*)*, i8*, void (%struct.perf_event*, %struct.perf_sample_data*, %struct.pt_regs*)*, %struct.bpf_prog*, %struct.trace_event_call*, %struct.event_filter*, %struct.list_head }
%struct.local64_t = type { %struct.local_t }
%struct.perf_event_attr = type { i32, i32, i64, %union.anon.13, i64, i64, i64, %struct.atomic_t, i32, %union.anon.13, %union.anon.13, i64, i64, i32, i32, i64, i32, i16, i16 }
%struct.hw_perf_event = type { %union.anon.91, %struct.task_struct*, i8*, i64, i32, %struct.local64_t, i64, i64, %struct.local64_t, i64, i64, i64, i64 }
%union.anon.91 = type { %struct.anon.92 }
%struct.anon.92 = type { i64, i64, i64, i64, i32, i32, i32, i32, %struct.hw_perf_event_extra, %struct.hw_perf_event_extra }
%struct.hw_perf_event_extra = type { i64, i32, i32, i32 }
%struct.ring_buffer = type opaque
%struct.fasync_struct = type { %struct.rwlock_t, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.irq_work = type { i64, %struct.llist_node, void (%struct.irq_work*)* }
%struct.perf_addr_filters_head = type { %struct.list_head, %struct.raw_spinlock, i32 }
%struct.perf_sample_data = type { i64, %struct.perf_raw_record*, %struct.perf_branch_stack*, i64, i64, i64, %union.anon.13, i64, i64, %struct.util_est, i64, i64, i64, %struct.util_est, %struct.perf_callchain_entry*, %struct.perf_regs, %struct.pt_regs, %struct.perf_regs, i64, i64, [48 x i8] }
%struct.perf_raw_record = type { %struct.perf_raw_frag, i32 }
%struct.perf_raw_frag = type <{ %union.anon.98, i64 (i8*, i8*, i64, i64)*, i8*, i32 }>
%union.anon.98 = type { %struct.perf_raw_frag* }
%struct.perf_branch_stack = type { i64, [0 x %struct.task_cputime] }
%struct.perf_callchain_entry = type { i64, [0 x i64] }
%struct.pt_regs = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.perf_regs = type { i64, %struct.pt_regs* }
%struct.trace_event_call = type opaque
%struct.event_filter = type opaque
%struct.perf_event_groups = type { %struct.rb_root, i64 }
%struct.rseq = type { i32, i32, %union.anon.13, i32, [12 x i8] }
%struct.tlbflush_unmap_batch = type { %struct.arch_tlbflush_unmap_batch, i8, i8 }
%struct.arch_tlbflush_unmap_batch = type { %struct.cpumask }
%struct.pipe_inode_info = type { %struct.mutex, %struct.wait_queue_head, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.page*, %struct.fasync_struct*, %struct.fasync_struct*, %struct.pipe_buffer*, %struct.user_struct* }
%struct.pipe_buffer = type { %struct.page*, i32, i32, %struct.pipe_buf_operations*, i32, i64 }
%struct.pipe_buf_operations = type { i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, void (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, i32 (%struct.pipe_inode_info*, %struct.pipe_buffer*)*, i1 (%struct.pipe_inode_info*, %struct.pipe_buffer*)* }
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.task_delay_info = type opaque
%struct.uprobe_task = type { i32, %union.anon.104, %struct.uprobe*, i64, %struct.return_instance*, i32 }
%union.anon.104 = type { %struct.anon.105 }
%struct.anon.105 = type { %struct.arch_uprobe_task, i64 }
%struct.arch_uprobe_task = type { i64, i32, i32 }
%struct.uprobe = type opaque
%struct.return_instance = type { %struct.uprobe*, i64, i64, i64, i8, %struct.return_instance* }
%struct.vm_struct = type { %struct.vm_struct*, i8*, i64, i64, %struct.page**, i32, i64, i8* }
%union.anon.17 = type { %struct.atomic_t }
%struct.thread_struct = type { [3 x %struct.rps_dev_flow], i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, i64*, i64, i32, %union.anon.13, i8, [31 x i8], %struct.fpu }
%struct.fpu = type { i32, i64, [48 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.107, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.110 }
%union.anon.107 = type { %struct.tnum }
%union.anon.110 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.completion = type { i32, %struct.wait_queue_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_mm = type opaque
%struct.uprobes_state = type { %struct.xol_area* }
%struct.xol_area = type opaque
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, i64)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i64 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, %struct.mempolicy*)*, %struct.mempolicy* (%struct.vm_area_struct*, i64)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %union.anon.13*, %union.anon.13*, %union.anon.13, %struct.page*, %struct.mem_cgroup*, %struct.page*, %union.anon.13*, %struct.spinlock*, %struct.page* }
%struct.mem_cgroup = type opaque
%struct.mempolicy = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon.55, i8*, %union.anon.13, i16, i16, %struct.kernfs_iattrs* }
%union.anon.55 = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.qspinlock = type { %union.anon.17 }
%struct.module_param_attrs = type opaque
%struct.module_attribute = type { %struct.attribute, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*)*, i64 (%struct.module_attribute*, %struct.module_kobject*, i8*, i64)*, void (%struct.module*, i8*)*, i32 (%struct.module*)*, void (%struct.module*)* }
%struct.kernel_param = type { i8*, %struct.module*, %struct.kernel_param_ops*, i16, i8, i8, %union.anon.142 }
%struct.kernel_param_ops = type { i32, i32 (i8*, %struct.kernel_param*)*, i32 (i8*, %struct.kernel_param*)*, void (i8*)* }
%struct.uid_gid_extent = type { i32, i32, i32 }
%struct.module_layout = type { i8*, i32, i32, i32, i32, %struct.mod_tree_node }
%struct.mod_tree_node = type { %struct.module*, %struct.latch_tree_node }
%struct.mod_arch_specific = type { i32, i32*, %struct.orc_entry* }
%struct.orc_entry = type { i16, i16, i16 }
%struct.bug_entry = type { i32, i32, i16, i16 }
%struct.mod_kallsyms = type { %struct.elf64_sym*, i32, i8*, i8* }
%struct.elf64_sym = type { i32, i8, i8, i16, i64, i64 }
%struct.module_sect_attrs = type opaque
%struct.module_notes_attrs = type opaque
%struct.srcu_struct = type { [5 x %struct.srcu_node], [3 x %struct.srcu_node*], %struct.mutex, %struct.spinlock, %struct.mutex, i32, i64, i64, i64, i64, %struct.srcu_data*, i64, %struct.mutex, %struct.completion, %struct.atomic_t, %struct.delayed_work }
%struct.srcu_node = type { %struct.spinlock, [4 x i64], [4 x i64], i64, %struct.srcu_node*, i32, i32 }
%struct.srcu_data = type { [2 x i64], [2 x i64], [32 x i8], %struct.spinlock, %struct.rcu_segcblist, i64, i64, i8, %struct.timer_list, %struct.work_struct, %struct.callback_head, %struct.srcu_node*, i64, i32, %struct.srcu_struct*, [8 x i8] }
%struct.rcu_segcblist = type { %struct.callback_head*, [4 x %struct.callback_head**], [4 x i64], i64, i64, i8, i8 }
%struct.delayed_work = type { %struct.work_struct, %struct.timer_list, %struct.workqueue_struct*, i32 }
%struct.bpf_raw_event_map = type { %struct.tracepoint*, i8*, i32, i32, [8 x i8] }
%struct.tracepoint = type { i8*, %struct.static_key, i32 ()*, void ()*, %struct.tracepoint_func* }
%struct.static_key = type { %struct.atomic_t, %union.anon.13 }
%struct.tracepoint_func = type { i8*, i8*, i32 }
%struct.jump_entry = type { i32, i32, i64 }
%struct.trace_eval_map = type opaque
%struct.u64_stats_sync = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, i64 (%struct.super_block*, i32, i8*, i64, i64)*, %struct.dquot** (%struct.inode*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.spinlock, %struct.atomic_t, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.kqid = type { %union.anon.17, i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.shrink_control = type { i32, i32, i64, i64, %struct.mem_cgroup* }
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.atomic_t*)*, i32 (%struct.inode*, i64*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %union.anon.13, %union.anon.13, %union.anon.17, %struct.raw_spinlock, %struct.list_head }
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type { i32, i32, %struct.inode*, %struct.super_block*, %struct.mutex, i8*, i8*, i32, i8, %struct.list_head, %struct.block_device*, i32, i8, %struct.hd_struct*, i32, i32, %struct.gendisk*, %struct.request_queue*, %struct.backing_dev_info*, %struct.list_head, i64, i32, %struct.mutex }
%struct.hd_struct = type opaque
%struct.gendisk = type opaque
%struct.backing_dev_info = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.rw_semaphore, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rw_semaphore, %struct.rcuwait, i32 }
%struct.rcu_sync = type { i32, i32, %struct.wait_queue_head, %struct.callback_head }
%struct.rcuwait = type { %struct.task_struct* }
%struct.fsnotify_mark_connector = type opaque
%union.anon.127 = type { [16 x i8] }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i64, i32, i32, %struct.list_head, %union.anon.13* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type { %struct.uid_gid_map, %struct.uid_gid_map, %struct.uid_gid_map, %struct.atomic_t, %struct.user_namespace*, i32, %struct.atomic_t, %struct.atomic_t, %struct.ns_common, i64, %struct.list_head, %struct.key*, %struct.rw_semaphore, %struct.work_struct, %struct.ctl_table_set, %struct.ctl_table_header*, %struct.ucounts*, [9 x i32] }
%struct.uid_gid_map = type { i32, %union.anon.25 }
%union.anon.25 = type { %struct.anon.26, [48 x i8] }
%struct.anon.26 = type { %struct.uid_gid_extent*, %struct.uid_gid_extent* }
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, i64, [24 x i8] }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.sysv_shm = type { %struct.list_head }
%union.anon.75 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.atomic_t, %struct.atomic_t, i32, %struct.posix_acl*, %struct.posix_acl*, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i8*, i64, %struct.atomic_t, i32, i64, %struct.tnum, %struct.tnum, %struct.tnum, %struct.spinlock, i16, i8, i8, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.12, %union.anon.13, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %union.anon.117, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.120, i32, i32, %struct.fsnotify_mark_connector*, i8* }
%struct.posix_acl = type opaque
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.tnum*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.iattr = type { i32, i16, %struct.atomic_t, %struct.atomic_t, i64, %struct.tnum, %struct.tnum, %struct.tnum, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.atomic_t, %struct.atomic_t, i64, %struct.tnum, %struct.tnum, %struct.tnum, %struct.tnum, i64 }
%struct.fiemap_extent_info = type { i32, i32, i32, %struct.fiemap_extent* }
%struct.fiemap_extent = type { i64, i64, i64, [2 x i64], i32, [3 x i32] }
%union.anon.117 = type { %struct.file_operations* }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.xarray, i32, %struct.atomic_t, %struct.rb_root_cached, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, i32, %struct.spinlock, %struct.list_head, i8* }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32, i16, i16, i32 }
%struct.iov_iter = type { i32, i64, i64, %union.anon.59, %union.anon.13 }
%union.anon.59 = type { %struct.iovec* }
%struct.iovec = type { i8*, i64 }
%struct.swap_info_struct = type opaque
%union.anon.120 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.kiocb*, i1)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i64, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, i64, i32)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, %struct.list_head, i8*, i32, i8, i32, i32, %struct.wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.118 }
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)* }
%union.anon.118 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.spinlock = type { %union.anon.16 }
%union.anon.16 = type { %struct.raw_spinlock }
%union.anon.13 = type { i64 }
%struct.mutex = type { %union.anon.13, %struct.spinlock, %union.anon.17, %struct.list_head }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.atomic_t, %struct.atomic_t, i32 }
%struct.cred = type { %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, i8*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %union.anon.12 }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.atomic_t] }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.bpf_insn = type { i8, i8, i16, i32 }
%struct.btf_type = type { i32, i32, %struct.atomic_t }
%struct.bpf_map_memory = type { i32, %struct.user_struct* }
%struct.work_struct = type { %union.anon.13, %struct.list_head, void (%struct.work_struct*)* }
%struct.user_struct = type { %union.anon.17, %struct.atomic_t, %struct.atomic_t, %union.anon.13, i64, i64, i64, %union.anon.13, %struct.hlist_node, %struct.atomic_t, %union.anon.13, %struct.ratelimit_state }
%struct.ratelimit_state = type { %struct.raw_spinlock, i32, i32, i32, i32, i64, i64 }
%struct.bpf_prog_offload = type { %struct.bpf_prog*, %struct.net_device*, %struct.bpf_offload_dev*, i8*, %struct.list_head, i8, i8, i8*, i32 }
%struct.bpf_offload_dev = type opaque
%struct.btf = type opaque
%struct.ethtool_pauseparam = type { i32, i32, i32, i32 }
%struct.bpf_prog_stats = type { i64, i64, %struct.u64_stats_sync }
%union.anon.145 = type { %struct.work_struct }
%struct.sock_fprog_kern = type { i16, %struct.sock_filter* }
%struct.sock_filter = type { i16, i8, i8, i32 }
%union.anon.146 = type { [0 x %struct.sock_filter] }
%struct.bpf_verifier_env = type { i32, i32, %struct.bpf_prog*, %struct.bpf_verifier_ops*, %struct.bpf_verifier_stack_elem*, i32, i8, i8, %struct.bpf_verifier_state*, %struct.bpf_verifier_state_list**, %struct.bpf_verifier_state_list*, [64 x %struct.bpf_map*], i32, i32, i8, i8, %struct.bpf_insn_aux_data*, %struct.ethtool_pauseparam*, %struct.bpf_verifier_log, [257 x %struct.bpf_subprog_info], %struct.anon.150, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32 }
%struct.bpf_verifier_stack_elem = type { %struct.bpf_verifier_state, i32, i32, %struct.bpf_verifier_stack_elem* }
%struct.bpf_verifier_state = type { [8 x %struct.bpf_func_state*], %struct.bpf_verifier_state*, i32, i32, i32, i32, i8, i32, i32, %struct.util_est*, i32 }
%struct.bpf_func_state = type { [11 x %struct.bpf_reg_state], i32, i32, i32, i32, %struct.util_est*, i32, %struct.bpf_stack_state* }
%struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
%union.anon.147 = type { %struct.bpf_map* }
%struct.bpf_stack_state = type { %struct.bpf_reg_state, [8 x i8] }
%struct.bpf_verifier_state_list = type { %struct.bpf_verifier_state, %struct.bpf_verifier_state_list*, i32, i32 }
%struct.bpf_insn_aux_data = type { %union.anon.13, i32, i32, i8, i8, i8, i8, i32 }
%struct.bpf_verifier_log = type { i32, [1024 x i8], i8*, i32, i32 }
%struct.bpf_subprog_info = type { i32, i32, i16 }
%struct.anon.150 = type { i32*, i32*, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.bpf_insn_cbs = type { void (i8*, i8*, ...)*, i8* (i8*, %struct.bpf_insn*)*, i8* (i8*, %struct.bpf_insn*, i64)*, i8* }
%struct.bpf_array = type { %struct.bpf_map, i32, i32, i32, i8, %union.anon.151, [48 x i8] }
%union.anon.151 = type { [0 x i8*] }
%struct.bpf_call_arg_meta = type { %struct.bpf_map*, i8, i8, i32, i32, i64, i64, i32, i32 }

@.str = private unnamed_addr constant [15 x i8] c"(%#llx; %#llx)\00", align 1
@__kstrtab_tnum_strn = internal constant [10 x i8] c"tnum_strn\00", section "__ksymtab_strings", align 1
@__addressable_tnum_strn257 = internal global i8* bitcast (i32 (i8*, i64, i64, i64)* @tnum_strn to i8*), section ".discard.addressable", align 8
@bpf_verifier_vlog.__warned = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.2 = private unnamed_addr constant [54 x i8] c"verifier log line truncated - local buffer too short\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"kernel/bpf/verifier.c\00", align 1
@__kstrtab_bpf_verifier_log_write = internal constant [23 x i8] c"bpf_verifier_log_write\00", section "__ksymtab_strings", align 1
@__addressable_bpf_verifier_log_write354 = internal global i8* bitcast (void (%struct.bpf_verifier_env*, i8*, ...)* @bpf_verifier_log_write to i8*), section ".discard.addressable", align 8
@bpf_verifier_ops = internal unnamed_addr constant [25 x %struct.bpf_verifier_ops*] [%struct.bpf_verifier_ops* null, %struct.bpf_verifier_ops* @sk_filter_verifier_ops, %struct.bpf_verifier_ops* @kprobe_verifier_ops, %struct.bpf_verifier_ops* @tc_cls_act_verifier_ops, %struct.bpf_verifier_ops* @tc_cls_act_verifier_ops, %struct.bpf_verifier_ops* @tracepoint_verifier_ops, %struct.bpf_verifier_ops* @xdp_verifier_ops, %struct.bpf_verifier_ops* @perf_event_verifier_ops, %struct.bpf_verifier_ops* null, %struct.bpf_verifier_ops* null, %struct.bpf_verifier_ops* @lwt_in_verifier_ops, %struct.bpf_verifier_ops* @lwt_out_verifier_ops, %struct.bpf_verifier_ops* @lwt_xmit_verifier_ops, %struct.bpf_verifier_ops* @sock_ops_verifier_ops, %struct.bpf_verifier_ops* @sk_skb_verifier_ops, %struct.bpf_verifier_ops* null, %struct.bpf_verifier_ops* @sk_msg_verifier_ops, %struct.bpf_verifier_ops* @raw_tracepoint_verifier_ops, %struct.bpf_verifier_ops* null, %struct.bpf_verifier_ops* @lwt_seg6local_verifier_ops, %struct.bpf_verifier_ops* null, %struct.bpf_verifier_ops* @sk_reuseport_verifier_ops, %struct.bpf_verifier_ops* @flow_dissector_verifier_ops, %struct.bpf_verifier_ops* null, %struct.bpf_verifier_ops* @raw_tracepoint_writable_verifier_ops], align 16
@bpf_verifier_lock = internal global %struct.mutex { %union.anon.13 zeroinitializer, %struct.spinlock zeroinitializer, %union.anon.17 zeroinitializer, %struct.list_head { %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @bpf_verifier_lock to i8*), i64 16) to %struct.list_head*), %struct.list_head* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.mutex* @bpf_verifier_lock to i8*), i64 16) to %struct.list_head*) } }, align 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
@sk_filter_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@kprobe_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@tc_cls_act_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@tracepoint_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@xdp_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@perf_event_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@lwt_in_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@lwt_out_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@lwt_xmit_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@sock_ops_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@sk_skb_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@sk_msg_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@raw_tracepoint_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@lwt_seg6local_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@sk_reuseport_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@flow_dissector_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@raw_tracepoint_writable_verifier_ops = external dso_local constant %struct.bpf_verifier_ops, align 8
@.str.7 = private unnamed_addr constant [30 x i8] c"BPF_LDX uses reserved fields\0A\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"BPF_STX uses reserved fields\0A\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"invalid bpf_ld_imm64 insn\0A\00", align 1
@.str.10 = private unnamed_addr constant [32 x i8] c"unrecognized bpf_ld_imm64 insn\0A\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"fd %d is not pointing to valid bpf_map\0A\00", align 1
@.str.12 = private unnamed_addr constant [42 x i8] c"direct value offset of %u is not allowed\0A\00", align 1
@.str.13 = private unnamed_addr constant [50 x i8] c"no direct value access support for this map type\0A\00", align 1
@.str.14 = private unnamed_addr constant [59 x i8] c"invalid access to map value pointer, value_size=%u off=%u\0A\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"unknown opcode %02x\0A\00", align 1
@.str.17 = private unnamed_addr constant [56 x i8] c"perf_event programs can only use preallocated hash map\0A\00", align 1
@.str.18 = private unnamed_addr constant [62 x i8] c"perf_event programs can only use preallocated inner hash map\0A\00", align 1
@.str.19 = private unnamed_addr constant [44 x i8] c"tracing progs cannot use bpf_spin_lock yet\0A\00", align 1
@.str.20 = private unnamed_addr constant [46 x i8] c"offload device mismatch between prog and map\0A\00", align 1
@bpf_map_offload_ops = external dso_local constant %struct.bpf_map_ops, align 8
@.str.21 = private unnamed_addr constant [65 x i8] c"function calls to other bpf functions are allowed for root only\0A\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"func#%d @%d\0A\00", align 1
@.str.23 = private unnamed_addr constant [38 x i8] c"jump out of range from insn %d to %d\0A\00", align 1
@.str.24 = private unnamed_addr constant [33 x i8] c"last insn is not an exit or jmp\0A\00", align 1
@.str.25 = private unnamed_addr constant [29 x i8] c"call to invalid destination\0A\00", align 1
@.str.26 = private unnamed_addr constant [22 x i8] c"too many subprograms\0A\00", align 1
@.str.27 = private unnamed_addr constant [63 x i8] c"number of funcs in func_info doesn't match number of subprogs\0A\00", align 1
@.str.28 = private unnamed_addr constant [31 x i8] c"invalid func info rec size %u\0A\00", align 1
@.str.29 = private unnamed_addr constant [36 x i8] c"nonzero tailing record in func info\00", align 1
@.str.30 = private unnamed_addr constant [51 x i8] c"nonzero insn_off %u for the first func info record\00", align 1
@.str.31 = private unnamed_addr constant [69 x i8] c"same or smaller insn offset (%u) than previous func info record (%u)\00", align 1
@.str.32 = private unnamed_addr constant [67 x i8] c"func_info BTF section doesn't match subprog layout in BPF program\0A\00", align 1
@.str.33 = private unnamed_addr constant [32 x i8] c"invalid type id %d in func info\00", align 1
@.str.34 = private unnamed_addr constant [36 x i8] c"nonzero tailing record in line_info\00", align 1
@.str.35 = private unnamed_addr constant [65 x i8] c"Invalid line_info[%u].insn_off:%u (prev_offset:%u prog->len:%u)\0A\00", align 1
@.str.36 = private unnamed_addr constant [45 x i8] c"Invalid insn code at line_info[%u].insn_off\0A\00", align 1
@.str.37 = private unnamed_addr constant [50 x i8] c"Invalid line_info[%u].line_off or .file_name_off\0A\00", align 1
@.str.38 = private unnamed_addr constant [35 x i8] c"missing bpf_line_info for func#%u\0A\00", align 1
@.str.39 = private unnamed_addr constant [58 x i8] c"missing bpf_line_info for %u funcs starting from func#%u\0A\00", align 1
@.str.40 = private unnamed_addr constant [24 x i8] c"pop stack internal bug\0A\00", align 1
@.str.41 = private unnamed_addr constant [21 x i8] c"unreachable insn %d\0A\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"%d: \00", align 1
@.str.43 = private unnamed_addr constant [30 x i8] c"back-edge from insn %d to %d\0A\00", align 1
@.str.44 = private unnamed_addr constant [25 x i8] c"insn state internal bug\0A\00", align 1
@.str.45 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@_ctype = external dso_local local_unnamed_addr constant [0 x i8], align 1
@.str.46 = private unnamed_addr constant [33 x i8] c"invalid insn idx %d insn_cnt %d\0A\00", align 1
@.str.47 = private unnamed_addr constant [45 x i8] c"BPF program is too large. Processed %d insn\0A\00", align 1
@.str.48 = private unnamed_addr constant [24 x i8] c"\0Afrom %d to %d%s: safe\0A\00", align 1
@.str.49 = private unnamed_addr constant [25 x i8] c" (speculative execution)\00", align 1
@.str.50 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"%d: safe\0A\00", align 1
@.str.52 = private unnamed_addr constant [4 x i8] c"%d:\00", align 1
@.str.53 = private unnamed_addr constant [18 x i8] c"\0Afrom %d to %d%s:\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"; \00", align 1
@.str.55 = private unnamed_addr constant [50 x i8] c"same insn cannot be used with different pointers\0A\00", align 1
@.str.56 = private unnamed_addr constant [29 x i8] c"BPF_ST uses reserved fields\0A\00", align 1
@.str.57 = private unnamed_addr constant [42 x i8] c"BPF_ST stores into R%d %s is not allowed\0A\00", align 1
@reg_type_str = internal unnamed_addr constant [19 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.195, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.196, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.199, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.200, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.201, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.202, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.203, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.204, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.205, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.206, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.207, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.208, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.209, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.210, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.211, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.212, i32 0, i32 0)], align 16
@.str.58 = private unnamed_addr constant [31 x i8] c"BPF_CALL uses reserved fields\0A\00", align 1
@.str.59 = private unnamed_addr constant [53 x i8] c"function calls are not allowed while holding a lock\0A\00", align 1
@.str.60 = private unnamed_addr constant [29 x i8] c"BPF_JA uses reserved fields\0A\00", align 1
@.str.61 = private unnamed_addr constant [31 x i8] c"BPF_EXIT uses reserved fields\0A\00", align 1
@.str.62 = private unnamed_addr constant [28 x i8] c"bpf_spin_unlock is missing\0A\00", align 1
@.str.64 = private unnamed_addr constant [21 x i8] c"invalid BPF_LD mode\0A\00", align 1
@.str.65 = private unnamed_addr constant [23 x i8] c"unknown insn class %d\0A\00", align 1
@.str.66 = private unnamed_addr constant [29 x i8] c"mark_reg_not_init(regs, %u)\0A\00", align 1
@.str.67 = private unnamed_addr constant [31 x i8] c"mark_reg_known_zero(regs, %u)\0A\00", align 1
@.str.68 = private unnamed_addr constant [35 x i8] c"infinite loop detected at insn %d\0A\00", align 1
@is_state_visited.__warned = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.69 = private unnamed_addr constant [42 x i8] c"BUG live_done but branches_to_explore %d\0A\00", align 1
@is_state_visited.__warned.70 = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.71 = private unnamed_addr constant [53 x i8] c"BUG is_state_visited:branches_to_explore=%d insn %d\0A\00", align 1
@.str.72 = private unnamed_addr constant [50 x i8] c"propagate_live: parent frame %d current frame %d\0A\00", align 1
@.str.73 = private unnamed_addr constant [42 x i8] c"verifier BUG type %s var_off %lld off %d\0A\00", align 1
@.str.74 = private unnamed_addr constant [17 x i8] c"propagating r%d\0A\00", align 1
@.str.75 = private unnamed_addr constant [18 x i8] c"propagating fp%d\0A\00", align 1
@__mark_chain_precision.__warned = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.76 = private unnamed_addr constant [19 x i8] c"backtracing misuse\00", align 1
@.str.77 = private unnamed_addr constant [26 x i8] c"last_idx %d first_idx %d\0A\00", align 1
@.str.78 = private unnamed_addr constant [25 x i8] c"BUG backtracking idx %d\0A\00", align 1
@__mark_chain_precision.__warned.79 = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.80 = private unnamed_addr constant [26 x i8] c"verifier backtracking bug\00", align 1
@.str.81 = private unnamed_addr constant [36 x i8] c"parent %s regs=%x stack=%llx marks\0A\00", align 1
@.str.82 = private unnamed_addr constant [12 x i8] c"didn't have\00", align 1
@.str.83 = private unnamed_addr constant [12 x i8] c"already had\00", align 1
@.str.84 = private unnamed_addr constant [27 x i8] c"regs=%x stack=%llx before \00", align 1
@.str.85 = private unnamed_addr constant [12 x i8] c"BUG spi %d\0A\00", align 1
@backtrack_insn.__warned = internal unnamed_addr global i1 false, section ".data.once", align 1
@backtrack_insn.__warned.86 = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.87 = private unnamed_addr constant [13 x i8] c"BUG regs %x\0A\00", align 1
@backtrack_insn.__warned.88 = internal unnamed_addr global i1 false, section ".data.once", align 1
@current_task = external dso_local global %struct.task_struct*, section ".data..percpu", align 8
@.str.89 = private unnamed_addr constant [10 x i8] c" frame%d:\00", align 1
@.str.90 = private unnamed_addr constant [5 x i8] c" R%d\00", align 1
@.str.91 = private unnamed_addr constant [4 x i8] c"=%s\00", align 1
@.str.92 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.93 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str.94 = private unnamed_addr constant [7 x i8] c"(id=%d\00", align 1
@.str.95 = private unnamed_addr constant [15 x i8] c",ref_obj_id=%d\00", align 1
@.str.96 = private unnamed_addr constant [8 x i8] c",off=%d\00", align 1
@.str.97 = private unnamed_addr constant [6 x i8] c",r=%d\00", align 1
@.str.98 = private unnamed_addr constant [13 x i8] c",ks=%d,vs=%d\00", align 1
@.str.99 = private unnamed_addr constant [10 x i8] c",imm=%llx\00", align 1
@.str.100 = private unnamed_addr constant [17 x i8] c",smin_value=%lld\00", align 1
@.str.101 = private unnamed_addr constant [17 x i8] c",smax_value=%lld\00", align 1
@.str.102 = private unnamed_addr constant [17 x i8] c",umin_value=%llu\00", align 1
@.str.103 = private unnamed_addr constant [17 x i8] c",umax_value=%llu\00", align 1
@.str.104 = private unnamed_addr constant [12 x i8] c",var_off=%s\00", align 1
@.str.105 = private unnamed_addr constant [2 x i8] c")\00", align 1
@slot_type_char = internal unnamed_addr constant [4 x i8] c"?rm0", align 1
@.str.106 = private unnamed_addr constant [6 x i8] c" fp%d\00", align 1
@.str.107 = private unnamed_addr constant [9 x i8] c" refs=%d\00", align 1
@.str.108 = private unnamed_addr constant [4 x i8] c",%d\00", align 1
@.str.109 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.110 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.111 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.112 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.113 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.114 = private unnamed_addr constant [30 x i8] c"BPF_NEG uses reserved fields\0A\00", align 1
@.str.115 = private unnamed_addr constant [30 x i8] c"BPF_END uses reserved fields\0A\00", align 1
@.str.117 = private unnamed_addr constant [30 x i8] c"BPF_MOV uses reserved fields\0A\00", align 1
@.str.119 = private unnamed_addr constant [27 x i8] c"invalid BPF_ALU opcode %x\0A\00", align 1
@.str.120 = private unnamed_addr constant [30 x i8] c"BPF_ALU uses reserved fields\0A\00", align 1
@.str.121 = private unnamed_addr constant [13 x i8] c"div by zero\0A\00", align 1
@.str.122 = private unnamed_addr constant [18 x i8] c"invalid shift %d\0A\00", align 1
@.str.123 = private unnamed_addr constant [28 x i8] c"mark_reg_unknown(regs, %u)\0A\00", align 1
@.str.124 = private unnamed_addr constant [35 x i8] c"R%d pointer %s pointer prohibited\0A\00", align 1
@bpf_alu_string = external dso_local local_unnamed_addr constant [16 x i8*], align 16
@.str.125 = private unnamed_addr constant [45 x i8] c"verifier internal error: unexpected ptr_reg\0A\00", align 1
@.str.126 = private unnamed_addr constant [37 x i8] c"verifier internal error: no src_reg\0A\00", align 1
@.str.127 = private unnamed_addr constant [42 x i8] c"R%d 32-bit pointer arithmetic prohibited\0A\00", align 1
@.str.128 = private unnamed_addr constant [62 x i8] c"R%d pointer arithmetic on %s prohibited, null-check it first\0A\00", align 1
@.str.129 = private unnamed_addr constant [41 x i8] c"R%d pointer arithmetic on %s prohibited\0A\00", align 1
@.str.130 = private unnamed_addr constant [98 x i8] c"R%d has unknown scalar with mixed signed bounds, pointer arithmetic with it prohibited for !root\0A\00", align 1
@.str.133 = private unnamed_addr constant [43 x i8] c"R%d tried to subtract pointer from scalar\0A\00", align 1
@.str.134 = private unnamed_addr constant [47 x i8] c"R%d subtraction from stack pointer prohibited\0A\00", align 1
@.str.135 = private unnamed_addr constant [47 x i8] c"R%d bitwise operator %s on pointer prohibited\0A\00", align 1
@.str.136 = private unnamed_addr constant [52 x i8] c"R%d pointer arithmetic with %s operator prohibited\0A\00", align 1
@.str.137 = private unnamed_addr constant [77 x i8] c"R%d pointer arithmetic of map value goes out of range, prohibited for !root\0A\00", align 1
@.str.138 = private unnamed_addr constant [70 x i8] c"R%d stack pointer arithmetic goes out of range, prohibited for !root\0A\00", align 1
@.str.139 = private unnamed_addr constant [49 x i8] c"math between %s pointer and %lld is not allowed\0A\00", align 1
@.str.140 = private unnamed_addr constant [37 x i8] c"%s pointer offset %d is not allowed\0A\00", align 1
@.str.141 = private unnamed_addr constant [78 x i8] c"math between %s pointer and register with unbounded min value is not allowed\0A\00", align 1
@.str.142 = private unnamed_addr constant [46 x i8] c"value %lld makes %s pointer be out of bounds\0A\00", align 1
@.str.143 = private unnamed_addr constant [42 x i8] c"The sequence of %d jumps is too complex.\0A\00", align 1
@.str.144 = private unnamed_addr constant [84 x i8] c"R%d min value is negative, either use unsigned index or do a if (index >=0) check.\0A\00", align 1
@.str.145 = private unnamed_addr constant [45 x i8] c"R%d min value is outside of the array range\0A\00", align 1
@.str.146 = private unnamed_addr constant [84 x i8] c"R%d unbounded memory access, make sure to bounds check any array access into a map\0A\00", align 1
@.str.147 = private unnamed_addr constant [45 x i8] c"R%d max value is outside of the array range\0A\00", align 1
@.str.148 = private unnamed_addr constant [57 x i8] c"bpf_spin_lock cannot be accessed directly by load/store\0A\00", align 1
@.str.149 = private unnamed_addr constant [59 x i8] c"invalid access to map value, value_size=%d off=%d size=%d\0A\00", align 1
@.str.150 = private unnamed_addr constant [49 x i8] c"variable stack access var_off=%s off=%d size=%d\0A\00", align 1
@.str.151 = private unnamed_addr constant [30 x i8] c"invalid stack off=%d size=%d\0A\00", align 1
@.str.152 = private unnamed_addr constant [16 x i8] c"R%d is invalid\0A\00", align 1
@.str.153 = private unnamed_addr constant [14 x i8] c"R%d !read_ok\0A\00", align 1
@.str.154 = private unnamed_addr constant [28 x i8] c"frame pointer is read only\0A\00", align 1
@.str.157 = private unnamed_addr constant [26 x i8] c"cannot write into packet\0A\00", align 1
@.str.160 = private unnamed_addr constant [26 x i8] c"R%d cannot write into %s\0A\00", align 1
@.str.161 = private unnamed_addr constant [29 x i8] c"R%d invalid mem access '%s'\0A\00", align 1
@.str.162 = private unnamed_addr constant [11 x i8] c"flow keys \00", align 1
@.str.163 = private unnamed_addr constant [7 x i8] c"value \00", align 1
@.str.164 = private unnamed_addr constant [9 x i8] c"context \00", align 1
@.str.165 = private unnamed_addr constant [7 x i8] c"stack \00", align 1
@.str.166 = private unnamed_addr constant [6 x i8] c"sock \00", align 1
@.str.167 = private unnamed_addr constant [13 x i8] c"sock_common \00", align 1
@.str.168 = private unnamed_addr constant [10 x i8] c"tcp_sock \00", align 1
@.str.169 = private unnamed_addr constant [10 x i8] c"xdp_sock \00", align 1
@.str.170 = private unnamed_addr constant [50 x i8] c"misaligned packet access off %d+%s+%d+%d size %d\0A\00", align 1
@.str.171 = private unnamed_addr constant [42 x i8] c"misaligned %saccess off %s+%d+%d size %d\0A\00", align 1
@.str.172 = private unnamed_addr constant [56 x i8] c"write into map forbidden, value_size=%d off=%d size=%d\0A\00", align 1
@.str.173 = private unnamed_addr constant [55 x i8] c"read from map forbidden, value_size=%d off=%d size=%d\0A\00", align 1
@.str.174 = private unnamed_addr constant [55 x i8] c"dereference of modified ctx ptr R%d off=%d disallowed\0A\00", align 1
@.str.175 = private unnamed_addr constant [43 x i8] c"variable ctx access var_off=%s disallowed\0A\00", align 1
@.str.176 = private unnamed_addr constant [43 x i8] c"invalid bpf_context access off=%d size=%d\0A\00", align 1
@.str.177 = private unnamed_addr constant [45 x i8] c"attempt to corrupt spilled pointer on stack\0A\00", align 1
@.str.178 = private unnamed_addr constant [32 x i8] c"invalid size of register spill\0A\00", align 1
@.str.179 = private unnamed_addr constant [63 x i8] c"cannot spill pointers to stack into stack frame of the caller\0A\00", align 1
@.str.180 = private unnamed_addr constant [52 x i8] c"insn %d cannot access two stack slots fp%d and fp%d\00", align 1
@.str.181 = private unnamed_addr constant [42 x i8] c"invalid read from stack off %d+0 size %d\0A\00", align 1
@.str.182 = private unnamed_addr constant [31 x i8] c"invalid size of register fill\0A\00", align 1
@.str.183 = private unnamed_addr constant [24 x i8] c"corrupted spill memory\0A\00", align 1
@.str.184 = private unnamed_addr constant [43 x i8] c"invalid read from stack off %d+%d size %d\0A\00", align 1
@.str.185 = private unnamed_addr constant [37 x i8] c"R%d offset is outside of the packet\0A\00", align 1
@.str.186 = private unnamed_addr constant [66 x i8] c"invalid access to packet, off=%d size=%d, R%d(id=%d,off=%d,r=%d)\0A\00", align 1
@.str.187 = private unnamed_addr constant [44 x i8] c"invalid access to flow keys off=%d size=%d\0A\00", align 1
@.str.188 = private unnamed_addr constant [38 x i8] c"R%d invalid %s access off=%d size=%d\0A\00", align 1
@.str.189 = private unnamed_addr constant [54 x i8] c"R%d invalid tracepoint buffer access: off=%d, size=%d\00", align 1
@.str.190 = private unnamed_addr constant [55 x i8] c"R%d invalid variable buffer offset: off=%d, var_off=%s\00", align 1
@.str.191 = private unnamed_addr constant [31 x i8] c"BPF_XADD uses reserved fields\0A\00", align 1
@.str.193 = private unnamed_addr constant [44 x i8] c"BPF_XADD stores into R%d %s is not allowed\0A\00", align 1
@.str.194 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.195 = private unnamed_addr constant [4 x i8] c"inv\00", align 1
@.str.196 = private unnamed_addr constant [4 x i8] c"ctx\00", align 1
@.str.197 = private unnamed_addr constant [8 x i8] c"map_ptr\00", align 1
@.str.198 = private unnamed_addr constant [10 x i8] c"map_value\00", align 1
@.str.199 = private unnamed_addr constant [18 x i8] c"map_value_or_null\00", align 1
@.str.200 = private unnamed_addr constant [3 x i8] c"fp\00", align 1
@.str.201 = private unnamed_addr constant [9 x i8] c"pkt_meta\00", align 1
@.str.202 = private unnamed_addr constant [4 x i8] c"pkt\00", align 1
@.str.203 = private unnamed_addr constant [8 x i8] c"pkt_end\00", align 1
@.str.204 = private unnamed_addr constant [10 x i8] c"flow_keys\00", align 1
@.str.205 = private unnamed_addr constant [5 x i8] c"sock\00", align 1
@.str.206 = private unnamed_addr constant [13 x i8] c"sock_or_null\00", align 1
@.str.207 = private unnamed_addr constant [12 x i8] c"sock_common\00", align 1
@.str.208 = private unnamed_addr constant [20 x i8] c"sock_common_or_null\00", align 1
@.str.209 = private unnamed_addr constant [9 x i8] c"tcp_sock\00", align 1
@.str.210 = private unnamed_addr constant [17 x i8] c"tcp_sock_or_null\00", align 1
@.str.211 = private unnamed_addr constant [10 x i8] c"tp_buffer\00", align 1
@.str.212 = private unnamed_addr constant [9 x i8] c"xdp_sock\00", align 1
@.str.213 = private unnamed_addr constant [41 x i8] c"the call stack of %d frames is too deep\0A\00", align 1
@.str.214 = private unnamed_addr constant [44 x i8] c"verifier bug. No program starts at insn %d\0A\00", align 1
@.str.215 = private unnamed_addr constant [42 x i8] c"verifier bug. Frame %d already allocated\0A\00", align 1
@.str.216 = private unnamed_addr constant [9 x i8] c"caller:\0A\00", align 1
@.str.217 = private unnamed_addr constant [9 x i8] c"callee:\0A\00", align 1
@.str.218 = private unnamed_addr constant [20 x i8] c"invalid func %s#%d\0A\00", align 1
@.str.219 = private unnamed_addr constant [20 x i8] c"unknown func %s#%d\0A\00", align 1
@.str.220 = private unnamed_addr constant [69 x i8] c"cannot call GPL-restricted function from non-GPL compatible program\0A\00", align 1
@.str.221 = private unnamed_addr constant [54 x i8] c"kernel subsystem misconfigured func %s#%d: r1 != ctx\0A\00", align 1
@.str.222 = private unnamed_addr constant [43 x i8] c"kernel subsystem misconfigured func %s#%d\0A\00", align 1
@.str.223 = private unnamed_addr constant [40 x i8] c"tail_call would lead to reference leak\0A\00", align 1
@.str.224 = private unnamed_addr constant [51 x i8] c"func %s#%d reference has not been acquired before\0A\00", align 1
@.str.225 = private unnamed_addr constant [52 x i8] c"get_local_storage() doesn't support non-zero flags\0A\00", align 1
@.str.226 = private unnamed_addr constant [41 x i8] c"kernel subsystem misconfigured verifier\0A\00", align 1
@.str.227 = private unnamed_addr constant [38 x i8] c"unknown return type %d of func %s#%d\0A\00", align 1
@sysctl_perf_event_max_stack = external dso_local local_unnamed_addr global i32, align 4
@.str.228 = private unnamed_addr constant [44 x i8] c"cannot get callchain buffer for func %s#%d\0A\00", align 1
@.str.230 = private unnamed_addr constant [44 x i8] c"helper access to the packet is not allowed\0A\00", align 1
@.str.231 = private unnamed_addr constant [70 x i8] c"verifier internal error: more than one arg with ref_obj_id R%d %u %u\0A\00", align 1
@.str.232 = private unnamed_addr constant [25 x i8] c"verifier internal error\0A\00", align 1
@.str.233 = private unnamed_addr constant [25 x i8] c"unsupported arg_type %d\0A\00", align 1
@.str.234 = private unnamed_addr constant [36 x i8] c"invalid map_ptr to access map->key\0A\00", align 1
@.str.235 = private unnamed_addr constant [38 x i8] c"invalid map_ptr to access map->value\0A\00", align 1
@.str.236 = private unnamed_addr constant [66 x i8] c"R%d min value is negative, either use unsigned or 'var &= const'\0A\00", align 1
@.str.237 = private unnamed_addr constant [71 x i8] c"R%d unbounded memory access, use 'var &= const' or 'if (var < const)'\0A\00", align 1
@.str.238 = private unnamed_addr constant [25 x i8] c"R%d type=%s expected=%s\0A\00", align 1
@.str.239 = private unnamed_addr constant [35 x i8] c"R%d is not a pointer to map_value\0A\00", align 1
@.str.240 = private unnamed_addr constant [82 x i8] c"R%d doesn't have constant offset. bpf_spin_lock has to be at the constant offset\0A\00", align 1
@.str.241 = private unnamed_addr constant [56 x i8] c"map '%s' has to have BTF in order to use bpf_spin_lock\0A\00", align 1
@.str.242 = private unnamed_addr constant [51 x i8] c"map '%s' has more than one 'struct bpf_spin_lock'\0A\00", align 1
@.str.243 = private unnamed_addr constant [46 x i8] c"map '%s' doesn't have 'struct bpf_spin_lock'\0A\00", align 1
@.str.244 = private unnamed_addr constant [59 x i8] c"map '%s' is not a struct type or bpf_spin_lock is mangled\0A\00", align 1
@.str.245 = private unnamed_addr constant [50 x i8] c"off %lld doesn't point to 'struct bpf_spin_lock'\0A\00", align 1
@.str.246 = private unnamed_addr constant [44 x i8] c"Locking two bpf_spin_locks are not allowed\0A\00", align 1
@.str.247 = private unnamed_addr constant [39 x i8] c"bpf_spin_unlock without taking a lock\0A\00", align 1
@.str.248 = private unnamed_addr constant [35 x i8] c"bpf_spin_unlock of different lock\0A\00", align 1
@.str.249 = private unnamed_addr constant [76 x i8] c"R%d indirect variable offset stack access prohibited for !root, var_off=%s\0A\00", align 1
@.str.250 = private unnamed_addr constant [53 x i8] c"R%d unbounded indirect variable offset stack access\0A\00", align 1
@.str.251 = private unnamed_addr constant [41 x i8] c"R%d min value is outside of stack bound\0A\00", align 1
@.str.252 = private unnamed_addr constant [41 x i8] c"R%d max value is outside of stack bound\0A\00", align 1
@.str.253 = private unnamed_addr constant [52 x i8] c"invalid indirect read from stack off %d+%d size %d\0A\00", align 1
@.str.254 = private unnamed_addr constant [56 x i8] c"invalid indirect read from stack var_off %s+%d size %d\0A\00", align 1
@.str.255 = private unnamed_addr constant [46 x i8] c"invalid stack type R%d off=%d access_size=%d\0A\00", align 1
@.str.256 = private unnamed_addr constant [50 x i8] c"invalid stack type R%d var_off=%s access_size=%d\0A\00", align 1
@.str.257 = private unnamed_addr constant [26 x i8] c"write into map forbidden\0A\00", align 1
@.str.258 = private unnamed_addr constant [62 x i8] c"tail_calls are not allowed in programs with bpf-to-bpf calls\0A\00", align 1
@.str.259 = private unnamed_addr constant [41 x i8] c"cannot pass map_type %d into func %s#%d\0A\00", align 1
@.str.260 = private unnamed_addr constant [43 x i8] c"cannot return stack pointer to the caller\0A\00", align 1
@.str.261 = private unnamed_addr constant [24 x i8] c"returning from callee:\0A\00", align 1
@.str.262 = private unnamed_addr constant [18 x i8] c"to caller at %d:\0A\00", align 1
@.str.263 = private unnamed_addr constant [42 x i8] c"Unreleased reference id=%d alloc_insn=%d\0A\00", align 1
@.str.264 = private unnamed_addr constant [59 x i8] c"At program exit the register R0 is not a known value (%s)\0A\00", align 1
@.str.265 = private unnamed_addr constant [33 x i8] c"At program exit the register R0 \00", align 1
@.str.266 = private unnamed_addr constant [13 x i8] c"has value %s\00", align 1
@.str.267 = private unnamed_addr constant [25 x i8] c"has unknown scalar value\00", align 1
@.str.268 = private unnamed_addr constant [25 x i8] c" should have been in %s\0A\00", align 1
@update_branch_counts.__warned = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.269 = private unnamed_addr constant [49 x i8] c"BUG update_branch_counts:branches_to_explore=%d\0A\00", align 1
@.str.270 = private unnamed_addr constant [33 x i8] c"invalid BPF_JMP/JMP32 opcode %x\0A\00", align 1
@.str.271 = private unnamed_addr constant [36 x i8] c"BPF_JMP/JMP32 uses reserved fields\0A\00", align 1
@.str.273 = private unnamed_addr constant [65 x i8] c"BPF_LD_[ABS|IND] instructions not allowed for this program type\0A\00", align 1
@.str.274 = private unnamed_addr constant [31 x i8] c"bpf verifier is misconfigured\0A\00", align 1
@.str.275 = private unnamed_addr constant [69 x i8] c"BPF_LD_[ABS|IND] instructions cannot be mixed with bpf-to-bpf calls\0A\00", align 1
@.str.276 = private unnamed_addr constant [39 x i8] c"BPF_LD_[ABS|IND] uses reserved fields\0A\00", align 1
@.str.277 = private unnamed_addr constant [57 x i8] c"BPF_LD_[ABS|IND] cannot be mixed with socket references\0A\00", align 1
@.str.278 = private unnamed_addr constant [64 x i8] c"BPF_LD_[ABS|IND] cannot be used inside bpf_spin_lock-ed region\0A\00", align 1
@.str.279 = private unnamed_addr constant [52 x i8] c"at the time of BPF_LD_ABS|IND R6 != pointer to skb\0A\00", align 1
@.str.280 = private unnamed_addr constant [25 x i8] c"invalid BPF_LD_IMM insn\0A\00", align 1
@.str.281 = private unnamed_addr constant [35 x i8] c"BPF_LD_IMM64 uses reserved fields\0A\00", align 1
@.str.282 = private unnamed_addr constant [50 x i8] c"combined stack size of %d calls is %d. Too large\0A\00", align 1
@check_max_stack_depth.__warned = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.283 = private unnamed_addr constant [43 x i8] c"the call stack of %d frames is too deep !\0A\00", align 1
@__const.opt_remove_nops.ja = private unnamed_addr constant %struct.bpf_insn { i8 5, i8 0, i16 0, i32 0 }, align 4
@.str.284 = private unnamed_addr constant [46 x i8] c"bpf verifier narrow ctx access misconfigured\0A\00", align 1
@.str.285 = private unnamed_addr constant [47 x i8] c"insn %d cannot be patched due to 16-bit range\0A\00", align 1
@.str.286 = private unnamed_addr constant [27 x i8] c"tail_call abusing map_ptr\0A\00", align 1
@jit_subprogs.__warned = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.287 = private unnamed_addr constant [38 x i8] c"JIT doesn't support bpf-to-bpf calls\0A\00", align 1
@get_callee_stack_depth.__warned = internal unnamed_addr global i1 false, section ".data.once", align 1
@.str.288 = private unnamed_addr constant [29 x i8] c"verification time %lld usec\0A\00", align 1
@.str.289 = private unnamed_addr constant [13 x i8] c"stack depth \00", align 1
@.str.290 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.291 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.292 = private unnamed_addr constant [98 x i8] c"processed %d insns (limit %d) max_states_per_insn %d total_states %d peak_states %d mark_read %d\0A\00", align 1
@switch.table.convert_ctx_accesses = private unnamed_addr constant [4 x i32] [i32 4, i32 2, i32 1, i32 8], align 4
@llvm.compiler.used = appending global [4 x i8*] [i8* bitcast (i8** @__addressable_bpf_verifier_log_write354 to i8*), i8* bitcast (i8** @__addressable_tnum_strn257 to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__kstrtab_bpf_verifier_log_write, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__kstrtab_tnum_strn, i32 0, i32 0)], section "llvm.metadata"

; Function Attrs: nofree noinline noredzone nounwind null_pointer_is_valid sspstrong
define dso_local i32 @tnum_strn(i8* nocapture noundef writeonly %str, i64 noundef %size, i64 %a.coerce0, i64 %a.coerce1) #0 {
entry:
  %call = call i32 (i8*, i64, i8*, ...) @snprintf(i8* noundef %str, i64 noundef %size, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i64 noundef %a.coerce0, i64 noundef %a.coerce1) #22
  ret i32 %call
}

; Function Attrs: nofree noredzone nounwind null_pointer_is_valid
declare dso_local noundef i32 @snprintf(i8* noalias nocapture noundef writeonly, i64 noundef, i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_const(i64 noundef %value) local_unnamed_addr #2 {
entry:
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %value, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 0, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_range(i64 noundef %min, i64 noundef %max) local_unnamed_addr #2 {
entry:
  %xor = xor i64 %max, %min
  %cmp.i = icmp eq i64 %xor, 0
  br i1 %cmp.i, label %fls64___.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %tobool.not.i.i = icmp ult i64 %xor, 4294967296
  %shl.i.i = shl i64 %xor, 32
  %spec.select.i.i = select i1 %tobool.not.i.i, i64 %shl.i.i, i64 %xor
  %spec.select17.i.i = select i1 %tobool.not.i.i, i32 31, i32 63
  %tobool2.not.i.i = icmp ult i64 %spec.select.i.i, 281474976710656
  %sub4.i.i = add nsw i32 %spec.select17.i.i, -16
  %shl5.i.i = shl i64 %spec.select.i.i, 16
  %word.addr.1.i.i = select i1 %tobool2.not.i.i, i64 %shl5.i.i, i64 %spec.select.i.i
  %num.1.i.i = select i1 %tobool2.not.i.i, i32 %sub4.i.i, i32 %spec.select17.i.i
  %tobool8.not.i.i = icmp ult i64 %word.addr.1.i.i, 72057594037927936
  %sub10.i.i = add nsw i32 %num.1.i.i, -8
  %shl11.i.i = shl i64 %word.addr.1.i.i, 8
  %word.addr.2.i.i = select i1 %tobool8.not.i.i, i64 %shl11.i.i, i64 %word.addr.1.i.i
  %num.2.i.i = select i1 %tobool8.not.i.i, i32 %sub10.i.i, i32 %num.1.i.i
  %tobool14.not.i.i = icmp ult i64 %word.addr.2.i.i, 1152921504606846976
  %sub16.i.i = add nsw i32 %num.2.i.i, -4
  %shl17.i.i = shl i64 %word.addr.2.i.i, 4
  %word.addr.3.i.i = select i1 %tobool14.not.i.i, i64 %shl17.i.i, i64 %word.addr.2.i.i
  %num.3.i.i = select i1 %tobool14.not.i.i, i32 %sub16.i.i, i32 %num.2.i.i
  %tobool20.not.i.i = icmp ult i64 %word.addr.3.i.i, 4611686018427387904
  %sub22.i.i = add i32 %num.3.i.i, 254
  %shl23.i.i = shl i64 %word.addr.3.i.i, 2
  %word.addr.4.i.i = select i1 %tobool20.not.i.i, i64 %shl23.i.i, i64 %word.addr.3.i.i
  %num.4.i.i = select i1 %tobool20.not.i.i, i32 %sub22.i.i, i32 %num.3.i.i
  %word.addr.4.lobit.i.i.neg = lshr i64 %word.addr.4.i.i, 63
  %i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.neg to i32
  %add.i = add i32 %num.4.i.i, %i.i.i.neg
  %phi.bo = and i32 %add.i, 255
  br label %fls64___.exit

fls64___.exit:                                    ; preds = %if.end.i, %entry
  %retval.0.i = phi i32 [ %phi.bo, %if.end.i ], [ 0, %entry ]
  %cmp = icmp ugt i32 %retval.0.i, 63
  %sh_prom = zext i32 %retval.0.i to i64
  %notmask = shl nsw i64 -1, %sh_prom
  %sub = xor i64 %notmask, -1
  %and = and i64 %notmask, %min
  %retval.sroa.0.0 = select i1 %cmp, i64 0, i64 %and
  %retval.sroa.3.0 = select i1 %cmp, i64 -1, i64 %sub
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %retval.sroa.0.0, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %retval.sroa.3.0, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_lshift(i64 %a.coerce0, i64 %a.coerce1, i8 noundef zeroext %shift) local_unnamed_addr #2 {
entry:
  %sh_prom = zext i8 %shift to i64
  %shl = shl i64 %a.coerce0, %sh_prom
  %shl5 = shl i64 %a.coerce1, %sh_prom
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %shl, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %shl5, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_rshift(i64 %a.coerce0, i64 %a.coerce1, i8 noundef zeroext %shift) local_unnamed_addr #2 {
entry:
  %sh_prom = zext i8 %shift to i64
  %shr = lshr i64 %a.coerce0, %sh_prom
  %shr5 = lshr i64 %a.coerce1, %sh_prom
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %shr, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %shr5, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_arshift(i64 %a.coerce0, i64 %a.coerce1, i8 noundef zeroext %min_shift) local_unnamed_addr #2 {
entry:
  %sh_prom = zext i8 %min_shift to i64
  %shr = ashr i64 %a.coerce0, %sh_prom
  %shr5 = ashr i64 %a.coerce1, %sh_prom
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %shr, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %shr5, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_add(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) local_unnamed_addr #2 {
entry:
  %add = add i64 %b.coerce1, %a.coerce1
  %add3 = add i64 %b.coerce0, %a.coerce0
  %add4 = add i64 %add, %add3
  %xor = xor i64 %add4, %add3
  %or = or i64 %b.coerce1, %a.coerce1
  %or7 = or i64 %or, %xor
  %neg = xor i64 %or7, -1
  %and = and i64 %add3, %neg
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %and, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %or7, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_sub(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) local_unnamed_addr #2 {
entry:
  %sub = sub i64 %a.coerce0, %b.coerce0
  %add = add i64 %sub, %a.coerce1
  %sub3 = sub i64 %sub, %b.coerce1
  %xor = xor i64 %add, %sub3
  %or = or i64 %b.coerce1, %a.coerce1
  %or6 = or i64 %or, %xor
  %neg = xor i64 %or6, -1
  %and = and i64 %sub, %neg
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %and, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %or6, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_and(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) local_unnamed_addr #2 {
entry:
  %or = or i64 %a.coerce1, %a.coerce0
  %or3 = or i64 %b.coerce1, %b.coerce0
  %and = and i64 %b.coerce0, %a.coerce0
  %and8 = and i64 %or3, %or
  %and9 = xor i64 %and8, %and
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %and, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %and9, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_or(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) local_unnamed_addr #2 {
entry:
  %or = or i64 %b.coerce0, %a.coerce0
  %or3 = or i64 %b.coerce1, %a.coerce1
  %neg = xor i64 %or, -1
  %and = and i64 %or3, %neg
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %or, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %and, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_xor(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) local_unnamed_addr #2 {
entry:
  %xor = xor i64 %b.coerce0, %a.coerce0
  %or = or i64 %b.coerce1, %a.coerce1
  %neg = xor i64 %or, -1
  %and = and i64 %xor, %neg
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %and, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %or, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong
define dso_local { i64, i64 } @tnum_mul(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) local_unnamed_addr #4 {
entry:
  %mul = mul i64 %b.coerce0, %a.coerce0
  %or = or i64 %b.coerce1, %b.coerce0
  %tobool.not6.i = icmp eq i64 %or, 0
  br i1 %tobool.not6.i, label %hma.exit, label %while.body.i

while.body.i:                                     ; preds = %if.end.i, %entry
  %acc.sroa.4.010.i = phi i64 [ %acc.sroa.4.1.i, %if.end.i ], [ 0, %entry ]
  %acc.sroa.0.09.i = phi i64 [ %acc.sroa.0.1.i, %if.end.i ], [ %mul, %entry ]
  %value.addr.08.i = phi i64 [ %shl.i, %if.end.i ], [ %a.coerce1, %entry ]
  %mask.addr.07.i = phi i64 [ %shr.i, %if.end.i ], [ %or, %entry ]
  %and.i = and i64 %mask.addr.07.i, 1
  %tobool1.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool1.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %while.body.i
  %add.i.i = add i64 %acc.sroa.0.09.i, %acc.sroa.4.010.i
  %add4.i.i = add i64 %add.i.i, %value.addr.08.i
  %xor.i.i = xor i64 %add4.i.i, %acc.sroa.0.09.i
  %or.i.i = or i64 %value.addr.08.i, %acc.sroa.4.010.i
  %or7.i.i = or i64 %or.i.i, %xor.i.i
  %neg.i.i = xor i64 %or7.i.i, -1
  %and.i.i = and i64 %acc.sroa.0.09.i, %neg.i.i
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body.i
  %acc.sroa.0.1.i = phi i64 [ %and.i.i, %if.then.i ], [ %acc.sroa.0.09.i, %while.body.i ]
  %acc.sroa.4.1.i = phi i64 [ %or7.i.i, %if.then.i ], [ %acc.sroa.4.010.i, %while.body.i ]
  %shr.i = lshr i64 %mask.addr.07.i, 1
  %shl.i = shl i64 %value.addr.08.i, 1
  %tobool.not.i = icmp ult i64 %mask.addr.07.i, 2
  br i1 %tobool.not.i, label %hma.exit, label %while.body.i

hma.exit:                                         ; preds = %if.end.i, %entry
  %acc.sroa.0.0.lcssa.i = phi i64 [ %mul, %entry ], [ %acc.sroa.0.1.i, %if.end.i ]
  %acc.sroa.4.0.lcssa.i = phi i64 [ 0, %entry ], [ %acc.sroa.4.1.i, %if.end.i ]
  %tobool.not6.i1 = icmp eq i64 %a.coerce0, 0
  br i1 %tobool.not6.i1, label %hma.exit29, label %while.body.i8

while.body.i8:                                    ; preds = %if.end.i24, %hma.exit
  %acc.sroa.4.010.i2 = phi i64 [ %acc.sroa.4.1.i20, %if.end.i24 ], [ %acc.sroa.4.0.lcssa.i, %hma.exit ]
  %acc.sroa.0.09.i3 = phi i64 [ %acc.sroa.0.1.i19, %if.end.i24 ], [ %acc.sroa.0.0.lcssa.i, %hma.exit ]
  %value.addr.08.i4 = phi i64 [ %shl.i22, %if.end.i24 ], [ %b.coerce1, %hma.exit ]
  %mask.addr.07.i5 = phi i64 [ %shr.i21, %if.end.i24 ], [ %a.coerce0, %hma.exit ]
  %and.i6 = and i64 %mask.addr.07.i5, 1
  %tobool1.not.i7 = icmp eq i64 %and.i6, 0
  br i1 %tobool1.not.i7, label %if.end.i24, label %if.then.i18

if.then.i18:                                      ; preds = %while.body.i8
  %add.i.i9 = add i64 %acc.sroa.0.09.i3, %acc.sroa.4.010.i2
  %add4.i.i10 = add i64 %add.i.i9, %value.addr.08.i4
  %xor.i.i11 = xor i64 %add4.i.i10, %acc.sroa.0.09.i3
  %or.i.i12 = or i64 %value.addr.08.i4, %acc.sroa.4.010.i2
  %or7.i.i13 = or i64 %or.i.i12, %xor.i.i11
  %neg.i.i14 = xor i64 %or7.i.i13, -1
  %and.i.i15 = and i64 %acc.sroa.0.09.i3, %neg.i.i14
  br label %if.end.i24

if.end.i24:                                       ; preds = %if.then.i18, %while.body.i8
  %acc.sroa.0.1.i19 = phi i64 [ %and.i.i15, %if.then.i18 ], [ %acc.sroa.0.09.i3, %while.body.i8 ]
  %acc.sroa.4.1.i20 = phi i64 [ %or7.i.i13, %if.then.i18 ], [ %acc.sroa.4.010.i2, %while.body.i8 ]
  %shr.i21 = lshr i64 %mask.addr.07.i5, 1
  %shl.i22 = shl i64 %value.addr.08.i4, 1
  %tobool.not.i23 = icmp ult i64 %mask.addr.07.i5, 2
  br i1 %tobool.not.i23, label %hma.exit29, label %while.body.i8

hma.exit29:                                       ; preds = %if.end.i24, %hma.exit
  %acc.sroa.0.0.lcssa.i25 = phi i64 [ %acc.sroa.0.0.lcssa.i, %hma.exit ], [ %acc.sroa.0.1.i19, %if.end.i24 ]
  %acc.sroa.4.0.lcssa.i26 = phi i64 [ %acc.sroa.4.0.lcssa.i, %hma.exit ], [ %acc.sroa.4.1.i20, %if.end.i24 ]
  %.fca.0.insert.i27 = insertvalue { i64, i64 } poison, i64 %acc.sroa.0.0.lcssa.i25, 0
  %.fca.1.insert.i28 = insertvalue { i64, i64 } %.fca.0.insert.i27, i64 %acc.sroa.4.0.lcssa.i26, 1
  ret { i64, i64 } %.fca.1.insert.i28
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_intersect(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) local_unnamed_addr #2 {
entry:
  %or = or i64 %b.coerce0, %a.coerce0
  %and = and i64 %b.coerce1, %a.coerce1
  %neg = xor i64 %and, -1
  %and4 = and i64 %or, %neg
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %and4, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %and, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local { i64, i64 } @tnum_cast(i64 %a.coerce0, i64 %a.coerce1, i8 noundef zeroext %size) local_unnamed_addr #2 {
entry:
  %conv = zext i8 %size to i64
  %mul = shl nuw nsw i64 %conv, 3
  %notmask = shl nsw i64 -1, %mul
  %sub = xor i64 %notmask, -1
  %and = and i64 %sub, %a.coerce0
  %and6 = and i64 %sub, %a.coerce1
  %.fca.0.insert = insertvalue { i64, i64 } poison, i64 %and, 0
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %and6, 1
  ret { i64, i64 } %.fca.1.insert
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local zeroext i1 @tnum_is_aligned(i64 %a.coerce0, i64 %a.coerce1, i64 noundef %size) local_unnamed_addr #2 {
entry:
  %tobool.not = icmp eq i64 %size, 0
  %or = or i64 %a.coerce1, %a.coerce0
  %sub = add i64 %size, -1
  %and = and i64 %sub, %or
  %tobool1.not = icmp eq i64 %and, 0
  %retval.0 = select i1 %tobool.not, i1 true, i1 %tobool1.not
  ret i1 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define dso_local zeroext i1 @tnum_in(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) local_unnamed_addr #2 {
entry:
  %neg = xor i64 %a.coerce1, -1
  %and = and i64 %neg, %b.coerce1
  %tobool.not = icmp eq i64 %and, 0
  %and4 = and i64 %neg, %b.coerce0
  %cmp = icmp eq i64 %and4, %a.coerce0
  %retval.0 = select i1 %tobool.not, i1 %cmp, i1 false
  ret i1 %retval.0
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong writeonly
define dso_local i32 @tnum_sbin(i8* nocapture noundef writeonly %str, i64 noundef %size, i64 %a.coerce0, i64 %a.coerce1) local_unnamed_addr #5 {
entry:
  br label %for.body

for.body:                                         ; preds = %if.end12, %entry
  %a.sroa.4.018 = phi i64 [ %a.coerce1, %entry ], [ %shr, %if.end12 ]
  %a.sroa.0.016 = phi i64 [ %a.coerce0, %entry ], [ %shr15, %if.end12 ]
  %n.014 = phi i64 [ 64, %entry ], [ %dec, %if.end12 ]
  %cmp = icmp ult i64 %n.014, %size
  br i1 %cmp, label %if.then, label %if.end12

if.then:                                          ; preds = %for.body
  %and = and i64 %a.sroa.4.018, 1
  %tobool1.not = icmp eq i64 %and, 0
  br i1 %tobool1.not, label %if.else, label %if.then2

if.then2:                                         ; preds = %if.then
  %sub = add nsw i64 %n.014, -1
  %arrayidx = getelementptr i8, i8* %str, i64 %sub
  store i8 120, i8* %arrayidx, align 1
  br label %if.end12

if.else:                                          ; preds = %if.then
  %and3 = and i64 %a.sroa.0.016, 1
  %tobool4.not = icmp eq i64 %and3, 0
  %sub9 = add nsw i64 %n.014, -1
  %arrayidx10 = getelementptr i8, i8* %str, i64 %sub9
  br i1 %tobool4.not, label %if.else8, label %if.then5

if.then5:                                         ; preds = %if.else
  store i8 49, i8* %arrayidx10, align 1
  br label %if.end12

if.else8:                                         ; preds = %if.else
  store i8 48, i8* %arrayidx10, align 1
  br label %if.end12

if.end12:                                         ; preds = %if.else8, %if.then5, %if.then2, %for.body
  %shr = lshr i64 %a.sroa.4.018, 1
  %shr15 = lshr i64 %a.sroa.0.016, 1
  %dec = add nsw i64 %n.014, -1
  %tobool.not = icmp eq i64 %dec, 0
  br i1 %tobool.not, label %for.end, label %for.body

for.end:                                          ; preds = %if.end12
  %sub16 = add i64 %size, -1
  %cmp17 = icmp ult i64 %sub16, 64
  %cond = select i1 %cmp17, i64 %sub16, i64 64
  %arrayidx18 = getelementptr i8, i8* %str, i64 %cond
  store i8 0, i8* %arrayidx18, align 1
  ret i32 64
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define dso_local void @bpf_verifier_log_write(%struct.bpf_verifier_env* noundef %env, i8* noundef %fmt, ...) #6 {
entry:
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %log = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18
  %call = call fastcc zeroext i1 @bpf_verifier_log_needed(%struct.bpf_verifier_log* noundef %log) #22
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %args to i8*
  call void @llvm.va_start(i8* nonnull %arraydecay1)
  call void @bpf_verifier_vlog(%struct.bpf_verifier_log* noundef %log, i8* noundef %fmt, %struct.__va_list_tag* noundef %arraydecay) #22
  call void @llvm.va_end(i8* %arraydecay1)
  br label %return

return:                                           ; preds = %if.end, %entry
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @bpf_verifier_log_needed(%struct.bpf_verifier_log* nocapture noundef readonly %log) unnamed_addr #7 {
entry:
  %level = getelementptr inbounds %struct.bpf_verifier_log, %struct.bpf_verifier_log* %log, i64 0, i32 0
  %i = load i32, i32* %level, align 8
  %tobool.not = icmp eq i32 %i, 0
  br i1 %tobool.not, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %ubuf = getelementptr inbounds %struct.bpf_verifier_log, %struct.bpf_verifier_log* %log, i64 0, i32 2
  %i3 = load i8*, i8** %ubuf, align 8
  %tobool1.not = icmp eq i8* %i3, null
  br i1 %tobool1.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %log.idx = getelementptr %struct.bpf_verifier_log, %struct.bpf_verifier_log* %log, i64 0, i32 3
  %log.idx.val = load i32, i32* %log.idx, align 8
  %log.idx1 = getelementptr %struct.bpf_verifier_log, %struct.bpf_verifier_log* %log, i64 0, i32 4
  %log.idx1.val = load i32, i32* %log.idx1, align 4
  %call = call fastcc zeroext i1 @bpf_verifier_log_full(i32 %log.idx.val, i32 %log.idx1.val) #22
  %lnot = xor i1 %call, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %i4 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %i4
}

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.va_start(i8*) #8

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define dso_local void @bpf_verifier_vlog(%struct.bpf_verifier_log* noundef %log, i8* noundef %fmt, %struct.__va_list_tag* noundef %args) local_unnamed_addr #6 {
entry:
  %arraydecay = getelementptr inbounds %struct.bpf_verifier_log, %struct.bpf_verifier_log* %log, i64 0, i32 1, i64 0
  %call = call i32 @vscnprintf(i8* noundef %arraydecay, i64 noundef 1024, i8* noundef %fmt, %struct.__va_list_tag* noundef %args) #23
  %cmp = icmp ugt i32 %call, 1022
  %.b26 = load i1, i1* @bpf_verifier_vlog.__warned, align 1
  %lnot3 = xor i1 %.b26, true
  %i = select i1 %cmp, i1 %lnot3, i1 false
  br i1 %i, label %if.then, label %if.end28

if.then:                                          ; preds = %entry
  store i1 true, i1* @bpf_verifier_vlog.__warned, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0)) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 327, i32 2313, i64 12) #24, !srcloc !5
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 121) #24, !srcloc !6
  br label %if.end28

if.end28:                                         ; preds = %if.then, %entry
  %len_total = getelementptr inbounds %struct.bpf_verifier_log, %struct.bpf_verifier_log* %log, i64 0, i32 4
  %i27 = load i32, i32* %len_total, align 4
  %len_used = getelementptr inbounds %struct.bpf_verifier_log, %struct.bpf_verifier_log* %log, i64 0, i32 3
  %i28 = load i32, i32* %len_used, align 8
  %i29 = xor i32 %i28, -1
  %sub36 = add i32 %i27, %i29
  %cmp38 = icmp ult i32 %sub36, %call
  %cond = select i1 %cmp38, i32 %sub36, i32 %call
  %idxprom = zext i32 %cond to i64
  %arrayidx = getelementptr %struct.bpf_verifier_log, %struct.bpf_verifier_log* %log, i64 0, i32 1, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1
  %ubuf = getelementptr inbounds %struct.bpf_verifier_log, %struct.bpf_verifier_log* %log, i64 0, i32 2
  %i30 = load i8*, i8** %ubuf, align 8
  %i31 = load i32, i32* %len_used, align 8
  %idx.ext = zext i32 %i31 to i64
  %add.ptr = getelementptr i8, i8* %i30, i64 %idx.ext
  %add = add i32 %cond, 1
  %conv44 = zext i32 %add to i64
  %call2.i = call i64 @_copy_to_user(i8* noundef %add.ptr, i8* noundef %arraydecay, i64 noundef %conv44) #23
  %tobool46.not = icmp eq i64 %call2.i, 0
  br i1 %tobool46.not, label %if.then47, label %if.else

if.then47:                                        ; preds = %if.end28
  %i32 = load i32, i32* %len_used, align 8
  %add49 = add i32 %i32, %cond
  store i32 %add49, i32* %len_used, align 8
  br label %if.end51

if.else:                                          ; preds = %if.end28
  store i8* null, i8** %ubuf, align 8
  br label %if.end51

if.end51:                                         ; preds = %if.else, %if.then47
  ret void
}

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.va_end(i8*) #8

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @vscnprintf(i8* noundef, i64 noundef, i8* noundef, %struct.__va_list_tag* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @__warn_printk(i8* noundef, ...) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i64 @_copy_to_user(i8* noundef, i8* noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @bpf_verifier_log_full(i32 %log.0.3.val, i32 %log.0.4.val) unnamed_addr #7 {
entry:
  %sub = add i32 %log.0.4.val, -1
  %cmp = icmp ule i32 %sub, %log.0.3.val
  ret i1 %cmp
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @reg_bounds_sync___(%struct.bpf_reg_state* nocapture noundef %dst_reg) local_unnamed_addr #10 {
entry:
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* nocapture noundef %reg) unnamed_addr #10 {
entry:
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 6
  %i = load i64, i64* %smin_value, align 8
  %cmp = icmp sgt i64 %i, -1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 7
  %i33 = load i64, i64* %smax_value, align 8
  %cmp1 = icmp slt i64 %i33, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 8
  %i34 = load i64, i64* %umin_value, align 8
  %cmp3 = icmp ugt i64 %i, %i34
  %cond = select i1 %cmp3, i64 %i, i64 %i34
  store i64 %cond, i64* %umin_value, align 8
  store i64 %cond, i64* %smin_value, align 8
  %smax_value6 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 7
  %i35 = load i64, i64* %smax_value6, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 9
  %i36 = load i64, i64* %umax_value, align 8
  %cmp8 = icmp ult i64 %i35, %i36
  %cond12 = select i1 %cmp8, i64 %i35, i64 %i36
  store i64 %cond12, i64* %umax_value, align 8
  store i64 %cond12, i64* %smax_value6, align 8
  br label %if.end46

if.end:                                           ; preds = %lor.lhs.false
  %umax_value15 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 9
  %i37 = load i64, i64* %umax_value15, align 8
  %cmp16 = icmp sgt i64 %i37, -1
  %umin_value18 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 8
  %i38 = load i64, i64* %umin_value18, align 8
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end
  store i64 %i38, i64* %smin_value, align 8
  %cmp23 = icmp ult i64 %i33, %i37
  %cond27 = select i1 %cmp23, i64 %i33, i64 %i37
  store i64 %cond27, i64* %umax_value15, align 8
  store i64 %cond27, i64* %smax_value, align 8
  br label %if.end46

if.else:                                          ; preds = %if.end
  %cmp31 = icmp slt i64 %i38, 0
  br i1 %cmp31, label %if.then32, label %if.end46

if.then32:                                        ; preds = %if.else
  %cmp36 = icmp ugt i64 %i, %i38
  %cond40 = select i1 %cmp36, i64 %i, i64 %i38
  store i64 %cond40, i64* %umin_value18, align 8
  store i64 %cond40, i64* %smin_value, align 8
  store i64 %i37, i64* %smax_value, align 8
  br label %if.end46

if.end46:                                         ; preds = %if.then32, %if.else, %if.then17, %if.then
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @__reg_bound_offset(%struct.bpf_reg_state* nocapture noundef %reg) unnamed_addr #10 {
entry:
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 8
  %i = load i64, i64* %umin_value, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 9
  %i5 = load i64, i64* %umax_value, align 8
  %xor.i = xor i64 %i5, %i
  %cmp.i.i = icmp eq i64 %xor.i, 0
  br i1 %cmp.i.i, label %tnum_range.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  %tobool.not.i.i.i = icmp ult i64 %xor.i, 4294967296
  %shl.i.i.i = shl i64 %xor.i, 32
  %spec.select.i.i.i = select i1 %tobool.not.i.i.i, i64 %shl.i.i.i, i64 %xor.i
  %spec.select17.i.i.i = select i1 %tobool.not.i.i.i, i32 31, i32 63
  %tobool2.not.i.i.i = icmp ult i64 %spec.select.i.i.i, 281474976710656
  %sub4.i.i.i = add nsw i32 %spec.select17.i.i.i, -16
  %shl5.i.i.i = shl i64 %spec.select.i.i.i, 16
  %word.addr.1.i.i.i = select i1 %tobool2.not.i.i.i, i64 %shl5.i.i.i, i64 %spec.select.i.i.i
  %num.1.i.i.i = select i1 %tobool2.not.i.i.i, i32 %sub4.i.i.i, i32 %spec.select17.i.i.i
  %tobool8.not.i.i.i = icmp ult i64 %word.addr.1.i.i.i, 72057594037927936
  %sub10.i.i.i = add nsw i32 %num.1.i.i.i, -8
  %shl11.i.i.i = shl i64 %word.addr.1.i.i.i, 8
  %word.addr.2.i.i.i = select i1 %tobool8.not.i.i.i, i64 %shl11.i.i.i, i64 %word.addr.1.i.i.i
  %num.2.i.i.i = select i1 %tobool8.not.i.i.i, i32 %sub10.i.i.i, i32 %num.1.i.i.i
  %tobool14.not.i.i.i = icmp ult i64 %word.addr.2.i.i.i, 1152921504606846976
  %sub16.i.i.i = add nsw i32 %num.2.i.i.i, -4
  %shl17.i.i.i = shl i64 %word.addr.2.i.i.i, 4
  %word.addr.3.i.i.i = select i1 %tobool14.not.i.i.i, i64 %shl17.i.i.i, i64 %word.addr.2.i.i.i
  %num.3.i.i.i = select i1 %tobool14.not.i.i.i, i32 %sub16.i.i.i, i32 %num.2.i.i.i
  %tobool20.not.i.i.i = icmp ult i64 %word.addr.3.i.i.i, 4611686018427387904
  %sub22.i.i.i = add i32 %num.3.i.i.i, 254
  %shl23.i.i.i = shl i64 %word.addr.3.i.i.i, 2
  %word.addr.4.i.i.i = select i1 %tobool20.not.i.i.i, i64 %shl23.i.i.i, i64 %word.addr.3.i.i.i
  %num.4.i.i.i = select i1 %tobool20.not.i.i.i, i32 %sub22.i.i.i, i32 %num.3.i.i.i
  %word.addr.4.lobit.i.i.i.neg = lshr i64 %word.addr.4.i.i.i, 63
  %i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.neg to i32
  %add.i.i = add i32 %num.4.i.i.i, %i.i.i.i.neg
  %phi.bo = and i32 %add.i.i, 255
  br label %tnum_range.exit

tnum_range.exit:                                  ; preds = %if.end.i.i, %entry
  %retval.0.i.i = phi i32 [ %phi.bo, %if.end.i.i ], [ 0, %entry ]
  %cmp.i = icmp ugt i32 %retval.0.i.i, 63
  %sh_prom.i = zext i32 %retval.0.i.i to i64
  %notmask.i = shl nsw i64 -1, %sh_prom.i
  %sub.i = xor i64 %notmask.i, -1
  %and.i = and i64 %notmask.i, %i
  %retval.sroa.0.0.i = select i1 %cmp.i, i64 0, i64 %and.i
  %retval.sroa.3.0.i = select i1 %cmp.i, i64 -1, i64 %sub.i
  %i8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i9 = load i64, i64* %i8, align 8
  %i10 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i11 = load i64, i64* %i10, align 8
  %or.i = or i64 %retval.sroa.0.0.i, %i9
  %and.i1 = and i64 %retval.sroa.3.0.i, %i11
  %neg.i = xor i64 %and.i1, -1
  %and4.i = and i64 %or.i, %neg.i
  store i64 %and4.i, i64* %i8, align 8
  store i64 %and.i1, i64* %i10, align 8
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_ADD(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8463, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* nocapture noundef readonly %insn, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef byval(%struct.bpf_reg_state) align 8 %src_reg) unnamed_addr #11 {
entry:
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i = load i8, i8* %code, align 4
  %and = and i8 %i, -16
  %i204 = and i8 %i, 7
  %cmp = icmp eq i8 %i204, 7
  %i205 = select i1 %cmp, i64 64, i64 32
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i18.i = load i64, i64* %i.i, align 8
  %i19.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i20.i = load i64, i64* %i19.i, align 8
  %and.i.i = and i64 %i18.i, 4294967295
  %and6.i.i = and i64 %i20.i, 4294967295
  store i64 %and.i.i, i64* %i.i, align 8
  store i64 %and6.i.i, i64* %i19.i, align 8
  %umin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i23.i = load i64, i64* %umin_value.i, align 8
  %umax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i24.i = load i64, i64* %umax_value.i, align 8
  %i25.i = xor i64 %i24.i, %i23.i
  %cmp.i = icmp ult i64 %i25.i, 4294967296
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %and6.i = and i64 %i23.i, 4294967295
  store i64 %and6.i, i64* %umin_value.i, align 8
  %and8.i = and i64 %i24.i, 4294967295
  br label %coerce_reg_to_size.exit

if.else.i:                                        ; preds = %if.then
  store i64 0, i64* %umin_value.i, align 8
  br label %coerce_reg_to_size.exit

coerce_reg_to_size.exit:                          ; preds = %if.else.i, %if.then.i
  %storemerge.i = phi i64 [ 4294967295, %if.else.i ], [ %and8.i, %if.then.i ]
  store i64 %storemerge.i, i64* %umax_value.i, align 8
  %i27.i = load i64, i64* %umin_value.i, align 8
  %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 %i27.i, i64* %smin_value.i, align 8
  %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 %storemerge.i, i64* %smax_value.i, align 8
  %i.i1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i18.i2 = load i64, i64* %i.i1, align 8
  %i19.i3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i20.i4 = load i64, i64* %i19.i3, align 8
  %and.i.i5 = and i64 %i18.i2, 4294967295
  %and6.i.i6 = and i64 %i20.i4, 4294967295
  store i64 %and.i.i5, i64* %i.i1, align 8
  store i64 %and6.i.i6, i64* %i19.i3, align 8
  %umin_value.i9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
  %i23.i10 = load i64, i64* %umin_value.i9, align 8
  %umax_value.i11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
  %i24.i12 = load i64, i64* %umax_value.i11, align 8
  %i25.i13 = xor i64 %i24.i12, %i23.i10
  %cmp.i15 = icmp ult i64 %i25.i13, 4294967296
  br i1 %cmp.i15, label %if.then.i18, label %if.else.i19

if.then.i18:                                      ; preds = %coerce_reg_to_size.exit
  %and6.i16 = and i64 %i23.i10, 4294967295
  store i64 %and6.i16, i64* %umin_value.i9, align 8
  %and8.i17 = and i64 %i24.i12, 4294967295
  br label %coerce_reg_to_size.exit24

if.else.i19:                                      ; preds = %coerce_reg_to_size.exit
  store i64 0, i64* %umin_value.i9, align 8
  br label %coerce_reg_to_size.exit24

coerce_reg_to_size.exit24:                        ; preds = %if.else.i19, %if.then.i18
  %storemerge.i20 = phi i64 [ 4294967295, %if.else.i19 ], [ %and8.i17, %if.then.i18 ]
  store i64 %storemerge.i20, i64* %umax_value.i11, align 8
  %i27.i21 = load i64, i64* %umin_value.i9, align 8
  %smin_value.i22 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
  store i64 %i27.i21, i64* %smin_value.i22, align 8
  %smax_value.i23 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
  store i64 %storemerge.i20, i64* %smax_value.i23, align 8
  br label %if.end

if.end:                                           ; preds = %coerce_reg_to_size.exit24, %entry
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
  %i206 = load i64, i64* %smin_value, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
  %i207 = load i64, i64* %smax_value, align 8
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
  %i208 = load i64, i64* %umin_value, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
  %i209 = load i64, i64* %umax_value, align 8
  %i210 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i211 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i212 = load i64, i64* %i211, align 8
  %tobool.not.i = icmp eq i64 %i212, 0
  %i213 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i214 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i215 = load i64, i64* %i214, align 8
  %tobool.not.i25 = icmp eq i64 %i215, 0
  br i1 %tobool.not.i, label %land.lhs.true, label %lor.lhs.false20

land.lhs.true:                                    ; preds = %if.end
  %cmp16.not = icmp ne i64 %i206, %i207
  %cmp18.not = icmp ne i64 %i208, %i209
  %or.cond197 = select i1 %cmp16.not, i1 true, i1 %cmp18.not
  %cmp21 = icmp sgt i64 %i206, %i207
  %or.cond198 = or i1 %cmp21, %or.cond197
  %cmp24 = icmp ugt i64 %i208, %i209
  %or.cond199 = select i1 %or.cond198, i1 true, i1 %cmp24
  br i1 %or.cond199, label %if.then26, label %if.end27

lor.lhs.false20:                                  ; preds = %if.end
  %cmp21.old = icmp sgt i64 %i206, %i207
  %cmp24.old = icmp ugt i64 %i208, %i209
  %or.cond200 = select i1 %cmp21.old, i1 true, i1 %cmp24.old
  br i1 %or.cond200, label %if.then26, label %if.end27

if.then26:                                        ; preds = %lor.lhs.false20, %land.lhs.true
  %type.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type.i, align 8
  %var_off.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5
  %i.i26 = bitcast %struct.tnum* %var_off.i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #24
  %frameno.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
  store i32 0, i32* %frameno.i, align 8
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 0, i64* %umin_value.i.i, align 8
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value.i.i, align 8
  br label %return

if.end27:                                         ; preds = %lor.lhs.false20, %land.lhs.true
  br i1 %tobool.not.i, label %if.end42, label %switch.early.test

switch.early.test:                                ; preds = %if.end27
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %switch.early.test
  %Pivot6 = icmp slt i8 %and, 16
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i8 %and, 80
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i8 %and, 80
  br i1 %SwitchLeaf4, label %if.end42, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %and, 16
  br i1 %SwitchLeaf2, label %if.end42, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i8 %and, 0
  br i1 %SwitchLeaf, label %if.end42, label %NewDefault

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3
  br label %if.then41

if.then41:                                        ; preds = %NewDefault
  %type.i27 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type.i27, align 8
  %var_off.i28 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5
  %i.i29 = bitcast %struct.tnum* %var_off.i28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #24
  %frameno.i30 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
  store i32 0, i32* %frameno.i30, align 8
  %smin_value.i.i31 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value.i.i31, align 8
  %smax_value.i.i32 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value.i.i32, align 8
  %umin_value.i.i33 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 0, i64* %umin_value.i.i33, align 8
  %umax_value.i.i34 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value.i.i34, align 8
  br label %return

if.end42:                                         ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %if.end27
  %i216 = lshr i8 %i, 4
  br label %NodeBlock26

NodeBlock26:                                      ; preds = %if.end42
  %Pivot27 = icmp ult i8 %i, 80
  br i1 %Pivot27, label %NodeBlock14, label %NodeBlock24

NodeBlock24:                                      ; preds = %NodeBlock26
  %Pivot25 = icmp ult i8 %i, 112
  br i1 %Pivot25, label %NodeBlock16, label %NodeBlock22

NodeBlock22:                                      ; preds = %NodeBlock24
  %Pivot23 = icmp ult i8 %i, -64
  br i1 %Pivot23, label %LeafBlock18, label %LeafBlock20

LeafBlock20:                                      ; preds = %NodeBlock22
  %SwitchLeaf21 = icmp eq i8 %i216, 12
  br i1 %SwitchLeaf21, label %sw.bb287, label %NewDefault7

LeafBlock18:                                      ; preds = %NodeBlock22
  %SwitchLeaf19 = icmp eq i8 %i216, 7
  br i1 %SwitchLeaf19, label %sw.bb272, label %NewDefault7

NodeBlock16:                                      ; preds = %NodeBlock24
  %Pivot17 = icmp ult i8 %i, 96
  br i1 %Pivot17, label %sw.bb160, label %sw.bb247

NodeBlock14:                                      ; preds = %NodeBlock26
  %Pivot15 = icmp ult i8 %i, 32
  br i1 %Pivot15, label %NodeBlock8, label %NodeBlock12

NodeBlock12:                                      ; preds = %NodeBlock14
  %Pivot13 = icmp ult i8 %i, 64
  br i1 %Pivot13, label %LeafBlock10, label %sw.bb201

LeafBlock10:                                      ; preds = %NodeBlock12
  %SwitchLeaf11 = icmp eq i8 %i216, 2
  br i1 %SwitchLeaf11, label %sw.bb123, label %NewDefault7

NodeBlock8:                                       ; preds = %NodeBlock14
  %Pivot9 = icmp ult i8 %i, 16
  br i1 %Pivot9, label %sw.bb, label %sw.bb85

sw.bb:                                            ; preds = %NodeBlock8
  %smin_value49 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  %i219 = load i64, i64* %smin_value49, align 8
  %add.i = add i64 %i219, %i206
  %cmp.i35 = icmp slt i64 %i206, 0
  %cmp1.i = icmp sgt i64 %add.i, %i219
  %cmp2.i = icmp slt i64 %add.i, %i219
  %retval.0.i = select i1 %cmp.i35, i1 %cmp1.i, i1 %cmp2.i
  br i1 %retval.0.i, label %if.then56, label %lor.lhs.false52

lor.lhs.false52:                                  ; preds = %sw.bb
  %smax_value53 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  %i220 = load i64, i64* %smax_value53, align 8
  %add.i36 = add i64 %i220, %i207
  %cmp.i37 = icmp slt i64 %i207, 0
  %cmp1.i38 = icmp sgt i64 %add.i36, %i220
  %cmp2.i39 = icmp slt i64 %add.i36, %i220
  %retval.0.i40 = select i1 %cmp.i37, i1 %cmp1.i38, i1 %cmp2.i39
  br i1 %retval.0.i40, label %if.then56, label %if.else

if.then56:                                        ; preds = %lor.lhs.false52, %sw.bb
  store i64 -9223372036854775808, i64* %smin_value49, align 8
  %smax_value58 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value58, align 8
  br label %if.end62

if.else:                                          ; preds = %lor.lhs.false52
  store i64 %add.i, i64* %smin_value49, align 8
  store i64 %add.i36, i64* %smax_value53, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.else, %if.then56
  %umin_value63 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i221 = load i64, i64* %umin_value63, align 8
  %add64 = add i64 %i221, %i208
  %cmp65 = icmp ult i64 %add64, %i208
  br i1 %cmp65, label %if.then72, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %if.end62
  %umax_value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i222 = load i64, i64* %umax_value68, align 8
  %i223 = xor i64 %i209, -1
  %cmp70 = icmp ugt i64 %i222, %i223
  br i1 %cmp70, label %if.then72, label %if.else75

if.then72:                                        ; preds = %lor.lhs.false67, %if.end62
  store i64 0, i64* %umin_value63, align 8
  %umax_value74 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value74, align 8
  br label %if.end80

if.else75:                                        ; preds = %lor.lhs.false67
  store i64 %add64, i64* %umin_value63, align 8
  %add79 = add i64 %i222, %i209
  store i64 %add79, i64* %umax_value68, align 8
  br label %if.end80

if.end80:                                         ; preds = %if.else75, %if.then72
  %i224 = load i64, i64* %i213, align 8
  %i226 = load i64, i64* %i210, align 8
  %add.i41 = add i64 %i215, %i212
  %add3.i = add i64 %i226, %i224
  %add4.i = add i64 %add.i41, %add3.i
  %xor.i = xor i64 %add4.i, %add3.i
  %or.i = or i64 %i215, %i212
  %or7.i = or i64 %or.i, %xor.i
  %neg.i = xor i64 %or7.i, -1
  %and.i = and i64 %add3.i, %neg.i
  store i64 %and.i, i64* %i213, align 8
  store i64 %or7.i, i64* %i214, align 8
  br label %sw.epilog

sw.bb85:                                          ; preds = %NodeBlock8
  %smin_value91 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  %i230 = load i64, i64* %smin_value91, align 8
  %sub.i = sub i64 %i230, %i207
  %cmp.i42 = icmp slt i64 %i207, 0
  %cmp1.i43 = icmp slt i64 %sub.i, %i230
  %cmp2.i44 = icmp sgt i64 %sub.i, %i230
  %retval.0.i45 = select i1 %cmp.i42, i1 %cmp1.i43, i1 %cmp2.i44
  br i1 %retval.0.i45, label %if.then98, label %lor.lhs.false94

lor.lhs.false94:                                  ; preds = %sw.bb85
  %smax_value95 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  %i231 = load i64, i64* %smax_value95, align 8
  %sub.i46 = sub i64 %i231, %i206
  %cmp.i47 = icmp slt i64 %i206, 0
  %cmp1.i48 = icmp slt i64 %sub.i46, %i231
  %cmp2.i49 = icmp sgt i64 %sub.i46, %i231
  %retval.0.i50 = select i1 %cmp.i47, i1 %cmp1.i48, i1 %cmp2.i49
  br i1 %retval.0.i50, label %if.then98, label %if.else101

if.then98:                                        ; preds = %lor.lhs.false94, %sw.bb85
  store i64 -9223372036854775808, i64* %smin_value91, align 8
  %smax_value100 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value100, align 8
  br label %if.end105

if.else101:                                       ; preds = %lor.lhs.false94
  store i64 %sub.i, i64* %smin_value91, align 8
  store i64 %sub.i46, i64* %smax_value95, align 8
  br label %if.end105

if.end105:                                        ; preds = %if.else101, %if.then98
  %umin_value106 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i232 = load i64, i64* %umin_value106, align 8
  %cmp107 = icmp ult i64 %i232, %i209
  br i1 %cmp107, label %if.then109, label %if.else112

if.then109:                                       ; preds = %if.end105
  store i64 0, i64* %umin_value106, align 8
  %umax_value111 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value111, align 8
  br label %if.end117

if.else112:                                       ; preds = %if.end105
  %sub114 = sub i64 %i232, %i209
  store i64 %sub114, i64* %umin_value106, align 8
  %umax_value115 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i233 = load i64, i64* %umax_value115, align 8
  %sub116 = sub i64 %i233, %i208
  store i64 %sub116, i64* %umax_value115, align 8
  br label %if.end117

if.end117:                                        ; preds = %if.else112, %if.then109
  %i234 = load i64, i64* %i213, align 8
  %i236 = load i64, i64* %i210, align 8
  %sub.i51 = sub i64 %i234, %i236
  %add.i52 = add i64 %sub.i51, %i215
  %sub3.i = sub i64 %sub.i51, %i212
  %xor.i53 = xor i64 %add.i52, %sub3.i
  %or.i54 = or i64 %i215, %i212
  %or6.i = or i64 %or.i54, %xor.i53
  %neg.i55 = xor i64 %or6.i, -1
  %and.i56 = and i64 %sub.i51, %neg.i55
  store i64 %and.i56, i64* %i213, align 8
  store i64 %or6.i, i64* %i214, align 8
  br label %sw.epilog

sw.bb123:                                         ; preds = %LeafBlock10
  %i239 = load i64, i64* %i213, align 8
  %i240 = load i64, i64* %i210, align 8
  %mul.i = mul i64 %i240, %i239
  %or.i59 = or i64 %i240, %i212
  %tobool.not6.i.i = icmp eq i64 %or.i59, 0
  br i1 %tobool.not6.i.i, label %hma.exit.i, label %while.body.i.i

while.body.i.i:                                   ; preds = %if.end.i.i, %sw.bb123
  %acc.sroa.4.010.i.i = phi i64 [ %acc.sroa.4.1.i.i, %if.end.i.i ], [ 0, %sw.bb123 ]
  %acc.sroa.0.09.i.i = phi i64 [ %acc.sroa.0.1.i.i, %if.end.i.i ], [ %mul.i, %sw.bb123 ]
  %value.addr.08.i.i = phi i64 [ %shl.i.i, %if.end.i.i ], [ %i215, %sw.bb123 ]
  %mask.addr.07.i.i = phi i64 [ %shr.i.i, %if.end.i.i ], [ %or.i59, %sw.bb123 ]
  %and.i.i60 = and i64 %mask.addr.07.i.i, 1
  %tobool1.not.i.i = icmp eq i64 %and.i.i60, 0
  br i1 %tobool1.not.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %while.body.i.i
  %add.i.i.i = add i64 %acc.sroa.0.09.i.i, %acc.sroa.4.010.i.i
  %add4.i.i.i = add i64 %add.i.i.i, %value.addr.08.i.i
  %xor.i.i.i = xor i64 %add4.i.i.i, %acc.sroa.0.09.i.i
  %or.i.i.i = or i64 %value.addr.08.i.i, %acc.sroa.4.010.i.i
  %or7.i.i.i = or i64 %or.i.i.i, %xor.i.i.i
  %neg.i.i.i = xor i64 %or7.i.i.i, -1
  %and.i.i.i = and i64 %acc.sroa.0.09.i.i, %neg.i.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %while.body.i.i
  %acc.sroa.0.1.i.i = phi i64 [ %and.i.i.i, %if.then.i.i ], [ %acc.sroa.0.09.i.i, %while.body.i.i ]
  %acc.sroa.4.1.i.i = phi i64 [ %or7.i.i.i, %if.then.i.i ], [ %acc.sroa.4.010.i.i, %while.body.i.i ]
  %shr.i.i = lshr i64 %mask.addr.07.i.i, 1
  %shl.i.i = shl i64 %value.addr.08.i.i, 1
  %tobool.not.i.i = icmp ult i64 %mask.addr.07.i.i, 2
  br i1 %tobool.not.i.i, label %hma.exit.i, label %while.body.i.i

hma.exit.i:                                       ; preds = %if.end.i.i, %sw.bb123
  %acc.sroa.0.0.lcssa.i.i = phi i64 [ %mul.i, %sw.bb123 ], [ %acc.sroa.0.1.i.i, %if.end.i.i ]
  %acc.sroa.4.0.lcssa.i.i = phi i64 [ 0, %sw.bb123 ], [ %acc.sroa.4.1.i.i, %if.end.i.i ]
  %tobool.not6.i1.i = icmp eq i64 %i239, 0
  br i1 %tobool.not6.i1.i, label %tnum_mul.exit, label %while.body.i8.i

while.body.i8.i:                                  ; preds = %if.end.i24.i, %hma.exit.i
  %acc.sroa.4.010.i2.i = phi i64 [ %acc.sroa.4.1.i20.i, %if.end.i24.i ], [ %acc.sroa.4.0.lcssa.i.i, %hma.exit.i ]
  %acc.sroa.0.09.i3.i = phi i64 [ %acc.sroa.0.1.i19.i, %if.end.i24.i ], [ %acc.sroa.0.0.lcssa.i.i, %hma.exit.i ]
  %value.addr.08.i4.i = phi i64 [ %shl.i22.i, %if.end.i24.i ], [ %i212, %hma.exit.i ]
  %mask.addr.07.i5.i = phi i64 [ %shr.i21.i, %if.end.i24.i ], [ %i239, %hma.exit.i ]
  %and.i6.i = and i64 %mask.addr.07.i5.i, 1
  %tobool1.not.i7.i = icmp eq i64 %and.i6.i, 0
  br i1 %tobool1.not.i7.i, label %if.end.i24.i, label %if.then.i18.i

if.then.i18.i:                                    ; preds = %while.body.i8.i
  %add.i.i9.i = add i64 %acc.sroa.0.09.i3.i, %acc.sroa.4.010.i2.i
  %add4.i.i10.i = add i64 %add.i.i9.i, %value.addr.08.i4.i
  %xor.i.i11.i = xor i64 %add4.i.i10.i, %acc.sroa.0.09.i3.i
  %or.i.i12.i = or i64 %value.addr.08.i4.i, %acc.sroa.4.010.i2.i
  %or7.i.i13.i = or i64 %or.i.i12.i, %xor.i.i11.i
  %neg.i.i14.i = xor i64 %or7.i.i13.i, -1
  %and.i.i15.i = and i64 %acc.sroa.0.09.i3.i, %neg.i.i14.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i18.i, %while.body.i8.i
  %acc.sroa.0.1.i19.i = phi i64 [ %and.i.i15.i, %if.then.i18.i ], [ %acc.sroa.0.09.i3.i, %while.body.i8.i ]
  %acc.sroa.4.1.i20.i = phi i64 [ %or7.i.i13.i, %if.then.i18.i ], [ %acc.sroa.4.010.i2.i, %while.body.i8.i ]
  %shr.i21.i = lshr i64 %mask.addr.07.i5.i, 1
  %shl.i22.i = shl i64 %value.addr.08.i4.i, 1
  %tobool.not.i23.i = icmp ult i64 %mask.addr.07.i5.i, 2
  br i1 %tobool.not.i23.i, label %tnum_mul.exit, label %while.body.i8.i

tnum_mul.exit:                                    ; preds = %if.end.i24.i, %hma.exit.i
  %acc.sroa.0.0.lcssa.i25.i = phi i64 [ %acc.sroa.0.0.lcssa.i.i, %hma.exit.i ], [ %acc.sroa.0.1.i19.i, %if.end.i24.i ]
  %acc.sroa.4.0.lcssa.i26.i = phi i64 [ %acc.sroa.4.0.lcssa.i.i, %hma.exit.i ], [ %acc.sroa.4.1.i20.i, %if.end.i24.i ]
  store i64 %acc.sroa.0.0.lcssa.i25.i, i64* %i213, align 8
  store i64 %acc.sroa.4.0.lcssa.i26.i, i64* %i214, align 8
  %cmp129 = icmp slt i64 %i206, 0
  br i1 %cmp129, label %if.then135, label %lor.lhs.false131

lor.lhs.false131:                                 ; preds = %tnum_mul.exit
  %smin_value132 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  %i243 = load i64, i64* %smin_value132, align 8
  %cmp133 = icmp slt i64 %i243, 0
  br i1 %cmp133, label %if.then135, label %if.end136

if.then135:                                       ; preds = %lor.lhs.false131, %tnum_mul.exit
  %smin_value.i63 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value.i63, align 8
  %smax_value.i64 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value.i64, align 8
  %umin_value.i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 0, i64* %umin_value.i65, align 8
  %umax_value.i66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value.i66, align 8
  %and.i71 = and i64 %acc.sroa.4.0.lcssa.i26.i, -9223372036854775808
  %or.i72 = or i64 %and.i71, %acc.sroa.0.0.lcssa.i25.i
  store i64 %or.i72, i64* %smin_value.i63, align 8
  %and7.i = and i64 %acc.sroa.4.0.lcssa.i26.i, 9223372036854775807
  %or8.i = or i64 %and7.i, %acc.sroa.0.0.lcssa.i25.i
  store i64 %or8.i, i64* %smax_value.i64, align 8
  store i64 %acc.sroa.0.0.lcssa.i25.i, i64* %umin_value.i65, align 8
  %or29.i = or i64 %acc.sroa.4.0.lcssa.i26.i, %acc.sroa.0.0.lcssa.i25.i
  store i64 %or29.i, i64* %umax_value.i66, align 8
  br label %sw.epilog

if.end136:                                        ; preds = %lor.lhs.false131
  %cmp137 = icmp ugt i64 %i209, 4294967295
  br i1 %cmp137, label %if.then143, label %lor.lhs.false139

lor.lhs.false139:                                 ; preds = %if.end136
  %umax_value140 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i244 = load i64, i64* %umax_value140, align 8
  %cmp141 = icmp ugt i64 %i244, 4294967295
  br i1 %cmp141, label %if.then143, label %if.end144

if.then143:                                       ; preds = %lor.lhs.false139, %if.end136
  store i64 -9223372036854775808, i64* %smin_value132, align 8
  %smax_value.i81 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value.i81, align 8
  %umin_value.i82 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 0, i64* %umin_value.i82, align 8
  %umax_value.i83 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value.i83, align 8
  %and.i90 = and i64 %acc.sroa.4.0.lcssa.i26.i, -9223372036854775808
  %or.i91 = or i64 %and.i90, %acc.sroa.0.0.lcssa.i25.i
  store i64 %or.i91, i64* %smin_value132, align 8
  %and7.i96 = and i64 %acc.sroa.4.0.lcssa.i26.i, 9223372036854775807
  %or8.i97 = or i64 %and7.i96, %acc.sroa.0.0.lcssa.i25.i
  store i64 %or8.i97, i64* %smax_value.i81, align 8
  store i64 %acc.sroa.0.0.lcssa.i25.i, i64* %umin_value.i82, align 8
  %or29.i106 = or i64 %acc.sroa.4.0.lcssa.i26.i, %acc.sroa.0.0.lcssa.i25.i
  store i64 %or29.i106, i64* %umax_value.i83, align 8
  br label %sw.epilog

if.end144:                                        ; preds = %lor.lhs.false139
  %umin_value145 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i245 = load i64, i64* %umin_value145, align 8
  %mul = mul i64 %i245, %i208
  store i64 %mul, i64* %umin_value145, align 8
  %mul147 = mul i64 %i244, %i209
  store i64 %mul147, i64* %umax_value140, align 8
  %cmp149 = icmp slt i64 %mul147, 0
  br i1 %cmp149, label %if.then151, label %if.else154

if.then151:                                       ; preds = %if.end144
  store i64 -9223372036854775808, i64* %smin_value132, align 8
  %smax_value153 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value153, align 8
  br label %sw.epilog

if.else154:                                       ; preds = %if.end144
  store i64 %mul, i64* %smin_value132, align 8
  %smax_value158 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 %mul147, i64* %smax_value158, align 8
  br label %sw.epilog

sw.bb160:                                         ; preds = %NodeBlock16
  %i246 = select i1 %tobool.not.i, i1 %tobool.not.i25, i1 false
  %i247 = load i64, i64* %i213, align 8
  %i248 = load i64, i64* %i210, align 8
  br i1 %i246, label %if.then166, label %if.end171

if.then166:                                       ; preds = %sw.bb160
  %and170 = and i64 %i248, %i247
  store i64 %and170, i64* %i213, align 8
  store i64 0, i64* %i214, align 8
  %smin_value.i111 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 %and170, i64* %smin_value.i111, align 8
  %smax_value.i112 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 %and170, i64* %smax_value.i112, align 8
  %umin_value.i113 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 %and170, i64* %umin_value.i113, align 8
  %umax_value.i114 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 %and170, i64* %umax_value.i114, align 8
  br label %sw.epilog

if.end171:                                        ; preds = %sw.bb160
  %or.i115 = or i64 %i247, %i215
  %or3.i = or i64 %i248, %i212
  %and.i116 = and i64 %i248, %i247
  %and8.i117 = and i64 %or3.i, %or.i115
  %and9.i = xor i64 %and8.i117, %and.i116
  store i64 %and.i116, i64* %i213, align 8
  store i64 %and9.i, i64* %i214, align 8
  %umin_value179 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 %and.i116, i64* %umin_value179, align 8
  %umax_value180 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i251 = load i64, i64* %umax_value180, align 8
  %cmp182 = icmp ult i64 %i251, %i209
  %cond184 = select i1 %cmp182, i64 %i251, i64 %i209
  store i64 %cond184, i64* %umax_value180, align 8
  %smin_value186 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  %i252 = load i64, i64* %smin_value186, align 8
  %cmp187 = icmp slt i64 %i252, 0
  %cmp190 = icmp slt i64 %i206, 0
  %or.cond3 = select i1 %cmp187, i1 true, i1 %cmp190
  %. = select i1 %or.cond3, i64 -9223372036854775808, i64 %and.i116
  %.cond184 = select i1 %or.cond3, i64 9223372036854775807, i64 %cond184
  store i64 %., i64* %smin_value186, align 8
  %smax_value199 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 %.cond184, i64* %smax_value199, align 8
  %and.i126 = and i64 %and9.i, -9223372036854775808
  %or.i127 = or i64 %and.i126, %and.i116
  %cmp.i128 = icmp sgt i64 %., %or.i127
  %cond.i129 = select i1 %cmp.i128, i64 %., i64 %or.i127
  store i64 %cond.i129, i64* %smin_value186, align 8
  %and7.i132 = and i64 %and9.i, 9223372036854775807
  %or8.i133 = or i64 %and7.i132, %and.i116
  %cmp10.i134 = icmp slt i64 %.cond184, %or8.i133
  %cond14.i135 = select i1 %cmp10.i134, i64 %.cond184, i64 %or8.i133
  store i64 %cond14.i135, i64* %smax_value199, align 8
  store i64 %and.i116, i64* %umin_value179, align 8
  %cmp31.i143 = icmp ult i64 %cond184, %and8.i117
  %cond35.i144 = select i1 %cmp31.i143, i64 %cond184, i64 %and8.i117
  store i64 %cond35.i144, i64* %umax_value180, align 8
  br label %sw.epilog

sw.bb201:                                         ; preds = %NodeBlock12
  %i253 = select i1 %tobool.not.i, i1 %tobool.not.i25, i1 false
  %i254 = load i64, i64* %i213, align 8
  %i255 = load i64, i64* %i210, align 8
  %or = or i64 %i255, %i254
  br i1 %i253, label %if.then207, label %if.end212

if.then207:                                       ; preds = %sw.bb201
  store i64 %or, i64* %i213, align 8
  store i64 0, i64* %i214, align 8
  %smin_value.i149 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 %or, i64* %smin_value.i149, align 8
  %smax_value.i150 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 %or, i64* %smax_value.i150, align 8
  %umin_value.i151 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 %or, i64* %umin_value.i151, align 8
  %umax_value.i152 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 %or, i64* %umax_value.i152, align 8
  br label %sw.epilog

if.end212:                                        ; preds = %sw.bb201
  %or3.i154 = or i64 %i215, %i212
  %neg.i155 = xor i64 %or, -1
  %and.i156 = and i64 %or3.i154, %neg.i155
  store i64 %or, i64* %i213, align 8
  store i64 %and.i156, i64* %i214, align 8
  %umin_value218 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i258 = load i64, i64* %umin_value218, align 8
  %cmp220 = icmp ugt i64 %i258, %i208
  %cond225 = select i1 %cmp220, i64 %i258, i64 %i208
  store i64 %cond225, i64* %umin_value218, align 8
  %or230 = or i64 %or, %or3.i154
  %umax_value231 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 %or230, i64* %umax_value231, align 8
  %smin_value232 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  %i260 = load i64, i64* %smin_value232, align 8
  %cmp233 = icmp slt i64 %i260, 0
  %cmp236 = icmp slt i64 %i206, 0
  %or.cond4 = select i1 %cmp233, i1 true, i1 %cmp236
  %.cond225 = select i1 %or.cond4, i64 -9223372036854775808, i64 %cond225
  %.or230 = select i1 %or.cond4, i64 9223372036854775807, i64 %or230
  store i64 %.cond225, i64* %smin_value232, align 8
  %smax_value245 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 %.or230, i64* %smax_value245, align 8
  %and.i165 = and i64 %and.i156, -9223372036854775808
  %or.i166 = or i64 %and.i165, %or
  %cmp.i167 = icmp sgt i64 %.cond225, %or.i166
  %cond.i168 = select i1 %cmp.i167, i64 %.cond225, i64 %or.i166
  store i64 %cond.i168, i64* %smin_value232, align 8
  %and7.i171 = and i64 %and.i156, 9223372036854775807
  %or8.i172 = or i64 %and7.i171, %or
  %cmp10.i173 = icmp slt i64 %.or230, %or8.i172
  %cond14.i174 = select i1 %cmp10.i173, i64 %.or230, i64 %or8.i172
  store i64 %cond14.i174, i64* %smax_value245, align 8
  %cmp19.i177 = icmp ugt i64 %cond225, %or
  %cond23.i178 = select i1 %cmp19.i177, i64 %cond225, i64 %or
  store i64 %cond23.i178, i64* %umin_value218, align 8
  %or29.i181 = or i64 %or, %or3.i154
  %cmp31.i182 = icmp ult i64 %or230, %or29.i181
  %cond35.i183 = select i1 %cmp31.i182, i64 %or230, i64 %or29.i181
  store i64 %cond35.i183, i64* %umax_value231, align 8
  br label %sw.epilog

sw.bb247:                                         ; preds = %NodeBlock16
  %cmp248.not = icmp ult i64 %i209, %i205
  br i1 %cmp248.not, label %if.end251, label %if.then250

if.then250:                                       ; preds = %sw.bb247
  %type.i184 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type.i184, align 8
  %var_off.i185 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5
  %i.i186 = bitcast %struct.tnum* %var_off.i185 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #24
  %smin_value.i.i187 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value.i.i187, align 8
  %smax_value.i.i188 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value.i.i188, align 8
  %umin_value.i.i189 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 0, i64* %umin_value.i.i189, align 8
  %umax_value.i.i190 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value.i.i190, align 8
  br label %sw.epilog

if.end251:                                        ; preds = %sw.bb247
  %smin_value252 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value252, align 8
  %smax_value253 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value253, align 8
  %umax_value254 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i261 = load i64, i64* %umax_value254, align 8
  %shl = lshr i64 -9223372036854775808, %i209
  %cmp256 = icmp ugt i64 %i261, %shl
  %umin_value259 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  br i1 %cmp256, label %if.then258, label %if.else261

if.then258:                                       ; preds = %if.end251
  store i64 0, i64* %umin_value259, align 8
  br label %if.end266

if.else261:                                       ; preds = %if.end251
  %i262 = load i64, i64* %umin_value259, align 8
  %shl263 = shl i64 %i262, %i208
  store i64 %shl263, i64* %umin_value259, align 8
  %shl265 = shl i64 %i261, %i209
  br label %if.end266

if.end266:                                        ; preds = %if.else261, %if.then258
  %storemerge = phi i64 [ %shl265, %if.else261 ], [ -1, %if.then258 ]
  store i64 %storemerge, i64* %umax_value254, align 8
  %i263 = load i64, i64* %i213, align 8
  %sh_prom.i = and i64 %i208, 255
  %shl.i = shl i64 %i263, %sh_prom.i
  %shl5.i = shl i64 %i215, %sh_prom.i
  store i64 %shl.i, i64* %i213, align 8
  store i64 %shl5.i, i64* %i214, align 8
  %and.i199 = and i64 %shl5.i, -9223372036854775808
  %or.i200 = or i64 %shl.i, %and.i199
  store i64 %or.i200, i64* %smin_value252, align 8
  %and7.i205 = and i64 %shl5.i, 9223372036854775807
  %or8.i206 = or i64 %shl.i, %and7.i205
  store i64 %or8.i206, i64* %smax_value253, align 8
  %i26.i210 = load i64, i64* %umin_value259, align 8
  %cmp19.i211 = icmp ugt i64 %i26.i210, %shl.i
  %cond23.i212 = select i1 %cmp19.i211, i64 %i26.i210, i64 %shl.i
  store i64 %cond23.i212, i64* %umin_value259, align 8
  %or29.i215 = or i64 %shl.i, %shl5.i
  %cmp31.i216 = icmp ult i64 %storemerge, %or29.i215
  %cond35.i217 = select i1 %cmp31.i216, i64 %storemerge, i64 %or29.i215
  store i64 %cond35.i217, i64* %umax_value254, align 8
  br label %sw.epilog

sw.bb272:                                         ; preds = %LeafBlock18
  %cmp273.not = icmp ult i64 %i209, %i205
  br i1 %cmp273.not, label %if.end276, label %if.then275

if.then275:                                       ; preds = %sw.bb272
  %type.i218 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type.i218, align 8
  %var_off.i219 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5
  %i.i220 = bitcast %struct.tnum* %var_off.i219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #24
  %smin_value.i.i221 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value.i.i221, align 8
  %smax_value.i.i222 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value.i.i222, align 8
  %umin_value.i.i223 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 0, i64* %umin_value.i.i223, align 8
  %umax_value.i.i224 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value.i.i224, align 8
  br label %sw.epilog

if.end276:                                        ; preds = %sw.bb272
  %smin_value277 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value277, align 8
  %smax_value278 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value278, align 8
  %i266 = load i64, i64* %i213, align 8
  %sh_prom.i225 = and i64 %i208, 255
  %shr.i = lshr i64 %i266, %sh_prom.i225
  %shr5.i = lshr i64 %i215, %sh_prom.i225
  store i64 %shr.i, i64* %i213, align 8
  store i64 %shr5.i, i64* %i214, align 8
  %umin_value284 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i269 = load i64, i64* %umin_value284, align 8
  %shr = lshr i64 %i269, %i209
  store i64 %shr, i64* %umin_value284, align 8
  %umax_value285 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i270 = load i64, i64* %umax_value285, align 8
  %shr286 = lshr i64 %i270, %i208
  store i64 %shr286, i64* %umax_value285, align 8
  %and.i234 = and i64 %shr5.i, -9223372036854775808
  %or.i235 = or i64 %shr.i, %and.i234
  store i64 %or.i235, i64* %smin_value277, align 8
  %and7.i240 = and i64 %shr5.i, 9223372036854775807
  %or8.i241 = or i64 %shr.i, %and7.i240
  store i64 %or8.i241, i64* %smax_value278, align 8
  %cmp19.i246 = icmp ugt i64 %shr, %shr.i
  %cond23.i247 = select i1 %cmp19.i246, i64 %shr, i64 %shr.i
  store i64 %cond23.i247, i64* %umin_value284, align 8
  %or29.i250 = or i64 %shr.i, %shr5.i
  %cmp31.i251 = icmp ult i64 %shr286, %or29.i250
  %cond35.i252 = select i1 %cmp31.i251, i64 %shr286, i64 %or29.i250
  store i64 %cond35.i252, i64* %umax_value285, align 8
  br label %sw.epilog

sw.bb287:                                         ; preds = %LeafBlock20
  %cmp288.not = icmp ult i64 %i209, %i205
  br i1 %cmp288.not, label %if.end291, label %if.then290

if.then290:                                       ; preds = %sw.bb287
  %type.i253 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type.i253, align 8
  %var_off.i254 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5
  %i.i255 = bitcast %struct.tnum* %var_off.i254 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #24
  %smin_value.i.i256 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value.i.i256, align 8
  %smax_value.i.i257 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value.i.i257, align 8
  %umin_value.i.i258 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 0, i64* %umin_value.i.i258, align 8
  %umax_value.i.i259 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value.i.i259, align 8
  br label %sw.epilog

if.end291:                                        ; preds = %sw.bb287
  %smin_value292 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  %i271 = load i64, i64* %smin_value292, align 8
  %shr293 = ashr i64 %i271, %i208
  store i64 %shr293, i64* %smin_value292, align 8
  %smax_value294 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  %i272 = load i64, i64* %smax_value294, align 8
  %shr295 = ashr i64 %i272, %i208
  store i64 %shr295, i64* %smax_value294, align 8
  %i273 = load i64, i64* %i213, align 8
  %sh_prom.i260 = and i64 %i208, 255
  %shr.i261 = ashr i64 %i273, %sh_prom.i260
  %shr5.i262 = ashr i64 %i215, %sh_prom.i260
  store i64 %shr.i261, i64* %i213, align 8
  store i64 %shr5.i262, i64* %i214, align 8
  %umin_value301 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 0, i64* %umin_value301, align 8
  %umax_value302 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value302, align 8
  %and.i271 = and i64 %shr5.i262, -9223372036854775808
  %or.i272 = or i64 %shr.i261, %and.i271
  %cmp.i273 = icmp sgt i64 %shr293, %or.i272
  %cond.i274 = select i1 %cmp.i273, i64 %shr293, i64 %or.i272
  store i64 %cond.i274, i64* %smin_value292, align 8
  %and7.i277 = and i64 %shr5.i262, 9223372036854775807
  %or8.i278 = or i64 %shr.i261, %and7.i277
  %cmp10.i279 = icmp slt i64 %shr295, %or8.i278
  %cond14.i280 = select i1 %cmp10.i279, i64 %shr295, i64 %or8.i278
  store i64 %cond14.i280, i64* %smax_value294, align 8
  store i64 %shr.i261, i64* %umin_value301, align 8
  %or29.i287 = or i64 %shr.i261, %shr5.i262
  store i64 %or29.i287, i64* %umax_value302, align 8
  br label %sw.epilog

NewDefault7:                                      ; preds = %LeafBlock10, %LeafBlock18, %LeafBlock20
  br label %sw.default

sw.default:                                       ; preds = %NewDefault7
  %type.i290 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type.i290, align 8
  %var_off.i291 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5
  %i.i292 = bitcast %struct.tnum* %var_off.i291 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #24
  %smin_value.i.i293 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value.i.i293, align 8
  %smax_value.i.i294 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value.i.i294, align 8
  %umin_value.i.i295 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  store i64 0, i64* %umin_value.i.i295, align 8
  %umax_value.i.i296 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  store i64 -1, i64* %umax_value.i.i296, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end291, %if.then290, %if.end276, %if.then275, %if.end266, %if.then250, %if.end212, %if.then207, %if.end171, %if.then166, %if.else154, %if.then151, %if.then143, %if.then135, %if.end117, %if.end80
  %i276 = load i8, i8* %code, align 4
  %i277 = and i8 %i276, 7
  %cmp306.not = icmp eq i8 %i277, 7
  br i1 %cmp306.not, label %if.end309, label %if.then308

if.then308:                                       ; preds = %sw.epilog
  %i18.i298 = load i64, i64* %i213, align 8
  %i20.i300 = load i64, i64* %i214, align 8
  %and.i.i301 = and i64 %i18.i298, 4294967295
  %and6.i.i302 = and i64 %i20.i300, 4294967295
  store i64 %and.i.i301, i64* %i213, align 8
  store i64 %and6.i.i302, i64* %i214, align 8
  %umin_value.i305 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i23.i306 = load i64, i64* %umin_value.i305, align 8
  %umax_value.i307 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i24.i308 = load i64, i64* %umax_value.i307, align 8
  %i25.i309 = xor i64 %i24.i308, %i23.i306
  %cmp.i311 = icmp ult i64 %i25.i309, 4294967296
  br i1 %cmp.i311, label %if.then.i314, label %if.else.i315

if.then.i314:                                     ; preds = %if.then308
  %and6.i312 = and i64 %i23.i306, 4294967295
  store i64 %and6.i312, i64* %umin_value.i305, align 8
  %and8.i313 = and i64 %i24.i308, 4294967295
  br label %coerce_reg_to_size.exit320

if.else.i315:                                     ; preds = %if.then308
  store i64 0, i64* %umin_value.i305, align 8
  br label %coerce_reg_to_size.exit320

coerce_reg_to_size.exit320:                       ; preds = %if.else.i315, %if.then.i314
  %storemerge.i316 = phi i64 [ 4294967295, %if.else.i315 ], [ %and8.i313, %if.then.i314 ]
  store i64 %storemerge.i316, i64* %umax_value.i307, align 8
  %i27.i317 = load i64, i64* %umin_value.i305, align 8
  %smin_value.i318 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 %i27.i317, i64* %smin_value.i318, align 8
  %smax_value.i319 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 %storemerge.i316, i64* %smax_value.i319, align 8
  br label %if.end309

if.end309:                                        ; preds = %coerce_reg_to_size.exit320, %sw.epilog
  %smin_value.i321 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  %i.i322 = load i64, i64* %smin_value.i321, align 8
  %cmp.i323 = icmp sgt i64 %i.i322, -1
  br i1 %cmp.i323, label %if.then.i329, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %if.end309
  %smax_value.i324 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  %i33.i = load i64, i64* %smax_value.i324, align 8
  %cmp1.i325 = icmp slt i64 %i33.i, 0
  br i1 %cmp1.i325, label %if.then.i329, label %if.end.i

if.then.i329:                                     ; preds = %lor.lhs.false.i, %if.end309
  %umin_value.i326 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i34.i = load i64, i64* %umin_value.i326, align 8
  %cmp3.i = icmp ugt i64 %i.i322, %i34.i
  %cond.i327 = select i1 %cmp3.i, i64 %i.i322, i64 %i34.i
  store i64 %cond.i327, i64* %umin_value.i326, align 8
  store i64 %cond.i327, i64* %smin_value.i321, align 8
  %smax_value6.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  %i35.i = load i64, i64* %smax_value6.i, align 8
  %umax_value.i328 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i36.i = load i64, i64* %umax_value.i328, align 8
  %cmp8.i = icmp ult i64 %i35.i, %i36.i
  %cond12.i = select i1 %cmp8.i, i64 %i35.i, i64 %i36.i
  store i64 %cond12.i, i64* %umax_value.i328, align 8
  store i64 %cond12.i, i64* %smax_value6.i, align 8
  br label %__reg_deduce_bounds.exit

if.end.i:                                         ; preds = %lor.lhs.false.i
  %umax_value15.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i37.i = load i64, i64* %umax_value15.i, align 8
  %cmp16.i = icmp sgt i64 %i37.i, -1
  %umin_value18.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i38.i = load i64, i64* %umin_value18.i, align 8
  br i1 %cmp16.i, label %if.then17.i, label %if.else.i331

if.then17.i:                                      ; preds = %if.end.i
  store i64 %i38.i, i64* %smin_value.i321, align 8
  %cmp23.i = icmp ult i64 %i33.i, %i37.i
  %cond27.i = select i1 %cmp23.i, i64 %i33.i, i64 %i37.i
  store i64 %cond27.i, i64* %umax_value15.i, align 8
  store i64 %cond27.i, i64* %smax_value.i324, align 8
  br label %__reg_deduce_bounds.exit

if.else.i331:                                     ; preds = %if.end.i
  %cmp31.i330 = icmp slt i64 %i38.i, 0
  br i1 %cmp31.i330, label %if.then32.i, label %__reg_deduce_bounds.exit

if.then32.i:                                      ; preds = %if.else.i331
  %cmp36.i = icmp ugt i64 %i.i322, %i38.i
  %cond40.i = select i1 %cmp36.i, i64 %i.i322, i64 %i38.i
  store i64 %cond40.i, i64* %umin_value18.i, align 8
  store i64 %cond40.i, i64* %smin_value.i321, align 8
  store i64 %i37.i, i64* %smax_value.i324, align 8
  br label %__reg_deduce_bounds.exit

__reg_deduce_bounds.exit:                         ; preds = %if.then32.i, %if.else.i331, %if.then17.i, %if.then.i329
  %umin_value.i332 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i.i333 = load i64, i64* %umin_value.i332, align 8
  %umax_value.i334 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i5.i = load i64, i64* %umax_value.i334, align 8
  %xor.i.i = xor i64 %i5.i, %i.i333
  %cmp.i.i.i = icmp eq i64 %xor.i.i, 0
  br i1 %cmp.i.i.i, label %__reg_bound_offset.exit, label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %__reg_deduce_bounds.exit
  %tobool.not.i.i.i.i = icmp ult i64 %xor.i.i, 4294967296
  %shl.i.i.i.i = shl i64 %xor.i.i, 32
  %spec.select.i.i.i.i = select i1 %tobool.not.i.i.i.i, i64 %shl.i.i.i.i, i64 %xor.i.i
  %spec.select17.i.i.i.i = select i1 %tobool.not.i.i.i.i, i32 31, i32 63
  %tobool2.not.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i, 281474976710656
  %sub4.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i, -16
  %shl5.i.i.i.i = shl i64 %spec.select.i.i.i.i, 16
  %word.addr.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i64 %shl5.i.i.i.i, i64 %spec.select.i.i.i.i
  %num.1.i.i.i.i = select i1 %tobool2.not.i.i.i.i, i32 %sub4.i.i.i.i, i32 %spec.select17.i.i.i.i
  %tobool8.not.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i, 72057594037927936
  %sub10.i.i.i.i = add nsw i32 %num.1.i.i.i.i, -8
  %shl11.i.i.i.i = shl i64 %word.addr.1.i.i.i.i, 8
  %word.addr.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i64 %shl11.i.i.i.i, i64 %word.addr.1.i.i.i.i
  %num.2.i.i.i.i = select i1 %tobool8.not.i.i.i.i, i32 %sub10.i.i.i.i, i32 %num.1.i.i.i.i
  %tobool14.not.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i, 1152921504606846976
  %sub16.i.i.i.i = add nsw i32 %num.2.i.i.i.i, -4
  %shl17.i.i.i.i = shl i64 %word.addr.2.i.i.i.i, 4
  %word.addr.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i64 %shl17.i.i.i.i, i64 %word.addr.2.i.i.i.i
  %num.3.i.i.i.i = select i1 %tobool14.not.i.i.i.i, i32 %sub16.i.i.i.i, i32 %num.2.i.i.i.i
  %tobool20.not.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i, 4611686018427387904
  %sub22.i.i.i.i = add i32 %num.3.i.i.i.i, 254
  %shl23.i.i.i.i = shl i64 %word.addr.3.i.i.i.i, 2
  %word.addr.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i64 %shl23.i.i.i.i, i64 %word.addr.3.i.i.i.i
  %num.4.i.i.i.i = select i1 %tobool20.not.i.i.i.i, i32 %sub22.i.i.i.i, i32 %num.3.i.i.i.i
  %word.addr.4.lobit.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i, 63
  %i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.neg to i32
  %add.i.i.i335 = add i32 %num.4.i.i.i.i, %i.i.i.i.i.neg
  %phi.bo = and i32 %add.i.i.i335, 255
  br label %__reg_bound_offset.exit

__reg_bound_offset.exit:                          ; preds = %if.end.i.i.i, %__reg_deduce_bounds.exit
  %retval.0.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i ], [ 0, %__reg_deduce_bounds.exit ]
  %cmp.i.i = icmp ugt i32 %retval.0.i.i.i, 63
  %sh_prom.i.i = zext i32 %retval.0.i.i.i to i64
  %notmask.i.i = shl nsw i64 -1, %sh_prom.i.i
  %sub.i.i = xor i64 %notmask.i.i, -1
  %and.i.i336 = and i64 %notmask.i.i, %i.i333
  %retval.sroa.0.0.i.i = select i1 %cmp.i.i, i64 0, i64 %and.i.i336
  %retval.sroa.3.0.i.i = select i1 %cmp.i.i, i64 -1, i64 %sub.i.i
  %i9.i = load i64, i64* %i213, align 8
  %i11.i = load i64, i64* %i214, align 8
  %or.i.i = or i64 %retval.sroa.0.0.i.i, %i9.i
  %and.i1.i = and i64 %retval.sroa.3.0.i.i, %i11.i
  %neg.i.i = xor i64 %and.i1.i, -1
  %and4.i.i = and i64 %or.i.i, %neg.i.i
  store i64 %and4.i.i, i64* %i213, align 8
  store i64 %and.i1.i, i64* %i214, align 8
  br label %return

return:                                           ; preds = %__reg_bound_offset.exit, %if.then41, %if.then26
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.0.8.val) unnamed_addr #7 {
entry:
  %call = call fastcc %struct.bpf_func_state* @cur_func(%struct.bpf_verifier_state* %env.0.8.val) #22
  %arraydecay = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %call, i64 0, i32 0, i64 0
  ret %struct.bpf_reg_state* %arraydecay
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* nocapture noundef %reg, i32 noundef %size) unnamed_addr #10 {
entry:
  %i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i18 = load i64, i64* %i, align 8
  %i19 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i20 = load i64, i64* %i19, align 8
  %i1 = shl i32 %size, 3
  %i2 = and i32 %i1, 2040
  %mul.i = zext i32 %i2 to i64
  %notmask.i = shl nsw i64 -1, %mul.i
  %sub.i = xor i64 %notmask.i, -1
  %and.i = and i64 %i18, %sub.i
  %and6.i = and i64 %i20, %sub.i
  store i64 %and.i, i64* %i, align 8
  store i64 %and6.i, i64* %i19, align 8
  %sh_prom = zext i32 %i1 to i64
  %notmask = shl nsw i64 -1, %sh_prom
  %sub = xor i64 %notmask, -1
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 8
  %i23 = load i64, i64* %umin_value, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 9
  %i24 = load i64, i64* %umax_value, align 8
  %i25 = xor i64 %i24, %i23
  %i26 = and i64 %i25, %notmask
  %cmp = icmp eq i64 %i26, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %and6 = and i64 %i23, %sub
  store i64 %and6, i64* %umin_value, align 8
  %and8 = and i64 %i24, %sub
  br label %if.end

if.else:                                          ; preds = %entry
  store i64 0, i64* %umin_value, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %storemerge = phi i64 [ %sub, %if.else ], [ %and8, %if.then ]
  store i64 %storemerge, i64* %umax_value, align 8
  %i27 = load i64, i64* %umin_value, align 8
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 6
  store i64 %i27, i64* %smin_value, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 7
  store i64 %storemerge, i64* %smax_value, align 8
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @tnum_is_const(i64 %a.coerce1) unnamed_addr #2 {
entry:
  %tobool.not = icmp eq i64 %a.coerce1, 0
  ret i1 %tobool.not
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* nocapture noundef writeonly %reg) unnamed_addr #12 {
entry:
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %var_off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5
  %i = bitcast %struct.tnum* %var_off to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
  %frameno = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 11
  store i32 0, i32* %frameno, align 8
  %smin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 6
  store i64 -9223372036854775808, i64* %smin_value.i, align 8
  %smax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 7
  store i64 9223372036854775807, i64* %smax_value.i, align 8
  %umin_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 8
  store i64 0, i64* %umin_value.i, align 8
  %umax_value.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 9
  store i64 -1, i64* %umax_value.i, align 8
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal void @verbose(i8* noundef %private_data, i8* noundef %fmt, ...) #6 {
entry:
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %log = getelementptr inbounds i8, i8* %private_data, i64 608
  %i = bitcast i8* %log to %struct.bpf_verifier_log*
  %call = call fastcc zeroext i1 @bpf_verifier_log_needed(%struct.bpf_verifier_log* noundef %i) #22
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %args to i8*
  call void @llvm.va_start(i8* nonnull %arraydecay1)
  call void @bpf_verifier_vlog(%struct.bpf_verifier_log* noundef %i, i8* noundef %fmt, %struct.__va_list_tag* noundef %arraydecay) #22
  call void @llvm.va_end(i8* %arraydecay1)
  br label %return

return:                                           ; preds = %if.end, %entry
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @signed_add_overflows(i64 noundef %a, i64 noundef %b) unnamed_addr #2 {
entry:
  %add = add i64 %b, %a
  %cmp = icmp slt i64 %b, 0
  %cmp1 = icmp sgt i64 %add, %a
  %cmp2 = icmp slt i64 %add, %a
  %retval.0 = select i1 %cmp, i1 %cmp1, i1 %cmp2
  ret i1 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @signed_sub_overflows(i64 noundef %a, i64 noundef %b) unnamed_addr #2 {
entry:
  %sub = sub i64 %a, %b
  %cmp = icmp slt i64 %b, 0
  %cmp1 = icmp slt i64 %sub, %a
  %cmp2 = icmp sgt i64 %sub, %a
  %retval.0 = select i1 %cmp, i1 %cmp1, i1 %cmp2
  ret i1 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @__update_reg_bounds(%struct.bpf_reg_state* nocapture noundef %reg) unnamed_addr #10 {
entry:
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 6
  %i = load i64, i64* %smin_value, align 8
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i23 = load i64, i64* %value, align 8
  %mask = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i24 = load i64, i64* %mask, align 8
  %and = and i64 %i24, -9223372036854775808
  %or = or i64 %and, %i23
  %cmp = icmp sgt i64 %i, %or
  %cond = select i1 %cmp, i64 %i, i64 %or
  store i64 %cond, i64* %smin_value, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 7
  %i25 = load i64, i64* %smax_value, align 8
  %and7 = and i64 %i24, 9223372036854775807
  %or8 = or i64 %and7, %i23
  %cmp10 = icmp slt i64 %i25, %or8
  %cond14 = select i1 %cmp10, i64 %i25, i64 %or8
  store i64 %cond14, i64* %smax_value, align 8
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 8
  %i26 = load i64, i64* %umin_value, align 8
  %cmp19 = icmp ugt i64 %i26, %i23
  %cond23 = select i1 %cmp19, i64 %i26, i64 %i23
  store i64 %cond23, i64* %umin_value, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 9
  %i27 = load i64, i64* %umax_value, align 8
  %or29 = or i64 %i24, %i23
  %cmp31 = icmp ult i64 %i27, %or29
  %cond35 = select i1 %cmp31, i64 %i27, i64 %or29
  store i64 %cond35, i64* %umax_value, align 8
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn writeonly
define internal fastcc void @__mark_reg_known(%struct.bpf_reg_state* nocapture noundef writeonly %reg, i64 noundef %imm) unnamed_addr #13 {
entry:
  %tmp.sroa.0.0..sroa_idx = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  store i64 %imm, i64* %tmp.sroa.0.0..sroa_idx, align 8
  %tmp.sroa.2.0..sroa_idx1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  store i64 0, i64* %tmp.sroa.2.0..sroa_idx1, align 8
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 6
  store i64 %imm, i64* %smin_value, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 7
  store i64 %imm, i64* %smax_value, align 8
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 8
  store i64 %imm, i64* %umin_value, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 9
  store i64 %imm, i64* %umax_value, align 8
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc %struct.bpf_insn_aux_data* @cur_aux(i32 %env.0.0.val, %struct.bpf_insn_aux_data* %env.0.16.val) unnamed_addr #7 {
entry:
  %idxprom = zext i32 %env.0.0.val to i64
  %arrayidx = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %env.0.16.val, i64 %idxprom
  ret %struct.bpf_insn_aux_data* %arrayidx
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc %struct.bpf_func_state* @cur_func(%struct.bpf_verifier_state* %env.0.8.val) unnamed_addr #7 {
entry:
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %env.0.8.val, i64 0, i32 4
  %i2 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i2 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %env.0.8.val, i64 0, i32 0, i64 %idxprom
  %i3 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  ret %struct.bpf_func_state* %i3
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_SUB(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8479, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_OR(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8527, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_AND(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8543, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_LSH(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8559, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_RSH(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8575, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_XOR(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8623, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_ARSH(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8655, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_ADD_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8460, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_SUB_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8476, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_OR_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8524, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_AND_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8540, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_LSH_32(%struct.bpf_reg_state* nocapture noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #10 {
entry:
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i18.i.i = load i64, i64* %i.i.i, align 8
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i20.i.i = load i64, i64* %i19.i.i, align 8
  %and.i.i.i = and i64 %i18.i.i, 4294967295
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
  store i64 %and.i.i.i, i64* %i.i.i, align 8
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %entry
  %and6.i.i = and i64 %i23.i.i, 4294967295
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
  %and8.i.i = and i64 %i24.i.i, 4294967295
  br label %coerce_reg_to_size.exit.i

if.else.i.i:                                      ; preds = %entry
  store i64 0, i64* %umin_value.i.i, align 8
  br label %coerce_reg_to_size.exit.i

coerce_reg_to_size.exit.i:                        ; preds = %if.else.i.i, %if.then.i.i
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i

land.lhs.true.i:                                  ; preds = %coerce_reg_to_size.exit.i
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i

lor.lhs.false20.i:                                ; preds = %coerce_reg_to_size.exit.i
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end27.i

if.then26.i:                                      ; preds = %lor.lhs.false20.i, %land.lhs.true.i
  store i32 1, i32* %type, align 8
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  store i64 0, i64* %var_off.i.i.repack, align 8
  %var_off.i.i.repack3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  store i64 -1, i64* %var_off.i.i.repack3, align 8
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
  store i32 0, i32* %frameno.i.i, align 8
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
  store i64 0, i64* %umin_value.i.i, align 8
  store i64 -1, i64* %umax_value.i.i, align 8
  br label %adjust_scalar_min_max_vals.exit

if.end27.i:                                       ; preds = %lor.lhs.false20.i, %land.lhs.true.i
  br i1 %tobool.not.i.i, label %sw.bb247.i, label %if.then41.i

if.then41.i:                                      ; preds = %if.end27.i
  store i32 1, i32* %type, align 8
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  store i64 0, i64* %var_off.i28.i.repack, align 8
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
  store i32 0, i32* %frameno.i30.i, align 8
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
  store i64 0, i64* %umin_value.i.i, align 8
  store i64 -1, i64* %umax_value.i.i, align 8
  br label %adjust_scalar_min_max_vals.exit

sw.bb247.i:                                       ; preds = %if.end27.i
  %cmp248.not.i = icmp ult i64 %storemerge.i20.i, 32
  br i1 %cmp248.not.i, label %if.end251.i, label %if.then250.i

if.then250.i:                                     ; preds = %sw.bb247.i
  store i32 1, i32* %type, align 8
  %var_off.i185.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  store i64 0, i64* %var_off.i185.i.repack, align 8
  %var_off.i185.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  store i64 -1, i64* %var_off.i185.i.repack2, align 8
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
  store i64 0, i64* %umin_value.i.i, align 8
  br label %if.then308.i

if.end251.i:                                      ; preds = %sw.bb247.i
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
  %shl.i = lshr i64 -9223372036854775808, %storemerge.i20.i
  %cmp256.i = icmp ugt i64 %storemerge.i.i, %shl.i
  br i1 %cmp256.i, label %if.then258.i, label %if.else261.i

if.then258.i:                                     ; preds = %if.end251.i
  store i64 0, i64* %umin_value.i.i, align 8
  br label %if.end266.i

if.else261.i:                                     ; preds = %if.end251.i
  %shl263.i = shl i64 %i27.i.i, %src_reg1.sroa.17.0
  store i64 %shl263.i, i64* %umin_value.i.i, align 8
  %shl265.i = shl i64 %storemerge.i.i, %storemerge.i20.i
  br label %if.end266.i

if.end266.i:                                      ; preds = %if.else261.i, %if.then258.i
  %storemerge.i = phi i64 [ %shl265.i, %if.else261.i ], [ -1, %if.then258.i ]
  store i64 %storemerge.i, i64* %umax_value.i.i, align 8
  %sh_prom.i.i = and i64 %src_reg1.sroa.17.0, 255
  %shl.i.i = shl i64 %and.i.i.i, %sh_prom.i.i
  %shl5.i.i = shl i64 %and6.i.i.i, %sh_prom.i.i
  store i64 %shl.i.i, i64* %i.i.i, align 8
  store i64 %shl5.i.i, i64* %i19.i.i, align 8
  %and.i199.i = and i64 %shl5.i.i, -9223372036854775808
  %or.i200.i = or i64 %and.i199.i, %shl.i.i
  store i64 %or.i200.i, i64* %smin_value.i.i, align 8
  %and7.i205.i = and i64 %shl5.i.i, 9223372036854775807
  %or8.i206.i = or i64 %and7.i205.i, %shl.i.i
  store i64 %or8.i206.i, i64* %smax_value.i.i, align 8
  %i26.i210.i = load i64, i64* %umin_value.i.i, align 8
  %cmp19.i211.i = icmp ugt i64 %i26.i210.i, %shl.i.i
  %cond23.i212.i = select i1 %cmp19.i211.i, i64 %i26.i210.i, i64 %shl.i.i
  store i64 %cond23.i212.i, i64* %umin_value.i.i, align 8
  %or29.i215.i = or i64 %shl5.i.i, %shl.i.i
  %cmp31.i216.i = icmp ult i64 %storemerge.i, %or29.i215.i
  %cond35.i217.i = select i1 %cmp31.i216.i, i64 %storemerge.i, i64 %or29.i215.i
  br label %if.then308.i

if.then308.i:                                     ; preds = %if.end266.i, %if.then250.i
  %storemerge = phi i64 [ -1, %if.then250.i ], [ %cond35.i217.i, %if.end266.i ]
  store i64 %storemerge, i64* %umax_value.i.i, align 8
  %i18.i298.i = load i64, i64* %i.i.i, align 8
  %i20.i300.i = load i64, i64* %i19.i.i, align 8
  %and.i.i301.i = and i64 %i18.i298.i, 4294967295
  %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
  %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
  %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
  %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
  %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
  br i1 %cmp.i311.i, label %if.then.i314.i, label %if.else.i315.i

if.then.i314.i:                                   ; preds = %if.then308.i
  %and6.i312.i = and i64 %i23.i306.i, 4294967295
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
  %and8.i313.i = and i64 %i24.i308.i, 4294967295
  br label %coerce_reg_to_size.exit320.i

if.else.i315.i:                                   ; preds = %if.then308.i
  store i64 0, i64* %umin_value.i.i, align 8
  br label %coerce_reg_to_size.exit320.i

coerce_reg_to_size.exit320.i:                     ; preds = %if.else.i315.i, %if.then.i314.i
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
  %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
  %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i

if.end.i.i.i.i:                                   ; preds = %coerce_reg_to_size.exit320.i
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
  %phi.bo = and i32 %add.i.i.i335.i, 255
  br label %__reg_bound_offset.exit.i

__reg_bound_offset.exit.i:                        ; preds = %if.end.i.i.i.i, %coerce_reg_to_size.exit320.i
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
  %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
  br label %adjust_scalar_min_max_vals.exit

adjust_scalar_min_max_vals.exit:                  ; preds = %__reg_bound_offset.exit.i, %if.then41.i, %if.then26.i
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_RSH_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8572, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_XOR_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8620, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define dso_local void @adjust_scalar_min_max_vals_wrapper_BPF_ARSH_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg) local_unnamed_addr #11 {
entry:
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  store i64 8652, i64* %insn, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type1, align 8
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #22
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JEQ(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 16, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext 16, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.then103

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext 16, i1 noundef zeroext false) #22
  br label %if.end117

if.then103:                                       ; preds = %if.else70
  call fastcc void @reg_combine_min_max(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %src_reg, %struct.bpf_reg_state* noundef %dst_reg, i8 noundef zeroext 16) #22
  br label %if.end117

if.end117:                                        ; preds = %if.then103, %cond.end90, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @push_stack___(%struct.bpf_reg_state* nocapture noundef writeonly %to, %struct.bpf_reg_state* nocapture noundef readonly %from) unnamed_addr #10 {
entry:
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %from, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %to, i64 0, i32 0
  store i32 %i, i32* %type1, align 8
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %from, i64 0, i32 5, i32 0
  %i13 = load i64, i64* %value, align 8
  %value3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %to, i64 0, i32 5, i32 0
  store i64 %i13, i64* %value3, align 8
  %mask = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %from, i64 0, i32 5, i32 1
  %i14 = load i64, i64* %mask, align 8
  %mask6 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %to, i64 0, i32 5, i32 1
  store i64 %i14, i64* %mask6, align 8
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %from, i64 0, i32 6
  %i15 = load i64, i64* %smin_value, align 8
  %smin_value7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %to, i64 0, i32 6
  store i64 %i15, i64* %smin_value7, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %from, i64 0, i32 7
  %i16 = load i64, i64* %smax_value, align 8
  %smax_value8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %to, i64 0, i32 7
  store i64 %i16, i64* %smax_value8, align 8
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %from, i64 0, i32 8
  %i17 = load i64, i64* %umin_value, align 8
  %umin_value9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %to, i64 0, i32 8
  store i64 %i17, i64* %umin_value9, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %from, i64 0, i32 9
  %i18 = load i64, i64* %umax_value, align 8
  %umax_value10 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %to, i64 0, i32 9
  store i64 %i18, i64* %umax_value10, align 8
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef readonly %reg, i64 noundef %val, i8 noundef zeroext %opcode, i1 noundef zeroext %is_jmp32) unnamed_addr #12 {
entry:
  %reg_lo = alloca %struct.bpf_reg_state, align 8
  br i1 %is_jmp32, label %if.then1, label %if.end16

if.then1:                                         ; preds = %entry
  %i = bitcast %struct.bpf_reg_state* %reg_lo to i8*
  %i58 = bitcast %struct.bpf_reg_state* %reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i, i8* noundef align 8 dereferenceable(104) %i58, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %reg_lo, i32 noundef 4) #22
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg_lo, i64 0, i32 9
  %i59 = load i64, i64* %umax_value, align 8
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg_lo, i64 0, i32 8
  %i60 = load i64, i64* %umin_value, align 8
  %xor = xor i64 %i60, %i59
  %and = and i64 %xor, 2147483648
  %tobool2.not = icmp eq i64 %and, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.then1
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg_lo, i64 0, i32 6
  store i64 -2147483648, i64* %smin_value, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg_lo, i64 0, i32 7
  store i64 2147483647, i64* %smax_value, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.then1
  %smin_value5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg_lo, i64 0, i32 6
  %i61 = load i64, i64* %smin_value5, align 8
  %sext = shl i64 %i61, 32
  %conv6 = ashr exact i64 %sext, 32
  store i64 %conv6, i64* %smin_value5, align 8
  %smax_value8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg_lo, i64 0, i32 7
  %i62 = load i64, i64* %smax_value8, align 8
  %sext56 = shl i64 %i62, 32
  %conv10 = ashr exact i64 %sext56, 32
  store i64 %conv10, i64* %smax_value8, align 8
  %conv13 = and i64 %val, 4294967295
  %sext57 = shl i64 %val, 32
  %conv15 = ashr exact i64 %sext57, 32
  br label %if.end16

if.end16:                                         ; preds = %if.end4, %entry
  %val.addr.0 = phi i64 [ %conv13, %if.end4 ], [ %val, %entry ]
  %reg.addr.0 = phi %struct.bpf_reg_state* [ %reg_lo, %if.end4 ], [ %reg, %entry ]
  %sval.0 = phi i64 [ %conv15, %if.end4 ], [ %val, %entry ]
  %conv17 = zext i8 %opcode to i32
  %i63 = add nsw i32 %conv17, -16
  %i64 = call i32 @spirv.llvm_fshl_i32(i32 %i63, i32 %i63, i32 28)
  br label %NodeBlock21

NodeBlock21:                                      ; preds = %if.end16
  %Pivot22 = icmp slt i32 %i64, 5
  br i1 %Pivot22, label %NodeBlock5, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %i64, 10
  br i1 %Pivot20, label %NodeBlock11, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp eq i32 %i63, 160
  br i1 %Pivot18, label %sw.bb120, label %NodeBlock15

NodeBlock15:                                      ; preds = %NodeBlock17
  %Pivot16 = icmp slt i32 %i64, 12
  br i1 %Pivot16, label %sw.bb84, label %LeafBlock13

LeafBlock13:                                      ; preds = %NodeBlock15
  %SwitchLeaf14 = icmp eq i32 %i63, 192
  br i1 %SwitchLeaf14, label %sw.bb132, label %NewDefault

NodeBlock11:                                      ; preds = %NodeBlock19
  %Pivot12 = icmp slt i32 %i64, 6
  br i1 %Pivot12, label %sw.bb60, label %NodeBlock9

NodeBlock9:                                       ; preds = %NodeBlock11
  %Pivot10 = icmp slt i32 %i64, 9
  br i1 %Pivot10, label %LeafBlock7, label %sw.bb72

LeafBlock7:                                       ; preds = %NodeBlock9
  %SwitchLeaf8 = icmp eq i32 %i63, 96
  br i1 %SwitchLeaf8, label %sw.bb108, label %NewDefault

NodeBlock5:                                       ; preds = %NodeBlock21
  %Pivot6 = icmp slt i32 %i64, 2
  br i1 %Pivot6, label %NodeBlock, label %NodeBlock3

NodeBlock3:                                       ; preds = %NodeBlock5
  %Pivot4 = icmp eq i32 %i63, 32
  br i1 %Pivot4, label %sw.bb96, label %NodeBlock1

NodeBlock1:                                       ; preds = %NodeBlock3
  %Pivot2 = icmp slt i32 %i64, 4
  br i1 %Pivot2, label %sw.bb33, label %sw.bb24

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot.not = icmp eq i32 %i63, 16
  br i1 %Pivot.not, label %sw.bb49, label %LeafBlock

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i63, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call18 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call18, label %if.then19, label %sw.epilog

if.then19:                                        ; preds = %sw.bb
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 5, i32 0
  %i68 = load i64, i64* %i67, align 8
  %call21 = call fastcc zeroext i1 @tnum_equals_const(i64 %i68, i64 %i66, i64 noundef %val.addr.0) #22
  %lnot.ext = zext i1 %call21 to i32
  br label %return

sw.bb24:                                          ; preds = %NodeBlock1
  %i69 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 5, i32 1
  %i70 = load i64, i64* %i69, align 8
  %call26 = call fastcc zeroext i1 @tnum_is_const(i64 %i70) #22
  br i1 %call26, label %if.then27, label %sw.epilog

if.then27:                                        ; preds = %sw.bb24
  %i71 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 5, i32 0
  %i72 = load i64, i64* %i71, align 8
  %call29 = call fastcc zeroext i1 @tnum_equals_const(i64 %i72, i64 %i70, i64 noundef %val.addr.0) #22
  %lnot30 = xor i1 %call29, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  br label %return

sw.bb33:                                          ; preds = %NodeBlock1
  %mask = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %mask, align 8
  %neg = xor i64 %i73, -1
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value, align 8
  %and36 = and i64 %val.addr.0, %neg
  %and37 = and i64 %and36, %i74
  %tobool38.not = icmp eq i64 %and37, 0
  br i1 %tobool38.not, label %if.end40, label %return

if.end40:                                         ; preds = %sw.bb33
  %or = or i64 %i74, %i73
  %and45 = and i64 %or, %val.addr.0
  %tobool46.not = icmp eq i64 %and45, 0
  br i1 %tobool46.not, label %return, label %sw.epilog

sw.bb49:                                          ; preds = %NodeBlock
  %umin_value50 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 8
  %i75 = load i64, i64* %umin_value50, align 8
  %cmp = icmp ugt i64 %i75, %val.addr.0
  br i1 %cmp, label %return, label %if.else53

if.else53:                                        ; preds = %sw.bb49
  %umax_value54 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 9
  %i76 = load i64, i64* %umax_value54, align 8
  %cmp55.not = icmp ugt i64 %i76, %val.addr.0
  br i1 %cmp55.not, label %sw.epilog, label %return

sw.bb60:                                          ; preds = %NodeBlock11
  %smin_value61 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 6
  %i77 = load i64, i64* %smin_value61, align 8
  %cmp62 = icmp sgt i64 %i77, %sval.0
  br i1 %cmp62, label %return, label %if.else65

if.else65:                                        ; preds = %sw.bb60
  %smax_value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 7
  %i78 = load i64, i64* %smax_value66, align 8
  %cmp67 = icmp slt i64 %i78, %sval.0
  br i1 %cmp67, label %return, label %sw.epilog

sw.bb72:                                          ; preds = %NodeBlock9
  %umax_value73 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 9
  %i79 = load i64, i64* %umax_value73, align 8
  %cmp74 = icmp ult i64 %i79, %val.addr.0
  br i1 %cmp74, label %return, label %if.else77

if.else77:                                        ; preds = %sw.bb72
  %umin_value78 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 8
  %i80 = load i64, i64* %umin_value78, align 8
  %cmp79.not = icmp ult i64 %i80, %val.addr.0
  br i1 %cmp79.not, label %sw.epilog, label %return

sw.bb84:                                          ; preds = %NodeBlock15
  %smax_value85 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 7
  %i81 = load i64, i64* %smax_value85, align 8
  %cmp86 = icmp slt i64 %i81, %sval.0
  br i1 %cmp86, label %return, label %if.else89

if.else89:                                        ; preds = %sw.bb84
  %smin_value90 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 6
  %i82 = load i64, i64* %smin_value90, align 8
  %cmp91.not = icmp slt i64 %i82, %sval.0
  br i1 %cmp91.not, label %sw.epilog, label %return

sw.bb96:                                          ; preds = %NodeBlock3
  %umin_value97 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 8
  %i83 = load i64, i64* %umin_value97, align 8
  %cmp98.not = icmp ult i64 %i83, %val.addr.0
  br i1 %cmp98.not, label %if.else101, label %return

if.else101:                                       ; preds = %sw.bb96
  %umax_value102 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 9
  %i84 = load i64, i64* %umax_value102, align 8
  %cmp103 = icmp ult i64 %i84, %val.addr.0
  br i1 %cmp103, label %return, label %sw.epilog

sw.bb108:                                         ; preds = %LeafBlock7
  %smin_value109 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 6
  %i85 = load i64, i64* %smin_value109, align 8
  %cmp110.not = icmp slt i64 %i85, %sval.0
  br i1 %cmp110.not, label %if.else113, label %return

if.else113:                                       ; preds = %sw.bb108
  %smax_value114 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 7
  %i86 = load i64, i64* %smax_value114, align 8
  %cmp115 = icmp slt i64 %i86, %sval.0
  br i1 %cmp115, label %return, label %sw.epilog

sw.bb120:                                         ; preds = %NodeBlock17
  %umax_value121 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 9
  %i87 = load i64, i64* %umax_value121, align 8
  %cmp122.not = icmp ugt i64 %i87, %val.addr.0
  br i1 %cmp122.not, label %if.else125, label %return

if.else125:                                       ; preds = %sw.bb120
  %umin_value126 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 8
  %i88 = load i64, i64* %umin_value126, align 8
  %cmp127 = icmp ugt i64 %i88, %val.addr.0
  br i1 %cmp127, label %return, label %sw.epilog

sw.bb132:                                         ; preds = %LeafBlock13
  %smax_value133 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 7
  %i89 = load i64, i64* %smax_value133, align 8
  %cmp134.not = icmp sgt i64 %i89, %sval.0
  br i1 %cmp134.not, label %if.else137, label %return

if.else137:                                       ; preds = %sw.bb132
  %smin_value138 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.addr.0, i64 0, i32 6
  %i90 = load i64, i64* %smin_value138, align 8
  %cmp139 = icmp sgt i64 %i90, %sval.0
  br i1 %cmp139, label %return, label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock7, %LeafBlock13
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %if.else137, %if.else125, %if.else113, %if.else101, %if.else89, %if.else77, %if.else65, %if.else53, %if.end40, %sw.bb24, %sw.bb
  br label %return

return:                                           ; preds = %sw.epilog, %if.else137, %sw.bb132, %if.else125, %sw.bb120, %if.else113, %sw.bb108, %if.else101, %sw.bb96, %if.else89, %sw.bb84, %if.else77, %sw.bb72, %if.else65, %sw.bb60, %if.else53, %sw.bb49, %if.end40, %sw.bb33, %if.then27, %if.then19
  %retval.0 = phi i32 [ -1, %sw.epilog ], [ %lnot.ext31, %if.then27 ], [ %lnot.ext, %if.then19 ], [ 1, %sw.bb33 ], [ 0, %if.end40 ], [ 1, %sw.bb49 ], [ 0, %if.else53 ], [ 1, %sw.bb60 ], [ 0, %if.else65 ], [ 1, %sw.bb72 ], [ 0, %if.else77 ], [ 1, %sw.bb84 ], [ 0, %if.else89 ], [ 1, %sw.bb96 ], [ 0, %if.else101 ], [ 1, %sw.bb108 ], [ 0, %if.else113 ], [ 1, %sw.bb120 ], [ 0, %if.else125 ], [ 1, %sw.bb132 ], [ 0, %if.else137 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @reg_set_min_max(%struct.bpf_reg_state* nocapture noundef %true_reg, %struct.bpf_reg_state* nocapture noundef %false_reg, i64 noundef %val, i8 noundef zeroext %opcode, i1 noundef zeroext %is_jmp32) unnamed_addr #12 {
entry:
  %conv1 = and i64 %val, 4294967295
  %cond = select i1 %is_jmp32, i64 %conv1, i64 %val
  %sext = shl i64 %cond, 32
  %conv6 = ashr exact i64 %sext, 32
  %cond9 = select i1 %is_jmp32, i64 %conv6, i64 %val
  %conv10 = zext i8 %opcode to i32
  %i = add nsw i32 %conv10, -16
  %i100 = call i32 @spirv.llvm_fshl_i32(i32 %i, i32 %i, i32 28)
  br label %NodeBlock13

NodeBlock13:                                      ; preds = %entry
  %Pivot14 = icmp slt i32 %i100, 4
  br i1 %Pivot14, label %NodeBlock1, label %NodeBlock11

NodeBlock11:                                      ; preds = %NodeBlock13
  %Pivot12 = icmp slt i32 %i100, 9
  br i1 %Pivot12, label %NodeBlock5, label %NodeBlock9

NodeBlock9:                                       ; preds = %NodeBlock11
  %Pivot10 = icmp slt i32 %i100, 11
  br i1 %Pivot10, label %sw.bb116, label %LeafBlock7

LeafBlock7:                                       ; preds = %NodeBlock9
  %SwitchLeaf8 = icmp slt i32 %i100, 13
  br i1 %SwitchLeaf8, label %sw.bb160, label %NewDefault

NodeBlock5:                                       ; preds = %NodeBlock11
  %Pivot6 = icmp slt i32 %i100, 5
  br i1 %Pivot6, label %sw.bb, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp slt i32 %i100, 7
  br i1 %SwitchLeaf4, label %sw.bb78, label %NewDefault

NodeBlock1:                                       ; preds = %NodeBlock13
  %Pivot2 = icmp slt i32 %i100, 1
  br i1 %Pivot2, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock1
  %Pivot = icmp slt i32 %i100, 3
  br i1 %Pivot, label %sw.bb38, label %sw.bb24

LeafBlock:                                        ; preds = %NodeBlock1
  %SwitchLeaf = icmp eq i32 %i, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock, %NodeBlock5
  %cmp = icmp eq i8 %opcode, 16
  %cond16 = select i1 %cmp, %struct.bpf_reg_state* %true_reg, %struct.bpf_reg_state* %false_reg
  br i1 %is_jmp32, label %if.then18, label %if.else

if.then18:                                        ; preds = %sw.bb
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %cond16, i64 0, i32 5, i32 0
  %i101 = load i64, i64* %value, align 8
  %and = and i64 %i101, -4294967296
  %or = or i64 %and, %cond
  store i64 %or, i64* %value, align 8
  %mask = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %cond16, i64 0, i32 5, i32 1
  %i102 = load i64, i64* %mask, align 8
  %and22 = and i64 %i102, -4294967296
  store i64 %and22, i64* %mask, align 8
  br label %sw.epilog

if.else:                                          ; preds = %sw.bb
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %cond16, i64 noundef %cond) #22
  br label %sw.epilog

sw.bb24:                                          ; preds = %NodeBlock
  %neg = xor i64 %cond, -1
  %call27 = call { i64, i64 } @tnum_const(i64 noundef %neg) #22
  %i103 = extractvalue { i64, i64 } %call27, 0
  %i104 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 0
  %i105 = load i64, i64* %i104, align 8
  %i106 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 1
  %i107 = load i64, i64* %i106, align 8
  %call28 = call { i64, i64 } @tnum_and(i64 %i105, i64 %i107, i64 %i103, i64 0) #22
  %i108 = extractvalue { i64, i64 } %call28, 0
  %i109 = extractvalue { i64, i64 } %call28, 1
  store i64 %i108, i64* %i104, align 8
  store i64 %i109, i64* %i106, align 8
  %call29 = call fastcc zeroext i1 @is_power_of_2(i64 noundef %cond) #25
  br i1 %call29, label %if.then30, label %sw.epilog

if.then30:                                        ; preds = %sw.bb24
  %call35 = call { i64, i64 } @tnum_const(i64 noundef %cond) #22
  %i110 = extractvalue { i64, i64 } %call35, 0
  %i111 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 0
  %i112 = load i64, i64* %i111, align 8
  %i113 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 1
  %i114 = load i64, i64* %i113, align 8
  %call36 = call { i64, i64 } @tnum_or(i64 %i112, i64 %i114, i64 %i110, i64 0) #22
  %i115 = extractvalue { i64, i64 } %call36, 0
  %i116 = extractvalue { i64, i64 } %call36, 1
  store i64 %i115, i64* %i111, align 8
  store i64 %i116, i64* %i113, align 8
  br label %sw.epilog

sw.bb38:                                          ; preds = %NodeBlock
  %cmp40 = icmp eq i8 %opcode, 32
  %not.cmp40 = xor i1 %cmp40, true
  %sub = sext i1 %not.cmp40 to i64
  %cond45 = add i64 %cond, %sub
  %add = zext i1 %cmp40 to i64
  %cond52 = add i64 %cond, %add
  br i1 %is_jmp32, label %if.then54, label %if.end61

if.then54:                                        ; preds = %sw.bb38
  %i117 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 0
  %i118 = load i64, i64* %i117, align 8
  %i119 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 1
  %i120 = load i64, i64* %i119, align 8
  %call56 = call fastcc i64 @gen_hi_max(i64 %i118, i64 %i120) #22
  %add57 = add i64 %call56, %cond45
  %i121 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 0
  %i122 = load i64, i64* %i121, align 8
  %call59 = call fastcc i64 @gen_hi_min(i64 %i122) #22
  %add60 = add i64 %call59, %cond52
  br label %if.end61

if.end61:                                         ; preds = %if.then54, %sw.bb38
  %true_umin.0 = phi i64 [ %add60, %if.then54 ], [ %cond52, %sw.bb38 ]
  %false_umax.0 = phi i64 [ %add57, %if.then54 ], [ %cond45, %sw.bb38 ]
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 9
  %i123 = load i64, i64* %umax_value, align 8
  %cmp63 = icmp ult i64 %i123, %false_umax.0
  %cond68 = select i1 %cmp63, i64 %i123, i64 %false_umax.0
  store i64 %cond68, i64* %umax_value, align 8
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 8
  %i124 = load i64, i64* %umin_value, align 8
  %cmp71 = icmp ugt i64 %i124, %true_umin.0
  %cond76 = select i1 %cmp71, i64 %i124, i64 %true_umin.0
  store i64 %cond76, i64* %umin_value, align 8
  br label %sw.epilog

sw.bb78:                                          ; preds = %LeafBlock3
  %cmp80 = icmp eq i8 %opcode, 96
  %not.cmp80 = xor i1 %cmp80, true
  %sub84 = sext i1 %not.cmp80 to i64
  %cond86 = add i64 %cond9, %sub84
  %add91 = zext i1 %cmp80 to i64
  %cond94 = add i64 %cond9, %add91
  br i1 %is_jmp32, label %land.lhs.true, label %if.end99

land.lhs.true:                                    ; preds = %sw.bb78
  %call97 = call fastcc zeroext i1 @cmp_val_with_extended_s64(i64 noundef %cond9, %struct.bpf_reg_state* noundef %false_reg) #22
  br i1 %call97, label %if.end99, label %sw.epilog

if.end99:                                         ; preds = %land.lhs.true, %sw.bb78
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 7
  %i125 = load i64, i64* %smax_value, align 8
  %cmp101 = icmp slt i64 %i125, %cond86
  %cond106 = select i1 %cmp101, i64 %i125, i64 %cond86
  store i64 %cond106, i64* %smax_value, align 8
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 6
  %i126 = load i64, i64* %smin_value, align 8
  %cmp109 = icmp sgt i64 %i126, %cond94
  %cond114 = select i1 %cmp109, i64 %i126, i64 %cond94
  store i64 %cond114, i64* %smin_value, align 8
  br label %sw.epilog

sw.bb116:                                         ; preds = %NodeBlock9
  %cmp118 = icmp eq i8 %opcode, -96
  %not.cmp118 = xor i1 %cmp118, true
  %add122 = zext i1 %not.cmp118 to i64
  %cond124 = add i64 %cond, %add122
  %sub129 = sext i1 %cmp118 to i64
  %cond132 = add i64 %cond, %sub129
  br i1 %is_jmp32, label %if.then134, label %if.end141

if.then134:                                       ; preds = %sw.bb116
  %i127 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 0
  %i128 = load i64, i64* %i127, align 8
  %call136 = call fastcc i64 @gen_hi_min(i64 %i128) #22
  %add137 = add i64 %call136, %cond124
  %i129 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 0
  %i130 = load i64, i64* %i129, align 8
  %i131 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 1
  %i132 = load i64, i64* %i131, align 8
  %call139 = call fastcc i64 @gen_hi_max(i64 %i130, i64 %i132) #22
  %add140 = add i64 %call139, %cond132
  br label %if.end141

if.end141:                                        ; preds = %if.then134, %sw.bb116
  %true_umax.0 = phi i64 [ %add140, %if.then134 ], [ %cond132, %sw.bb116 ]
  %false_umin.0 = phi i64 [ %add137, %if.then134 ], [ %cond124, %sw.bb116 ]
  %umin_value142 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 8
  %i133 = load i64, i64* %umin_value142, align 8
  %cmp144 = icmp ugt i64 %i133, %false_umin.0
  %cond149 = select i1 %cmp144, i64 %i133, i64 %false_umin.0
  store i64 %cond149, i64* %umin_value142, align 8
  %umax_value151 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 9
  %i134 = load i64, i64* %umax_value151, align 8
  %cmp153 = icmp ult i64 %i134, %true_umax.0
  %cond158 = select i1 %cmp153, i64 %i134, i64 %true_umax.0
  store i64 %cond158, i64* %umax_value151, align 8
  br label %sw.epilog

sw.bb160:                                         ; preds = %LeafBlock7
  %cmp162 = icmp eq i8 %opcode, -64
  %not.cmp162 = xor i1 %cmp162, true
  %add166 = zext i1 %not.cmp162 to i64
  %cond168 = add i64 %cond9, %add166
  %sub173 = sext i1 %cmp162 to i64
  %cond176 = add i64 %cond9, %sub173
  br i1 %is_jmp32, label %land.lhs.true179, label %if.end182

land.lhs.true179:                                 ; preds = %sw.bb160
  %call180 = call fastcc zeroext i1 @cmp_val_with_extended_s64(i64 noundef %cond9, %struct.bpf_reg_state* noundef %false_reg) #22
  br i1 %call180, label %if.end182, label %sw.epilog

if.end182:                                        ; preds = %land.lhs.true179, %sw.bb160
  %smin_value183 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 6
  %i135 = load i64, i64* %smin_value183, align 8
  %cmp185 = icmp sgt i64 %i135, %cond168
  %cond190 = select i1 %cmp185, i64 %i135, i64 %cond168
  store i64 %cond190, i64* %smin_value183, align 8
  %smax_value192 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 7
  %i136 = load i64, i64* %smax_value192, align 8
  %cmp194 = icmp slt i64 %i136, %cond176
  %cond199 = select i1 %cmp194, i64 %i136, i64 %cond176
  store i64 %cond199, i64* %smax_value192, align 8
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock3, %LeafBlock7
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %if.end182, %land.lhs.true179, %if.end141, %if.end99, %land.lhs.true, %if.end61, %if.then30, %sw.bb24, %if.else, %if.then18
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %false_reg) #22
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %true_reg) #22
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %false_reg) #22
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %true_reg) #22
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %false_reg) #22
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %true_reg) #22
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* nocapture noundef %true_reg, %struct.bpf_reg_state* nocapture noundef %false_reg, i64 noundef %val, i8 noundef zeroext %opcode, i1 noundef zeroext %is_jmp32) unnamed_addr #12 {
entry:
  %conv1 = and i64 %val, 4294967295
  %cond = select i1 %is_jmp32, i64 %conv1, i64 %val
  %sext = shl i64 %cond, 32
  %conv6 = ashr exact i64 %sext, 32
  %cond9 = select i1 %is_jmp32, i64 %conv6, i64 %val
  %conv10 = zext i8 %opcode to i32
  %i = add nsw i32 %conv10, -16
  %i100 = call i32 @spirv.llvm_fshl_i32(i32 %i, i32 %i, i32 28)
  br label %NodeBlock13

NodeBlock13:                                      ; preds = %entry
  %Pivot14 = icmp slt i32 %i100, 4
  br i1 %Pivot14, label %NodeBlock1, label %NodeBlock11

NodeBlock11:                                      ; preds = %NodeBlock13
  %Pivot12 = icmp slt i32 %i100, 9
  br i1 %Pivot12, label %NodeBlock5, label %NodeBlock9

NodeBlock9:                                       ; preds = %NodeBlock11
  %Pivot10 = icmp slt i32 %i100, 11
  br i1 %Pivot10, label %sw.bb116, label %LeafBlock7

LeafBlock7:                                       ; preds = %NodeBlock9
  %SwitchLeaf8 = icmp slt i32 %i100, 13
  br i1 %SwitchLeaf8, label %sw.bb160, label %NewDefault

NodeBlock5:                                       ; preds = %NodeBlock11
  %Pivot6 = icmp slt i32 %i100, 5
  br i1 %Pivot6, label %sw.bb, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp slt i32 %i100, 7
  br i1 %SwitchLeaf4, label %sw.bb78, label %NewDefault

NodeBlock1:                                       ; preds = %NodeBlock13
  %Pivot2 = icmp slt i32 %i100, 1
  br i1 %Pivot2, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock1
  %Pivot = icmp slt i32 %i100, 3
  br i1 %Pivot, label %sw.bb38, label %sw.bb24

LeafBlock:                                        ; preds = %NodeBlock1
  %SwitchLeaf = icmp eq i32 %i, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock, %NodeBlock5
  %cmp = icmp eq i8 %opcode, 16
  %cond16 = select i1 %cmp, %struct.bpf_reg_state* %true_reg, %struct.bpf_reg_state* %false_reg
  br i1 %is_jmp32, label %if.then18, label %if.else

if.then18:                                        ; preds = %sw.bb
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %cond16, i64 0, i32 5, i32 0
  %i101 = load i64, i64* %value, align 8
  %and = and i64 %i101, -4294967296
  %or = or i64 %and, %cond
  store i64 %or, i64* %value, align 8
  %mask = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %cond16, i64 0, i32 5, i32 1
  %i102 = load i64, i64* %mask, align 8
  %and22 = and i64 %i102, -4294967296
  store i64 %and22, i64* %mask, align 8
  br label %sw.epilog

if.else:                                          ; preds = %sw.bb
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %cond16, i64 noundef %cond) #22
  br label %sw.epilog

sw.bb24:                                          ; preds = %NodeBlock
  %neg = xor i64 %cond, -1
  %call27 = call { i64, i64 } @tnum_const(i64 noundef %neg) #22
  %i103 = extractvalue { i64, i64 } %call27, 0
  %i104 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 0
  %i105 = load i64, i64* %i104, align 8
  %i106 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 1
  %i107 = load i64, i64* %i106, align 8
  %call28 = call { i64, i64 } @tnum_and(i64 %i105, i64 %i107, i64 %i103, i64 0) #22
  %i108 = extractvalue { i64, i64 } %call28, 0
  %i109 = extractvalue { i64, i64 } %call28, 1
  store i64 %i108, i64* %i104, align 8
  store i64 %i109, i64* %i106, align 8
  %call29 = call fastcc zeroext i1 @is_power_of_2(i64 noundef %cond) #25
  br i1 %call29, label %if.then30, label %sw.epilog

if.then30:                                        ; preds = %sw.bb24
  %call35 = call { i64, i64 } @tnum_const(i64 noundef %cond) #22
  %i110 = extractvalue { i64, i64 } %call35, 0
  %i111 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 0
  %i112 = load i64, i64* %i111, align 8
  %i113 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 1
  %i114 = load i64, i64* %i113, align 8
  %call36 = call { i64, i64 } @tnum_or(i64 %i112, i64 %i114, i64 %i110, i64 0) #22
  %i115 = extractvalue { i64, i64 } %call36, 0
  %i116 = extractvalue { i64, i64 } %call36, 1
  store i64 %i115, i64* %i111, align 8
  store i64 %i116, i64* %i113, align 8
  br label %sw.epilog

sw.bb38:                                          ; preds = %NodeBlock
  %cmp40 = icmp eq i8 %opcode, 32
  %not.cmp40 = xor i1 %cmp40, true
  %add = zext i1 %not.cmp40 to i64
  %cond45 = add i64 %cond, %add
  %sub = sext i1 %cmp40 to i64
  %cond52 = add i64 %cond, %sub
  br i1 %is_jmp32, label %if.then54, label %if.end61

if.then54:                                        ; preds = %sw.bb38
  %i117 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 0
  %i118 = load i64, i64* %i117, align 8
  %call56 = call fastcc i64 @gen_hi_min(i64 %i118) #22
  %add57 = add i64 %call56, %cond45
  %i119 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 0
  %i120 = load i64, i64* %i119, align 8
  %i121 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 1
  %i122 = load i64, i64* %i121, align 8
  %call59 = call fastcc i64 @gen_hi_max(i64 %i120, i64 %i122) #22
  %add60 = add i64 %call59, %cond52
  br label %if.end61

if.end61:                                         ; preds = %if.then54, %sw.bb38
  %true_umax.0 = phi i64 [ %add60, %if.then54 ], [ %cond52, %sw.bb38 ]
  %false_umin.0 = phi i64 [ %add57, %if.then54 ], [ %cond45, %sw.bb38 ]
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 8
  %i123 = load i64, i64* %umin_value, align 8
  %cmp63 = icmp ugt i64 %i123, %false_umin.0
  %cond68 = select i1 %cmp63, i64 %i123, i64 %false_umin.0
  store i64 %cond68, i64* %umin_value, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 9
  %i124 = load i64, i64* %umax_value, align 8
  %cmp71 = icmp ult i64 %i124, %true_umax.0
  %cond76 = select i1 %cmp71, i64 %i124, i64 %true_umax.0
  store i64 %cond76, i64* %umax_value, align 8
  br label %sw.epilog

sw.bb78:                                          ; preds = %LeafBlock3
  %cmp80 = icmp eq i8 %opcode, 96
  %not.cmp80 = xor i1 %cmp80, true
  %add84 = zext i1 %not.cmp80 to i64
  %cond86 = add i64 %cond9, %add84
  %sub91 = sext i1 %cmp80 to i64
  %cond94 = add i64 %cond9, %sub91
  br i1 %is_jmp32, label %land.lhs.true, label %if.end99

land.lhs.true:                                    ; preds = %sw.bb78
  %call97 = call fastcc zeroext i1 @cmp_val_with_extended_s64(i64 noundef %cond9, %struct.bpf_reg_state* noundef %false_reg) #22
  br i1 %call97, label %if.end99, label %sw.epilog

if.end99:                                         ; preds = %land.lhs.true, %sw.bb78
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 6
  %i125 = load i64, i64* %smin_value, align 8
  %cmp101 = icmp sgt i64 %i125, %cond86
  %cond106 = select i1 %cmp101, i64 %i125, i64 %cond86
  store i64 %cond106, i64* %smin_value, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 7
  %i126 = load i64, i64* %smax_value, align 8
  %cmp109 = icmp slt i64 %i126, %cond94
  %cond114 = select i1 %cmp109, i64 %i126, i64 %cond94
  store i64 %cond114, i64* %smax_value, align 8
  br label %sw.epilog

sw.bb116:                                         ; preds = %NodeBlock9
  %cmp118 = icmp eq i8 %opcode, -96
  %not.cmp118 = xor i1 %cmp118, true
  %sub122 = sext i1 %not.cmp118 to i64
  %cond124 = add i64 %cond, %sub122
  %add129 = zext i1 %cmp118 to i64
  %cond132 = add i64 %cond, %add129
  br i1 %is_jmp32, label %if.then134, label %if.end141

if.then134:                                       ; preds = %sw.bb116
  %i127 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 0
  %i128 = load i64, i64* %i127, align 8
  %i129 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 5, i32 1
  %i130 = load i64, i64* %i129, align 8
  %call136 = call fastcc i64 @gen_hi_max(i64 %i128, i64 %i130) #22
  %add137 = add i64 %call136, %cond124
  %i131 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 5, i32 0
  %i132 = load i64, i64* %i131, align 8
  %call139 = call fastcc i64 @gen_hi_min(i64 %i132) #22
  %add140 = add i64 %call139, %cond132
  br label %if.end141

if.end141:                                        ; preds = %if.then134, %sw.bb116
  %true_umin.0 = phi i64 [ %add140, %if.then134 ], [ %cond132, %sw.bb116 ]
  %false_umax.0 = phi i64 [ %add137, %if.then134 ], [ %cond124, %sw.bb116 ]
  %umax_value142 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 9
  %i133 = load i64, i64* %umax_value142, align 8
  %cmp144 = icmp ult i64 %i133, %false_umax.0
  %cond149 = select i1 %cmp144, i64 %i133, i64 %false_umax.0
  store i64 %cond149, i64* %umax_value142, align 8
  %umin_value151 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 8
  %i134 = load i64, i64* %umin_value151, align 8
  %cmp153 = icmp ugt i64 %i134, %true_umin.0
  %cond158 = select i1 %cmp153, i64 %i134, i64 %true_umin.0
  store i64 %cond158, i64* %umin_value151, align 8
  br label %sw.epilog

sw.bb160:                                         ; preds = %LeafBlock7
  %cmp162 = icmp eq i8 %opcode, -64
  %not.cmp162 = xor i1 %cmp162, true
  %sub166 = sext i1 %not.cmp162 to i64
  %cond168 = add i64 %cond9, %sub166
  %add173 = zext i1 %cmp162 to i64
  %cond176 = add i64 %cond9, %add173
  br i1 %is_jmp32, label %land.lhs.true179, label %if.end182

land.lhs.true179:                                 ; preds = %sw.bb160
  %call180 = call fastcc zeroext i1 @cmp_val_with_extended_s64(i64 noundef %cond9, %struct.bpf_reg_state* noundef %false_reg) #22
  br i1 %call180, label %if.end182, label %sw.epilog

if.end182:                                        ; preds = %land.lhs.true179, %sw.bb160
  %smax_value183 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %false_reg, i64 0, i32 7
  %i135 = load i64, i64* %smax_value183, align 8
  %cmp185 = icmp slt i64 %i135, %cond168
  %cond190 = select i1 %cmp185, i64 %i135, i64 %cond168
  store i64 %cond190, i64* %smax_value183, align 8
  %smin_value192 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %true_reg, i64 0, i32 6
  %i136 = load i64, i64* %smin_value192, align 8
  %cmp194 = icmp sgt i64 %i136, %cond176
  %cond199 = select i1 %cmp194, i64 %i136, i64 %cond176
  store i64 %cond199, i64* %smin_value192, align 8
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock3, %LeafBlock7
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %if.end182, %land.lhs.true179, %if.end141, %if.end99, %land.lhs.true, %if.end61, %if.then30, %sw.bb24, %if.else, %if.then18
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %false_reg) #22
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %true_reg) #22
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %false_reg) #22
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %true_reg) #22
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %false_reg) #22
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %true_reg) #22
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @reg_combine_min_max(%struct.bpf_reg_state* nocapture noundef %true_src, %struct.bpf_reg_state* nocapture noundef %true_dst, %struct.bpf_reg_state* nocapture noundef %false_src, %struct.bpf_reg_state* nocapture noundef %false_dst, i8 noundef zeroext %opcode) unnamed_addr #12 {
entry:
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i8 %opcode, 80
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %opcode, 80
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %opcode, 16
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  call fastcc void @__reg_combine_min_max(%struct.bpf_reg_state* noundef %true_src, %struct.bpf_reg_state* noundef %true_dst) #22
  br label %sw.epilog

sw.bb1:                                           ; preds = %LeafBlock1
  call fastcc void @__reg_combine_min_max(%struct.bpf_reg_state* noundef %false_src, %struct.bpf_reg_state* noundef %false_dst) #22
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb1, %sw.bb
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @__reg_combine_min_max(%struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %dst_reg) unnamed_addr #12 {
entry:
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
  %i = load i64, i64* %umin_value, align 8
  %umin_value1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
  %i36 = load i64, i64* %umin_value1, align 8
  %cmp = icmp ugt i64 %i, %i36
  %cond = select i1 %cmp, i64 %i, i64 %i36
  store i64 %cond, i64* %umin_value1, align 8
  store i64 %cond, i64* %umin_value, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
  %i37 = load i64, i64* %umax_value, align 8
  %umax_value4 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i38 = load i64, i64* %umax_value4, align 8
  %cmp6 = icmp ult i64 %i37, %i38
  %cond10 = select i1 %cmp6, i64 %i37, i64 %i38
  store i64 %cond10, i64* %umax_value4, align 8
  store i64 %cond10, i64* %umax_value, align 8
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
  %i39 = load i64, i64* %smin_value, align 8
  %smin_value13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
  %i40 = load i64, i64* %smin_value13, align 8
  %cmp15 = icmp sgt i64 %i39, %i40
  %cond19 = select i1 %cmp15, i64 %i39, i64 %i40
  store i64 %cond19, i64* %smin_value13, align 8
  store i64 %cond19, i64* %smin_value, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
  %i41 = load i64, i64* %smax_value, align 8
  %smax_value22 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
  %i42 = load i64, i64* %smax_value22, align 8
  %cmp24 = icmp slt i64 %i41, %i42
  %cond28 = select i1 %cmp24, i64 %i41, i64 %i42
  store i64 %cond28, i64* %smax_value22, align 8
  store i64 %cond28, i64* %smax_value, align 8
  %var_off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5
  %var_off31 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5
  %i43 = getelementptr %struct.tnum, %struct.tnum* %var_off, i64 0, i32 0
  %i44 = load i64, i64* %i43, align 8
  %i45 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i46 = load i64, i64* %i45, align 8
  %i47 = getelementptr %struct.tnum, %struct.tnum* %var_off31, i64 0, i32 0
  %i48 = load i64, i64* %i47, align 8
  %i49 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i50 = load i64, i64* %i49, align 8
  %call = call { i64, i64 } @tnum_intersect(i64 %i44, i64 %i46, i64 %i48, i64 %i50) #22
  %i51 = extractvalue { i64, i64 } %call, 0
  %i52 = extractvalue { i64, i64 } %call, 1
  %tmp32.sroa.0.0..sroa_idx = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  store i64 %i51, i64* %tmp32.sroa.0.0..sroa_idx, align 8
  store i64 %i52, i64* %i49, align 8
  %i53 = bitcast %struct.tnum* %var_off to i8*
  %i54 = bitcast %struct.tnum* %var_off31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i53, i8* noundef align 8 dereferenceable(16) %i54, i64 16, i1 false)
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %src_reg) #22
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %src_reg) #22
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %src_reg) #22
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %src_reg) #22
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @is_power_of_2(i64 noundef %n) unnamed_addr #14 {
entry:
  %cmp.not = icmp eq i64 %n, 0
  br i1 %cmp.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %i = call i64 @llvm.ctpop.i64(i64 %n), !range !7
  %cmp1 = icmp ult i64 %i, 2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %i3 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %i3
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc i64 @gen_hi_min(i64 %var.coerce0) unnamed_addr #2 {
entry:
  %and = and i64 %var.coerce0, -4294967296
  ret i64 %and
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc i64 @gen_hi_max(i64 %var.coerce0, i64 %var.coerce1) unnamed_addr #2 {
entry:
  %or = or i64 %var.coerce1, %var.coerce0
  %and = and i64 %or, -4294967296
  ret i64 %and
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @cmp_val_with_extended_s64(i64 noundef %sval, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %conv = trunc i64 %sval to i32
  %cmp = icmp sgt i32 %conv, -1
  br i1 %cmp, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %entry
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 6
  %i = load i64, i64* %smin_value, align 8
  %cmp2 = icmp sgt i64 %i, -1
  br i1 %cmp2, label %land.lhs.true4, label %lor.rhs

land.lhs.true4:                                   ; preds = %land.lhs.true
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 7
  %i5 = load i64, i64* %smax_value, align 8
  %cmp5 = icmp slt i64 %i5, 2147483648
  br i1 %cmp5, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %cmp8 = icmp slt i32 %conv, 0
  br i1 %cmp8, label %land.lhs.true10, label %lor.end

land.lhs.true10:                                  ; preds = %lor.rhs
  %smax_value11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 7
  %i6 = load i64, i64* %smax_value11, align 8
  %cmp12 = icmp slt i64 %i6, 1
  br i1 %cmp12, label %land.rhs, label %lor.end

land.rhs:                                         ; preds = %land.lhs.true10
  %smin_value14 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 6
  %i7 = load i64, i64* %smin_value14, align 8
  %cmp15 = icmp sgt i64 %i7, -2147483649
  br label %lor.end

lor.end:                                          ; preds = %land.rhs, %land.lhs.true10, %lor.rhs, %land.lhs.true4
  %i8 = phi i1 [ true, %land.lhs.true4 ], [ false, %land.lhs.true10 ], [ false, %lor.rhs ], [ %cmp15, %land.rhs ]
  ret i1 %i8
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @tnum_equals_const(i64 %a.coerce0, i64 %a.coerce1, i64 noundef %b) unnamed_addr #2 {
entry:
  %call = call fastcc zeroext i1 @tnum_is_const(i64 %a.coerce1) #22
  %cmp = icmp eq i64 %a.coerce0, %b
  %i = select i1 %call, i1 %cmp, i1 false
  ret i1 %i
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JGT(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 32, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext 32, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext 32, i1 noundef zeroext false) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %if.else70, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JGE(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 48, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext 48, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext 48, i1 noundef zeroext false) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %if.else70, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JNE(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 80, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext 80, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.then103

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext 80, i1 noundef zeroext false) #22
  br label %if.end117

if.then103:                                       ; preds = %if.else70
  call fastcc void @reg_combine_min_max(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %src_reg, %struct.bpf_reg_state* noundef %dst_reg, i8 noundef zeroext 80) #22
  br label %if.end117

if.end117:                                        ; preds = %if.then103, %cond.end90, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JLT(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext -96, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext -96, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext -96, i1 noundef zeroext false) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %if.else70, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JLE(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext -80, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext -80, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext -80, i1 noundef zeroext false) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %if.else70, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JSGT(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 96, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext 96, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext 96, i1 noundef zeroext false) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %if.else70, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JSGE(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 112, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext 112, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext 112, i1 noundef zeroext false) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %if.else70, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JSLT(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext -64, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext -64, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext -64, i1 noundef zeroext false) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %if.else70, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JSLE(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext -48, i1 noundef zeroext false) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %if.else70

cond.end:                                         ; preds = %if.then52
  %value68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i67 = load i64, i64* %value68, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i67, i8 noundef zeroext -48, i1 noundef zeroext false) #22
  br label %if.end117

if.else70:                                        ; preds = %if.then52
  %i68 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i69 = load i64, i64* %i68, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i69) #22
  br i1 %call72, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %if.else70
  %value89 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
  %i70 = load i64, i64* %value89, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i70, i8 noundef zeroext -48, i1 noundef zeroext false) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %if.else70, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JEQ_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 16, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext 16, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext 16, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JGT_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 32, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext 32, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext 32, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JGE_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 48, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext 48, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext 48, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JNE_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 80, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext 80, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext 80, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JLT_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext -96, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext -96, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext -96, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JLE_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext -80, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext -80, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext -80, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JSGT_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 96, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext 96, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext 96, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JSGE_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext 112, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext 112, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext 112, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JSLT_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext -64, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext -64, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext -64, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define dso_local void @check_cond_jmp_op_wrapper_BPF_JSLE_32(%struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* nocapture noundef %src_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_dst_reg, %struct.bpf_reg_state* nocapture noundef %other_branch_src_reg) local_unnamed_addr #12 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  %type8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  store i32 1, i32* %type8, align 8
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg) #22
  call fastcc void @push_stack___(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg) #22
  %i = load i32, i32* %type8, align 8
  %cmp21 = icmp eq i32 %i, 1
  br i1 %cmp21, label %land.lhs.true, label %if.then44

land.lhs.true:                                    ; preds = %entry
  %i56 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i57 = load i64, i64* %i56, align 8
  %call23 = call fastcc zeroext i1 @tnum_is_const(i64 %i57) #22
  br i1 %call23, label %if.then25, label %if.then44

if.then25:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
  %i58 = load i64, i64* %value, align 8
  %call28 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i58, i8 noundef zeroext -48, i1 noundef zeroext true) #22
  %phi.cmp = icmp ult i32 %call28, 2
  br i1 %phi.cmp, label %if.end117, label %if.then44

if.then44:                                        ; preds = %if.then25, %land.lhs.true, %entry
  %i59 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i60 = bitcast %struct.bpf_reg_state* %dst_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i59, i8* noundef align 8 dereferenceable(104) %i60, i64 104, i1 false)
  %i61 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i62 = bitcast %struct.bpf_reg_state* %src_reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i61, i8* noundef align 8 dereferenceable(104) %i62, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %i63 = load i32, i32* %type, align 8
  %cmp46 = icmp eq i32 %i63, 1
  br i1 %cmp46, label %land.lhs.true48, label %if.end117

land.lhs.true48:                                  ; preds = %if.then44
  %i64 = load i32, i32* %type8, align 8
  %cmp50 = icmp eq i32 %i64, 1
  br i1 %cmp50, label %if.then52, label %if.end117

if.then52:                                        ; preds = %land.lhs.true48
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %call54 = call fastcc zeroext i1 @tnum_is_const(i64 %i66) #22
  br i1 %call54, label %cond.end, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %if.then52
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i68 = load i64, i64* %i67, align 8
  %call60 = call fastcc zeroext i1 @tnum_is_const(i64 %i68) #22
  br i1 %call60, label %cond.end, label %if.else70

cond.end:                                         ; preds = %land.lhs.true58, %if.then52
  %value66 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %i69 = load i64, i64* %value66, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %other_branch_dst_reg, %struct.bpf_reg_state* noundef %dst_reg, i64 noundef %i69, i8 noundef zeroext -48, i1 noundef zeroext true) #22
  br label %if.end117

if.else70:                                        ; preds = %land.lhs.true58
  %i70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
  %i71 = load i64, i64* %i70, align 8
  %call72 = call fastcc zeroext i1 @tnum_is_const(i64 %i71) #22
  br i1 %call72, label %cond.end90, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %if.else70
  %i72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i73 = load i64, i64* %i72, align 8
  %call79 = call fastcc zeroext i1 @tnum_is_const(i64 %i73) #22
  br i1 %call79, label %cond.end90, label %if.end117

cond.end90:                                       ; preds = %land.lhs.true77, %if.else70
  %value86 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %i74 = load i64, i64* %value86, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %other_branch_src_reg, %struct.bpf_reg_state* noundef %src_reg, i64 noundef %i74, i8 noundef zeroext -48, i1 noundef zeroext true) #22
  br label %if.end117

if.end117:                                        ; preds = %cond.end90, %land.lhs.true77, %cond.end, %land.lhs.true48, %if.then44, %if.then25
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define dso_local i32 @bpf_check(%struct.bpf_prog** nocapture noundef %prog, %union.bpf_attr* nocapture noundef readonly %attr, %union.bpf_attr* noundef %uattr) local_unnamed_addr #6 {
entry:
  %call = call fastcc i64 @ktime_get_ns() #22
  %call1 = call fastcc i8* @kzalloc(i64 noundef 4816) #22
  %i = bitcast i8* %call1 to %struct.bpf_verifier_env*
  %tobool.not = icmp eq i8* %call1, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %log2 = getelementptr inbounds i8, i8* %call1, i64 608
  %i117 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len3 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i117, i64 0, i32 4
  %i118 = load i32, i32* %len3, align 4
  %conv = sext i32 %i118 to i64
  %call4 = call fastcc i64 @array_size(i64 noundef 24, i64 noundef %conv) #22
  %call5 = call i8* @vzalloc(i64 noundef %call4) #23
  %insn_aux_data = getelementptr inbounds i8, i8* %call1, i64 592
  %i119 = bitcast i8* %insn_aux_data to %struct.bpf_insn_aux_data**
  %i120 = bitcast i8* %insn_aux_data to i8**
  store i8* %call5, i8** %i120, align 8
  %tobool7.not = icmp eq i8* %call5, null
  br i1 %tobool7.not, label %err_free_env, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end
  %cmp113 = icmp sgt i32 %i118, 0
  br i1 %cmp113, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  %wide.trip.count = zext i32 %i118 to i64
  %i121 = add nsw i64 %wide.trip.count, -1
  %xtraiter = and i64 %wide.trip.count, 3
  %i122 = icmp ult i64 %i121, 3
  br i1 %i122, label %for.end.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967292
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader.new
  %indvars.iv = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next.3, %for.body ]
  %i123 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %i119, align 8
  %orig_idx = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i123, i64 %indvars.iv, i32 7
  %i124 = trunc i64 %indvars.iv to i32
  store i32 %i124, i32* %orig_idx, align 4
  %indvars.iv.next = or i64 %indvars.iv, 1
  %i125 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %i119, align 8
  %orig_idx.1 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i125, i64 %indvars.iv.next, i32 7
  %i126 = trunc i64 %indvars.iv.next to i32
  store i32 %i126, i32* %orig_idx.1, align 4
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %i127 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %i119, align 8
  %orig_idx.2 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i127, i64 %indvars.iv.next.1, i32 7
  %i128 = trunc i64 %indvars.iv.next.1 to i32
  store i32 %i128, i32* %orig_idx.2, align 4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %i129 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %i119, align 8
  %orig_idx.3 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i129, i64 %indvars.iv.next.2, i32 7
  %i130 = trunc i64 %indvars.iv.next.2 to i32
  store i32 %i130, i32* %orig_idx.3, align 4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.ncmp.3 = icmp eq i64 %indvars.iv.next.3, %unroll_iter
  br i1 %niter.ncmp.3, label %for.end.loopexit.unr-lcssa, label %for.body

for.end.loopexit.unr-lcssa:                       ; preds = %for.body, %for.body.preheader
  %indvars.iv.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next.3, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.end, label %for.body.epil

for.body.epil:                                    ; preds = %for.body.epil, %for.end.loopexit.unr-lcssa
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body.epil ], [ %indvars.iv.unr, %for.end.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body.epil ], [ 0, %for.end.loopexit.unr-lcssa ]
  %i131 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %i119, align 8
  %orig_idx.epil = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i131, i64 %indvars.iv.epil, i32 7
  %i132 = trunc i64 %indvars.iv.epil to i32
  store i32 %i132, i32* %orig_idx.epil, align 4
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.next = add nuw nsw i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.end, label %for.body.epil, !llvm.loop !8

for.end:                                          ; preds = %for.body.epil, %for.end.loopexit.unr-lcssa, %for.cond.preheader
  %i133 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %prog12 = getelementptr inbounds i8, i8* %call1, i64 8
  %i134 = bitcast i8* %prog12 to %struct.bpf_prog**
  store %struct.bpf_prog* %i133, %struct.bpf_prog** %i134, align 8
  %type = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i133, i64 0, i32 2
  %i135 = load i32, i32* %type, align 4
  %idxprom14 = zext i32 %i135 to i64
  %arrayidx15 = getelementptr [25 x %struct.bpf_verifier_ops*], [25 x %struct.bpf_verifier_ops*]* @bpf_verifier_ops, i64 0, i64 %idxprom14
  %i136 = load %struct.bpf_verifier_ops*, %struct.bpf_verifier_ops** %arrayidx15, align 8
  %ops = getelementptr inbounds i8, i8* %call1, i64 16
  %i137 = bitcast i8* %ops to %struct.bpf_verifier_ops**
  store %struct.bpf_verifier_ops* %i136, %struct.bpf_verifier_ops** %i137, align 8
  %call16 = call zeroext i1 @capable(i32 noundef 21) #23
  %frombool = zext i1 %call16 to i8
  br i1 %call16, label %if.end19, label %if.then18

if.then18:                                        ; preds = %for.end
  call void @mutex_lock(%struct.mutex* noundef nonnull @bpf_verifier_lock) #23
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %for.end
  %log_level = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 4
  %i138 = load i32, i32* %log_level, align 8
  %tobool20.not = icmp eq i32 %i138, 0
  br i1 %tobool20.not, label %lor.lhs.false, label %if.then24

lor.lhs.false:                                    ; preds = %if.end19
  %log_buf = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 6
  %i139 = load i64, i64* %log_buf, align 8
  %tobool21.not = icmp eq i64 %i139, 0
  br i1 %tobool21.not, label %lor.lhs.false22, label %if.then24

lor.lhs.false22:                                  ; preds = %lor.lhs.false
  %log_size = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 5
  %i140 = load i32, i32* %log_size, align 4
  %tobool23.not = icmp eq i32 %i140, 0
  br i1 %tobool23.not, label %if.end46, label %if.then24

if.then24:                                        ; preds = %lor.lhs.false22, %lor.lhs.false, %if.end19
  %level = bitcast i8* %log2 to i32*
  store i32 %i138, i32* %level, align 8
  %log_buf26 = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 6
  %i141 = load i64, i64* %log_buf26, align 8
  %i142 = inttoptr i64 %i141 to i8*
  %ubuf = getelementptr inbounds i8, i8* %call1, i64 1640
  %i143 = bitcast i8* %ubuf to i8**
  store i8* %i142, i8** %i143, align 8
  %log_size27 = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 5
  %i144 = load i32, i32* %log_size27, align 4
  %len_total = getelementptr inbounds i8, i8* %call1, i64 1652
  %i145 = bitcast i8* %len_total to i32*
  store i32 %i144, i32* %i145, align 4
  %i146 = add i32 %i144, -1073741824
  %i147 = icmp ult i32 %i146, -1073741696
  %brmerge = select i1 %i147, i1 true, i1 %tobool20.not
  br i1 %brmerge, label %err_unlock, label %lor.lhs.false38

lor.lhs.false38:                                  ; preds = %if.then24
  %tobool40.not = icmp ne i64 %i141, 0
  %tobool43.not = icmp ult i32 %i138, 8
  %or.cond112 = select i1 %tobool40.not, i1 %tobool43.not, i1 false
  br i1 %or.cond112, label %if.end46, label %err_unlock

if.end46:                                         ; preds = %lor.lhs.false38, %lor.lhs.false22
  %prog_flags = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 8
  %i148 = load i32, i32* %prog_flags, align 4
  %i149 = getelementptr inbounds i8, i8* %call1, i64 36
  %i150 = trunc i32 %i148 to i8
  %i151 = and i8 %i150, 1
  %and52 = and i32 %i148, 2
  %tobool53.not = icmp eq i32 %and52, 0
  %spec.store.select = select i1 %tobool53.not, i8 %i151, i8 0
  store i8 %spec.store.select, i8* %i149, align 4
  %i152 = getelementptr inbounds i8, i8* %call1, i64 584
  store i8 %frombool, i8* %i152, align 8
  br i1 %call16, label %if.then60, label %if.end65

if.then60:                                        ; preds = %if.end46
  %i153 = getelementptr inbounds i8, i8* %call1, i64 37
  %i154 = lshr i8 %i150, 3
  %i155 = and i8 %i154, 1
  store i8 %i155, i8* %i153, align 1
  br label %if.end65

if.end65:                                         ; preds = %if.then60, %if.end46
  %call66 = call fastcc i32 @replace_map_fd_with_map_ptr(%struct.bpf_verifier_env* noundef nonnull %i) #22
  %cmp67 = icmp slt i32 %call66, 0
  br i1 %cmp67, label %skip_full_check, label %if.end70

if.end70:                                         ; preds = %if.end65
  %i156 = load %struct.bpf_prog*, %struct.bpf_prog** %i134, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i156, i64 0, i32 7
  %i157 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %i157.idx = getelementptr %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i157, i64 0, i32 10
  %i157.idx.val = load i8, i8* %i157.idx, align 1
  %call72 = call fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %i157.idx.val) #22
  br i1 %call72, label %if.then73, label %if.end79

if.then73:                                        ; preds = %if.end70
  %call75 = call i32 @bpf_prog_offload_verifier_prep(%struct.bpf_prog* noundef %i156) #23
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.end79, label %skip_full_check

if.end79:                                         ; preds = %if.then73, %if.end70
  %i.idx = getelementptr i8, i8* %call1, i64 8
  %0 = bitcast i8* %i.idx to %struct.bpf_prog**
  %i.idx.val = load %struct.bpf_prog*, %struct.bpf_prog** %0, align 8
  %i.idx.val.idx = getelementptr %struct.bpf_prog, %struct.bpf_prog* %i.idx.val, i64 0, i32 4
  %i.idx.val.idx.val = load i32, i32* %i.idx.val.idx, align 4
  %call80 = call fastcc i32 @state_htab_size(i32 %i.idx.val.idx.val) #22
  %conv81 = zext i32 %call80 to i64
  %call82 = call fastcc i8* @kvcalloc(i64 noundef %conv81, i64 noundef 8, i32 noundef 1051840) #22
  %explored_states = getelementptr inbounds i8, i8* %call1, i64 48
  %i158 = bitcast i8* %explored_states to i8**
  store i8* %call82, i8** %i158, align 8
  %tobool84.not = icmp eq i8* %call82, null
  br i1 %tobool84.not, label %skip_full_check, label %if.end86

if.end86:                                         ; preds = %if.end79
  %call87 = call fastcc i32 @check_subprogs(%struct.bpf_verifier_env* noundef nonnull %i) #22
  %cmp88 = icmp slt i32 %call87, 0
  br i1 %cmp88, label %skip_full_check, label %if.end91

if.end91:                                         ; preds = %if.end86
  %call92 = call fastcc i32 @check_btf_info(%struct.bpf_verifier_env* noundef nonnull %i, %union.bpf_attr* noundef %attr, %union.bpf_attr* noundef %uattr) #22
  %cmp93 = icmp slt i32 %call92, 0
  br i1 %cmp93, label %skip_full_check, label %if.end96

if.end96:                                         ; preds = %if.end91
  %call97 = call fastcc i32 @check_cfg(%struct.bpf_verifier_env* noundef nonnull %i) #22
  %cmp98 = icmp slt i32 %call97, 0
  br i1 %cmp98, label %skip_full_check, label %if.end101

if.end101:                                        ; preds = %if.end96
  %call102 = call fastcc i32 @do_check(%struct.bpf_verifier_env* noundef nonnull %i) #22
  %cur_state = getelementptr inbounds i8, i8* %call1, i64 40
  %i159 = bitcast i8* %cur_state to %struct.bpf_verifier_state**
  %i160 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %i159, align 8
  %tobool103.not = icmp eq %struct.bpf_verifier_state* %i160, null
  br i1 %tobool103.not, label %if.end107, label %if.then104

if.then104:                                       ; preds = %if.end101
  call fastcc void @free_verifier_state(%struct.bpf_verifier_state* noundef nonnull %i160, i1 noundef zeroext true) #22
  store %struct.bpf_verifier_state* null, %struct.bpf_verifier_state** %i159, align 8
  br label %if.end107

if.end107:                                        ; preds = %if.then104, %if.end101
  %cmp108 = icmp eq i32 %call102, 0
  br i1 %cmp108, label %land.lhs.true, label %skip_full_check

land.lhs.true:                                    ; preds = %if.end107
  %i161 = load %struct.bpf_prog*, %struct.bpf_prog** %i134, align 8
  %aux111 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i161, i64 0, i32 7
  %i162 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux111, align 8
  %i162.idx = getelementptr %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i162, i64 0, i32 10
  %i162.idx.val = load i8, i8* %i162.idx, align 1
  %call112 = call fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %i162.idx.val) #22
  br i1 %call112, label %if.then114, label %skip_full_check

if.then114:                                       ; preds = %land.lhs.true
  %call115 = call i32 @bpf_prog_offload_finalize(%struct.bpf_verifier_env* noundef nonnull %i) #23
  br label %skip_full_check

skip_full_check:                                  ; preds = %if.then114, %land.lhs.true, %if.end107, %if.end96, %if.end91, %if.end86, %if.end79, %if.then73, %if.end65
  %ret.0 = phi i32 [ %call66, %if.end65 ], [ %call75, %if.then73 ], [ %call87, %if.end86 ], [ %call92, %if.end91 ], [ %call97, %if.end96 ], [ %call115, %if.then114 ], [ 0, %land.lhs.true ], [ %call102, %if.end107 ], [ -12, %if.end79 ]
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %skip_full_check
  %call117 = call fastcc i32 @pop_stack(%struct.bpf_verifier_env* noundef nonnull %i, i32* noundef null, i32* noundef null) #22
  %tobool118.not = icmp eq i32 %call117, 0
  br i1 %tobool118.not, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond
  call fastcc void @free_states(%struct.bpf_verifier_env* noundef nonnull %i) #22
  %cmp120 = icmp eq i32 %ret.0, 0
  br i1 %cmp120, label %if.then122, label %if.end124

if.then122:                                       ; preds = %while.end
  %call123 = call fastcc i32 @check_max_stack_depth(%struct.bpf_verifier_env* noundef nonnull %i) #22
  br label %if.end124

if.end124:                                        ; preds = %if.then122, %while.end
  %ret.1 = phi i32 [ %call123, %if.then122 ], [ %ret.0, %while.end ]
  %cmp127 = icmp eq i32 %ret.1, 0
  br i1 %call16, label %if.then126, label %if.else

if.then126:                                       ; preds = %if.end124
  br i1 %cmp127, label %if.then129, label %if.end135

if.then129:                                       ; preds = %if.then126
  call fastcc void @opt_hard_wire_dead_code_branches(%struct.bpf_verifier_env* noundef nonnull %i) #22
  %call134 = call fastcc i32 @opt_remove_dead_code(%struct.bpf_verifier_env* noundef nonnull %i) #22
  br label %if.end135

if.end135:                                        ; preds = %if.then129, %if.then126
  %ret.2 = phi i32 [ %call134, %if.then129 ], [ %ret.1, %if.then126 ]
  %cmp136 = icmp eq i32 %ret.2, 0
  br i1 %cmp136, label %if.then138, label %if.end145

if.then138:                                       ; preds = %if.end135
  %call139 = call fastcc i32 @opt_remove_nops(%struct.bpf_verifier_env* noundef nonnull %i) #22
  br label %if.end145

if.else:                                          ; preds = %if.end124
  br i1 %cmp127, label %if.then143, label %if.end145

if.then143:                                       ; preds = %if.else
  %i.idx2 = getelementptr i8, i8* %call1, i64 8
  %1 = bitcast i8* %i.idx2 to %struct.bpf_prog**
  %i.idx2.val = load %struct.bpf_prog*, %struct.bpf_prog** %1, align 8
  %i.idx3 = getelementptr i8, i8* %call1, i64 592
  %2 = bitcast i8* %i.idx3 to %struct.bpf_insn_aux_data**
  %i.idx3.val = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %2, align 8
  call fastcc void @sanitize_dead_code(%struct.bpf_prog* %i.idx2.val, %struct.bpf_insn_aux_data* %i.idx3.val) #22
  br label %if.end145

if.end145:                                        ; preds = %if.then143, %if.else, %if.then138, %if.end135
  %ret.3 = phi i32 [ %call139, %if.then138 ], [ %ret.2, %if.end135 ], [ 0, %if.then143 ], [ %ret.1, %if.else ]
  %cmp146 = icmp eq i32 %ret.3, 0
  br i1 %cmp146, label %if.then148, label %if.end150

if.then148:                                       ; preds = %if.end145
  %call149 = call fastcc i32 @convert_ctx_accesses(%struct.bpf_verifier_env* noundef nonnull %i) #22
  br label %if.end150

if.end150:                                        ; preds = %if.then148, %if.end145
  %ret.4 = phi i32 [ %call149, %if.then148 ], [ %ret.3, %if.end145 ]
  %cmp151 = icmp eq i32 %ret.4, 0
  br i1 %cmp151, label %if.then153, label %if.end155

if.then153:                                       ; preds = %if.end150
  %call154 = call fastcc i32 @fixup_bpf_calls(%struct.bpf_verifier_env* noundef nonnull %i) #22
  br label %if.end155

if.end155:                                        ; preds = %if.then153, %if.end150
  %ret.5 = phi i32 [ %call154, %if.then153 ], [ %ret.4, %if.end150 ]
  %cmp156 = icmp eq i32 %ret.5, 0
  br i1 %cmp156, label %land.lhs.true158, label %if.end172

land.lhs.true158:                                 ; preds = %if.end155
  %i163 = load %struct.bpf_prog*, %struct.bpf_prog** %i134, align 8
  %aux160 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i163, i64 0, i32 7
  %i164 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux160, align 8
  %i164.idx = getelementptr %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i164, i64 0, i32 10
  %i164.idx.val = load i8, i8* %i164.idx, align 1
  %call161 = call fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %i164.idx.val) #22
  br i1 %call161, label %if.end172, label %if.then162

if.then162:                                       ; preds = %land.lhs.true158
  %attr.idx = getelementptr %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 8
  %attr.idx.val = load i32, i32* %attr.idx, align 4
  %call163 = call fastcc i32 @opt_subreg_zext_lo32_rnd_hi32(%struct.bpf_verifier_env* noundef nonnull %i, i32 %attr.idx.val) #22
  %call164 = call zeroext i1 @bpf_jit_needs_zext() #23
  %tobool166.not = icmp eq i32 %call163, 0
  %narrow = select i1 %call164, i1 %tobool166.not, i1 false
  %i165 = load %struct.bpf_prog*, %struct.bpf_prog** %i134, align 8
  %aux170 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i165, i64 0, i32 7
  %i166 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux170, align 8
  %verifier_zext = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i166, i64 0, i32 9
  %frombool171 = zext i1 %narrow to i8
  store i8 %frombool171, i8* %verifier_zext, align 4
  br label %if.end172

if.end172:                                        ; preds = %if.then162, %land.lhs.true158, %if.end155
  %ret.6 = phi i32 [ 0, %land.lhs.true158 ], [ %call163, %if.then162 ], [ %ret.5, %if.end155 ]
  %cmp173 = icmp eq i32 %ret.6, 0
  br i1 %cmp173, label %if.then175, label %if.end177

if.then175:                                       ; preds = %if.end172
  %call176 = call fastcc i32 @fixup_call_args(%struct.bpf_verifier_env* noundef nonnull %i) #22
  br label %if.end177

if.end177:                                        ; preds = %if.then175, %if.end172
  %ret.7 = phi i32 [ %call176, %if.then175 ], [ %ret.6, %if.end172 ]
  %call178 = call fastcc i64 @ktime_get_ns() #22
  %sub = sub i64 %call178, %call
  %verification_time = getelementptr inbounds i8, i8* %call1, i64 4792
  %i167 = bitcast i8* %verification_time to i64*
  store i64 %sub, i64* %i167, align 8
  call fastcc void @print_verification_stats(%struct.bpf_verifier_env* noundef nonnull %i) #22
  %level179 = bitcast i8* %log2 to i32*
  %i168 = load i32, i32* %level179, align 8
  %tobool180.not = icmp eq i32 %i168, 0
  br i1 %tobool180.not, label %if.end185, label %land.lhs.true181

land.lhs.true181:                                 ; preds = %if.end177
  %i116.idx = getelementptr i8, i8* %call1, i64 1648
  %3 = bitcast i8* %i116.idx to i32*
  %i116.idx.val = load i32, i32* %3, align 8
  %i116.idx1 = getelementptr i8, i8* %call1, i64 1652
  %4 = bitcast i8* %i116.idx1 to i32*
  %i116.idx1.val = load i32, i32* %4, align 4
  %call182 = call fastcc zeroext i1 @bpf_verifier_log_full(i32 %i116.idx.val, i32 %i116.idx1.val) #22
  %spec.select = select i1 %call182, i32 -28, i32 %ret.7
  br label %if.end185

if.end185:                                        ; preds = %land.lhs.true181, %if.end177
  %ret.8 = phi i32 [ %ret.7, %if.end177 ], [ %spec.select, %land.lhs.true181 ]
  br i1 %tobool180.not, label %if.end192, label %land.lhs.true188

land.lhs.true188:                                 ; preds = %if.end185
  %ubuf189 = getelementptr inbounds i8, i8* %call1, i64 1640
  %i169 = bitcast i8* %ubuf189 to i8**
  %i170 = load i8*, i8** %i169, align 8
  %tobool190.not = icmp eq i8* %i170, null
  br i1 %tobool190.not, label %err_release_maps, label %if.end192

if.end192:                                        ; preds = %land.lhs.true188, %if.end185
  %cmp193 = icmp eq i32 %ret.8, 0
  br i1 %cmp193, label %land.lhs.true195, label %err_release_maps

land.lhs.true195:                                 ; preds = %if.end192
  %used_map_cnt = getelementptr inbounds i8, i8* %call1, i64 576
  %i171 = bitcast i8* %used_map_cnt to i32*
  %i172 = load i32, i32* %i171, align 8
  %tobool196.not = icmp eq i32 %i172, 0
  br i1 %tobool196.not, label %if.then222, label %if.then197

if.then197:                                       ; preds = %land.lhs.true195
  %conv199 = zext i32 %i172 to i64
  %call200 = call fastcc i8* @kmalloc_array(i64 noundef %conv199, i64 noundef 8, i32 noundef 3264) #22
  %i173 = load %struct.bpf_prog*, %struct.bpf_prog** %i134, align 8
  %aux202 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i173, i64 0, i32 7
  %i174 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux202, align 8
  %used_maps = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i174, i64 0, i32 16
  %i175 = bitcast %struct.bpf_map*** %used_maps to i8**
  store i8* %call200, i8** %i175, align 8
  %i176 = load %struct.bpf_prog*, %struct.bpf_prog** %i134, align 8
  %aux204 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i176, i64 0, i32 7
  %i177 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux204, align 8
  %used_maps205 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i177, i64 0, i32 16
  %i178 = load %struct.bpf_map**, %struct.bpf_map*** %used_maps205, align 8
  %tobool206.not = icmp eq %struct.bpf_map** %i178, null
  br i1 %tobool206.not, label %err_release_maps, label %if.end208

if.end208:                                        ; preds = %if.then197
  %i179 = bitcast %struct.bpf_map** %i178 to i8*
  %used_maps212 = getelementptr inbounds i8, i8* %call1, i64 64
  %i180 = load i32, i32* %i171, align 8
  %conv214 = zext i32 %i180 to i64
  %mul = shl nuw nsw i64 %conv214, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %i179, i8* align 8 %used_maps212, i64 %mul, i1 false)
  %i181 = load i32, i32* %i171, align 8
  %i182 = load %struct.bpf_prog*, %struct.bpf_prog** %i134, align 8
  %aux217 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i182, i64 0, i32 7
  %i183 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux217, align 8
  %used_map_cnt218 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i183, i64 0, i32 1
  store i32 %i181, i32* %used_map_cnt218, align 4
  %i.idx4 = getelementptr i8, i8* %call1, i64 8
  %5 = bitcast i8* %i.idx4 to %struct.bpf_prog**
  %i.idx4.val = load %struct.bpf_prog*, %struct.bpf_prog** %5, align 8
  call fastcc void @convert_pseudo_ld_imm64(%struct.bpf_prog* %i.idx4.val) #22
  br label %if.then222

if.then222:                                       ; preds = %if.end208, %land.lhs.true195
  call fastcc void @adjust_btf_func(%struct.bpf_verifier_env* noundef nonnull %i) #22
  br label %err_release_maps

err_release_maps:                                 ; preds = %if.then222, %if.then197, %if.end192, %land.lhs.true188
  %ret.9 = phi i32 [ 0, %if.then222 ], [ -14, %land.lhs.true188 ], [ -12, %if.then197 ], [ %ret.8, %if.end192 ]
  %i184 = load %struct.bpf_prog*, %struct.bpf_prog** %i134, align 8
  %aux225 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i184, i64 0, i32 7
  %i185 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux225, align 8
  %used_maps226 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i185, i64 0, i32 16
  %i186 = load %struct.bpf_map**, %struct.bpf_map*** %used_maps226, align 8
  %tobool227.not = icmp eq %struct.bpf_map** %i186, null
  br i1 %tobool227.not, label %if.then228, label %if.end229

if.then228:                                       ; preds = %err_release_maps
  call fastcc void @release_maps(%struct.bpf_verifier_env* noundef nonnull %i) #22
  br label %if.end229

if.end229:                                        ; preds = %if.then228, %err_release_maps
  %i187 = load %struct.bpf_prog*, %struct.bpf_prog** %i134, align 8
  store %struct.bpf_prog* %i187, %struct.bpf_prog** %prog, align 8
  br label %err_unlock

err_unlock:                                       ; preds = %if.end229, %lor.lhs.false38, %if.then24
  %ret.10 = phi i32 [ -22, %if.then24 ], [ %ret.9, %if.end229 ], [ -22, %lor.lhs.false38 ]
  br i1 %call16, label %if.end233, label %if.then232

if.then232:                                       ; preds = %err_unlock
  call void @mutex_unlock(%struct.mutex* noundef nonnull @bpf_verifier_lock) #23
  br label %if.end233

if.end233:                                        ; preds = %if.then232, %err_unlock
  %i188 = load i8*, i8** %i120, align 8
  call void @vfree(i8* noundef %i188) #23
  br label %err_free_env

err_free_env:                                     ; preds = %if.end233, %if.end
  %ret.11 = phi i32 [ %ret.10, %if.end233 ], [ -12, %if.end ]
  call void @kfree(i8* noundef nonnull %call1) #23
  br label %return

return:                                           ; preds = %err_free_env, %entry
  %retval.0 = phi i32 [ %ret.11, %err_free_env ], [ -12, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i64 @ktime_get_ns() unnamed_addr #6 {
entry:
  %call = call i64 @ktime_get() #23
  ret i64 %call
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc noalias i8* @kzalloc(i64 noundef %size) unnamed_addr #6 {
entry:
  %call10.i = call noalias align 8 i8* @__kmalloc(i64 noundef %size, i32 noundef 3520) #23
  ret i8* %call10.i
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc i64 @array_size(i64 noundef %a, i64 noundef %b) unnamed_addr #14 {
entry:
  %i = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %a, i64 %b)
  %i2 = extractvalue { i64, i1 } %i, 1
  %i3 = extractvalue { i64, i1 } %i, 0
  %retval.0 = select i1 %i2, i64 -1, i64 %i3
  ret i64 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i8* @vzalloc(i64 noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local zeroext i1 @capable(i32 noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @mutex_lock(%struct.mutex* noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @replace_map_fd_with_map_ptr(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %addr = alloca i64, align 8
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i331 = load i32, i32* %len, align 4
  %call = call i32 @bpf_prog_calc_tag(%struct.bpf_prog* noundef %i) #23
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %cmp174 = icmp sgt i32 %i331, 0
  br i1 %cmp174, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %if.end
  %i332 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i332 to %struct.bpf_insn*
  %sub = add i32 %i331, -1
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %used_map_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 12
  br label %for.body

for.body:                                         ; preds = %for.inc199, %for.body.lr.ph
  %insn.0176 = phi %struct.bpf_insn* [ %arraydecay, %for.body.lr.ph ], [ %incdec.ptr201, %for.inc199 ]
  %i.0175 = phi i32 [ 0, %for.body.lr.ph ], [ %inc200, %for.inc199 ]
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 0, i32 0
  %i333 = load i8, i8* %code, align 4
  %conv = zext i8 %i333 to i32
  %and = and i32 %conv, 7
  br label %NodeBlock

NodeBlock:                                        ; preds = %for.body
  %Pivot = icmp ult i32 %and, 3
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %and, 3
  br i1 %SwitchLeaf2, label %land.lhs.true19, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %and, 1
  br i1 %SwitchLeaf, label %land.lhs.true, label %NewDefault

land.lhs.true:                                    ; preds = %LeafBlock
  %and7 = and i32 %conv, 224
  %cmp8.not = icmp eq i32 %and7, 96
  br i1 %cmp8.not, label %lor.lhs.false, label %if.then12

lor.lhs.false:                                    ; preds = %land.lhs.true
  %imm = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 0, i32 3
  %i334 = load i32, i32* %imm, align 4
  %cmp10.not = icmp eq i32 %i334, 0
  br i1 %cmp10.not, label %if.end36, label %if.then12

if.then12:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %i335 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i335, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0)) #22
  br label %return

land.lhs.true19:                                  ; preds = %LeafBlock1
  %and22 = and i8 %i333, -32
  br label %NodeBlock8

NodeBlock8:                                       ; preds = %land.lhs.true19
  %Pivot9.not = icmp eq i8 %and22, 96
  br i1 %Pivot9.not, label %LeafBlock6, label %LeafBlock4

LeafBlock6:                                       ; preds = %NodeBlock8
  br i1 true, label %lor.lhs.false31, label %NewDefault3

LeafBlock4:                                       ; preds = %NodeBlock8
  %SwitchLeaf5 = icmp eq i8 %and22, -64
  br i1 %SwitchLeaf5, label %lor.lhs.false31, label %NewDefault3

lor.lhs.false31:                                  ; preds = %LeafBlock4, %LeafBlock6
  %imm32 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 0, i32 3
  %i336 = load i32, i32* %imm32, align 4
  %cmp33.not = icmp eq i32 %i336, 0
  br i1 %cmp33.not, label %if.end36, label %if.then35

NewDefault3:                                      ; preds = %LeafBlock4, %LeafBlock6
  br label %if.then35

if.then35:                                        ; preds = %NewDefault3, %lor.lhs.false31
  %i337 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i337, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0)) #22
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end36

if.end36:                                         ; preds = %NewDefault, %lor.lhs.false31, %lor.lhs.false
  %cmp39 = icmp eq i8 %i333, 24
  br i1 %cmp39, label %if.then41, label %if.end192

if.then41:                                        ; preds = %if.end36
  %cmp42 = icmp eq i32 %i.0175, %sub
  br i1 %cmp42, label %if.then66, label %lor.lhs.false44

lor.lhs.false44:                                  ; preds = %if.then41
  %code46 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 1, i32 0
  %i338 = load i8, i8* %code46, align 4
  %cmp48.not = icmp eq i8 %i338, 0
  br i1 %cmp48.not, label %lor.lhs.false50, label %if.then66

lor.lhs.false50:                                  ; preds = %lor.lhs.false44
  %dst_reg = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 1, i32 1
  %bf.load = load i8, i8* %dst_reg, align 1
  %i339 = icmp eq i8 %bf.load, 0
  br i1 %i339, label %lor.lhs.false61, label %if.then66

lor.lhs.false61:                                  ; preds = %lor.lhs.false50
  %off = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 1, i32 2
  %i340 = load i16, i16* %off, align 2
  %cmp64.not = icmp eq i16 %i340, 0
  br i1 %cmp64.not, label %if.end67, label %if.then66

if.then66:                                        ; preds = %lor.lhs.false61, %lor.lhs.false50, %lor.lhs.false44, %if.then41
  %i341 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i341, i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0)) #22
  br label %return

if.end67:                                         ; preds = %lor.lhs.false61
  %src_reg69 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 0, i32 1
  %bf.load70 = load i8, i8* %src_reg69, align 1
  %cmp73 = icmp ult i8 %bf.load70, 16
  br i1 %cmp73, label %next_insn, label %if.end76

if.end76:                                         ; preds = %if.end67
  %bf.lshr71 = lshr i8 %bf.load70, 4
  %bf.lshr71.off = add nsw i8 %bf.lshr71, -1
  %switch = icmp ult i8 %bf.lshr71.off, 2
  br i1 %switch, label %lor.lhs.false92, label %if.then105

lor.lhs.false92:                                  ; preds = %if.end76
  %bf.lshr96.mask = and i8 %bf.load70, -16
  %cmp98 = icmp eq i8 %bf.lshr96.mask, 16
  br i1 %cmp98, label %land.lhs.true100, label %if.end106

land.lhs.true100:                                 ; preds = %lor.lhs.false92
  %imm102 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 1, i32 3
  %i342 = load i32, i32* %imm102, align 4
  %cmp103.not = icmp eq i32 %i342, 0
  br i1 %cmp103.not, label %if.end106, label %if.then105

if.then105:                                       ; preds = %land.lhs.true100, %if.end76
  %i343 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i343, i8* noundef getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i64 0, i64 0)) #22
  br label %return

if.end106:                                        ; preds = %land.lhs.true100, %lor.lhs.false92
  %imm108 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 0, i32 3
  %i344 = load i32, i32* %imm108, align 4
  %call109 = call fastcc { %struct.file*, i32 } @fdget(i32 noundef %i344) #22
  %i345 = extractvalue { %struct.file*, i32 } %call109, 0
  %i346 = extractvalue { %struct.file*, i32 } %call109, 1
  %call110 = call %struct.bpf_map* @__bpf_map_get(%struct.file* %i345, i32 %i346) #23
  %i347 = bitcast %struct.bpf_map* %call110 to i8*
  %call111 = call fastcc zeroext i1 @IS_ERR(i8* noundef %i347) #22
  br i1 %call111, label %if.then112, label %if.end117

if.then112:                                       ; preds = %if.end106
  %i347.le = bitcast %struct.bpf_map* %call110 to i8*
  %i349 = bitcast %struct.bpf_verifier_env* %env to i8*
  %i350 = load i32, i32* %imm108, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i349, i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i64 0, i64 0), i32 noundef %i350) #22
  %call115 = call fastcc i64 @PTR_ERR(i8* noundef %i347.le) #22
  %conv116 = trunc i64 %call115 to i32
  br label %return

if.end117:                                        ; preds = %if.end106
  %i351 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %call119 = call fastcc i32 @check_map_prog_compatibility(%struct.bpf_verifier_env* noundef %env, %struct.bpf_map* noundef %call110, %struct.bpf_prog* noundef %i351) #22
  %tobool120.not = icmp eq i32 %call119, 0
  br i1 %tobool120.not, label %if.end122, label %if.then121

if.then121:                                       ; preds = %if.end117
  %i345.le70 = extractvalue { %struct.file*, i32 } %call109, 0
  %i346.le59 = extractvalue { %struct.file*, i32 } %call109, 1
  call fastcc void @fdput(%struct.file* %i345.le70, i32 %i346.le59) #22
  br label %return

if.end122:                                        ; preds = %if.end117
  %i354 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %idxprom = sext i32 %i.0175 to i64
  %arrayidx123 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i354, i64 %idxprom
  %bf.load125 = load i8, i8* %src_reg69, align 1
  %bf.lshr126.mask = and i8 %bf.load125, -16
  %cmp128 = icmp eq i8 %bf.lshr126.mask, 16
  br i1 %cmp128, label %if.then130, label %if.else

if.then130:                                       ; preds = %if.end122
  %i355 = ptrtoint %struct.bpf_map* %call110 to i64
  br label %if.end148

if.else:                                          ; preds = %if.end122
  %imm133 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 1, i32 3
  %i356 = load i32, i32* %imm133, align 4
  %cmp134 = icmp ugt i32 %i356, 536870911
  br i1 %cmp134, label %if.then136, label %if.end137

if.then136:                                       ; preds = %if.else
  %i345.le68 = extractvalue { %struct.file*, i32 } %call109, 0
  %i346.le57 = extractvalue { %struct.file*, i32 } %call109, 1
  %i359 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i359, i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.12, i64 0, i64 0), i32 noundef %i356) #22
  call fastcc void @fdput(%struct.file* %i345.le68, i32 %i346.le57) #22
  br label %return

if.end137:                                        ; preds = %if.else
  %ops = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %call110, i64 0, i32 0
  %i360 = load %struct.bpf_map_ops*, %struct.bpf_map_ops** %ops, align 64
  %map_direct_value_addr = getelementptr inbounds %struct.bpf_map_ops, %struct.bpf_map_ops* %i360, i64 0, i32 19
  %i361 = load i32 (%struct.bpf_map*, i64*, i32)*, i32 (%struct.bpf_map*, i64*, i32)** %map_direct_value_addr, align 8
  %tobool138.not = icmp eq i32 (%struct.bpf_map*, i64*, i32)* %i361, null
  br i1 %tobool138.not, label %if.then139, label %if.end140

if.then139:                                       ; preds = %if.end137
  %i345.le66 = extractvalue { %struct.file*, i32 } %call109, 0
  %i346.le55 = extractvalue { %struct.file*, i32 } %call109, 1
  %i364 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i364, i8* noundef getelementptr inbounds ([50 x i8], [50 x i8]* @.str.13, i64 0, i64 0)) #22
  call fastcc void @fdput(%struct.file* %i345.le66, i32 %i346.le55) #22
  br label %return

if.end140:                                        ; preds = %if.end137
  %call143 = call i32 %i361(%struct.bpf_map* noundef %call110, i64* noundef nonnull %addr, i32 noundef %i356) #23
  %tobool144.not = icmp eq i32 %call143, 0
  br i1 %tobool144.not, label %if.end146, label %if.then145

if.then145:                                       ; preds = %if.end140
  %i345.le64 = extractvalue { %struct.file*, i32 } %call109, 0
  %i346.le53 = extractvalue { %struct.file*, i32 } %call109, 1
  %i367 = bitcast %struct.bpf_verifier_env* %env to i8*
  %value_size = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %call110, i64 0, i32 5
  %i368 = load i32, i32* %value_size, align 32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i367, i8* noundef getelementptr inbounds ([59 x i8], [59 x i8]* @.str.14, i64 0, i64 0), i32 noundef %i368, i32 noundef %i356) #22
  call fastcc void @fdput(%struct.file* %i345.le64, i32 %i346.le53) #22
  br label %return

if.end146:                                        ; preds = %if.end140
  %i369 = bitcast %struct.bpf_insn_aux_data* %arrayidx123 to %struct.util_est*
  %map_off = getelementptr inbounds %struct.util_est, %struct.util_est* %i369, i64 0, i32 1
  store i32 %i356, i32* %map_off, align 4
  %conv147 = zext i32 %i356 to i64
  %i370 = load i64, i64* %addr, align 8
  %add = add i64 %i370, %conv147
  br label %if.end148

if.end148:                                        ; preds = %if.end146, %if.then130
  %storemerge = phi i64 [ %add, %if.end146 ], [ %i355, %if.then130 ]
  store i64 %storemerge, i64* %addr, align 8
  %conv149 = trunc i64 %storemerge to i32
  store i32 %conv149, i32* %imm108, align 4
  %i371 = load i64, i64* %addr, align 8
  %shr = lshr i64 %i371, 32
  %conv152 = trunc i64 %shr to i32
  %imm154 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 1, i32 3
  store i32 %conv152, i32* %imm154, align 4
  %i372 = load i32, i32* %used_map_cnt, align 8
  %cmp156161.not = icmp eq i32 %i372, 0
  br i1 %cmp156161.not, label %for.end, label %for.body158

for.body158:                                      ; preds = %for.inc, %if.end148
  %j.0162 = phi i32 [ %inc, %for.inc ], [ 0, %if.end148 ]
  %idxprom159 = sext i32 %j.0162 to i64
  %arrayidx160 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 11, i64 %idxprom159
  %i373 = load %struct.bpf_map*, %struct.bpf_map** %arrayidx160, align 8
  %cmp161 = icmp eq %struct.bpf_map* %i373, %call110
  br i1 %cmp161, label %if.then163, label %for.inc

if.then163:                                       ; preds = %for.body158
  %map_index = bitcast %struct.bpf_insn_aux_data* %arrayidx123 to i32*
  store i32 %j.0162, i32* %map_index, align 8
  br label %next_insn.sink.split

for.inc:                                          ; preds = %for.body158
  %inc = add nuw i32 %j.0162, 1
  %exitcond.not = icmp eq i32 %inc, %i372
  br i1 %exitcond.not, label %for.end, label %for.body158

for.end:                                          ; preds = %for.inc, %if.end148
  %cmp166 = icmp ugt i32 %i372, 63
  br i1 %cmp166, label %if.then168, label %if.end169

if.then168:                                       ; preds = %for.end
  %i345.le62 = extractvalue { %struct.file*, i32 } %call109, 0
  %i346.le51 = extractvalue { %struct.file*, i32 } %call109, 1
  call fastcc void @fdput(%struct.file* %i345.le62, i32 %i346.le51) #22
  br label %return

if.end169:                                        ; preds = %for.end
  %call170 = call %struct.bpf_map* @bpf_map_inc(%struct.bpf_map* noundef %call110, i1 noundef zeroext false) #23
  %i376 = bitcast %struct.bpf_map* %call170 to i8*
  %call171 = call fastcc zeroext i1 @IS_ERR(i8* noundef %i376) #22
  br i1 %call171, label %if.then172, label %if.end175

if.then172:                                       ; preds = %if.end169
  %i345.le = extractvalue { %struct.file*, i32 } %call109, 0
  %i346.le = extractvalue { %struct.file*, i32 } %call109, 1
  %i376.le = bitcast %struct.bpf_map* %call170 to i8*
  call fastcc void @fdput(%struct.file* %i345.le, i32 %i346.le) #22
  %call173 = call fastcc i64 @PTR_ERR(i8* noundef %i376.le) #22
  %conv174 = trunc i64 %call173 to i32
  br label %return

if.end175:                                        ; preds = %if.end169
  %i380 = load i32, i32* %used_map_cnt, align 8
  %map_index177 = bitcast %struct.bpf_insn_aux_data* %arrayidx123 to i32*
  store i32 %i380, i32* %map_index177, align 8
  %i381 = load i32, i32* %used_map_cnt, align 8
  %inc180 = add i32 %i381, 1
  store i32 %inc180, i32* %used_map_cnt, align 8
  %idxprom181 = zext i32 %i381 to i64
  %arrayidx182 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 11, i64 %idxprom181
  store %struct.bpf_map* %call170, %struct.bpf_map** %arrayidx182, align 8
  br label %next_insn.sink.split

next_insn.sink.split:                             ; preds = %if.end175, %if.then163
  call fastcc void @fdput(%struct.file* %i345, i32 %i346) #22
  br label %next_insn

next_insn:                                        ; preds = %next_insn.sink.split, %if.end67
  %incdec.ptr = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 1
  %inc191 = add i32 %i.0175, 1
  br label %for.inc199

if.end192:                                        ; preds = %if.end36
  %call194 = call zeroext i1 @bpf_opcode_in_insntable(i8 noundef zeroext %i333) #23
  br i1 %call194, label %for.inc199, label %if.then195

if.then195:                                       ; preds = %if.end192
  %code.le = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0176, i64 0, i32 0
  %i382 = bitcast %struct.bpf_verifier_env* %env to i8*
  %i383 = load i8, i8* %code.le, align 4
  %conv197 = zext i8 %i383 to i32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i382, i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i64 0, i64 0), i32 noundef %conv197) #22
  br label %return

for.inc199:                                       ; preds = %if.end192, %next_insn
  %i.1 = phi i32 [ %inc191, %next_insn ], [ %i.0175, %if.end192 ]
  %insn.1 = phi %struct.bpf_insn* [ %incdec.ptr, %next_insn ], [ %insn.0176, %if.end192 ]
  %inc200 = add i32 %i.1, 1
  %incdec.ptr201 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.1, i64 1
  %cmp = icmp slt i32 %inc200, %i331
  br i1 %cmp, label %for.body, label %return

return:                                           ; preds = %for.inc199, %if.then195, %if.then172, %if.then168, %if.then145, %if.then139, %if.then136, %if.then121, %if.then112, %if.then105, %if.then66, %if.then35, %if.then12, %if.end, %entry
  %retval.0 = phi i32 [ -22, %if.then12 ], [ -22, %if.then35 ], [ -22, %if.then66 ], [ -22, %if.then105 ], [ %conv116, %if.then112 ], [ %call119, %if.then121 ], [ -7, %if.then168 ], [ %conv174, %if.then172 ], [ -22, %if.then136 ], [ %call143, %if.then145 ], [ -22, %if.then139 ], [ -22, %if.then195 ], [ %call, %entry ], [ 0, %if.end ], [ 0, %for.inc199 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %aux.0.10.val) unnamed_addr #7 {
entry:
  %i1 = and i8 %aux.0.10.val, 1
  %tobool = icmp ne i8 %i1, 0
  ret i1 %tobool
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_prog_offload_verifier_prep(%struct.bpf_prog* noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc i32 @state_htab_size(i32 %env.0.2.val.0.4.val) unnamed_addr #7 {
entry:
  ret i32 %env.0.2.val.0.4.val
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i8* @kvcalloc(i64 noundef %n, i64 noundef %size, i32 noundef %flags) unnamed_addr #6 {
entry:
  %or = or i32 %flags, 256
  %call = call fastcc i8* @kvmalloc_array(i64 noundef %n, i64 noundef %size, i32 noundef %or) #22
  ret i8* %call
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_subprogs(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %i91 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %arraydecay1 = bitcast %union.anon.146* %i91 to %struct.bpf_insn*
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i92 = load i32, i32* %len, align 4
  %call = call fastcc i32 @add_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef 0) #22
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %cmp360 = icmp sgt i32 %i92, 0
  br i1 %cmp360, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %wide.trip.count = zext i32 %i92 to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %code = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay1, i64 %indvars.iv, i32 0
  %i93 = load i8, i8* %code, align 4
  %cmp4.not = icmp eq i8 %i93, -123
  br i1 %cmp4.not, label %if.end7, label %for.inc

if.end7:                                          ; preds = %for.body
  %src_reg = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay1, i64 %indvars.iv, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %bf.lshr.mask = and i8 %bf.load, -16
  %cmp11.not = icmp eq i8 %bf.lshr.mask, 16
  br i1 %cmp11.not, label %if.end14, label %for.inc

if.end14:                                         ; preds = %if.end7
  %i94 = load i8, i8* %allow_ptr_leaks, align 8
  %i95 = and i8 %i94, 1
  %tobool.not = icmp eq i8 %i95, 0
  br i1 %tobool.not, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end14
  %i96 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i96, i8* noundef getelementptr inbounds ([65 x i8], [65 x i8]* @.str.21, i64 0, i64 0)) #22
  br label %return

if.end16:                                         ; preds = %if.end14
  %imm = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay1, i64 %indvars.iv, i32 3
  %i97 = load i32, i32* %imm, align 4
  %i98 = trunc i64 %indvars.iv to i32
  %i99 = add i32 %i98, 1
  %add19 = add i32 %i99, %i97
  %call20 = call fastcc i32 @add_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef %add19) #22
  %cmp21 = icmp slt i32 %call20, 0
  br i1 %cmp21, label %return, label %for.inc

for.inc:                                          ; preds = %if.end16, %if.end7, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %for.cond.preheader
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i100 = load i32, i32* %subprog_cnt, align 8
  %idxprom25 = zext i32 %i100 to i64
  %start = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom25, i32 0
  store i32 %i92, i32* %start, align 4
  %level = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i101 = load i32, i32* %level, align 8
  %and = and i32 %i101, 2
  %tobool27.not = icmp eq i32 %and, 0
  br i1 %tobool27.not, label %if.end40, label %for.cond29.preheader

for.cond29.preheader:                             ; preds = %for.end
  %i102 = load i32, i32* %subprog_cnt, align 8
  %cmp3162.not = icmp eq i32 %i102, 0
  br i1 %cmp3162.not, label %if.end40, label %for.body33.lr.ph

for.body33.lr.ph:                                 ; preds = %for.cond29.preheader
  %i103 = bitcast %struct.bpf_verifier_env* %env to i8*
  br label %for.body33

for.body33:                                       ; preds = %for.body33, %for.body33.lr.ph
  %i.163 = phi i32 [ 0, %for.body33.lr.ph ], [ %inc38, %for.body33 ]
  %idxprom34 = sext i32 %i.163 to i64
  %start36 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom34, i32 0
  %i104 = load i32, i32* %start36, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i103, i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i64 0, i64 0), i32 noundef %i.163, i32 noundef %i104) #22
  %inc38 = add nuw i32 %i.163, 1
  %i105 = load i32, i32* %subprog_cnt, align 8
  %cmp31 = icmp ult i32 %inc38, %i105
  br i1 %cmp31, label %for.body33, label %if.end40

if.end40:                                         ; preds = %for.body33, %for.cond29.preheader, %for.end
  br i1 %cmp360, label %for.body51.preheader, label %return

for.body51.preheader:                             ; preds = %if.end40
  %start47 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 1, i32 0
  %i106 = load i32, i32* %start47, align 4
  %start43 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 0, i32 0
  %i107 = load i32, i32* %start43, align 4
  %wide.trip.count81 = zext i32 %i92 to i64
  br label %for.body51

for.body51:                                       ; preds = %for.inc112, %for.body51.preheader
  %indvars.iv77 = phi i64 [ 0, %for.body51.preheader ], [ %indvars.iv.next78, %for.inc112 ]
  %subprog_start.068 = phi i32 [ %i107, %for.body51.preheader ], [ %subprog_start.1, %for.inc112 ]
  %cur_subprog.067 = phi i32 [ 0, %for.body51.preheader ], [ %cur_subprog.1, %for.inc112 ]
  %subprog_end.065 = phi i32 [ %i106, %for.body51.preheader ], [ %subprog_end.1, %for.inc112 ]
  %indvars80 = trunc i64 %indvars.iv77 to i32
  %code55 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay1, i64 %indvars.iv77, i32 0
  %i108 = load i8, i8* %code55, align 4
  %i109 = and i8 %i108, 7
  %and57 = zext i8 %i109 to i32
  %and57.off = add nsw i32 %and57, -5
  %switch = icmp ult i32 %and57.off, 2
  br i1 %switch, label %if.end65, label %next

if.end65:                                         ; preds = %for.body51
  %and67 = and i8 %i108, -16
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end65
  %Pivot = icmp slt i8 %and67, -112
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %and67, -112
  br i1 %SwitchLeaf2, label %next, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %and67, -128
  br i1 %SwitchLeaf, label %next, label %NewDefault

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end75

if.end75:                                         ; preds = %NewDefault
  %off78 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay1, i64 %indvars.iv77, i32 2
  %i110 = load i16, i16* %off78, align 2
  %conv79 = sext i16 %i110 to i32
  %add80 = add nuw nsw i32 %indvars80, 1
  %add81 = add i32 %add80, %conv79
  %cmp82 = icmp sge i32 %add81, %subprog_start.068
  %cmp85.not = icmp slt i32 %add81, %subprog_end.065
  %or.cond56 = select i1 %cmp82, i1 %cmp85.not, i1 false
  br i1 %or.cond56, label %next, label %if.then87

if.then87:                                        ; preds = %if.end75
  %indvars80.le = trunc i64 %indvars.iv77 to i32
  %i112 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i112, i8* noundef getelementptr inbounds ([38 x i8], [38 x i8]* @.str.23, i64 0, i64 0), i32 noundef %indvars80.le, i32 noundef %add81) #22
  br label %return

next:                                             ; preds = %if.end75, %LeafBlock, %LeafBlock1, %for.body51
  %sub = add i32 %subprog_end.065, -1
  %i113 = zext i32 %sub to i64
  %cmp89 = icmp eq i64 %indvars.iv77, %i113
  br i1 %cmp89, label %if.then91, label %for.inc112

if.then91:                                        ; preds = %next
  br label %NodeBlock8

NodeBlock8:                                       ; preds = %if.then91
  %Pivot9 = icmp slt i8 %i108, 5
  br i1 %Pivot9, label %LeafBlock4, label %LeafBlock6

LeafBlock6:                                       ; preds = %NodeBlock8
  %SwitchLeaf7 = icmp eq i8 %i108, 5
  br i1 %SwitchLeaf7, label %if.end100, label %NewDefault3

LeafBlock4:                                       ; preds = %NodeBlock8
  %SwitchLeaf5 = icmp eq i8 %i108, -107
  br i1 %SwitchLeaf5, label %if.end100, label %NewDefault3

NewDefault3:                                      ; preds = %LeafBlock4, %LeafBlock6
  br label %if.then99

if.then99:                                        ; preds = %NewDefault3
  %i114 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i114, i8* noundef getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i64 0, i64 0)) #22
  br label %return

if.end100:                                        ; preds = %LeafBlock4, %LeafBlock6
  %inc101 = add i32 %cur_subprog.067, 1
  %i115 = load i32, i32* %subprog_cnt, align 8
  %cmp103 = icmp ult i32 %inc101, %i115
  br i1 %cmp103, label %if.then105, label %for.inc112

if.then105:                                       ; preds = %if.end100
  %add106 = add i32 %cur_subprog.067, 2
  %idxprom107 = sext i32 %add106 to i64
  %start109 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom107, i32 0
  %i116 = load i32, i32* %start109, align 4
  br label %for.inc112

for.inc112:                                       ; preds = %if.then105, %if.end100, %next
  %subprog_end.1 = phi i32 [ %i116, %if.then105 ], [ %subprog_end.065, %if.end100 ], [ %subprog_end.065, %next ]
  %cur_subprog.1 = phi i32 [ %inc101, %if.then105 ], [ %inc101, %if.end100 ], [ %cur_subprog.067, %next ]
  %subprog_start.1 = phi i32 [ %subprog_end.065, %if.then105 ], [ %subprog_end.065, %if.end100 ], [ %subprog_start.068, %next ]
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %exitcond82.not = icmp eq i64 %indvars.iv.next78, %wide.trip.count81
  br i1 %exitcond82.not, label %return, label %for.body51

return:                                           ; preds = %for.inc112, %if.then99, %if.then87, %if.end40, %if.end16, %if.then15, %entry
  %retval.0 = phi i32 [ -1, %if.then15 ], [ -22, %if.then99 ], [ -22, %if.then87 ], [ %call, %entry ], [ 0, %if.end40 ], [ 0, %for.inc112 ], [ %call20, %if.end16 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_btf_info(%struct.bpf_verifier_env* noundef %env, %union.bpf_attr* nocapture noundef readonly %attr, %union.bpf_attr* noundef %uattr) unnamed_addr #6 {
entry:
  %func_info_cnt = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 15
  %i = load i32, i32* %func_info_cnt, align 8
  %tobool.not = icmp eq i32 %i, 0
  br i1 %tobool.not, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %line_info_cnt = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 18
  %i13 = load i32, i32* %line_info_cnt, align 8
  %tobool1.not = icmp eq i32 %i13, 0
  br i1 %tobool1.not, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true, %entry
  %prog_btf_fd = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 12
  %i14 = load i32, i32* %prog_btf_fd, align 8
  %call = call %struct.btf* @btf_get_by_fd(i32 noundef %i14) #23
  %i15 = bitcast %struct.btf* %call to i8*
  %call2 = call fastcc zeroext i1 @IS_ERR(i8* noundef %i15) #22
  br i1 %call2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = call fastcc i64 @PTR_ERR(i8* noundef %i15) #22
  %conv = trunc i64 %call4 to i32
  br label %return

if.end5:                                          ; preds = %if.end
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i16 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i16, i64 0, i32 7
  %i17 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %btf6 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i17, i64 0, i32 24
  store %struct.btf* %call, %struct.btf** %btf6, align 8
  %call7 = call fastcc i32 @check_btf_func(%struct.bpf_verifier_env* noundef %env, %union.bpf_attr* noundef %attr, %union.bpf_attr* noundef %uattr) #22
  %tobool8.not = icmp eq i32 %call7, 0
  br i1 %tobool8.not, label %if.end10, label %return

if.end10:                                         ; preds = %if.end5
  %call11 = call fastcc i32 @check_btf_line(%struct.bpf_verifier_env* noundef %env, %union.bpf_attr* noundef %attr, %union.bpf_attr* noundef %uattr) #22
  br label %return

return:                                           ; preds = %if.end10, %if.end5, %if.then3, %land.lhs.true
  %retval.0 = phi i32 [ %conv, %if.then3 ], [ 0, %land.lhs.true ], [ %call7, %if.end5 ], [ %call11, %if.end10 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_cfg(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %i102 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i102 to %struct.bpf_insn*
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i103 = load i32, i32* %len, align 4
  %conv = sext i32 %i103 to i64
  %call = call fastcc i8* @kvcalloc(i64 noundef %conv, i64 noundef 4, i32 noundef 3264) #22
  %i104 = bitcast i8* %call to i32*
  %cfg = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 20
  %i105 = bitcast %struct.anon.150* %cfg to i8**
  store i8* %call, i8** %i105, align 8
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call4 = call fastcc i8* @kvcalloc(i64 noundef %conv, i64 noundef 4, i32 noundef 3264) #22
  %i106 = bitcast i8* %call4 to i32*
  %insn_stack6 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 20, i32 1
  %i107 = bitcast i32** %insn_stack6 to i8**
  store i8* %call4, i8** %i107, align 8
  %tobool7.not = icmp eq i8* %call4, null
  br i1 %tobool7.not, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  call void @kvfree(i8* noundef nonnull %call) #23
  br label %return

if.end9:                                          ; preds = %if.end
  store i32 16, i32* %i104, align 4
  store i32 0, i32* %i106, align 4
  %cur_stack = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 20, i32 2
  store i32 1, i32* %cur_stack, align 8
  br label %if.end16

for.cond.preheader:                               ; preds = %peek_stack.backedge
  %cmp17793 = icmp sgt i32 %i103, 0
  br i1 %cmp17793, label %for.body, label %err_free

if.end16:                                         ; preds = %peek_stack.backedge, %if.end9
  %i108 = phi i32 [ %i112, %peek_stack.backedge ], [ 1, %if.end9 ]
  %sub = add i32 %i108, -1
  %idxprom = sext i32 %sub to i64
  %arrayidx19 = getelementptr i32, i32* %i106, i64 %idxprom
  %i109 = load i32, i32* %arrayidx19, align 4
  %idxprom20 = sext i32 %i109 to i64
  %code = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom20, i32 0
  %i110 = load i8, i8* %code, align 4
  %i111 = and i8 %i110, 7
  %.off = add nsw i8 %i111, -5
  %switch = icmp ult i8 %.off, 2
  br i1 %switch, label %if.then32, label %if.else156

if.then32:                                        ; preds = %if.end16
  %and37 = and i8 %i110, -16
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %if.then32
  %Pivot6 = icmp slt i8 %and37, -112
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i8 %and37, 0
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i8 %and37, 0
  br i1 %SwitchLeaf4, label %if.then88, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %and37, -112
  br i1 %SwitchLeaf2, label %mark_explored, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i8 %and37, -128
  br i1 %SwitchLeaf, label %if.then46, label %NewDefault

if.then46:                                        ; preds = %LeafBlock
  %add = add i32 %i109, 1
  %call47 = call fastcc i32 @push_insn(i32 noundef %i109, i32 noundef %add, i32 noundef 1, %struct.bpf_verifier_env* noundef %env, i1 noundef zeroext false) #22
  %cmp48 = icmp eq i32 %call47, 1
  br i1 %cmp48, label %peek_stack.backedge, label %if.else51

peek_stack.backedge:                              ; preds = %mark_explored, %if.else156, %if.end136, %if.else125, %if.end97, %if.then68, %if.then46
  %i112 = load i32, i32* %cur_stack, align 8
  %cmp = icmp eq i32 %i112, 0
  br i1 %cmp, label %for.cond.preheader, label %if.end16

if.else51:                                        ; preds = %if.then46
  %cmp52 = icmp slt i32 %call47, 0
  br i1 %cmp52, label %err_free, label %if.end56

if.end56:                                         ; preds = %if.else51
  %cmp58 = icmp slt i32 %add, %i103
  br i1 %cmp58, label %if.then60, label %if.end62

if.then60:                                        ; preds = %if.end56
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %env.idx.val = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %env.idx, align 8
  call fastcc void @init_explored_state(%struct.bpf_insn_aux_data* %env.idx.val, i32 noundef %add) #22
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %if.end56
  %src_reg = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom20, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %bf.lshr.mask = and i8 %bf.load, -16
  %cmp66 = icmp eq i8 %bf.lshr.mask, 16
  br i1 %cmp66, label %if.then68, label %mark_explored

if.then68:                                        ; preds = %if.end62
  %env.idx7 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %env.idx7.val = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %env.idx7, align 8
  call fastcc void @init_explored_state(%struct.bpf_insn_aux_data* %env.idx7.val, i32 noundef %i109) #22
  %imm = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom20, i32 3
  %i113 = load i32, i32* %imm, align 4
  %add72 = add i32 %i113, %add
  %call73 = call fastcc i32 @push_insn(i32 noundef %i109, i32 noundef %add72, i32 noundef 2, %struct.bpf_verifier_env* noundef %env, i1 noundef zeroext false) #22
  %cmp74 = icmp eq i32 %call73, 1
  br i1 %cmp74, label %peek_stack.backedge, label %if.else77

if.else77:                                        ; preds = %if.then68
  %cmp78 = icmp slt i32 %call73, 0
  br i1 %cmp78, label %err_free, label %mark_explored

if.then88:                                        ; preds = %LeafBlock3
  %i114 = and i8 %i110, 8
  %cmp94.not = icmp eq i8 %i114, 0
  br i1 %cmp94.not, label %if.end97, label %err_free

if.end97:                                         ; preds = %if.then88
  %off = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom20, i32 2
  %i115 = load i16, i16* %off, align 2
  %conv100 = sext i16 %i115 to i32
  %add101 = add i32 %i109, 1
  %add102 = add i32 %add101, %conv100
  %call103 = call fastcc i32 @push_insn(i32 noundef %i109, i32 noundef %add102, i32 noundef 1, %struct.bpf_verifier_env* noundef %env, i1 noundef zeroext true) #22
  %cmp104 = icmp eq i32 %call103, 1
  br i1 %cmp104, label %peek_stack.backedge, label %if.else107

if.else107:                                       ; preds = %if.end97
  %cmp108 = icmp slt i32 %call103, 0
  br i1 %cmp108, label %err_free, label %if.end112

if.end112:                                        ; preds = %if.else107
  %i116 = load i16, i16* %off, align 2
  %conv116 = sext i16 %i116 to i32
  %add118 = add i32 %add101, %conv116
  %env.idx8 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %env.idx8.val = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %env.idx8, align 8
  call fastcc void @init_explored_state(%struct.bpf_insn_aux_data* %env.idx8.val, i32 noundef %add118) #22
  %cmp120 = icmp slt i32 %add101, %i103
  br i1 %cmp120, label %if.then122, label %mark_explored

if.then122:                                       ; preds = %if.end112
  %env.idx9 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %env.idx9.val = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %env.idx9, align 8
  call fastcc void @init_explored_state(%struct.bpf_insn_aux_data* %env.idx9.val, i32 noundef %add101) #22
  br label %mark_explored

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3
  br label %if.else125

if.else125:                                       ; preds = %NewDefault
  %env.idx10 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %env.idx10.val = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %env.idx10, align 8
  call fastcc void @init_explored_state(%struct.bpf_insn_aux_data* %env.idx10.val, i32 noundef %i109) #22
  %add126 = add i32 %i109, 1
  %call127 = call fastcc i32 @push_insn(i32 noundef %i109, i32 noundef %add126, i32 noundef 1, %struct.bpf_verifier_env* noundef %env, i1 noundef zeroext true) #22
  %cmp128 = icmp eq i32 %call127, 1
  br i1 %cmp128, label %peek_stack.backedge, label %if.else131

if.else131:                                       ; preds = %if.else125
  %cmp132 = icmp slt i32 %call127, 0
  br i1 %cmp132, label %err_free, label %if.end136

if.end136:                                        ; preds = %if.else131
  %off139 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom20, i32 2
  %i117 = load i16, i16* %off139, align 2
  %conv140 = sext i16 %i117 to i32
  %add142 = add i32 %add126, %conv140
  %call143 = call fastcc i32 @push_insn(i32 noundef %i109, i32 noundef %add142, i32 noundef 2, %struct.bpf_verifier_env* noundef %env, i1 noundef zeroext true) #22
  %cmp144 = icmp eq i32 %call143, 1
  br i1 %cmp144, label %peek_stack.backedge, label %if.else147

if.else147:                                       ; preds = %if.end136
  %cmp148 = icmp slt i32 %call143, 0
  br i1 %cmp148, label %err_free, label %mark_explored

if.else156:                                       ; preds = %if.end16
  %add157 = add i32 %i109, 1
  %call158 = call fastcc i32 @push_insn(i32 noundef %i109, i32 noundef %add157, i32 noundef 1, %struct.bpf_verifier_env* noundef %env, i1 noundef zeroext false) #22
  %cmp159 = icmp eq i32 %call158, 1
  br i1 %cmp159, label %peek_stack.backedge, label %if.else162

if.else162:                                       ; preds = %if.else156
  %cmp163 = icmp slt i32 %call158, 0
  br i1 %cmp163, label %err_free, label %mark_explored

mark_explored:                                    ; preds = %if.else162, %if.else147, %if.then122, %if.end112, %if.else77, %if.end62, %LeafBlock1
  %arrayidx170 = getelementptr i32, i32* %i104, i64 %idxprom20
  store i32 32, i32* %arrayidx170, align 4
  %i118 = load i32, i32* %cur_stack, align 8
  %dec = add i32 %i118, -1
  store i32 %dec, i32* %cur_stack, align 8
  %cmp173 = icmp slt i32 %i118, 1
  br i1 %cmp173, label %if.then175, label %peek_stack.backedge

if.then175:                                       ; preds = %mark_explored
  %i119 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i119, i8* noundef getelementptr inbounds ([24 x i8], [24 x i8]* @.str.40, i64 0, i64 0)) #22
  br label %err_free

for.body:                                         ; preds = %for.inc, %for.cond.preheader
  %i.094 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond.preheader ]
  %idxprom179 = sext i32 %i.094 to i64
  %arrayidx180 = getelementptr i32, i32* %i104, i64 %idxprom179
  %i120 = load i32, i32* %arrayidx180, align 4
  %cmp181.not = icmp eq i32 %i120, 32
  br i1 %cmp181.not, label %for.inc, label %if.then183

if.then183:                                       ; preds = %for.body
  %i121 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i121, i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.41, i64 0, i64 0), i32 noundef %i.094) #22
  br label %err_free

for.inc:                                          ; preds = %for.body
  %inc = add nuw i32 %i.094, 1
  %exitcond.not = icmp eq i32 %inc, %i103
  br i1 %exitcond.not, label %err_free, label %for.body

err_free:                                         ; preds = %for.inc, %if.then183, %if.then175, %if.else162, %if.else147, %if.else131, %if.else107, %if.then88, %if.else77, %if.else51, %for.cond.preheader
  %ret.0 = phi i32 [ -22, %if.then183 ], [ -14, %if.then175 ], [ 0, %for.cond.preheader ], [ 0, %for.inc ], [ %call47, %if.else51 ], [ %call73, %if.else77 ], [ %call103, %if.else107 ], [ %call127, %if.else131 ], [ %call143, %if.else147 ], [ %call158, %if.else162 ], [ -22, %if.then88 ]
  call void @kvfree(i8* noundef nonnull %call) #23
  call void @kvfree(i8* noundef nonnull %call4) #23
  %i122 = bitcast %struct.anon.150* %cfg to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i122, i8 0, i64 16, i1 false)
  br label %return

return:                                           ; preds = %err_free, %if.then8, %entry
  %retval.0 = phi i32 [ %ret.0, %err_free ], [ -12, %if.then8 ], [ -12, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @do_check(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %prev_insn_idx = alloca i32, align 4
  %cbs = alloca %struct.bpf_insn_cbs, align 8
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %i418 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i418 to %struct.bpf_insn*
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i419 = load i32, i32* %len, align 4
  store i32 -1, i32* %prev_insn_idx, align 4
  %prev_linfo = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 17
  store %struct.ethtool_pauseparam* null, %struct.ethtool_pauseparam** %prev_linfo, align 8
  %call = call fastcc i8* @kzalloc(i64 noundef 120) #22
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %curframe = getelementptr inbounds i8, i8* %call, i64 80
  %i420 = bitcast i8* %curframe to i32*
  store i32 0, i32* %i420, align 8
  %i421 = getelementptr inbounds i8, i8* %call, i64 88
  store i8 0, i8* %i421, align 8
  %branches = getelementptr inbounds i8, i8* %call, i64 72
  %i422 = bitcast i8* %branches to i32*
  store i32 1, i32* %i422, align 8
  %call2 = call fastcc i8* @kzalloc(i64 noundef 1184) #22
  %frame = bitcast i8* %call to [8 x %struct.bpf_func_state*]*
  %i423 = bitcast i8* %call to i8**
  store i8* %call2, i8** %i423, align 8
  %tobool5.not = icmp eq i8* %call2, null
  br i1 %tobool5.not, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  call void @kfree(i8* noundef nonnull %call) #23
  br label %return

if.end7:                                          ; preds = %if.end
  %arrayidx = bitcast i8* %call to %struct.bpf_func_state**
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i424 = bitcast %struct.bpf_verifier_state** %cur_state to i8**
  store i8* %call, i8** %i424, align 8
  %i425 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  call fastcc void @init_func_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i425, i32 noundef -1, i32 noundef 0, i32 noundef 0) #22
  %prev_insn_idx10 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 1
  %insn_idx = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 0
  %i426 = load i32, i32* %prev_insn_idx, align 4
  store i32 %i426, i32* %prev_insn_idx10, align 4
  %i427 = load i32, i32* %insn_idx, align 8
  %cmp.not288 = icmp ult i32 %i427, %i419
  br i1 %cmp.not288, label %if.end13.lr.ph, label %if.then11

if.end13.lr.ph:                                   ; preds = %if.end7
  %insn_processed = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 23
  %level56 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i428 = bitcast %struct.bpf_verifier_env* %env to i8*
  %cb_print = getelementptr inbounds %struct.bpf_insn_cbs, %struct.bpf_insn_cbs* %cbs, i64 0, i32 0
  %cb_call = getelementptr inbounds %struct.bpf_insn_cbs, %struct.bpf_insn_cbs* %cbs, i64 0, i32 1
  %private_data = getelementptr inbounds %struct.bpf_insn_cbs, %struct.bpf_insn_cbs* %cbs, i64 0, i32 3
  %i431 = bitcast i8** %private_data to %struct.bpf_verifier_env**
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %jmps_processed = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 25
  %i434 = bitcast i8* (i8*, %struct.bpf_insn*)** %cb_call to i8*
  br label %if.end13

if.then11:                                        ; preds = %for.cond.backedge, %if.end7
  %.lcssa = phi i32 [ %i427, %if.end7 ], [ %i487, %for.cond.backedge ]
  %i435 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i435, i8* noundef getelementptr inbounds ([33 x i8], [33 x i8]* @.str.46, i64 0, i64 0), i32 noundef %.lcssa, i32 noundef %i419) #22
  br label %return

if.end13:                                         ; preds = %for.cond.backedge, %if.end13.lr.ph
  %i436 = phi i32 [ %i427, %if.end13.lr.ph ], [ %i487, %for.cond.backedge ]
  %do_print_state.0289 = phi i8 [ 0, %if.end13.lr.ph ], [ %do_print_state.0.be, %for.cond.backedge ]
  %idxprom = zext i32 %i436 to i64
  %arrayidx15 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %arrayidx15, i64 0, i32 0
  %i437 = load i8, i8* %code, align 4
  %i438 = and i8 %i437, 7
  %i439 = load i32, i32* %insn_processed, align 8
  %inc = add i32 %i439, 1
  store i32 %inc, i32* %insn_processed, align 8
  %cmp17 = icmp ugt i32 %inc, 1000000
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end13
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([45 x i8], [45 x i8]* @.str.47, i64 0, i64 0), i32 noundef %inc) #22
  br label %return

if.end21:                                         ; preds = %if.end13
  %call23 = call fastcc i32 @is_state_visited(%struct.bpf_verifier_env* noundef %env, i32 noundef %i436) #22
  %cmp24 = icmp slt i32 %call23, 0
  br i1 %cmp24, label %return, label %if.end27

if.end27:                                         ; preds = %if.end21
  %cmp28 = icmp eq i32 %call23, 1
  br i1 %cmp28, label %if.then30, label %if.end45

if.then30:                                        ; preds = %if.end27
  %i441 = load i32, i32* %level56, align 8
  %and31 = and i32 %i441, 3
  %tobool32.not = icmp eq i32 %and31, 0
  br i1 %tobool32.not, label %process_bpf_exit, label %if.then33

if.then33:                                        ; preds = %if.then30
  %i442 = and i8 %do_print_state.0289, 1
  %tobool34.not = icmp eq i8 %i442, 0
  br i1 %tobool34.not, label %if.else, label %if.then35

if.then35:                                        ; preds = %if.then33
  %i443 = load i32, i32* %prev_insn_idx10, align 4
  %i444 = load i32, i32* %insn_idx, align 8
  %i445 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %speculative39 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i445, i64 0, i32 6
  %i446 = load i8, i8* %speculative39, align 8
  %i447 = and i8 %i446, 1
  %tobool40.not = icmp eq i8 %i447, 0
  %cond = select i1 %tobool40.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.49, i64 0, i64 0)
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([24 x i8], [24 x i8]* @.str.48, i64 0, i64 0), i32 noundef %i443, i32 noundef %i444, i8* noundef %cond) #22
  br label %process_bpf_exit

if.else:                                          ; preds = %if.then33
  %i448 = load i32, i32* %insn_idx, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i64 0, i64 0), i32 noundef %i448) #22
  br label %process_bpf_exit

if.end45:                                         ; preds = %if.end27
  %i449 = call %struct.task_struct* asm "movq %gs:${1:P},$0", "=r,im,~{dirflag},~{fpsr},~{flags}"(%struct.task_struct** nonnull @current_task) #26, !srcloc !10
  %call47 = call fastcc i32 @signal_pending(%struct.task_struct* noundef %i449) #22
  %tobool48.not = icmp eq i32 %call47, 0
  br i1 %tobool48.not, label %if.end50, label %return

if.end50:                                         ; preds = %if.end45
  %i450 = getelementptr %struct.task_struct, %struct.task_struct* %i449, i64 0, i32 0
  %call1.i = call fastcc i32 @test_ti_thread_flag(%struct.thread_info* noundef %i450, i32 noundef 3) #23
  %tobool.i.not = icmp eq i32 %call1.i, 0
  br i1 %tobool.i.not, label %if.end54, label %if.then52

if.then52:                                        ; preds = %if.end50
  %call53 = call i32 @_cond_resched() #23
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %if.end50
  %i451 = load i32, i32* %level56, align 8
  %and57 = and i32 %i451, 2
  %tobool58.not = icmp eq i32 %and57, 0
  br i1 %tobool58.not, label %lor.lhs.false, label %if.then70

lor.lhs.false:                                    ; preds = %if.end54
  %and61 = and i32 %i451, 3
  %tobool62.not = icmp eq i32 %and61, 0
  %i452 = and i8 %do_print_state.0289, 1
  %tobool63.not = icmp eq i8 %i452, 0
  %or.cond246 = select i1 %tobool62.not, i1 true, i1 %tobool63.not
  br i1 %or.cond246, label %if.end85, label %if.else72

if.then70:                                        ; preds = %if.end54
  %i453 = load i32, i32* %insn_idx, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.52, i64 0, i64 0), i32 noundef %i453) #22
  br label %if.end80

if.else72:                                        ; preds = %lor.lhs.false
  %i454 = load i32, i32* %prev_insn_idx10, align 4
  %i455 = load i32, i32* %insn_idx, align 8
  %i456 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %speculative76 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i456, i64 0, i32 6
  %i457 = load i8, i8* %speculative76, align 8
  %i458 = and i8 %i457, 1
  %tobool77.not = icmp eq i8 %i458, 0
  %cond79 = select i1 %tobool77.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.49, i64 0, i64 0)
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.53, i64 0, i64 0), i32 noundef %i454, i32 noundef %i455, i8* noundef %cond79) #22
  br label %if.end80

if.end80:                                         ; preds = %if.else72, %if.then70
  %i459 = load i32, i32* %i420, align 8
  %idxprom83 = zext i32 %i459 to i64
  %arrayidx84 = getelementptr [8 x %struct.bpf_func_state*], [8 x %struct.bpf_func_state*]* %frame, i64 0, i64 %idxprom83
  %i460 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx84, align 8
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i460) #22
  br label %if.end85

if.end85:                                         ; preds = %if.end80, %lor.lhs.false
  %do_print_state.1 = phi i8 [ 0, %if.end80 ], [ %do_print_state.0289, %lor.lhs.false ]
  %i461 = load i32, i32* %level56, align 8
  %and88 = and i32 %i461, 3
  %tobool89.not = icmp eq i32 %and88, 0
  br i1 %tobool89.not, label %if.end94, label %if.then90

if.then90:                                        ; preds = %if.end85
  store void (i8*, i8*, ...)* @verbose, void (i8*, i8*, ...)** %cb_print, align 8
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i434, i8 0, i64 16, i1 false)
  store %struct.bpf_verifier_env* %env, %struct.bpf_verifier_env** %i431, align 8
  %i462 = load i32, i32* %insn_idx, align 8
  call void (%struct.bpf_verifier_env*, i32, i8*, ...) @verbose_linfo(%struct.bpf_verifier_env* noundef %env, i32 noundef %i462, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i64 0, i64 0)) #22
  %i463 = load i32, i32* %insn_idx, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i64 0, i64 0), i32 noundef %i463) #22
  %i464 = load i8, i8* %allow_ptr_leaks, align 8
  %i465 = and i8 %i464, 1
  %tobool93 = icmp ne i8 %i465, 0
  call void @print_bpf_insn(%struct.bpf_insn_cbs* noundef nonnull %cbs, %struct.bpf_insn* noundef %arrayidx15, i1 noundef zeroext %tobool93) #23
  br label %if.end94

if.end94:                                         ; preds = %if.then90, %if.end85
  %i466 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i466, i64 0, i32 7
  %i467 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %i467.idx = getelementptr %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i467, i64 0, i32 10
  %i467.idx.val = load i8, i8* %i467.idx, align 1
  %call96 = call fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %i467.idx.val) #22
  br i1 %call96, label %if.then97, label %if.end104

if.then97:                                        ; preds = %if.end94
  %i468 = load i32, i32* %insn_idx, align 8
  %i469 = load i32, i32* %prev_insn_idx10, align 4
  %call100 = call i32 @bpf_prog_offload_verify_insn(%struct.bpf_verifier_env* noundef %env, i32 noundef %i468, i32 noundef %i469) #23
  %tobool101.not = icmp eq i32 %call100, 0
  br i1 %tobool101.not, label %if.end104, label %return

if.end104:                                        ; preds = %if.then97, %if.end94
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call105 = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %i470 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %i471 = load i32, i32* %insn_idx, align 8
  %idxprom107 = zext i32 %i471 to i64
  %seen = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i470, i64 %idxprom107, i32 3
  store i8 1, i8* %seen, align 8
  %i472 = load i32, i32* %insn_idx, align 8
  store i32 %i472, i32* %prev_insn_idx, align 4
  br label %NodeBlock7

NodeBlock7:                                       ; preds = %if.end104
  %Pivot8 = icmp ult i8 %i438, 3
  br i1 %Pivot8, label %NodeBlock, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp eq i8 %i438, 3
  br i1 %Pivot6, label %if.then176, label %NodeBlock3

NodeBlock3:                                       ; preds = %NodeBlock5
  %Pivot4.not = icmp eq i8 %i438, 7
  br i1 %Pivot4.not, label %if.then117, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock3
  %SwitchLeaf2 = icmp eq i8 %i438, 4
  br i1 %SwitchLeaf2, label %if.then117, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock7
  %Pivot.not = icmp eq i8 %i438, 2
  br i1 %Pivot.not, label %if.then248, label %LeafBlock

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %i438, 1
  br i1 %SwitchLeaf, label %if.then126, label %NewDefault

if.then117:                                       ; preds = %LeafBlock1, %NodeBlock3
  %call118 = call fastcc i32 @check_alu_op(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %arrayidx15) #22
  %tobool119.not = icmp eq i32 %call118, 0
  br i1 %tobool119.not, label %if.end558, label %return

if.then126:                                       ; preds = %LeafBlock
  %src_reg = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %bf.lshr = lshr i8 %bf.load, 4
  %conv127 = zext i8 %bf.lshr to i32
  %call128 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv127, i32 noundef 0) #22
  %tobool129.not = icmp eq i32 %call128, 0
  br i1 %tobool129.not, label %if.end131, label %return

if.end131:                                        ; preds = %if.then126
  %bf.load132 = load i8, i8* %src_reg, align 1
  %bf.clear = and i8 %bf.load132, 15
  %conv133 = zext i8 %bf.clear to i32
  %call134 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv133, i32 noundef 2) #22
  %tobool135.not = icmp eq i32 %call134, 0
  br i1 %tobool135.not, label %if.end137, label %return

if.end137:                                        ; preds = %if.end131
  %bf.load139 = load i8, i8* %src_reg, align 1
  %bf.lshr140 = lshr i8 %bf.load139, 4
  %idxprom141 = zext i8 %bf.lshr140 to i64
  %type = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call105, i64 %idxprom141, i32 0
  %i473 = load i32, i32* %type, align 8
  %i474 = load i32, i32* %insn_idx, align 8
  %conv147 = zext i8 %bf.lshr140 to i32
  %off = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 2
  %i475 = load i16, i16* %off, align 2
  %conv148 = sext i16 %i475 to i32
  %i476 = load i8, i8* %code, align 4
  %i477 = and i8 %i476, 24
  %and151 = zext i8 %i477 to i32
  %bf.clear154 = and i8 %bf.load139, 15
  %conv155 = zext i8 %bf.clear154 to i32
  %call156 = call fastcc i32 @check_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %i474, i32 noundef %conv147, i32 noundef %conv148, i32 noundef %and151, i32 noundef 1, i32 noundef %conv155, i1 noundef zeroext false) #22
  %tobool157.not = icmp eq i32 %call156, 0
  br i1 %tobool157.not, label %if.end159, label %return

if.end159:                                        ; preds = %if.end137
  %i478 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %i479 = load i32, i32* %insn_idx, align 8
  %idxprom162 = zext i32 %i479 to i64
  %i480 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i478, i64 %idxprom162, i32 0
  %ptr_type = bitcast %union.anon.13* %i480 to i32*
  %i481 = load i32, i32* %ptr_type, align 4
  %cmp164 = icmp eq i32 %i481, 0
  br i1 %cmp164, label %if.then166, label %if.else167

if.then166:                                       ; preds = %if.end159
  store i32 %i473, i32* %ptr_type, align 4
  br label %if.end558

if.else167:                                       ; preds = %if.end159
  %call168 = call fastcc zeroext i1 @reg_type_mismatch(i32 noundef %i473, i32 noundef %i481) #22
  br i1 %call168, label %if.then169, label %if.end558

if.then169:                                       ; preds = %if.else167
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([50 x i8], [50 x i8]* @.str.55, i64 0, i64 0)) #22
  br label %return

if.then176:                                       ; preds = %NodeBlock5
  %i483 = load i8, i8* %code, align 4
  %i484 = and i8 %i483, -32
  %cmp180 = icmp eq i8 %i484, -64
  br i1 %cmp180, label %if.then182, label %if.end190

if.then182:                                       ; preds = %if.then176
  %call184 = call fastcc i32 @check_xadd(%struct.bpf_verifier_env* noundef %env, i32 noundef %i472, %struct.bpf_insn* noundef %arrayidx15) #22
  %tobool185.not = icmp eq i32 %call184, 0
  br i1 %tobool185.not, label %if.end187, label %return

if.end187:                                        ; preds = %if.then182
  %i485 = load i32, i32* %insn_idx, align 8
  %inc189 = add i32 %i485, 1
  br label %for.cond.backedge.sink.split

for.cond.backedge.sink.split:                     ; preds = %if.end558, %if.end423, %if.end187
  %inc189.sink = phi i32 [ %inc189, %if.end187 ], [ %add427, %if.end423 ], [ %inc560, %if.end558 ]
  store i32 %inc189.sink, i32* %insn_idx, align 8
  br label %for.cond.backedge

for.cond.backedge:                                ; preds = %process_bpf_exit, %if.then469, %for.cond.backedge.sink.split
  %do_print_state.0.be = phi i8 [ 1, %if.then469 ], [ 1, %process_bpf_exit ], [ %do_print_state.1, %for.cond.backedge.sink.split ]
  %i486 = load i32, i32* %prev_insn_idx, align 4
  store i32 %i486, i32* %prev_insn_idx10, align 4
  %i487 = load i32, i32* %insn_idx, align 8
  %cmp.not = icmp ult i32 %i487, %i419
  br i1 %cmp.not, label %if.end13, label %if.then11

if.end190:                                        ; preds = %if.then176
  %src_reg191 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 1
  %bf.load192 = load i8, i8* %src_reg191, align 1
  %bf.lshr193 = lshr i8 %bf.load192, 4
  %conv194 = zext i8 %bf.lshr193 to i32
  %call195 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv194, i32 noundef 0) #22
  %tobool196.not = icmp eq i32 %call195, 0
  br i1 %tobool196.not, label %if.end198, label %return

if.end198:                                        ; preds = %if.end190
  %bf.load200 = load i8, i8* %src_reg191, align 1
  %bf.clear201 = and i8 %bf.load200, 15
  %conv202 = zext i8 %bf.clear201 to i32
  %call203 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv202, i32 noundef 0) #22
  %tobool204.not = icmp eq i32 %call203, 0
  br i1 %tobool204.not, label %if.end206, label %return

if.end206:                                        ; preds = %if.end198
  %bf.load208 = load i8, i8* %src_reg191, align 1
  %bf.clear209 = and i8 %bf.load208, 15
  %idxprom210 = zext i8 %bf.clear209 to i64
  %type212 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call105, i64 %idxprom210, i32 0
  %i488 = load i32, i32* %type212, align 8
  %i489 = load i32, i32* %insn_idx, align 8
  %conv217 = zext i8 %bf.clear209 to i32
  %off218 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 2
  %i490 = load i16, i16* %off218, align 2
  %conv219 = sext i16 %i490 to i32
  %i491 = load i8, i8* %code, align 4
  %i492 = and i8 %i491, 24
  %and222 = zext i8 %i492 to i32
  %bf.lshr225 = lshr i8 %bf.load208, 4
  %conv226 = zext i8 %bf.lshr225 to i32
  %call227 = call fastcc i32 @check_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %i489, i32 noundef %conv217, i32 noundef %conv219, i32 noundef %and222, i32 noundef 2, i32 noundef %conv226, i1 noundef zeroext false) #22
  %tobool228.not = icmp eq i32 %call227, 0
  br i1 %tobool228.not, label %if.end230, label %return

if.end230:                                        ; preds = %if.end206
  %i493 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %i494 = load i32, i32* %insn_idx, align 8
  %idxprom233 = zext i32 %i494 to i64
  %i495 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i493, i64 %idxprom233, i32 0
  %ptr_type235 = bitcast %union.anon.13* %i495 to i32*
  %i496 = load i32, i32* %ptr_type235, align 4
  %cmp236 = icmp eq i32 %i496, 0
  br i1 %cmp236, label %if.then238, label %if.else239

if.then238:                                       ; preds = %if.end230
  store i32 %i488, i32* %ptr_type235, align 4
  br label %if.end558

if.else239:                                       ; preds = %if.end230
  %call240 = call fastcc zeroext i1 @reg_type_mismatch(i32 noundef %i488, i32 noundef %i496) #22
  br i1 %call240, label %if.then241, label %if.end558

if.then241:                                       ; preds = %if.else239
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([50 x i8], [50 x i8]* @.str.55, i64 0, i64 0)) #22
  br label %return

if.then248:                                       ; preds = %NodeBlock
  %i498 = load i8, i8* %code, align 4
  %i499 = and i8 %i498, -32
  %cmp252.not = icmp eq i8 %i499, 96
  br i1 %cmp252.not, label %lor.lhs.false254, label %if.then261

lor.lhs.false254:                                 ; preds = %if.then248
  %src_reg255 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 1
  %bf.load256 = load i8, i8* %src_reg255, align 1
  %cmp259.not = icmp ult i8 %bf.load256, 16
  br i1 %cmp259.not, label %if.end262, label %if.then261

if.then261:                                       ; preds = %lor.lhs.false254, %if.then248
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([29 x i8], [29 x i8]* @.str.56, i64 0, i64 0)) #22
  br label %return

if.end262:                                        ; preds = %lor.lhs.false254
  %bf.clear265 = and i8 %bf.load256, 15
  %conv266 = zext i8 %bf.clear265 to i32
  %call267 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv266, i32 noundef 0) #22
  %tobool268.not = icmp eq i32 %call267, 0
  br i1 %tobool268.not, label %if.end270, label %return

if.end270:                                        ; preds = %if.end262
  %bf.load272 = load i8, i8* %src_reg255, align 1
  %bf.clear273 = and i8 %bf.load272, 15
  %conv274 = zext i8 %bf.clear273 to i32
  %env.idx32 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx32.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx32, align 8
  %call275 = call fastcc zeroext i1 @is_ctx_reg(%struct.bpf_verifier_state* %env.idx32.val, i32 noundef %conv274) #22
  br i1 %call275, label %if.then276, label %if.end289

if.then276:                                       ; preds = %if.end270
  %env.idx31 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx31.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx31, align 8
  %call285 = call fastcc %struct.bpf_reg_state* @reg_state(%struct.bpf_verifier_state* %env.idx31.val, i32 noundef %conv274) #22
  %type286 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call285, i64 0, i32 0
  %i502 = load i32, i32* %type286, align 8
  %idxprom287 = zext i32 %i502 to i64
  %arrayidx288 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom287
  %i503 = load i8*, i8** %arrayidx288, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.57, i64 0, i64 0), i32 noundef %conv274, i8* noundef %i503) #22
  br label %return

if.end289:                                        ; preds = %if.end270
  %i504 = load i32, i32* %insn_idx, align 8
  %off295 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 2
  %i505 = load i16, i16* %off295, align 2
  %conv296 = sext i16 %i505 to i32
  %i506 = load i8, i8* %code, align 4
  %i507 = and i8 %i506, 24
  %and299 = zext i8 %i507 to i32
  %call300 = call fastcc i32 @check_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %i504, i32 noundef %conv274, i32 noundef %conv296, i32 noundef %and299, i32 noundef 2, i32 noundef -1, i1 noundef zeroext false) #22
  %tobool301.not = icmp eq i32 %call300, 0
  br i1 %tobool301.not, label %if.end558, label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.else304

if.else304:                                       ; preds = %NewDefault
  %cmp310 = icmp eq i8 %i438, 6
  %i508 = add nsw i8 %i438, -5
  %i509 = icmp ult i8 %i508, 2
  br i1 %i509, label %if.then312, label %if.else511

if.then312:                                       ; preds = %if.else304
  %i510 = load i8, i8* %code, align 4
  %i511 = and i8 %i510, -16
  %i512 = load i32, i32* %jmps_processed, align 8
  %inc317 = add i32 %i512, 1
  store i32 %inc317, i32* %jmps_processed, align 8
  br label %NodeBlock18

NodeBlock18:                                      ; preds = %if.then312
  %Pivot19 = icmp slt i8 %i511, -112
  br i1 %Pivot19, label %LeafBlock10, label %NodeBlock16

NodeBlock16:                                      ; preds = %NodeBlock18
  %Pivot17 = icmp slt i8 %i511, 0
  br i1 %Pivot17, label %LeafBlock12, label %LeafBlock14

LeafBlock14:                                      ; preds = %NodeBlock16
  %SwitchLeaf15 = icmp eq i8 %i511, 0
  br i1 %SwitchLeaf15, label %if.then394, label %NewDefault9

LeafBlock12:                                      ; preds = %NodeBlock16
  %SwitchLeaf13 = icmp eq i8 %i511, -112
  br i1 %SwitchLeaf13, label %if.then432, label %NewDefault9

LeafBlock10:                                      ; preds = %NodeBlock18
  %SwitchLeaf11 = icmp eq i8 %i511, -128
  br i1 %SwitchLeaf11, label %if.then321, label %NewDefault9

if.then321:                                       ; preds = %LeafBlock10
  %i513 = load i8, i8* %code, align 4
  %i514 = and i8 %i513, 8
  %cmp325.not = icmp eq i8 %i514, 0
  br i1 %cmp325.not, label %lor.lhs.false327, label %if.then357

lor.lhs.false327:                                 ; preds = %if.then321
  %off328 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 2
  %i515 = load i16, i16* %off328, align 2
  %cmp330.not = icmp eq i16 %i515, 0
  br i1 %cmp330.not, label %lor.lhs.false332, label %if.then357

lor.lhs.false332:                                 ; preds = %lor.lhs.false327
  %src_reg333 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 1
  %bf.load334 = load i8, i8* %src_reg333, align 1
  %cmp337.not = icmp ult i8 %bf.load334, 16
  %bf.lshr335.mask = and i8 %bf.load334, -16
  %cmp344.not = icmp eq i8 %bf.lshr335.mask, 16
  %or.cond = or i1 %cmp337.not, %cmp344.not
  br i1 %or.cond, label %lor.lhs.false346, label %if.then357

lor.lhs.false346:                                 ; preds = %lor.lhs.false332
  %bf.clear349 = and i8 %bf.load334, 15
  %cmp351 = icmp ne i8 %bf.clear349, 0
  %or.cond2 = select i1 %cmp351, i1 true, i1 %cmp310
  br i1 %or.cond2, label %if.then357, label %if.end358

if.then357:                                       ; preds = %lor.lhs.false346, %lor.lhs.false332, %lor.lhs.false327, %if.then321
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.58, i64 0, i64 0)) #22
  br label %return

if.end358:                                        ; preds = %lor.lhs.false346
  %i517 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %active_spin_lock = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i517, i64 0, i32 5
  %i518 = load i32, i32* %active_spin_lock, align 4
  %tobool360.not = icmp eq i32 %i518, 0
  br i1 %tobool360.not, label %if.end372, label %land.lhs.true361

land.lhs.true361:                                 ; preds = %if.end358
  br i1 %cmp344.not, label %if.then371, label %lor.lhs.false368

lor.lhs.false368:                                 ; preds = %land.lhs.true361
  %imm = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 3
  %i519 = load i32, i32* %imm, align 4
  %cmp369.not = icmp eq i32 %i519, 94
  br i1 %cmp369.not, label %if.end372, label %if.then371

if.then371:                                       ; preds = %lor.lhs.false368, %land.lhs.true361
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([53 x i8], [53 x i8]* @.str.59, i64 0, i64 0)) #22
  br label %return

if.end372:                                        ; preds = %lor.lhs.false368, %if.end358
  br i1 %cmp344.not, label %if.then379, label %if.else382

if.then379:                                       ; preds = %if.end372
  %call381 = call fastcc i32 @check_func_call(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %arrayidx15, i32* noundef %insn_idx) #22
  br label %if.end386

if.else382:                                       ; preds = %if.end372
  %imm383 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 3
  %i521 = load i32, i32* %imm383, align 4
  %call385 = call fastcc i32 @check_helper_call(%struct.bpf_verifier_env* noundef %env, i32 noundef %i521, i32 noundef %i472) #22
  br label %if.end386

if.end386:                                        ; preds = %if.else382, %if.then379
  %err.0 = phi i32 [ %call381, %if.then379 ], [ %call385, %if.else382 ]
  %tobool387.not = icmp eq i32 %err.0, 0
  br i1 %tobool387.not, label %if.end558, label %return

if.then394:                                       ; preds = %LeafBlock14
  %i522 = load i8, i8* %code, align 4
  %i523 = and i8 %i522, 8
  %cmp398.not = icmp eq i8 %i523, 0
  br i1 %cmp398.not, label %lor.lhs.false400, label %if.then422

lor.lhs.false400:                                 ; preds = %if.then394
  %imm401 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 3
  %i524 = load i32, i32* %imm401, align 4
  %cmp402.not = icmp eq i32 %i524, 0
  br i1 %cmp402.not, label %lor.lhs.false404, label %if.then422

lor.lhs.false404:                                 ; preds = %lor.lhs.false400
  %src_reg405 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 1
  %bf.load406 = load i8, i8* %src_reg405, align 1
  %cmp409.not = icmp ult i8 %bf.load406, 16
  br i1 %cmp409.not, label %lor.lhs.false411, label %if.then422

lor.lhs.false411:                                 ; preds = %lor.lhs.false404
  %bf.clear414 = and i8 %bf.load406, 15
  %cmp416 = icmp ne i8 %bf.clear414, 0
  %or.cond3 = select i1 %cmp416, i1 true, i1 %cmp310
  br i1 %or.cond3, label %if.then422, label %if.end423

if.then422:                                       ; preds = %lor.lhs.false411, %lor.lhs.false404, %lor.lhs.false400, %if.then394
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([29 x i8], [29 x i8]* @.str.60, i64 0, i64 0)) #22
  br label %return

if.end423:                                        ; preds = %lor.lhs.false411
  %off424 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 2
  %i526 = load i16, i16* %off424, align 2
  %conv425 = sext i16 %i526 to i32
  %add = add i32 %i472, 1
  %add427 = add i32 %add, %conv425
  br label %for.cond.backedge.sink.split

if.then432:                                       ; preds = %LeafBlock12
  %i527 = load i8, i8* %code, align 4
  %i528 = and i8 %i527, 8
  %cmp436.not = icmp eq i8 %i528, 0
  br i1 %cmp436.not, label %lor.lhs.false438, label %if.then460

lor.lhs.false438:                                 ; preds = %if.then432
  %imm439 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 3
  %i529 = load i32, i32* %imm439, align 4
  %cmp440.not = icmp eq i32 %i529, 0
  br i1 %cmp440.not, label %lor.lhs.false442, label %if.then460

lor.lhs.false442:                                 ; preds = %lor.lhs.false438
  %src_reg443 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 1
  %bf.load444 = load i8, i8* %src_reg443, align 1
  %cmp447.not = icmp ult i8 %bf.load444, 16
  br i1 %cmp447.not, label %lor.lhs.false449, label %if.then460

lor.lhs.false449:                                 ; preds = %lor.lhs.false442
  %bf.clear452 = and i8 %bf.load444, 15
  %cmp454 = icmp ne i8 %bf.clear452, 0
  %or.cond4 = select i1 %cmp454, i1 true, i1 %cmp310
  br i1 %or.cond4, label %if.then460, label %if.end461

if.then460:                                       ; preds = %lor.lhs.false449, %lor.lhs.false442, %lor.lhs.false438, %if.then432
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.61, i64 0, i64 0)) #22
  br label %return

if.end461:                                        ; preds = %lor.lhs.false449
  %i531 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %active_spin_lock463 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i531, i64 0, i32 5
  %i532 = load i32, i32* %active_spin_lock463, align 4
  %tobool464.not = icmp eq i32 %i532, 0
  br i1 %tobool464.not, label %if.end466, label %if.then465

if.then465:                                       ; preds = %if.end461
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([28 x i8], [28 x i8]* @.str.62, i64 0, i64 0)) #22
  br label %return

if.end466:                                        ; preds = %if.end461
  %i534 = load i32, i32* %i420, align 8
  %tobool468.not = icmp eq i32 %i534, 0
  br i1 %tobool468.not, label %if.end475, label %if.then469

if.then469:                                       ; preds = %if.end466
  %call471 = call fastcc i32 @prepare_func_exit(%struct.bpf_verifier_env* noundef %env, i32* noundef %insn_idx) #22
  %tobool472.not = icmp eq i32 %call471, 0
  br i1 %tobool472.not, label %for.cond.backedge, label %return

if.end475:                                        ; preds = %if.end466
  %call476 = call fastcc i32 @check_reference_leak(%struct.bpf_verifier_env* noundef %env) #22
  %tobool477.not = icmp eq i32 %call476, 0
  br i1 %tobool477.not, label %if.end479, label %return

if.end479:                                        ; preds = %if.end475
  %call480 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 0, i32 noundef 0) #22
  %tobool481.not = icmp eq i32 %call480, 0
  br i1 %tobool481.not, label %if.end486, label %return

if.end486:                                        ; preds = %if.end479
  %call487 = call fastcc i32 @check_return_code(%struct.bpf_verifier_env* noundef %env) #22
  %tobool488.not = icmp eq i32 %call487, 0
  br i1 %tobool488.not, label %process_bpf_exit, label %return

process_bpf_exit:                                 ; preds = %if.end486, %if.else, %if.then35, %if.then30
  %i536 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  call fastcc void @update_branch_counts(%struct.bpf_verifier_state* noundef %i536) #22
  %call493 = call fastcc i32 @pop_stack(%struct.bpf_verifier_env* noundef %env, i32* noundef nonnull %prev_insn_idx, i32* noundef %insn_idx) #22
  %cmp494 = icmp slt i32 %call493, 0
  br i1 %cmp494, label %if.then496, label %for.cond.backedge

if.then496:                                       ; preds = %process_bpf_exit
  %cmp497.not = icmp eq i32 %call493, -2
  br i1 %cmp497.not, label %for.end, label %return

NewDefault9:                                      ; preds = %LeafBlock10, %LeafBlock12, %LeafBlock14
  br label %if.else502

if.else502:                                       ; preds = %NewDefault9
  %call504 = call fastcc i32 @check_cond_jmp_op(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %arrayidx15, i32* noundef %insn_idx) #22
  %tobool505.not = icmp eq i32 %call504, 0
  br i1 %tobool505.not, label %if.end558, label %return

if.else511:                                       ; preds = %if.else304
  %cmp513 = icmp eq i8 %i438, 0
  br i1 %cmp513, label %if.then515, label %if.else551

if.then515:                                       ; preds = %if.else511
  %i537 = load i8, i8* %code, align 4
  %i538 = and i8 %i537, -32
  br label %NodeBlock29

NodeBlock29:                                      ; preds = %if.then515
  %Pivot30 = icmp slt i8 %i538, 32
  br i1 %Pivot30, label %LeafBlock21, label %NodeBlock27

NodeBlock27:                                      ; preds = %NodeBlock29
  %Pivot28 = icmp slt i8 %i538, 64
  br i1 %Pivot28, label %LeafBlock23, label %LeafBlock25

LeafBlock25:                                      ; preds = %NodeBlock27
  %SwitchLeaf26 = icmp eq i8 %i538, 64
  br i1 %SwitchLeaf26, label %if.then527, label %NewDefault20

LeafBlock23:                                      ; preds = %NodeBlock27
  %SwitchLeaf24 = icmp eq i8 %i538, 32
  br i1 %SwitchLeaf24, label %if.then527, label %NewDefault20

LeafBlock21:                                      ; preds = %NodeBlock29
  %SwitchLeaf22 = icmp eq i8 %i538, 0
  br i1 %SwitchLeaf22, label %if.then536, label %NewDefault20

if.then527:                                       ; preds = %LeafBlock23, %LeafBlock25
  %call528 = call fastcc i32 @check_ld_abs(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %arrayidx15) #22
  %tobool529.not = icmp eq i32 %call528, 0
  br i1 %tobool529.not, label %if.end558, label %return

if.then536:                                       ; preds = %LeafBlock21
  %call537 = call fastcc i32 @check_ld_imm(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %arrayidx15) #22
  %tobool538.not = icmp eq i32 %call537, 0
  br i1 %tobool538.not, label %if.end540, label %return

if.end540:                                        ; preds = %if.then536
  %i539 = load i32, i32* %insn_idx, align 8
  %inc542 = add i32 %i539, 1
  store i32 %inc542, i32* %insn_idx, align 8
  %i540 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %idxprom545 = zext i32 %inc542 to i64
  %seen547 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i540, i64 %idxprom545, i32 3
  store i8 1, i8* %seen547, align 8
  br label %if.end558

NewDefault20:                                     ; preds = %LeafBlock21, %LeafBlock23, %LeafBlock25
  br label %if.else548

if.else548:                                       ; preds = %NewDefault20
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str.64, i64 0, i64 0)) #22
  br label %return

if.else551:                                       ; preds = %if.else511
  %conv110.le = zext i8 %i438 to i32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i428, i8* noundef getelementptr inbounds ([23 x i8], [23 x i8]* @.str.65, i64 0, i64 0), i32 noundef %conv110.le) #22
  br label %return

if.end558:                                        ; preds = %if.end540, %if.then527, %if.else502, %if.end386, %if.end289, %if.else239, %if.then238, %if.else167, %if.then166, %if.then117
  %i543 = load i32, i32* %insn_idx, align 8
  %inc560 = add i32 %i543, 1
  br label %for.cond.backedge.sink.split

for.end:                                          ; preds = %if.then496
  %stack_depth = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 0, i32 2
  %i544 = load i16, i16* %stack_depth, align 8
  %conv562 = zext i16 %i544 to i32
  %i545 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux564 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i545, i64 0, i32 7
  %i546 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux564, align 8
  %stack_depth565 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i546, i64 0, i32 5
  store i32 %conv562, i32* %stack_depth565, align 4
  br label %return

return:                                           ; preds = %for.end, %if.else551, %if.else548, %if.then536, %if.then527, %if.else502, %if.then496, %if.end486, %if.end479, %if.end475, %if.then469, %if.then465, %if.then460, %if.then422, %if.end386, %if.then371, %if.then357, %if.end289, %if.then276, %if.end262, %if.then261, %if.then241, %if.end206, %if.end198, %if.end190, %if.then182, %if.then169, %if.end137, %if.end131, %if.then126, %if.then117, %if.then97, %if.end45, %if.end21, %if.then19, %if.then11, %if.then6, %entry
  %retval.0 = phi i32 [ -14, %if.then11 ], [ -7, %if.then19 ], [ 0, %for.end ], [ -22, %if.then169 ], [ -22, %if.then241 ], [ -22, %if.then261 ], [ -13, %if.then276 ], [ -22, %if.then357 ], [ -22, %if.then371 ], [ -22, %if.then422 ], [ -22, %if.then460 ], [ -22, %if.then465 ], [ -22, %if.else548 ], [ -22, %if.else551 ], [ -12, %if.then6 ], [ -12, %entry ], [ %call493, %if.then496 ], [ %call23, %if.end21 ], [ -11, %if.end45 ], [ %call100, %if.then97 ], [ %call118, %if.then117 ], [ %call128, %if.then126 ], [ %call134, %if.end131 ], [ %call156, %if.end137 ], [ %call184, %if.then182 ], [ %call195, %if.end190 ], [ %call203, %if.end198 ], [ %call227, %if.end206 ], [ %call267, %if.end262 ], [ %call300, %if.end289 ], [ %err.0, %if.end386 ], [ %call471, %if.then469 ], [ %call476, %if.end475 ], [ %call480, %if.end479 ], [ %call487, %if.end486 ], [ %call504, %if.else502 ], [ %call528, %if.then527 ], [ %call537, %if.then536 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @free_verifier_state(%struct.bpf_verifier_state* noundef %state, i1 noundef zeroext %free_self) unnamed_addr #6 {
entry:
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %state, i64 0, i32 4
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %idxprom = sext i32 %i.08 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %state, i64 0, i32 0, i64 %idxprom
  %i = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  call fastcc void @free_func_state(%struct.bpf_func_state* noundef %i) #22
  store %struct.bpf_func_state* null, %struct.bpf_func_state** %arrayidx, align 8
  %inc = add i32 %i.08, 1
  %i9 = load i32, i32* %curframe, align 8
  %cmp.not = icmp ugt i32 %inc, %i9
  br i1 %cmp.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  call fastcc void @clear_jmp_history(%struct.bpf_verifier_state* noundef %state) #22
  br i1 %free_self, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %i10 = bitcast %struct.bpf_verifier_state* %state to i8*
  call void @kfree(i8* noundef %i10) #23
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_prog_offload_finalize(%struct.bpf_verifier_env* noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @pop_stack(%struct.bpf_verifier_env* nocapture noundef %env, i32* noundef writeonly %prev_insn_idx, i32* noundef writeonly %insn_idx) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %head1 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 4
  %i15 = load %struct.bpf_verifier_stack_elem*, %struct.bpf_verifier_stack_elem** %head1, align 8
  %cmp = icmp eq %struct.bpf_verifier_stack_elem* %i15, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq %struct.bpf_verifier_state* %i, null
  br i1 %tobool.not, label %if.end7, label %if.then3

if.then3:                                         ; preds = %if.end
  %st = getelementptr inbounds %struct.bpf_verifier_stack_elem, %struct.bpf_verifier_stack_elem* %i15, i64 0, i32 0
  %call = call fastcc i32 @copy_verifier_state(%struct.bpf_verifier_state* noundef nonnull %i, %struct.bpf_verifier_state* noundef %st) #22
  %tobool4.not = icmp eq i32 %call, 0
  br i1 %tobool4.not, label %if.end7, label %return

if.end7:                                          ; preds = %if.then3, %if.end
  %tobool8.not = icmp eq i32* %insn_idx, null
  br i1 %tobool8.not, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end7
  %insn_idx10 = getelementptr inbounds %struct.bpf_verifier_stack_elem, %struct.bpf_verifier_stack_elem* %i15, i64 0, i32 1
  %i16 = load i32, i32* %insn_idx10, align 8
  store i32 %i16, i32* %insn_idx, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end7
  %tobool12.not = icmp eq i32* %prev_insn_idx, null
  br i1 %tobool12.not, label %if.end15, label %if.then13

if.then13:                                        ; preds = %if.end11
  %prev_insn_idx14 = getelementptr inbounds %struct.bpf_verifier_stack_elem, %struct.bpf_verifier_stack_elem* %i15, i64 0, i32 2
  %i17 = load i32, i32* %prev_insn_idx14, align 4
  store i32 %i17, i32* %prev_insn_idx, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.end11
  %next = getelementptr inbounds %struct.bpf_verifier_stack_elem, %struct.bpf_verifier_stack_elem* %i15, i64 0, i32 3
  %i18 = load %struct.bpf_verifier_stack_elem*, %struct.bpf_verifier_stack_elem** %next, align 8
  %st16 = getelementptr inbounds %struct.bpf_verifier_stack_elem, %struct.bpf_verifier_stack_elem* %i15, i64 0, i32 0
  call fastcc void @free_verifier_state(%struct.bpf_verifier_state* noundef %st16, i1 noundef zeroext false) #22
  %i19 = bitcast %struct.bpf_verifier_stack_elem* %i15 to i8*
  call void @kfree(i8* noundef nonnull %i19) #23
  store %struct.bpf_verifier_stack_elem* %i18, %struct.bpf_verifier_stack_elem** %head1, align 8
  %stack_size = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 5
  %i20 = load i32, i32* %stack_size, align 8
  %dec = add i32 %i20, -1
  store i32 %dec, i32* %stack_size, align 8
  br label %return

return:                                           ; preds = %if.end15, %if.then3, %entry
  %retval.0 = phi i32 [ 0, %if.end15 ], [ -2, %entry ], [ %call, %if.then3 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @free_states(%struct.bpf_verifier_env* nocapture noundef readonly %env) unnamed_addr #6 {
entry:
  %free_list = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 10
  %i = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %free_list, align 8
  %tobool.not15 = icmp eq %struct.bpf_verifier_state_list* %i, null
  br i1 %tobool.not15, label %while.end, label %while.body

while.body:                                       ; preds = %while.body, %entry
  %sl.016 = phi %struct.bpf_verifier_state_list* [ %i22, %while.body ], [ %i, %entry ]
  %next = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.016, i64 0, i32 1
  %i22 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %next, align 8
  %state = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.016, i64 0, i32 0
  call fastcc void @free_verifier_state(%struct.bpf_verifier_state* noundef %state, i1 noundef zeroext false) #22
  %i23 = bitcast %struct.bpf_verifier_state_list* %sl.016 to i8*
  call void @kfree(i8* noundef nonnull %i23) #23
  %tobool.not = icmp eq %struct.bpf_verifier_state_list* %i22, null
  br i1 %tobool.not, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %entry
  %explored_states = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 9
  %i24 = load %struct.bpf_verifier_state_list**, %struct.bpf_verifier_state_list*** %explored_states, align 8
  %tobool1.not = icmp eq %struct.bpf_verifier_state_list** %i24, null
  br i1 %tobool1.not, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %env.idx1 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %env.idx1.val = load %struct.bpf_prog*, %struct.bpf_prog** %env.idx1, align 8
  %env.idx1.val.idx = getelementptr %struct.bpf_prog, %struct.bpf_prog* %env.idx1.val, i64 0, i32 4
  %env.idx1.val.idx.val = load i32, i32* %env.idx1.val.idx, align 4
  %call19 = call fastcc i32 @state_htab_size(i32 %env.idx1.val.idx.val) #22
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %for.end, label %for.body

for.body:                                         ; preds = %for.inc, %for.cond.preheader
  %i.021 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond.preheader ]
  %i25 = load %struct.bpf_verifier_state_list**, %struct.bpf_verifier_state_list*** %explored_states, align 8
  %idxprom = sext i32 %i.021 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %i25, i64 %idxprom
  %i26 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %arrayidx, align 8
  %tobool4.not17 = icmp eq %struct.bpf_verifier_state_list* %i26, null
  br i1 %tobool4.not17, label %for.inc, label %while.body5

while.body5:                                      ; preds = %while.body5, %for.body
  %sl.118 = phi %struct.bpf_verifier_state_list* [ %i27, %while.body5 ], [ %i26, %for.body ]
  %next6 = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.118, i64 0, i32 1
  %i27 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %next6, align 8
  %state7 = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.118, i64 0, i32 0
  call fastcc void @free_verifier_state(%struct.bpf_verifier_state* noundef %state7, i1 noundef zeroext false) #22
  %i28 = bitcast %struct.bpf_verifier_state_list* %sl.118 to i8*
  call void @kfree(i8* noundef nonnull %i28) #23
  %tobool4.not = icmp eq %struct.bpf_verifier_state_list* %i27, null
  br i1 %tobool4.not, label %for.inc, label %while.body5

for.inc:                                          ; preds = %while.body5, %for.body
  %inc = add nuw i32 %i.021, 1
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %env.idx.val = load %struct.bpf_prog*, %struct.bpf_prog** %env.idx, align 8
  %env.idx.val.idx = getelementptr %struct.bpf_prog, %struct.bpf_prog* %env.idx.val, i64 0, i32 4
  %env.idx.val.idx.val = load i32, i32* %env.idx.val.idx, align 4
  %call = call fastcc i32 @state_htab_size(i32 %env.idx.val.idx.val) #22
  %cmp = icmp ult i32 %inc, %call
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %for.cond.preheader
  %i29 = bitcast %struct.bpf_verifier_state_list*** %explored_states to i8**
  %i30 = load i8*, i8** %i29, align 8
  call void @kvfree(i8* noundef %i30) #23
  br label %return

return:                                           ; preds = %for.end, %while.end
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_max_stack_depth(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %ret_insn = alloca [8 x i32], align 16
  %ret_prog = alloca [8 x i32], align 16
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %i100 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %arraydecay1 = bitcast %union.anon.146* %i100 to %struct.bpf_insn*
  br label %process_func

process_func:                                     ; preds = %if.end72, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %add34, %if.end72 ]
  %idx.0 = phi i32 [ 0, %entry ], [ %call, %if.end72 ]
  %frame.0 = phi i32 [ 0, %entry ], [ %inc, %if.end72 ]
  %depth.0 = phi i32 [ 0, %entry ], [ %depth.1, %if.end72 ]
  %idxprom = sext i32 %idx.0 to i64
  %stack_depth = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom, i32 2
  %i101 = load i16, i16* %stack_depth, align 4
  %conv = zext i16 %i101 to i32
  %cmp = icmp ugt i32 %conv, 1
  %cond = select i1 %cmp, i32 %conv, i32 1
  %sub = add nsw i32 %cond, -1
  %or = or i32 %sub, 31
  %add = add i32 %depth.0, 1
  %add3 = add i32 %add, %or
  %cmp4 = icmp sgt i32 %add3, 512
  br i1 %cmp4, label %if.then, label %continue_func

if.then:                                          ; preds = %process_func
  %i102 = bitcast %struct.bpf_verifier_env* %env to i8*
  %add6 = add i32 %frame.0, 1
  call void (i8*, i8*, ...) @verbose(i8* noundef %i102, i8* noundef getelementptr inbounds ([50 x i8], [50 x i8]* @.str.282, i64 0, i64 0), i32 noundef %add6, i32 noundef %add3) #22
  br label %return

continue_func:                                    ; preds = %if.end81, %process_func
  %i.1 = phi i32 [ %i110, %if.end81 ], [ %i.0, %process_func ]
  %idx.1 = phi i32 [ %i111, %if.end81 ], [ %idx.0, %process_func ]
  %frame.1 = phi i32 [ %dec, %if.end81 ], [ %frame.0, %process_func ]
  %depth.1 = phi i32 [ %sub96, %if.end81 ], [ %add3, %process_func ]
  %add7 = add i32 %idx.1, 1
  %idxprom8 = sext i32 %add7 to i64
  %start = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom8, i32 0
  %i103 = load i32, i32* %start, align 4
  %cmp1051 = icmp slt i32 %i.1, %i103
  br i1 %cmp1051, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %continue_func
  %i104 = sext i32 %i.1 to i64
  %wide.trip.count = sext i32 %i103 to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ %i104, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %code = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay1, i64 %indvars.iv, i32 0
  %i105 = load i8, i8* %code, align 4
  %cmp15.not = icmp eq i8 %i105, -123
  br i1 %cmp15.not, label %if.end18, label %for.inc

if.end18:                                         ; preds = %for.body
  %src_reg = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay1, i64 %indvars.iv, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %bf.lshr.mask = and i8 %bf.load, -16
  %cmp22.not = icmp eq i8 %bf.lshr.mask, 16
  br i1 %cmp22.not, label %if.end25, label %for.inc

if.end25:                                         ; preds = %if.end18
  %i106 = trunc i64 %indvars.iv to i32
  %add26 = add i32 %i106, 1
  %idxprom27 = sext i32 %frame.1 to i64
  %arrayidx28 = getelementptr [8 x i32], [8 x i32]* %ret_insn, i64 0, i64 %idxprom27
  store i32 %add26, i32* %arrayidx28, align 4
  %arrayidx30 = getelementptr [8 x i32], [8 x i32]* %ret_prog, i64 0, i64 %idxprom27
  store i32 %idx.1, i32* %arrayidx30, align 4
  %imm = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay1, i64 %indvars.iv, i32 3
  %i107 = load i32, i32* %imm, align 4
  %add34 = add i32 %i107, %add26
  %call = call fastcc i32 @find_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef %add34) #22
  %cmp35 = icmp slt i32 %call, 0
  br i1 %cmp35, label %if.then37, label %if.end72

if.then37:                                        ; preds = %if.end25
  %.b39 = load i1, i1* @check_max_stack_depth.__warned, align 1
  br i1 %.b39, label %return, label %if.then43

if.then43:                                        ; preds = %if.then37
  store i1 true, i1* @check_max_stack_depth.__warned, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.214, i64 0, i64 0), i32 noundef %add34) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 2722, i32 2313, i64 12) #24, !srcloc !11
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 155) #24, !srcloc !12
  br label %return

if.end72:                                         ; preds = %if.end25
  %inc = add i32 %frame.1, 1
  %cmp73 = icmp sgt i32 %inc, 7
  br i1 %cmp73, label %if.then75, label %process_func

if.then75:                                        ; preds = %if.end72
  %i108 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i108, i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @.str.283, i64 0, i64 0), i32 noundef %inc) #22
  br label %return

for.inc:                                          ; preds = %if.end18, %for.body
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %continue_func
  %cmp78 = icmp eq i32 %frame.1, 0
  br i1 %cmp78, label %return, label %if.end81

if.end81:                                         ; preds = %for.end
  %idxprom82 = sext i32 %idx.1 to i64
  %stack_depth84 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom82, i32 2
  %i109 = load i16, i16* %stack_depth84, align 4
  %conv85 = zext i16 %i109 to i32
  %cmp87 = icmp ugt i32 %conv85, 1
  %cond92 = select i1 %cmp87, i32 %conv85, i32 1
  %notlhs = sub nsw i32 0, %cond92
  %add95.neg = and i32 %notlhs, -32
  %sub96 = add i32 %add95.neg, %depth.1
  %dec = add i32 %frame.1, -1
  %idxprom97 = sext i32 %dec to i64
  %arrayidx98 = getelementptr [8 x i32], [8 x i32]* %ret_insn, i64 0, i64 %idxprom97
  %i110 = load i32, i32* %arrayidx98, align 4
  %arrayidx100 = getelementptr [8 x i32], [8 x i32]* %ret_prog, i64 0, i64 %idxprom97
  %i111 = load i32, i32* %arrayidx100, align 4
  br label %continue_func

return:                                           ; preds = %for.end, %if.then75, %if.then43, %if.then37, %if.then
  %retval.0 = phi i32 [ -13, %if.then ], [ -7, %if.then75 ], [ -14, %if.then43 ], [ -14, %if.then37 ], [ 0, %for.end ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @opt_hard_wire_dead_code_branches(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %ja = alloca i64, align 8
  %tmpcast = bitcast i64* %ja to %struct.bpf_insn*
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  store i64 5, i64* %ja, align 8
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i22 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i22, i64 0, i32 4
  %i23 = load i32, i32* %len, align 4
  %cmp14 = icmp sgt i32 %i23, 0
  br i1 %cmp14, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %i24 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i22, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i24 to %struct.bpf_insn*
  %off12 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %tmpcast, i64 0, i32 2
  %wide.trip.count = zext i32 %i23 to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %insn.015 = phi %struct.bpf_insn* [ %arraydecay, %for.body.lr.ph ], [ %incdec.ptr, %for.inc ]
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.015, i64 0, i32 0
  %i25 = load i8, i8* %code, align 4
  %call = call fastcc zeroext i1 @insn_is_cond_jump(i8 noundef zeroext %i25) #22
  br i1 %call, label %if.end, label %for.inc

if.end:                                           ; preds = %for.body
  %i26 = add nuw nsw i64 %indvars.iv, 1
  %seen = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i, i64 %i26, i32 3
  %i27 = load i8, i8* %seen, align 8
  %i28 = and i8 %i27, 1
  %tobool.not = icmp eq i8 %i28, 0
  %off = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.015, i64 0, i32 2
  %i29 = load i16, i16* %off, align 2
  br i1 %tobool.not, label %if.end15, label %if.else

if.else:                                          ; preds = %if.end
  %conv = sext i16 %i29 to i64
  %add6 = add i64 %i26, %conv
  %sext = shl i64 %add6, 32
  %idxprom7 = ashr exact i64 %sext, 32
  %seen9 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i, i64 %idxprom7, i32 3
  %i30 = load i8, i8* %seen9, align 8
  %i31 = and i8 %i30, 1
  %tobool10.not = icmp eq i8 %i31, 0
  br i1 %tobool10.not, label %if.end15, label %for.inc

if.end15:                                         ; preds = %if.else, %if.end
  %storemerge = phi i16 [ %i29, %if.end ], [ 0, %if.else ]
  store i16 %storemerge, i16* %off12, align 2
  %i32 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i32, i64 0, i32 7
  %i33 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %i33.idx = getelementptr %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i33, i64 0, i32 10
  %i33.idx.val = load i8, i8* %i33.idx, align 1
  %call17 = call fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %i33.idx.val) #22
  br i1 %call17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end15
  %i34 = trunc i64 %indvars.iv to i32
  call void @bpf_prog_offload_replace_insn(%struct.bpf_verifier_env* noundef %env, i32 noundef %i34, %struct.bpf_insn* noundef nonnull %tmpcast) #23
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.end15
  %i35 = bitcast %struct.bpf_insn* %insn.015 to i64*
  %i36 = load i64, i64* %ja, align 8
  store i64 %i36, i64* %i35, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end19, %if.else, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %incdec.ptr = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.015, i64 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @opt_remove_dead_code(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i33 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i33, i64 0, i32 4
  %i34 = load i32, i32* %len, align 4
  %cmp19 = icmp sgt i32 %i34, 0
  br i1 %cmp19, label %while.cond.preheader, label %return

while.cond.preheader:                             ; preds = %for.inc, %entry
  %indvars.iv28 = phi i32 [ %indvars.iv.next29, %for.inc ], [ 0, %entry ]
  %i.022 = phi i32 [ %inc9, %for.inc ], [ 0, %entry ]
  %insn_cnt.020 = phi i32 [ %insn_cnt.1, %for.inc ], [ %i34, %entry ]
  %cmp115 = icmp slt i32 %i.022, %insn_cnt.020
  br i1 %cmp115, label %land.rhs.preheader, label %while.end

land.rhs.preheader:                               ; preds = %while.cond.preheader
  %i35 = add i32 %insn_cnt.020, %indvars.iv28
  %wide.trip.count = zext i32 %i35 to i64
  br label %land.rhs

land.rhs:                                         ; preds = %while.body, %land.rhs.preheader
  %indvars.iv = phi i64 [ 0, %land.rhs.preheader ], [ %indvars.iv.next, %while.body ]
  %add17 = phi i32 [ %i.022, %land.rhs.preheader ], [ %add, %while.body ]
  %idxprom = sext i32 %add17 to i64
  %seen = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i, i64 %idxprom, i32 3
  %i36 = load i8, i8* %seen, align 8
  %i37 = and i8 %i36, 1
  %tobool.not = icmp eq i8 %i37, 0
  br i1 %tobool.not, label %while.body, label %while.end.loopexit.split.loop.exit31

while.body:                                       ; preds = %land.rhs
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %indvars = trunc i64 %indvars.iv.next to i32
  %add = add nuw nsw i32 %i.022, %indvars
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %while.end, label %land.rhs

while.end.loopexit.split.loop.exit31:             ; preds = %land.rhs
  %i38 = trunc i64 %indvars.iv to i32
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit.split.loop.exit31, %while.body, %while.cond.preheader
  %j.0.lcssa = phi i32 [ 0, %while.cond.preheader ], [ %i38, %while.end.loopexit.split.loop.exit31 ], [ %i35, %while.body ]
  %tobool3.not = icmp eq i32 %j.0.lcssa, 0
  br i1 %tobool3.not, label %for.inc, label %if.end

if.end:                                           ; preds = %while.end
  %call = call fastcc i32 @verifier_remove_insns(%struct.bpf_verifier_env* noundef %env, i32 noundef %i.022, i32 noundef %j.0.lcssa) #22
  %tobool4.not = icmp eq i32 %call, 0
  br i1 %tobool4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end
  %i39 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len8 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i39, i64 0, i32 4
  %i40 = load i32, i32* %len8, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end6, %while.end
  %insn_cnt.1 = phi i32 [ %i40, %if.end6 ], [ %insn_cnt.020, %while.end ]
  %inc9 = add nuw nsw i32 %i.022, 1
  %cmp = icmp slt i32 %inc9, %insn_cnt.1
  %indvars.iv.next29 = add nsw i32 %indvars.iv28, -1
  br i1 %cmp, label %while.cond.preheader, label %return

return:                                           ; preds = %for.inc, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ %call, %if.end ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @opt_remove_nops(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %i13 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i13 to %struct.bpf_insn*
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i14 = load i32, i32* %len, align 4
  %cmp9 = icmp sgt i32 %i14, 0
  br i1 %cmp9, label %for.body, label %return

for.body:                                         ; preds = %for.inc, %entry
  %i.011 = phi i32 [ %inc, %for.inc ], [ 0, %entry ]
  %insn_cnt.010 = phi i32 [ %insn_cnt.1, %for.inc ], [ %i14, %entry ]
  %idxprom = sext i32 %i.011 to i64
  %i15 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom, i32 0
  %bcmp = call i32 @bcmp(i8* noundef dereferenceable(8) %i15, i8* noundef dereferenceable(8) getelementptr inbounds (%struct.bpf_insn, %struct.bpf_insn* @__const.opt_remove_nops.ja, i64 0, i32 0), i64 8)
  %tobool.not = icmp eq i32 %bcmp, 0
  br i1 %tobool.not, label %if.end, label %for.inc

if.end:                                           ; preds = %for.body
  %call2 = call fastcc i32 @verifier_remove_insns(%struct.bpf_verifier_env* noundef %env, i32 noundef %i.011, i32 noundef 1) #22
  %tobool3.not = icmp eq i32 %call2, 0
  br i1 %tobool3.not, label %if.end5, label %return

if.end5:                                          ; preds = %if.end
  %dec = add i32 %insn_cnt.010, -1
  %dec6 = add i32 %i.011, -1
  br label %for.inc

for.inc:                                          ; preds = %if.end5, %for.body
  %insn_cnt.1 = phi i32 [ %insn_cnt.010, %for.body ], [ %dec, %if.end5 ]
  %i.1 = phi i32 [ %i.011, %for.body ], [ %dec6, %if.end5 ]
  %inc = add i32 %i.1, 1
  %cmp = icmp slt i32 %inc, %insn_cnt.1
  br i1 %cmp, label %for.body, label %return

return:                                           ; preds = %for.inc, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ %call2, %if.end ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @sanitize_dead_code(%struct.bpf_prog* %env.0.2.val, %struct.bpf_insn_aux_data* %env.0.16.val) unnamed_addr #15 {
entry:
  %i10 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %env.0.2.val, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i10 to %struct.bpf_insn*
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %env.0.2.val, i64 0, i32 4
  %i11 = load i32, i32* %len, align 4
  %cmp6 = icmp sgt i32 %i11, 0
  br i1 %cmp6, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %i11 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %i12 = icmp eq i32 %i11, 1
  br i1 %i12, label %for.end.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %seen = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %env.0.16.val, i64 %indvars.iv, i32 3
  %i13 = load i8, i8* %seen, align 8
  %i14 = and i8 %i13, 1
  %tobool.not = icmp eq i8 %i14, 0
  br i1 %tobool.not, label %if.end, label %for.inc

if.end:                                           ; preds = %for.body
  %i15 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %indvars.iv, i32 0
  %i16 = bitcast i8* %i15 to i64*
  store i64 4294901765, i64* %i16, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end, %for.body
  %indvars.iv.next = or i64 %indvars.iv, 1
  %seen.1 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %env.0.16.val, i64 %indvars.iv.next, i32 3
  %i17 = load i8, i8* %seen.1, align 8
  %i18 = and i8 %i17, 1
  %tobool.not.1 = icmp eq i8 %i18, 0
  br i1 %tobool.not.1, label %if.end.1, label %for.inc.1

if.end.1:                                         ; preds = %for.inc
  %i19 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %indvars.iv.next, i32 0
  %i20 = bitcast i8* %i19 to i64*
  store i64 4294901765, i64* %i20, align 4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.end.1, %for.inc
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.ncmp.1 = icmp eq i64 %indvars.iv.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.end.loopexit.unr-lcssa, label %for.body

for.end.loopexit.unr-lcssa:                       ; preds = %for.inc.1, %for.body.preheader
  %indvars.iv.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.end, label %for.body.epil

for.body.epil:                                    ; preds = %for.end.loopexit.unr-lcssa
  %seen.epil = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %env.0.16.val, i64 %indvars.iv.unr, i32 3
  %i21 = load i8, i8* %seen.epil, align 8
  %i22 = and i8 %i21, 1
  %tobool.not.epil = icmp eq i8 %i22, 0
  br i1 %tobool.not.epil, label %if.end.epil, label %for.end

if.end.epil:                                      ; preds = %for.body.epil
  %i23 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %indvars.iv.unr, i32 0
  %i24 = bitcast i8* %i23 to i64*
  store i64 4294901765, i64* %i24, align 4
  br label %for.end

for.end:                                          ; preds = %if.end.epil, %for.body.epil, %for.end.loopexit.unr-lcssa, %entry
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @convert_ctx_accesses(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %insn_buf = alloca [16 x %struct.bpf_insn], align 16
  %target_size = alloca i32, align 4
  %patch = alloca [2 x %struct.bpf_insn], align 16
  %ops1 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 3
  %i = load %struct.bpf_verifier_ops*, %struct.bpf_verifier_ops** %ops1, align 8
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i141 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i141, i64 0, i32 4
  %i142 = load i32, i32* %len, align 4
  %gen_prologue = getelementptr inbounds %struct.bpf_verifier_ops, %struct.bpf_verifier_ops* %i, i64 0, i32 2
  %i143 = load i32 (%struct.bpf_insn*, i1, %struct.bpf_prog*)*, i32 (%struct.bpf_insn*, i1, %struct.bpf_prog*)** %gen_prologue, align 8
  %tobool.not = icmp eq i32 (%struct.bpf_insn*, i1, %struct.bpf_prog*)* %i143, null
  br i1 %tobool.not, label %lor.lhs.false, label %if.end

lor.lhs.false:                                    ; preds = %entry
  %seen_direct_write = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 15
  %i144 = load i8, i8* %seen_direct_write, align 1
  %i145 = and i8 %i144, 1
  %tobool2.not = icmp eq i8 %i145, 0
  br i1 %tobool2.not, label %if.end22, label %return.sink.split

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 0
  %seen_direct_write7 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 15
  %i146 = load i8, i8* %seen_direct_write7, align 1
  %i147 = and i8 %i146, 1
  %tobool8 = icmp ne i8 %i147, 0
  %call = call i32 %i143(%struct.bpf_insn* noundef %arraydecay, i1 noundef zeroext %tobool8, %struct.bpf_prog* noundef %i141) #23
  %cmp = icmp ugt i32 %call, 15
  br i1 %cmp, label %return.sink.split, label %if.else

if.else:                                          ; preds = %if.end
  %tobool12.not = icmp eq i32 %call, 0
  br i1 %tobool12.not, label %if.end22, label %if.then13

if.then13:                                        ; preds = %if.else
  %call15 = call fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef 0, %struct.bpf_insn* noundef %arraydecay, i32 noundef %call) #22
  %tobool16.not = icmp eq %struct.bpf_prog* %call15, null
  br i1 %tobool16.not, label %return, label %if.end18

if.end18:                                         ; preds = %if.then13
  store %struct.bpf_prog* %call15, %struct.bpf_prog** %prog, align 8
  %sub = add i32 %call, -1
  br label %if.end22

if.end22:                                         ; preds = %if.end18, %if.else, %lor.lhs.false
  %delta.0 = phi i32 [ %sub, %if.end18 ], [ 0, %if.else ], [ 0, %lor.lhs.false ]
  %i148 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i148, i64 0, i32 7
  %i149 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %i149.idx = getelementptr %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i149, i64 0, i32 10
  %i149.idx.val = load i8, i8* %i149.idx, align 1
  %call24 = call fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %i149.idx.val) #22
  %call24.not = xor i1 %call24, true
  %cmp29120 = icmp sgt i32 %i142, 0
  %or.cond133 = select i1 %call24.not, i1 %cmp29120, i1 false
  br i1 %or.cond133, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %if.end22
  %i150 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i148, i64 0, i32 10
  %arraydecay28 = bitcast %union.anon.146* %i150 to %struct.bpf_insn*
  %i1 = zext i32 %delta.0 to i64
  %add.ptr = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay28, i64 %i1
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %arrayinit.begin = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %patch, i64 0, i64 0
  %code79 = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %patch, i64 0, i64 0, i32 0
  %dst_reg = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %patch, i64 0, i64 0, i32 1
  %off83 = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %patch, i64 0, i64 0, i32 2
  %imm = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %patch, i64 0, i64 0, i32 3
  %i151 = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %patch, i64 0, i64 1, i32 0
  %i152 = bitcast i8* %i151 to i64*
  %convert_ctx_access110 = getelementptr inbounds %struct.bpf_verifier_ops, %struct.bpf_verifier_ops* %i, i64 0, i32 4
  %arraydecay203 = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 0
  %wide.trip.count = zext i32 %i142 to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %delta.1126 = phi i32 [ %delta.0, %for.body.lr.ph ], [ %delta.2, %for.inc ]
  %insn.0123 = phi %struct.bpf_insn* [ %add.ptr, %for.body.lr.ph ], [ %incdec.ptr, %for.inc ]
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0123, i64 0, i32 0
  %i153 = load i8, i8* %code, align 4
  %i154 = add i8 %i153, -97
  %i155 = call i8 @spirv.llvm_fshl_i8(i8 %i154, i8 %i154, i8 7)
  br label %NodeBlock19

NodeBlock19:                                      ; preds = %for.body
  %Pivot20 = icmp slt i8 %i155, 8
  br i1 %Pivot20, label %NodeBlock7, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp slt i8 %i155, 12
  br i1 %Pivot18, label %NodeBlock11, label %NodeBlock15

NodeBlock15:                                      ; preds = %NodeBlock17
  %Pivot16 = icmp eq i8 %i154, 24
  br i1 %Pivot16, label %if.end73, label %LeafBlock13

LeafBlock13:                                      ; preds = %NodeBlock15
  %SwitchLeaf14 = icmp eq i8 %i154, 26
  br i1 %SwitchLeaf14, label %if.then70, label %NewDefault

NodeBlock11:                                      ; preds = %NodeBlock17
  %Pivot12 = icmp slt i8 %i155, 9
  br i1 %Pivot12, label %if.end73, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock11
  %SwitchLeaf10 = icmp eq i8 %i154, 18
  br i1 %SwitchLeaf10, label %if.then70, label %NewDefault

NodeBlock7:                                       ; preds = %NodeBlock19
  %Pivot8 = icmp slt i8 %i155, 4
  br i1 %Pivot8, label %NodeBlock, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp eq i8 %i154, 8
  br i1 %Pivot6, label %if.end73, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp eq i8 %i154, 10
  br i1 %SwitchLeaf4, label %if.then70, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock7
  %Pivot = icmp slt i8 %i155, 1
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %i154, 2
  br i1 %SwitchLeaf2, label %if.then70, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %i154, 0
  br i1 %SwitchLeaf, label %if.end73, label %NewDefault

if.then70:                                        ; preds = %LeafBlock1, %LeafBlock3, %LeafBlock9, %LeafBlock13
  br label %if.end73

if.end73:                                         ; preds = %if.then70, %LeafBlock, %NodeBlock5, %NodeBlock11, %NodeBlock15
  %cmp74 = phi i1 [ true, %if.then70 ], [ false, %LeafBlock ], [ false, %NodeBlock5 ], [ false, %NodeBlock11 ], [ false, %NodeBlock15 ]
  %type.0 = phi i32 [ 2, %if.then70 ], [ 1, %LeafBlock ], [ 1, %NodeBlock5 ], [ 1, %NodeBlock11 ], [ 1, %NodeBlock15 ]
  br i1 %cmp74, label %land.lhs.true, label %if.end105

land.lhs.true:                                    ; preds = %if.end73
  %i156 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %i157 = trunc i64 %indvars.iv to i32
  %add76 = add i32 %delta.1126, %i157
  %idxprom = sext i32 %add76 to i64
  %sanitize_stack_off = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i156, i64 %idxprom, i32 2
  %i158 = load i32, i32* %sanitize_stack_off, align 4
  %tobool77.not = icmp eq i32 %i158, 0
  br i1 %tobool77.not, label %if.end105, label %if.then78

if.then78:                                        ; preds = %land.lhs.true
  store i8 122, i8* %code79, align 16
  store i8 10, i8* %dst_reg, align 1
  %i159 = load i32, i32* %sanitize_stack_off, align 4
  %conv89 = trunc i32 %i159 to i16
  store i16 %conv89, i16* %off83, align 2
  store i32 0, i32* %imm, align 4
  %i160 = bitcast %struct.bpf_insn* %insn.0123 to i64*
  %i161 = load i64, i64* %i160, align 4
  store i64 %i161, i64* %i152, align 8
  %call92 = call fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef %add76, %struct.bpf_insn* noundef %arrayinit.begin, i32 noundef 2) #22
  %tobool93.not = icmp eq %struct.bpf_prog* %call92, null
  br i1 %tobool93.not, label %return, label %if.end95

if.end95:                                         ; preds = %if.then78
  %add97 = add i32 %delta.1126, 1
  br label %for.inc.sink.split

if.end105:                                        ; preds = %land.lhs.true, %if.end73
  %i162 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %i163 = trunc i64 %indvars.iv to i32
  %add107 = add i32 %delta.1126, %i163
  %idxprom108 = sext i32 %add107 to i64
  %i164 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i162, i64 %idxprom108, i32 0
  %ptr_type = bitcast %union.anon.13* %i164 to i32*
  %i165 = load i32, i32* %ptr_type, align 8
  br label %NodeBlock38

NodeBlock38:                                      ; preds = %if.end105
  %Pivot39 = icmp slt i32 %i165, 13
  br i1 %Pivot39, label %NodeBlock26, label %NodeBlock36

NodeBlock36:                                      ; preds = %NodeBlock38
  %Pivot37 = icmp slt i32 %i165, 15
  br i1 %Pivot37, label %LeafBlock28, label %NodeBlock34

NodeBlock34:                                      ; preds = %NodeBlock36
  %Pivot35 = icmp slt i32 %i165, 18
  br i1 %Pivot35, label %LeafBlock30, label %LeafBlock32

LeafBlock32:                                      ; preds = %NodeBlock34
  %SwitchLeaf33 = icmp eq i32 %i165, 18
  br i1 %SwitchLeaf33, label %sw.bb117, label %NewDefault21

LeafBlock30:                                      ; preds = %NodeBlock34
  %SwitchLeaf31 = icmp eq i32 %i165, 15
  br i1 %SwitchLeaf31, label %sw.bb116, label %NewDefault21

LeafBlock28:                                      ; preds = %NodeBlock36
  %SwitchLeaf29 = icmp eq i32 %i165, 13
  br i1 %SwitchLeaf29, label %sw.epilog, label %NewDefault21

NodeBlock26:                                      ; preds = %NodeBlock38
  %Pivot27 = icmp slt i32 %i165, 11
  br i1 %Pivot27, label %LeafBlock22, label %LeafBlock24

LeafBlock24:                                      ; preds = %NodeBlock26
  %SwitchLeaf25 = icmp eq i32 %i165, 11
  br i1 %SwitchLeaf25, label %sw.epilog, label %NewDefault21

LeafBlock22:                                      ; preds = %NodeBlock26
  %SwitchLeaf23 = icmp eq i32 %i165, 2
  br i1 %SwitchLeaf23, label %sw.bb, label %NewDefault21

sw.bb:                                            ; preds = %LeafBlock22
  %i166 = load i32 (i32, %struct.bpf_insn*, %struct.bpf_insn*, %struct.bpf_prog*, i32*)*, i32 (i32, %struct.bpf_insn*, %struct.bpf_insn*, %struct.bpf_prog*, i32*)** %convert_ctx_access110, align 8
  %tobool111.not = icmp eq i32 (i32, %struct.bpf_insn*, %struct.bpf_insn*, %struct.bpf_prog*, i32*)* %i166, null
  br i1 %tobool111.not, label %for.inc, label %sw.epilog

sw.bb116:                                         ; preds = %LeafBlock30
  br label %sw.epilog

sw.bb117:                                         ; preds = %LeafBlock32
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb117, %sw.bb116, %sw.bb, %LeafBlock24, %LeafBlock28
  %convert_ctx_access.0 = phi i32 (i32, %struct.bpf_insn*, %struct.bpf_insn*, %struct.bpf_prog*, i32*)* [ @bpf_xdp_sock_convert_ctx_access, %sw.bb117 ], [ @bpf_tcp_sock_convert_ctx_access, %sw.bb116 ], [ %i166, %sw.bb ], [ @bpf_sock_convert_ctx_access, %LeafBlock24 ], [ @bpf_sock_convert_ctx_access, %LeafBlock28 ]
  %ctx_field_size122 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i162, i64 %idxprom108, i32 1
  %i167 = load i32, i32* %ctx_field_size122, align 8
  %i168 = lshr i8 %i153, 3
  %i169 = and i8 %i168, 3
  %i170 = zext i8 %i169 to i64
  %switch.gep = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table.convert_ctx_accesses, i64 0, i64 %i170
  %switch.load = load i32, i32* %switch.gep, align 4
  %cmp175 = icmp slt i32 %switch.load, %i167
  %call177 = call fastcc i32 @bpf_ctx_off_adjust_machine(i32 noundef %i167) #22
  %off178 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0123, i64 0, i32 2
  %i171 = load i16, i16* %off178, align 2
  %conv179 = sext i16 %i171 to i32
  br i1 %cmp175, label %if.then181, label %if.end202

if.then181:                                       ; preds = %sw.epilog
  br i1 %cmp74, label %return.sink.split, label %if.end185

if.end185:                                        ; preds = %if.then181
  %switch.selectcmp = icmp eq i32 %i167, 8
  %switch.select = select i1 %switch.selectcmp, i8 121, i8 105
  %switch.selectcmp118 = icmp eq i32 %i167, 4
  %switch.select119 = select i1 %switch.selectcmp118, i8 97, i8 %switch.select
  %i172 = trunc i32 %call177 to i16
  %i173 = sub i16 0, %i172
  %conv197 = and i16 %i171, %i173
  store i16 %conv197, i16* %off178, align 2
  store i8 %switch.select119, i8* %code, align 4
  br label %if.end202

if.end202:                                        ; preds = %if.end185, %sw.epilog
  store i32 0, i32* %target_size, align 4
  %i174 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %call205 = call i32 %convert_ctx_access.0(i32 noundef %type.0, %struct.bpf_insn* noundef %insn.0123, %struct.bpf_insn* noundef %arraydecay203, %struct.bpf_prog* noundef %i174, i32* noundef nonnull %target_size) #23
  %conv209 = sext i32 %call205 to i64
  %i175 = add i32 %call205, -16
  %i176 = icmp ult i32 %i175, -15
  br i1 %i176, label %return.sink.split, label %lor.lhs.false212

lor.lhs.false212:                                 ; preds = %if.end202
  %tobool213 = icmp eq i32 %i167, 0
  %i177 = load i32, i32* %target_size, align 4
  %tobool215 = icmp ne i32 %i177, 0
  %or.cond1 = select i1 %tobool213, i1 true, i1 %tobool215
  br i1 %or.cond1, label %if.end217, label %return.sink.split

if.end217:                                        ; preds = %lor.lhs.false212
  %cmp221 = icmp ult i32 %switch.load, %i177
  %or.cond = select i1 %cmp175, i1 %cmp221, i1 false
  br i1 %or.cond, label %if.then223, label %if.end319

if.then223:                                       ; preds = %if.end217
  %call224 = call fastcc zeroext i8 @bpf_ctx_narrow_access_offset(i32 noundef %conv179, i32 noundef %call177) #22
  %mul = shl i8 %call224, 3
  %cmp227 = icmp slt i32 %i167, 5
  %tobool230.not = icmp eq i8 %mul, 0
  br i1 %cmp227, label %if.then229, label %if.else271

if.then229:                                       ; preds = %if.then223
  br i1 %tobool230.not, label %if.end249, label %if.then231

if.then231:                                       ; preds = %if.then229
  %inc = add i32 %call205, 1
  %dst_reg236 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0123, i64 0, i32 1
  %bf.load237 = load i8, i8* %dst_reg236, align 1
  %bf.clear238 = and i8 %bf.load237, 15
  %conv248 = zext i8 %mul to i32
  %.compoundliteral.sroa.0.0..sroa_idx = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %conv209, i32 0
  store i8 116, i8* %.compoundliteral.sroa.0.0..sroa_idx, align 8
  %.compoundliteral.sroa.2.0..sroa_idx = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %conv209, i32 1
  store i8 %bf.clear238, i8* %.compoundliteral.sroa.2.0..sroa_idx, align 1
  %.compoundliteral.sroa.6.0..sroa_idx8 = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %conv209, i32 2
  store i16 0, i16* %.compoundliteral.sroa.6.0..sroa_idx8, align 2
  %.compoundliteral.sroa.7.0..sroa_idx9 = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %conv209, i32 3
  store i32 %conv248, i32* %.compoundliteral.sroa.7.0..sroa_idx9, align 4
  br label %if.end249

if.end249:                                        ; preds = %if.then231, %if.then229
  %cnt.0 = phi i32 [ %inc, %if.then231 ], [ %call205, %if.then229 ]
  %mul269 = shl nuw nsw i32 %switch.load, 3
  %notmask117 = shl nsw i32 -1, %mul269
  br label %if.end319.sink.split

if.else271:                                       ; preds = %if.then223
  br i1 %tobool230.not, label %if.end294, label %if.then273

if.then273:                                       ; preds = %if.else271
  %inc274 = add i32 %call205, 1
  %dst_reg280 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0123, i64 0, i32 1
  %bf.load281 = load i8, i8* %dst_reg280, align 1
  %bf.clear282 = and i8 %bf.load281, 15
  %conv293 = zext i8 %mul to i32
  %.compoundliteral277.sroa.0.0..sroa_idx = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %conv209, i32 0
  store i8 119, i8* %.compoundliteral277.sroa.0.0..sroa_idx, align 8
  %.compoundliteral277.sroa.2.0..sroa_idx = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %conv209, i32 1
  store i8 %bf.clear282, i8* %.compoundliteral277.sroa.2.0..sroa_idx, align 1
  %.compoundliteral277.sroa.6.0..sroa_idx4 = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %conv209, i32 2
  store i16 0, i16* %.compoundliteral277.sroa.6.0..sroa_idx4, align 2
  %.compoundliteral277.sroa.7.0..sroa_idx5 = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %conv209, i32 3
  store i32 %conv293, i32* %.compoundliteral277.sroa.7.0..sroa_idx5, align 4
  br label %if.end294

if.end294:                                        ; preds = %if.then273, %if.else271
  %cnt.1 = phi i32 [ %inc274, %if.then273 ], [ %call205, %if.else271 ]
  %mul314 = shl nuw nsw i32 %switch.load, 3
  %sh_prom = zext i32 %mul314 to i64
  %notmask = shl nsw i64 -1, %sh_prom
  %i178 = trunc i64 %notmask to i32
  br label %if.end319.sink.split

if.end319.sink.split:                             ; preds = %if.end294, %if.end249
  %notmask117.sink = phi i32 [ %notmask117, %if.end249 ], [ %i178, %if.end294 ]
  %idxprom251.sink136.in = phi i32 [ %cnt.0, %if.end249 ], [ %cnt.1, %if.end294 ]
  %.sink = phi i8 [ 84, %if.end249 ], [ 87, %if.end294 ]
  %cnt.2.ph = add i32 %idxprom251.sink136.in, 1
  %bf.clear258.sink.in.in = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0123, i64 0, i32 1
  %bf.clear258.sink.in = load i8, i8* %bf.clear258.sink.in.in, align 1
  %bf.clear258.sink = and i8 %bf.clear258.sink.in, 15
  %idxprom251.sink136 = sext i32 %idxprom251.sink136.in to i64
  %sub270 = xor i32 %notmask117.sink, -1
  %.compoundliteral253.sroa.0.0..sroa_idx = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %idxprom251.sink136, i32 0
  store i8 %.sink, i8* %.compoundliteral253.sroa.0.0..sroa_idx, align 8
  %.compoundliteral253.sroa.2.0..sroa_idx = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %idxprom251.sink136, i32 1
  store i8 %bf.clear258.sink, i8* %.compoundliteral253.sroa.2.0..sroa_idx, align 1
  %.compoundliteral253.sroa.6.0..sroa_idx6 = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %idxprom251.sink136, i32 2
  store i16 0, i16* %.compoundliteral253.sroa.6.0..sroa_idx6, align 2
  %.compoundliteral253.sroa.7.0..sroa_idx7 = getelementptr [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 %idxprom251.sink136, i32 3
  store i32 %sub270, i32* %.compoundliteral253.sroa.7.0..sroa_idx7, align 4
  br label %if.end319

if.end319:                                        ; preds = %if.end319.sink.split, %if.end217
  %cnt.2 = phi i32 [ %call205, %if.end217 ], [ %cnt.2.ph, %if.end319.sink.split ]
  %call322 = call fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef %add107, %struct.bpf_insn* noundef %arraydecay203, i32 noundef %cnt.2) #22
  %tobool323.not = icmp eq %struct.bpf_prog* %call322, null
  br i1 %tobool323.not, label %return, label %if.end325

if.end325:                                        ; preds = %if.end319
  %sub326 = add i32 %delta.1126, -1
  %add327 = add i32 %sub326, %cnt.2
  br label %for.inc.sink.split

for.inc.sink.split:                               ; preds = %if.end325, %if.end95
  %call322.sink138 = phi %struct.bpf_prog* [ %call322, %if.end325 ], [ %call92, %if.end95 ]
  %add327.sink = phi i32 [ %add327, %if.end325 ], [ %add97, %if.end95 ]
  store %struct.bpf_prog* %call322.sink138, %struct.bpf_prog** %prog, align 8
  %i179 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %call322.sink138, i64 0, i32 10
  %arraydecay330 = bitcast %union.anon.146* %i179 to %struct.bpf_insn*
  %add.ptr332 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay330, i64 %indvars.iv
  %idx.ext333 = sext i32 %add327.sink to i64
  %add.ptr334 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %add.ptr332, i64 %idx.ext333
  br label %for.inc

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock9, %LeafBlock13
  br label %for.inc

NewDefault21:                                     ; preds = %LeafBlock22, %LeafBlock24, %LeafBlock28, %LeafBlock30, %LeafBlock32
  br label %for.inc

for.inc:                                          ; preds = %NewDefault21, %NewDefault, %for.inc.sink.split, %sw.bb
  %insn.1 = phi %struct.bpf_insn* [ %insn.0123, %NewDefault21 ], [ %insn.0123, %sw.bb ], [ %insn.0123, %NewDefault ], [ %add.ptr334, %for.inc.sink.split ]
  %delta.2 = phi i32 [ %delta.1126, %NewDefault21 ], [ %delta.1126, %sw.bb ], [ %delta.1126, %NewDefault ], [ %add327.sink, %for.inc.sink.split ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %incdec.ptr = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.1, i64 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %return, label %for.body

return.sink.split:                                ; preds = %lor.lhs.false212, %if.end202, %if.then181, %if.end, %lor.lhs.false
  %.sink140 = phi i8* [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0), %if.end ], [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0), %lor.lhs.false ], [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0), %if.end202 ], [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0), %lor.lhs.false212 ], [ getelementptr inbounds ([46 x i8], [46 x i8]* @.str.284, i64 0, i64 0), %if.then181 ]
  %i180 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i180, i8* noundef %.sink140) #22
  br label %return

return:                                           ; preds = %return.sink.split, %for.inc, %if.end319, %if.then78, %if.end22, %if.then13
  %retval.0 = phi i32 [ -12, %if.then13 ], [ 0, %if.end22 ], [ -22, %return.sink.split ], [ 0, %for.inc ], [ -12, %if.end319 ], [ -12, %if.then78 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @fixup_bpf_calls(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %insn_buf = alloca [16 x %struct.bpf_insn], align 16
  %mask_and_div = alloca [5 x %struct.bpf_insn], align 16
  %mask_and_mod = alloca [3 x %struct.bpf_insn], align 16
  %insn_buf215 = alloca [16 x %struct.bpf_insn], align 16
  %prog1 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog1, align 8
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i291 = load i32, i32* %len, align 4
  %cmp212 = icmp sgt i32 %i291, 0
  br i1 %cmp212, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %i292 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i292 to %struct.bpf_insn*
  %code22 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 0, i32 0
  %dst_reg = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 0, i32 1
  %off = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 0, i32 2
  %imm = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 0, i32 3
  %code32 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 1, i32 0
  %dst_reg33 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 1, i32 1
  %off45 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 1, i32 2
  %imm46 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 1, i32 3
  %code48 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 2, i32 0
  %dst_reg49 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 2, i32 1
  %off66 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 2, i32 2
  %imm67 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 2, i32 3
  %code69 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 3, i32 0
  %dst_reg70 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 3, i32 1
  %off78 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 3, i32 2
  %imm79 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 3, i32 3
  %i293 = getelementptr inbounds [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 4, i32 0
  %i294 = bitcast i8* %i293 to i64*
  %code82 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 0, i32 0
  %dst_reg83 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 0, i32 1
  %off100 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 0, i32 2
  %imm101 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 0, i32 3
  %code103 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 1, i32 0
  %dst_reg104 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 1, i32 1
  %off116 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 1, i32 2
  %imm117 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 1, i32 3
  %i295 = getelementptr inbounds [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 2, i32 0
  %i296 = bitcast i8* %i295 to i64*
  %ops178 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 3
  %arraydecay179 = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 0
  %insn_aux_data559 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %.compoundliteral486.sroa.0.0..sroa_idx = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 0, i32 0
  %.compoundliteral486.sroa.2.0..sroa_idx = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 0, i32 1
  %.compoundliteral486.sroa.6.0..sroa_idx4 = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 0, i32 2
  %.compoundliteral486.sroa.7.0..sroa_idx5 = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 0, i32 3
  %.compoundliteral499.sroa.0.0..sroa_idx = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 1, i32 0
  %.compoundliteral499.sroa.2.0..sroa_idx = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 1, i32 1
  %.compoundliteral499.sroa.6.0..sroa_idx2 = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 1, i32 2
  %.compoundliteral499.sroa.7.0..sroa_idx3 = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 1, i32 3
  %i297 = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf, i64 0, i64 2, i32 0
  %i298 = bitcast i8* %i297 to i64*
  %arrayidx = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf215, i64 0, i64 0
  %incdec.ptr = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf215, i64 0, i64 1
  %.compoundliteral.sroa.0.0..sroa_idx = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf215, i64 0, i64 0, i32 0
  %.compoundliteral.sroa.2.0..sroa_idx = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf215, i64 0, i64 0, i32 1
  %.compoundliteral.sroa.6.0..sroa_idx22 = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf215, i64 0, i64 0, i32 2
  %.compoundliteral.sroa.7.0..sroa_idx23 = getelementptr inbounds [16 x %struct.bpf_insn], [16 x %struct.bpf_insn]* %insn_buf215, i64 0, i64 0, i32 3
  %sub.ptr.rhs.cast = ptrtoint [16 x %struct.bpf_insn]* %insn_buf215 to i64
  %wide.trip.count = zext i32 %i291 to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %prog.0271 = phi %struct.bpf_prog* [ %i, %for.body.lr.ph ], [ %prog.1, %for.inc ]
  %insn.0264 = phi %struct.bpf_insn* [ %arraydecay, %for.body.lr.ph ], [ %incdec.ptr660, %for.inc ]
  %delta.0255 = phi i32 [ 0, %for.body.lr.ph ], [ %delta.1, %for.inc ]
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0264, i64 0, i32 0
  %i299 = load i8, i8* %code, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %for.body
  %Pivot10 = icmp slt i8 %i299, 60
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i8 %i299, 63
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i8 %i299, 63
  br i1 %SwitchLeaf6, label %if.then, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i8 %i299, 60
  br i1 %SwitchLeaf4, label %if.then, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i8 %i299, -97
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %i299, -97
  br i1 %SwitchLeaf2, label %if.then, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %i299, -100
  br i1 %SwitchLeaf, label %if.then, label %NewDefault

if.then:                                          ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock5
  %i300 = and i8 %i299, 7
  %cmp20 = icmp eq i8 %i300, 7
  store i8 -68, i8* %code22, align 16
  %src_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0264, i64 0, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %bf.lshr = lshr i8 %bf.load, 4
  %bf.load23 = load i8, i8* %dst_reg, align 1
  %bf.clear = and i8 %bf.load23, -16
  %bf.set = or i8 %bf.clear, %bf.lshr
  store i8 %bf.set, i8* %dst_reg, align 1
  %bf.load26 = load i8, i8* %src_reg, align 1
  %bf.lshr27 = and i8 %bf.load26, -16
  %bf.set31 = or i8 %bf.lshr27, %bf.lshr
  store i8 %bf.set31, i8* %dst_reg, align 1
  store i16 0, i16* %off, align 2
  store i32 0, i32* %imm, align 4
  store i8 85, i8* %code32, align 8
  %bf.load35 = load i8, i8* %src_reg, align 1
  %bf.lshr36 = lshr i8 %bf.load35, 4
  store i8 %bf.lshr36, i8* %dst_reg33, align 1
  store i16 2, i16* %off45, align 2
  store i32 0, i32* %imm46, align 4
  store i8 -84, i8* %code48, align 16
  %bf.load51 = load i8, i8* %src_reg, align 1
  %bf.clear52 = and i8 %bf.load51, 15
  %bf.load53 = load i8, i8* %dst_reg49, align 1
  %bf.clear55 = and i8 %bf.load53, -16
  %bf.set56 = or i8 %bf.clear55, %bf.clear52
  store i8 %bf.set56, i8* %dst_reg49, align 1
  %bf.load59 = load i8, i8* %src_reg, align 1
  %bf.shl63 = shl i8 %bf.load59, 4
  %bf.set65 = or i8 %bf.shl63, %bf.clear52
  store i8 %bf.set65, i8* %dst_reg49, align 1
  store i16 0, i16* %off66, align 2
  store i32 0, i32* %imm67, align 4
  store i8 5, i8* %code69, align 8
  store i8 0, i8* %dst_reg70, align 1
  store i16 1, i16* %off78, align 2
  store i32 0, i32* %imm79, align 4
  %i301 = bitcast %struct.bpf_insn* %insn.0264 to i64*
  %i302 = load i64, i64* %i301, align 4
  store i64 %i302, i64* %i294, align 16
  store i8 -68, i8* %code82, align 16
  %bf.load85 = load i8, i8* %src_reg, align 1
  %bf.lshr86 = lshr i8 %bf.load85, 4
  %bf.load87 = load i8, i8* %dst_reg83, align 1
  %bf.clear89 = and i8 %bf.load87, -16
  %bf.set90 = or i8 %bf.clear89, %bf.lshr86
  store i8 %bf.set90, i8* %dst_reg83, align 1
  %bf.load93 = load i8, i8* %src_reg, align 1
  %bf.lshr94 = and i8 %bf.load93, -16
  %bf.set99 = or i8 %bf.lshr94, %bf.lshr86
  store i8 %bf.set99, i8* %dst_reg83, align 1
  store i16 0, i16* %off100, align 2
  store i32 0, i32* %imm101, align 4
  store i8 21, i8* %code103, align 8
  %bf.load106 = load i8, i8* %src_reg, align 1
  %bf.lshr107 = lshr i8 %bf.load106, 4
  store i8 %bf.lshr107, i8* %dst_reg104, align 1
  store i16 1, i16* %off116, align 2
  store i32 0, i32* %imm117, align 4
  %i303 = load i64, i64* %i301, align 4
  store i64 %i303, i64* %i296, align 16
  %i304 = load i8, i8* %code, align 4
  br label %NodeBlock16

NodeBlock16:                                      ; preds = %if.then
  %Pivot17 = icmp slt i8 %i304, 63
  br i1 %Pivot17, label %LeafBlock12, label %LeafBlock14

LeafBlock14:                                      ; preds = %NodeBlock16
  %SwitchLeaf15 = icmp eq i8 %i304, 63
  br i1 %SwitchLeaf15, label %if.then128, label %NewDefault11

LeafBlock12:                                      ; preds = %NodeBlock16
  %SwitchLeaf13 = icmp eq i8 %i304, 60
  br i1 %SwitchLeaf13, label %if.then128, label %NewDefault11

if.then128:                                       ; preds = %LeafBlock12, %LeafBlock14
  %i305 = zext i1 %cmp20 to i64
  %add.ptr = getelementptr [5 x %struct.bpf_insn], [5 x %struct.bpf_insn]* %mask_and_div, i64 0, i64 %i305
  %conv135 = select i1 %cmp20, i32 4, i32 5
  br label %if.end

NewDefault11:                                     ; preds = %LeafBlock12, %LeafBlock14
  br label %if.else

if.else:                                          ; preds = %NewDefault11
  %i306 = zext i1 %cmp20 to i64
  %add.ptr141 = getelementptr [3 x %struct.bpf_insn], [3 x %struct.bpf_insn]* %mask_and_mod, i64 0, i64 %i306
  %conv147 = select i1 %cmp20, i32 2, i32 3
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then128
  %patchlet.0 = phi %struct.bpf_insn* [ %add.ptr, %if.then128 ], [ %add.ptr141, %if.else ]
  %cnt.0 = phi i32 [ %conv135, %if.then128 ], [ %conv147, %if.else ]
  %i307 = trunc i64 %indvars.iv to i32
  %add = add i32 %delta.0255, %i307
  %call = call fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef %add, %struct.bpf_insn* noundef %patchlet.0, i32 noundef %cnt.0) #22
  %tobool148.not = icmp eq %struct.bpf_prog* %call, null
  br i1 %tobool148.not, label %return, label %if.end150

if.end150:                                        ; preds = %if.end
  %sub151 = add i32 %delta.0255, -1
  %add152 = add i32 %sub151, %cnt.0
  store %struct.bpf_prog* %call, %struct.bpf_prog** %prog1, align 8
  %i308 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %call, i64 0, i32 10
  %arraydecay155 = bitcast %union.anon.146* %i308 to %struct.bpf_insn*
  %add.ptr157 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay155, i64 %indvars.iv
  %idx.ext158 = sext i32 %add152 to i64
  %add.ptr159 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %add.ptr157, i64 %idx.ext158
  br label %for.inc

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock5
  br label %if.end160

if.end160:                                        ; preds = %NewDefault
  %i309 = and i8 %i299, 7
  %cmp164 = icmp eq i8 %i309, 0
  br i1 %cmp164, label %land.lhs.true, label %if.end204

land.lhs.true:                                    ; preds = %if.end160
  %and168 = and i8 %i299, -32
  br label %NodeBlock23

NodeBlock23:                                      ; preds = %land.lhs.true
  %Pivot24 = icmp slt i8 %and168, 64
  br i1 %Pivot24, label %LeafBlock19, label %LeafBlock21

LeafBlock21:                                      ; preds = %NodeBlock23
  %SwitchLeaf22 = icmp eq i8 %and168, 64
  br i1 %SwitchLeaf22, label %if.then177, label %NewDefault18

LeafBlock19:                                      ; preds = %NodeBlock23
  %SwitchLeaf20 = icmp eq i8 %and168, 32
  br i1 %SwitchLeaf20, label %if.then177, label %NewDefault18

if.then177:                                       ; preds = %LeafBlock19, %LeafBlock21
  %i310 = load %struct.bpf_verifier_ops*, %struct.bpf_verifier_ops** %ops178, align 8
  %gen_ld_abs = getelementptr inbounds %struct.bpf_verifier_ops, %struct.bpf_verifier_ops* %i310, i64 0, i32 3
  %i311 = load i32 (%struct.bpf_insn*, %struct.bpf_insn*)*, i32 (%struct.bpf_insn*, %struct.bpf_insn*)** %gen_ld_abs, align 8
  %call180 = call i32 %i311(%struct.bpf_insn* noundef %insn.0264, %struct.bpf_insn* noundef %arraydecay179) #23
  %i312 = add i32 %call180, -16
  %i313 = icmp ult i32 %i312, -15
  br i1 %i313, label %if.then187, label %if.end188

if.then187:                                       ; preds = %if.then177
  %i314 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i314, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0)) #22
  br label %return

if.end188:                                        ; preds = %if.then177
  %i315 = trunc i64 %indvars.iv to i32
  %add189 = add i32 %delta.0255, %i315
  %call191 = call fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef %add189, %struct.bpf_insn* noundef %arraydecay179, i32 noundef %call180) #22
  %tobool192.not = icmp eq %struct.bpf_prog* %call191, null
  br i1 %tobool192.not, label %return, label %if.end194

if.end194:                                        ; preds = %if.end188
  %sub195 = add i32 %delta.0255, -1
  %add196 = add i32 %sub195, %call180
  store %struct.bpf_prog* %call191, %struct.bpf_prog** %prog1, align 8
  %i316 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %call191, i64 0, i32 10
  %arraydecay199 = bitcast %union.anon.146* %i316 to %struct.bpf_insn*
  %add.ptr201 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay199, i64 %indvars.iv
  %idx.ext202 = sext i32 %add196 to i64
  %add.ptr203 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %add.ptr201, i64 %idx.ext202
  br label %for.inc

NewDefault18:                                     ; preds = %LeafBlock19, %LeafBlock21
  br label %if.end204

if.end204:                                        ; preds = %NewDefault18, %if.end160
  br label %NodeBlock34

NodeBlock34:                                      ; preds = %if.end204
  %Pivot35 = icmp slt i8 %i299, 15
  br i1 %Pivot35, label %LeafBlock26, label %NodeBlock32

NodeBlock32:                                      ; preds = %NodeBlock34
  %Pivot33 = icmp slt i8 %i299, 31
  br i1 %Pivot33, label %LeafBlock28, label %LeafBlock30

LeafBlock30:                                      ; preds = %NodeBlock32
  %SwitchLeaf31 = icmp eq i8 %i299, 31
  br i1 %SwitchLeaf31, label %if.then214, label %NewDefault25

LeafBlock28:                                      ; preds = %NodeBlock32
  %SwitchLeaf29 = icmp eq i8 %i299, 15
  br i1 %SwitchLeaf29, label %if.then214, label %NewDefault25

LeafBlock26:                                      ; preds = %NodeBlock34
  %SwitchLeaf27 = icmp eq i8 %i299, -123
  br i1 %SwitchLeaf27, label %if.end431, label %NewDefault25

if.then214:                                       ; preds = %LeafBlock28, %LeafBlock30
  %i317 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data559, align 8
  %i318 = trunc i64 %indvars.iv to i32
  %add216 = add i32 %delta.0255, %i318
  %idxprom = sext i32 %add216 to i64
  %alu_state = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i317, i64 %idxprom, i32 5
  %i319 = load i8, i8* %alu_state, align 2
  %tobool218.not = icmp eq i8 %i319, 0
  br i1 %tobool218.not, label %for.inc, label %lor.lhs.false219

lor.lhs.false219:                                 ; preds = %if.then214
  %conv221 = zext i8 %i319 to i32
  %cmp222 = icmp eq i8 %i319, 8
  br i1 %cmp222, label %for.inc, label %if.end225

if.end225:                                        ; preds = %lor.lhs.false219
  %and228 = and i32 %conv221, 4
  %tobool229.not = icmp eq i32 %and228, 0
  %and233 = and i32 %conv221, 3
  %cmp234 = icmp eq i32 %and233, 1
  %src_reg239 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0264, i64 0, i32 1
  %bf.load240 = load i8, i8* %src_reg239, align 1
  %bf.lshr241 = lshr i8 %bf.load240, 4
  %bf.clear245 = and i8 %bf.load240, 15
  %cond247.in = select i1 %cmp234, i8 %bf.lshr241, i8 %bf.clear245
  br i1 %tobool229.not, label %if.end263, label %if.then249

if.then249:                                       ; preds = %if.end225
  store i8 39, i8* %.compoundliteral.sroa.0.0..sroa_idx, align 16
  store i8 %cond247.in, i8* %.compoundliteral.sroa.2.0..sroa_idx, align 1
  store i16 0, i16* %.compoundliteral.sroa.6.0..sroa_idx22, align 2
  store i32 -1, i32* %.compoundliteral.sroa.7.0..sroa_idx23, align 4
  br label %if.end263

if.end263:                                        ; preds = %if.then249, %if.end225
  %patch.0 = phi %struct.bpf_insn* [ %incdec.ptr, %if.then249 ], [ %arrayidx, %if.end225 ]
  %i320 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i317, i64 %idxprom, i32 0
  %alu_limit = bitcast %union.anon.13* %i320 to i32*
  %i321 = load i32, i32* %alu_limit, align 8
  %sub277 = add i32 %i321, -1
  %.compoundliteral265.sroa.0.0..sroa_idx = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 0, i32 0
  store i8 -76, i8* %.compoundliteral265.sroa.0.0..sroa_idx, align 4
  %.compoundliteral265.sroa.2.0..sroa_idx = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 0, i32 1
  store i8 11, i8* %.compoundliteral265.sroa.2.0..sroa_idx, align 1
  %.compoundliteral265.sroa.6.0..sroa_idx20 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 0, i32 2
  store i16 0, i16* %.compoundliteral265.sroa.6.0..sroa_idx20, align 2
  %.compoundliteral265.sroa.7.0..sroa_idx21 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 0, i32 3
  store i32 %sub277, i32* %.compoundliteral265.sroa.7.0..sroa_idx21, align 4
  %bf.shl289 = shl nuw i8 %cond247.in, 4
  %bf.set291 = or i8 %bf.shl289, 11
  %.compoundliteral279.sroa.0.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 1, i32 0
  store i8 31, i8* %.compoundliteral279.sroa.0.0..sroa_idx, align 4
  %.compoundliteral279.sroa.2.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 1, i32 1
  store i8 %bf.set291, i8* %.compoundliteral279.sroa.2.0..sroa_idx, align 1
  %.compoundliteral279.sroa.6.0..sroa_idx18 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 1, i32 2
  store i16 0, i16* %.compoundliteral279.sroa.6.0..sroa_idx18, align 2
  %.compoundliteral279.sroa.7.0..sroa_idx19 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 1, i32 3
  store i32 0, i32* %.compoundliteral279.sroa.7.0..sroa_idx19, align 4
  %.compoundliteral295.sroa.0.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 2, i32 0
  store i8 79, i8* %.compoundliteral295.sroa.0.0..sroa_idx, align 4
  %.compoundliteral295.sroa.2.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 2, i32 1
  store i8 %bf.set291, i8* %.compoundliteral295.sroa.2.0..sroa_idx, align 1
  %.compoundliteral295.sroa.6.0..sroa_idx16 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 2, i32 2
  store i16 0, i16* %.compoundliteral295.sroa.6.0..sroa_idx16, align 2
  %.compoundliteral295.sroa.7.0..sroa_idx17 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 2, i32 3
  store i32 0, i32* %.compoundliteral295.sroa.7.0..sroa_idx17, align 4
  %.compoundliteral311.sroa.0.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 3, i32 0
  store i8 -121, i8* %.compoundliteral311.sroa.0.0..sroa_idx, align 4
  %.compoundliteral311.sroa.2.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 3, i32 1
  store i8 11, i8* %.compoundliteral311.sroa.2.0..sroa_idx, align 1
  %.compoundliteral311.sroa.6.0..sroa_idx14 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 3, i32 2
  store i16 0, i16* %.compoundliteral311.sroa.6.0..sroa_idx14, align 2
  %.compoundliteral311.sroa.7.0..sroa_idx15 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 3, i32 3
  store i32 0, i32* %.compoundliteral311.sroa.7.0..sroa_idx15, align 4
  %incdec.ptr323 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 5
  %.compoundliteral324.sroa.0.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 4, i32 0
  store i8 -57, i8* %.compoundliteral324.sroa.0.0..sroa_idx, align 4
  %.compoundliteral324.sroa.2.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 4, i32 1
  store i8 11, i8* %.compoundliteral324.sroa.2.0..sroa_idx, align 1
  %.compoundliteral324.sroa.6.0..sroa_idx12 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 4, i32 2
  store i16 0, i16* %.compoundliteral324.sroa.6.0..sroa_idx12, align 2
  %.compoundliteral324.sroa.7.0..sroa_idx13 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 4, i32 3
  store i32 63, i32* %.compoundliteral324.sroa.7.0..sroa_idx13, align 4
  br i1 %cmp234, label %if.then337, label %if.else358

if.then337:                                       ; preds = %if.end263
  %.compoundliteral339.sroa.0.0..sroa_idx = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %incdec.ptr323, i64 0, i32 0
  store i8 95, i8* %.compoundliteral339.sroa.0.0..sroa_idx, align 4
  %.compoundliteral339.sroa.2.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 5, i32 1
  store i8 %bf.set291, i8* %.compoundliteral339.sroa.2.0..sroa_idx, align 1
  %.compoundliteral339.sroa.6.0..sroa_idx10 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 5, i32 2
  store i16 0, i16* %.compoundliteral339.sroa.6.0..sroa_idx10, align 2
  %.compoundliteral339.sroa.7.0..sroa_idx11 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 5, i32 3
  store i32 0, i32* %.compoundliteral339.sroa.7.0..sroa_idx11, align 4
  %bf.load355 = load i8, i8* %src_reg239, align 1
  %bf.clear356 = and i8 %bf.load355, 15
  %bf.set357 = or i8 %bf.clear356, -80
  store i8 %bf.set357, i8* %src_reg239, align 1
  br label %if.end374

if.else358:                                       ; preds = %if.end263
  %bf.set371 = or i8 %cond247.in, -80
  %.compoundliteral360.sroa.0.0..sroa_idx = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %incdec.ptr323, i64 0, i32 0
  store i8 95, i8* %.compoundliteral360.sroa.0.0..sroa_idx, align 4
  %.compoundliteral360.sroa.2.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 5, i32 1
  store i8 %bf.set371, i8* %.compoundliteral360.sroa.2.0..sroa_idx, align 1
  %.compoundliteral360.sroa.6.0..sroa_idx8 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 5, i32 2
  store i16 0, i16* %.compoundliteral360.sroa.6.0..sroa_idx8, align 2
  %.compoundliteral360.sroa.7.0..sroa_idx9 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 5, i32 3
  store i32 0, i32* %.compoundliteral360.sroa.7.0..sroa_idx9, align 4
  br label %if.end374

if.end374:                                        ; preds = %if.else358, %if.then337
  %patch.1 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 6
  br i1 %tobool229.not, label %if.end384, label %if.then376

if.then376:                                       ; preds = %if.end374
  %i322 = load i8, i8* %code, align 4
  %cmp379 = icmp eq i8 %i322, 15
  %conv382 = select i1 %cmp379, i8 31, i8 15
  store i8 %conv382, i8* %code, align 4
  br label %if.end384

if.end384:                                        ; preds = %if.then376, %if.end374
  %incdec.ptr385 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 7
  %i323 = bitcast %struct.bpf_insn* %insn.0264 to i64*
  %i324 = bitcast %struct.bpf_insn* %patch.1 to i64*
  %i325 = load i64, i64* %i323, align 4
  store i64 %i325, i64* %i324, align 4
  %cmp234.not = xor i1 %cmp234, true
  %brmerge = select i1 %cmp234.not, i1 true, i1 %tobool229.not
  br i1 %brmerge, label %if.end407, label %if.then391

if.then391:                                       ; preds = %if.end384
  %incdec.ptr392 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 8
  %.compoundliteral393.sroa.0.0..sroa_idx = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %incdec.ptr385, i64 0, i32 0
  store i8 39, i8* %.compoundliteral393.sroa.0.0..sroa_idx, align 4
  %.compoundliteral393.sroa.2.0..sroa_idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 7, i32 1
  store i8 %cond247.in, i8* %.compoundliteral393.sroa.2.0..sroa_idx, align 1
  %.compoundliteral393.sroa.6.0..sroa_idx6 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 7, i32 2
  store i16 0, i16* %.compoundliteral393.sroa.6.0..sroa_idx6, align 2
  %.compoundliteral393.sroa.7.0..sroa_idx7 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %patch.0, i64 7, i32 3
  store i32 -1, i32* %.compoundliteral393.sroa.7.0..sroa_idx7, align 4
  br label %if.end407

if.end407:                                        ; preds = %if.then391, %if.end384
  %patch.2 = phi %struct.bpf_insn* [ %incdec.ptr392, %if.then391 ], [ %incdec.ptr385, %if.end384 ]
  %sub.ptr.lhs.cast = ptrtoint %struct.bpf_insn* %patch.2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %i326 = lshr exact i64 %sub.ptr.sub, 3
  %conv409 = trunc i64 %i326 to i32
  %call412 = call fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef %add216, %struct.bpf_insn* noundef %arrayidx, i32 noundef %conv409) #22
  %tobool413.not = icmp eq %struct.bpf_prog* %call412, null
  br i1 %tobool413.not, label %return, label %if.end415

if.end415:                                        ; preds = %if.end407
  %sub416 = add i32 %delta.0255, -1
  %add417 = add i32 %sub416, %conv409
  store %struct.bpf_prog* %call412, %struct.bpf_prog** %prog1, align 8
  %i327 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %call412, i64 0, i32 10
  %arraydecay420 = bitcast %union.anon.146* %i327 to %struct.bpf_insn*
  %add.ptr422 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay420, i64 %indvars.iv
  %idx.ext423 = sext i32 %add417 to i64
  %add.ptr424 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %add.ptr422, i64 %idx.ext423
  br label %for.inc

if.end431:                                        ; preds = %LeafBlock26
  %src_reg432 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0264, i64 0, i32 1
  %bf.load433 = load i8, i8* %src_reg432, align 1
  %bf.lshr434.mask = and i8 %bf.load433, -16
  %cmp436 = icmp eq i8 %bf.lshr434.mask, 16
  br i1 %cmp436, label %for.inc, label %if.end439

if.end439:                                        ; preds = %if.end431
  %imm440 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0264, i64 0, i32 3
  %i328 = load i32, i32* %imm440, align 4
  %cmp441 = icmp eq i32 %i328, 24
  br i1 %cmp441, label %if.then443, label %if.end447

if.then443:                                       ; preds = %if.end439
  %dst_needed = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %prog.0271, i64 0, i32 1
  %bf.load444 = load i16, i16* %dst_needed, align 2
  %bf.set446 = or i16 %bf.load444, 16
  store i16 %bf.set446, i16* %dst_needed, align 2
  br label %if.end447

if.end447:                                        ; preds = %if.then443, %if.end439
  %i329 = load i32, i32* %imm440, align 4
  %cmp449 = icmp eq i32 %i329, 7
  br i1 %cmp449, label %if.then451, label %if.end452

if.then451:                                       ; preds = %if.end447
  call void @bpf_user_rnd_init_once() #23
  br label %if.end452

if.end452:                                        ; preds = %if.then451, %if.end447
  %i330 = load i32, i32* %imm440, align 4
  %cmp454 = icmp eq i32 %i330, 58
  br i1 %cmp454, label %if.then456, label %if.end460

if.then456:                                       ; preds = %if.end452
  %kprobe_override = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %prog.0271, i64 0, i32 1
  %bf.load457 = load i16, i16* %kprobe_override, align 2
  %bf.set459 = or i16 %bf.load457, 128
  store i16 %bf.set459, i16* %kprobe_override, align 2
  br label %if.end460

if.end460:                                        ; preds = %if.then456, %if.end452
  %i331 = load i32, i32* %imm440, align 4
  %cmp462 = icmp eq i32 %i331, 12
  %cb_access = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %prog.0271, i64 0, i32 1
  %bf.load465 = load i16, i16* %cb_access, align 2
  br i1 %cmp462, label %if.then464, label %if.end528

if.then464:                                       ; preds = %if.end460
  %bf.set467 = or i16 %bf.load465, 8
  store i16 %bf.set467, i16* %cb_access, align 2
  %i332 = load %struct.bpf_prog*, %struct.bpf_prog** %prog1, align 8
  %aux469 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i332, i64 0, i32 7
  %i333 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux469, align 8
  %stack_depth = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i333, i64 0, i32 5
  store i32 512, i32* %stack_depth, align 4
  %i334 = load %struct.bpf_prog*, %struct.bpf_prog** %prog1, align 8
  %aux471 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i334, i64 0, i32 7
  %i335 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux471, align 8
  %max_pkt_offset = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i335, i64 0, i32 3
  store i32 65535, i32* %max_pkt_offset, align 4
  store i32 0, i32* %imm440, align 4
  store i8 -11, i8* %code, align 4
  %i336 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data559, align 8
  %i337 = trunc i64 %indvars.iv to i32
  %add475 = add i32 %delta.0255, %i337
  %idxprom476 = sext i32 %add475 to i64
  %arrayidx477 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i336, i64 %idxprom476
  %arrayidx477.idx = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %arrayidx477, i64 0, i32 0, i32 0
  %arrayidx477.idx.val = load i64, i64* %arrayidx477.idx, align 8
  %call478 = call fastcc zeroext i1 @bpf_map_ptr_unpriv(i64 %arrayidx477.idx.val) #22
  br i1 %call478, label %if.end480, label %for.inc

if.end480:                                        ; preds = %if.then464
  %arrayidx477.idx69 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %arrayidx477, i64 0, i32 0, i32 0
  %arrayidx477.idx69.val = load i64, i64* %arrayidx477.idx69, align 8
  %call481 = call fastcc zeroext i1 @bpf_map_ptr_poisoned(i64 %arrayidx477.idx69.val) #22
  br i1 %call481, label %if.then482, label %if.end483

if.then482:                                       ; preds = %if.end480
  %i338 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i338, i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str.286, i64 0, i64 0)) #22
  br label %return

if.end483:                                        ; preds = %if.end480
  %map_state = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %arrayidx477, i64 0, i32 0, i32 0
  %i339 = load i64, i64* %map_state, align 8
  %and484 = and i64 %i339, -2
  %i340 = inttoptr i64 %and484 to %struct.bpf_map*
  %max_entries = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i340, i64 0, i32 6
  %i341 = load i32, i32* %max_entries, align 4
  store i8 53, i8* %.compoundliteral486.sroa.0.0..sroa_idx, align 16
  store i8 3, i8* %.compoundliteral486.sroa.2.0..sroa_idx, align 1
  store i16 2, i16* %.compoundliteral486.sroa.6.0..sroa_idx4, align 2
  store i32 %i341, i32* %.compoundliteral486.sroa.7.0..sroa_idx5, align 4
  %i342 = inttoptr i64 %and484 to %struct.bpf_array*
  %index_mask = getelementptr inbounds %struct.bpf_array, %struct.bpf_array* %i342, i64 0, i32 2
  %i343 = load i32, i32* %index_mask, align 4
  store i8 84, i8* %.compoundliteral499.sroa.0.0..sroa_idx, align 8
  store i8 3, i8* %.compoundliteral499.sroa.2.0..sroa_idx, align 1
  store i16 0, i16* %.compoundliteral499.sroa.6.0..sroa_idx2, align 2
  store i32 %i343, i32* %.compoundliteral499.sroa.7.0..sroa_idx3, align 4
  %i344 = bitcast %struct.bpf_insn* %insn.0264 to i64*
  %i345 = load i64, i64* %i344, align 4
  store i64 %i345, i64* %i298, align 16
  %call515 = call fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef %add475, %struct.bpf_insn* noundef %arraydecay179, i32 noundef 3) #22
  %tobool516.not = icmp eq %struct.bpf_prog* %call515, null
  br i1 %tobool516.not, label %return, label %if.end518

if.end518:                                        ; preds = %if.end483
  %add520 = add i32 %delta.0255, 2
  store %struct.bpf_prog* %call515, %struct.bpf_prog** %prog1, align 8
  %i346 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %call515, i64 0, i32 10
  %arraydecay523 = bitcast %union.anon.146* %i346 to %struct.bpf_insn*
  %add.ptr525 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay523, i64 %indvars.iv
  %idx.ext526 = sext i32 %add520 to i64
  %add.ptr527 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %add.ptr525, i64 %idx.ext526
  br label %for.inc

if.end528:                                        ; preds = %if.end460
  %i347 = and i16 %bf.load465, 2
  %tobool533.not = icmp eq i16 %i347, 0
  br i1 %tobool533.not, label %patch_call_imm, label %land.lhs.true534

land.lhs.true534:                                 ; preds = %if.end528
  br label %NodeBlock41

NodeBlock41:                                      ; preds = %land.lhs.true534
  %Pivot42 = icmp slt i32 %i331, 87
  br i1 %Pivot42, label %LeafBlock37, label %LeafBlock39

LeafBlock39:                                      ; preds = %NodeBlock41
  %SwitchLeaf40 = icmp slt i32 %i331, 90
  br i1 %SwitchLeaf40, label %if.then558, label %NewDefault36

LeafBlock37:                                      ; preds = %NodeBlock41
  %i331.off = add i32 %i331, -1
  %SwitchLeaf38 = icmp ult i32 %i331.off, 3
  br i1 %SwitchLeaf38, label %if.then558, label %NewDefault36

if.then558:                                       ; preds = %LeafBlock37, %LeafBlock39
  %i348 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data559, align 8
  %i349 = trunc i64 %indvars.iv to i32
  %add560 = add i32 %delta.0255, %i349
  %idxprom561 = sext i32 %add560 to i64
  %arrayidx562 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i348, i64 %idxprom561
  %arrayidx562.idx = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %arrayidx562, i64 0, i32 0, i32 0
  %arrayidx562.idx.val = load i64, i64* %arrayidx562.idx, align 8
  %call563 = call fastcc zeroext i1 @bpf_map_ptr_poisoned(i64 %arrayidx562.idx.val) #22
  br i1 %call563, label %patch_call_imm, label %if.end565

if.end565:                                        ; preds = %if.then558
  %map_state566 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %arrayidx562, i64 0, i32 0, i32 0
  %i350 = load i64, i64* %map_state566, align 8
  %and567 = and i64 %i350, -2
  %i351 = inttoptr i64 %and567 to %struct.bpf_map*
  %ops568 = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i351, i64 0, i32 0
  %i352 = load %struct.bpf_map_ops*, %struct.bpf_map_ops** %ops568, align 64
  br label %NodeBlock54

NodeBlock54:                                      ; preds = %if.end565
  %Pivot55 = icmp slt i32 %i331, 87
  br i1 %Pivot55, label %NodeBlock48, label %NodeBlock52

NodeBlock52:                                      ; preds = %NodeBlock54
  %Pivot53 = icmp eq i32 %i331, 87
  br i1 %Pivot53, label %sw.bb629, label %NodeBlock50

NodeBlock50:                                      ; preds = %NodeBlock52
  %Pivot51 = icmp slt i32 %i331, 89
  br i1 %Pivot51, label %sw.bb634, label %sw.bb639

NodeBlock48:                                      ; preds = %NodeBlock54
  %Pivot49 = icmp slt i32 %i331, 2
  br i1 %Pivot49, label %land.lhs.true572, label %NodeBlock46

NodeBlock46:                                      ; preds = %NodeBlock48
  %Pivot47 = icmp eq i32 %i331, 2
  br i1 %Pivot47, label %sw.bb619, label %LeafBlock44

LeafBlock44:                                      ; preds = %NodeBlock46
  %SwitchLeaf45 = icmp eq i32 %i331, 3
  br i1 %SwitchLeaf45, label %sw.bb624, label %NewDefault43

land.lhs.true572:                                 ; preds = %NodeBlock48
  %map_gen_lookup = getelementptr inbounds %struct.bpf_map_ops, %struct.bpf_map_ops* %i352, i64 0, i32 15
  %i353 = load i32 (%struct.bpf_map*, %struct.bpf_insn*)*, i32 (%struct.bpf_map*, %struct.bpf_insn*)** %map_gen_lookup, align 8
  %tobool573.not = icmp eq i32 (%struct.bpf_map*, %struct.bpf_insn*)* %i353, null
  br i1 %tobool573.not, label %do.end613, label %if.then574

if.then574:                                       ; preds = %land.lhs.true572
  %call577 = call i32 %i353(%struct.bpf_map* noundef %i351, %struct.bpf_insn* noundef %arraydecay179) #23
  %i354 = add i32 %call577, -16
  %i355 = icmp ult i32 %i354, -15
  br i1 %i355, label %if.then584, label %if.end585

if.then584:                                       ; preds = %if.then574
  %i356 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i356, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0)) #22
  br label %return

if.end585:                                        ; preds = %if.then574
  %call588 = call fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef %add560, %struct.bpf_insn* noundef %arraydecay179, i32 noundef %call577) #22
  %tobool589.not = icmp eq %struct.bpf_prog* %call588, null
  br i1 %tobool589.not, label %return, label %if.end591

if.end591:                                        ; preds = %if.end585
  %sub592 = add i32 %delta.0255, -1
  %add593 = add i32 %sub592, %call577
  store %struct.bpf_prog* %call588, %struct.bpf_prog** %prog1, align 8
  %i357 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %call588, i64 0, i32 10
  %arraydecay596 = bitcast %union.anon.146* %i357 to %struct.bpf_insn*
  %add.ptr598 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay596, i64 %indvars.iv
  %idx.ext599 = sext i32 %add593 to i64
  %add.ptr600 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %add.ptr598, i64 %idx.ext599
  br label %for.inc

do.end613:                                        ; preds = %land.lhs.true572
  br label %NodeBlock67

NodeBlock67:                                      ; preds = %do.end613
  %Pivot68 = icmp slt i32 %i331, 87
  br i1 %Pivot68, label %NodeBlock61, label %NodeBlock65

NodeBlock65:                                      ; preds = %NodeBlock67
  %Pivot66 = icmp eq i32 %i331, 87
  br i1 %Pivot66, label %sw.bb629, label %NodeBlock63

NodeBlock63:                                      ; preds = %NodeBlock65
  %Pivot64 = icmp slt i32 %i331, 89
  br i1 %Pivot64, label %sw.bb634, label %sw.bb639

NodeBlock61:                                      ; preds = %NodeBlock67
  %Pivot62 = icmp slt i32 %i331, 2
  br i1 %Pivot62, label %sw.bb, label %NodeBlock59

NodeBlock59:                                      ; preds = %NodeBlock61
  %Pivot60 = icmp eq i32 %i331, 2
  br i1 %Pivot60, label %sw.bb619, label %LeafBlock57

LeafBlock57:                                      ; preds = %NodeBlock59
  %SwitchLeaf58 = icmp eq i32 %i331, 3
  br i1 %SwitchLeaf58, label %sw.bb624, label %NewDefault56

sw.bb:                                            ; preds = %NodeBlock61
  %map_lookup_elem = getelementptr inbounds %struct.bpf_map_ops, %struct.bpf_map_ops* %i352, i64 0, i32 7
  %i358 = bitcast i8* (%struct.bpf_map*, i8*)** %map_lookup_elem to i64 (i64, i64, i64, i64, i64)**
  %i359 = load i64 (i64, i64, i64, i64, i64)*, i64 (i64, i64, i64, i64, i64)** %i358, align 8
  %sub.ptr.lhs.cast615 = ptrtoint i64 (i64, i64, i64, i64, i64)* %i359 to i64
  %i360 = trunc i64 %sub.ptr.lhs.cast615 to i32
  %conv617 = sub i32 %i360, ptrtoint (i64 (i64, i64, i64, i64, i64)* @__bpf_call_base to i32)
  store i32 %conv617, i32* %imm440, align 4
  br label %for.inc

sw.bb619:                                         ; preds = %NodeBlock59, %NodeBlock46
  %map_update_elem = getelementptr inbounds %struct.bpf_map_ops, %struct.bpf_map_ops* %i352, i64 0, i32 8
  %i361 = bitcast i32 (%struct.bpf_map*, i8*, i8*, i64)** %map_update_elem to i64 (i64, i64, i64, i64, i64)**
  %i362 = load i64 (i64, i64, i64, i64, i64)*, i64 (i64, i64, i64, i64, i64)** %i361, align 8
  %sub.ptr.lhs.cast620 = ptrtoint i64 (i64, i64, i64, i64, i64)* %i362 to i64
  %i363 = trunc i64 %sub.ptr.lhs.cast620 to i32
  %conv622 = sub i32 %i363, ptrtoint (i64 (i64, i64, i64, i64, i64)* @__bpf_call_base to i32)
  store i32 %conv622, i32* %imm440, align 4
  br label %for.inc

sw.bb624:                                         ; preds = %LeafBlock57, %LeafBlock44
  %map_delete_elem = getelementptr inbounds %struct.bpf_map_ops, %struct.bpf_map_ops* %i352, i64 0, i32 9
  %i364 = bitcast i32 (%struct.bpf_map*, i8*)** %map_delete_elem to i64 (i64, i64, i64, i64, i64)**
  %i365 = load i64 (i64, i64, i64, i64, i64)*, i64 (i64, i64, i64, i64, i64)** %i364, align 8
  %sub.ptr.lhs.cast625 = ptrtoint i64 (i64, i64, i64, i64, i64)* %i365 to i64
  %i366 = trunc i64 %sub.ptr.lhs.cast625 to i32
  %conv627 = sub i32 %i366, ptrtoint (i64 (i64, i64, i64, i64, i64)* @__bpf_call_base to i32)
  store i32 %conv627, i32* %imm440, align 4
  br label %for.inc

sw.bb629:                                         ; preds = %NodeBlock65, %NodeBlock52
  %map_push_elem = getelementptr inbounds %struct.bpf_map_ops, %struct.bpf_map_ops* %i352, i64 0, i32 10
  %i367 = bitcast i32 (%struct.bpf_map*, i8*, i64)** %map_push_elem to i64 (i64, i64, i64, i64, i64)**
  %i368 = load i64 (i64, i64, i64, i64, i64)*, i64 (i64, i64, i64, i64, i64)** %i367, align 8
  %sub.ptr.lhs.cast630 = ptrtoint i64 (i64, i64, i64, i64, i64)* %i368 to i64
  %i369 = trunc i64 %sub.ptr.lhs.cast630 to i32
  %conv632 = sub i32 %i369, ptrtoint (i64 (i64, i64, i64, i64, i64)* @__bpf_call_base to i32)
  store i32 %conv632, i32* %imm440, align 4
  br label %for.inc

sw.bb634:                                         ; preds = %NodeBlock63, %NodeBlock50
  %map_pop_elem = getelementptr inbounds %struct.bpf_map_ops, %struct.bpf_map_ops* %i352, i64 0, i32 11
  %i370 = bitcast i32 (%struct.bpf_map*, i8*)** %map_pop_elem to i64 (i64, i64, i64, i64, i64)**
  %i371 = load i64 (i64, i64, i64, i64, i64)*, i64 (i64, i64, i64, i64, i64)** %i370, align 8
  %sub.ptr.lhs.cast635 = ptrtoint i64 (i64, i64, i64, i64, i64)* %i371 to i64
  %i372 = trunc i64 %sub.ptr.lhs.cast635 to i32
  %conv637 = sub i32 %i372, ptrtoint (i64 (i64, i64, i64, i64, i64)* @__bpf_call_base to i32)
  store i32 %conv637, i32* %imm440, align 4
  br label %for.inc

sw.bb639:                                         ; preds = %NodeBlock63, %NodeBlock50
  %map_peek_elem = getelementptr inbounds %struct.bpf_map_ops, %struct.bpf_map_ops* %i352, i64 0, i32 12
  %i373 = bitcast i32 (%struct.bpf_map*, i8*)** %map_peek_elem to i64 (i64, i64, i64, i64, i64)**
  %i374 = load i64 (i64, i64, i64, i64, i64)*, i64 (i64, i64, i64, i64, i64)** %i373, align 8
  %sub.ptr.lhs.cast640 = ptrtoint i64 (i64, i64, i64, i64, i64)* %i374 to i64
  %i375 = trunc i64 %sub.ptr.lhs.cast640 to i32
  %conv642 = sub i32 %i375, ptrtoint (i64 (i64, i64, i64, i64, i64)* @__bpf_call_base to i32)
  store i32 %conv642, i32* %imm440, align 4
  br label %for.inc

NewDefault36:                                     ; preds = %LeafBlock37, %LeafBlock39
  br label %patch_call_imm

NewDefault43:                                     ; preds = %LeafBlock44
  br label %patch_call_imm

NewDefault56:                                     ; preds = %LeafBlock57
  br label %patch_call_imm

patch_call_imm:                                   ; preds = %NewDefault56, %NewDefault43, %NewDefault36, %if.then558, %if.end528
  %i376 = load %struct.bpf_verifier_ops*, %struct.bpf_verifier_ops** %ops178, align 8
  %get_func_proto = getelementptr inbounds %struct.bpf_verifier_ops, %struct.bpf_verifier_ops* %i376, i64 0, i32 0
  %i377 = load %struct.bpf_func_proto* (i32, %struct.bpf_prog*)*, %struct.bpf_func_proto* (i32, %struct.bpf_prog*)** %get_func_proto, align 8
  %i378 = load %struct.bpf_prog*, %struct.bpf_prog** %prog1, align 8
  %call648 = call %struct.bpf_func_proto* %i377(i32 noundef %i331, %struct.bpf_prog* noundef %i378) #23
  %func = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %call648, i64 0, i32 0
  %i379 = load i64 (i64, i64, i64, i64, i64)*, i64 (i64, i64, i64, i64, i64)** %func, align 8
  %tobool649.not = icmp eq i64 (i64, i64, i64, i64, i64)* %i379, null
  br i1 %tobool649.not, label %if.then650, label %if.end654

if.then650:                                       ; preds = %patch_call_imm
  %i380 = bitcast %struct.bpf_verifier_env* %env to i8*
  %i381 = load i32, i32* %imm440, align 4
  %call652 = call i8* @func_id_name(i32 noundef %i381) #23
  %i382 = load i32, i32* %imm440, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i380, i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @.str.222, i64 0, i64 0), i8* noundef %call652, i32 noundef %i382) #22
  br label %return

if.end654:                                        ; preds = %patch_call_imm
  %sub.ptr.lhs.cast656 = ptrtoint i64 (i64, i64, i64, i64, i64)* %i379 to i64
  %i383 = trunc i64 %sub.ptr.lhs.cast656 to i32
  %conv658 = sub i32 %i383, ptrtoint (i64 (i64, i64, i64, i64, i64)* @__bpf_call_base to i32)
  store i32 %conv658, i32* %imm440, align 4
  br label %for.inc

NewDefault25:                                     ; preds = %LeafBlock26, %LeafBlock28, %LeafBlock30
  br label %for.inc

for.inc:                                          ; preds = %NewDefault25, %if.end654, %sw.bb639, %sw.bb634, %sw.bb629, %sw.bb624, %sw.bb619, %sw.bb, %if.end591, %if.end518, %if.then464, %if.end431, %if.end415, %lor.lhs.false219, %if.then214, %if.end194, %if.end150
  %delta.1 = phi i32 [ %add152, %if.end150 ], [ %add196, %if.end194 ], [ %delta.0255, %lor.lhs.false219 ], [ %add417, %if.end415 ], [ %delta.0255, %if.then214 ], [ %delta.0255, %if.end431 ], [ %add520, %if.end518 ], [ %delta.0255, %if.then464 ], [ %delta.0255, %if.end654 ], [ %add593, %if.end591 ], [ %delta.0255, %sw.bb639 ], [ %delta.0255, %sw.bb634 ], [ %delta.0255, %sw.bb629 ], [ %delta.0255, %sw.bb624 ], [ %delta.0255, %sw.bb619 ], [ %delta.0255, %sw.bb ], [ %delta.0255, %NewDefault25 ]
  %insn.1 = phi %struct.bpf_insn* [ %add.ptr159, %if.end150 ], [ %add.ptr203, %if.end194 ], [ %insn.0264, %lor.lhs.false219 ], [ %add.ptr424, %if.end415 ], [ %insn.0264, %if.then214 ], [ %insn.0264, %if.end431 ], [ %add.ptr527, %if.end518 ], [ %insn.0264, %if.then464 ], [ %insn.0264, %if.end654 ], [ %add.ptr600, %if.end591 ], [ %insn.0264, %sw.bb639 ], [ %insn.0264, %sw.bb634 ], [ %insn.0264, %sw.bb629 ], [ %insn.0264, %sw.bb624 ], [ %insn.0264, %sw.bb619 ], [ %insn.0264, %sw.bb ], [ %insn.0264, %NewDefault25 ]
  %prog.1 = phi %struct.bpf_prog* [ %call, %if.end150 ], [ %call191, %if.end194 ], [ %prog.0271, %lor.lhs.false219 ], [ %call412, %if.end415 ], [ %prog.0271, %if.then214 ], [ %prog.0271, %if.end431 ], [ %call515, %if.end518 ], [ %prog.0271, %if.then464 ], [ %prog.0271, %if.end654 ], [ %call588, %if.end591 ], [ %prog.0271, %sw.bb639 ], [ %prog.0271, %sw.bb634 ], [ %prog.0271, %sw.bb629 ], [ %prog.0271, %sw.bb624 ], [ %prog.0271, %sw.bb619 ], [ %prog.0271, %sw.bb ], [ %prog.0271, %NewDefault25 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %incdec.ptr660 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.1, i64 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %return, label %for.body

return:                                           ; preds = %for.inc, %if.then650, %if.end585, %if.then584, %if.end483, %if.then482, %if.end407, %if.end188, %if.then187, %if.end, %entry
  %retval.0 = phi i32 [ -22, %if.then187 ], [ -22, %if.then482 ], [ -14, %if.then650 ], [ -22, %if.then584 ], [ 0, %entry ], [ 0, %for.inc ], [ -12, %if.end585 ], [ -12, %if.end483 ], [ -12, %if.end407 ], [ -12, %if.end188 ], [ -12, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @opt_subreg_zext_lo32_rnd_hi32(%struct.bpf_verifier_env* noundef %env, i32 %attr.0.0.8.val) unnamed_addr #6 {
entry:
  %zext_patch = alloca [2 x %struct.bpf_insn], align 16
  %rnd_hi32_patch = alloca [4 x %struct.bpf_insn], align 16
  %insn = alloca i64, align 8
  %tmpcast = bitcast i64* %insn to %struct.bpf_insn*
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i36 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len1 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i36, i64 0, i32 4
  %i37 = load i32, i32* %len1, align 4
  %and = and i32 %attr.0.0.8.val, 4
  %tobool.not = icmp eq i32 %and, 0
  %.compoundliteral.sroa.0.0..sroa_idx = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %zext_patch, i64 0, i64 1, i32 0
  store i8 -68, i8* %.compoundliteral.sroa.0.0..sroa_idx, align 8
  %.compoundliteral.sroa.2.0..sroa_idx = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %zext_patch, i64 0, i64 1, i32 1
  store i8 0, i8* %.compoundliteral.sroa.2.0..sroa_idx, align 1
  %.compoundliteral.sroa.6.0..sroa_idx12 = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %zext_patch, i64 0, i64 1, i32 2
  store i16 0, i16* %.compoundliteral.sroa.6.0..sroa_idx12, align 2
  %.compoundliteral.sroa.7.0..sroa_idx13 = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %zext_patch, i64 0, i64 1, i32 3
  store i32 1, i32* %.compoundliteral.sroa.7.0..sroa_idx13, align 4
  %.compoundliteral7.sroa.0.0..sroa_idx = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 1, i32 0
  store i8 -73, i8* %.compoundliteral7.sroa.0.0..sroa_idx, align 8
  %.compoundliteral7.sroa.2.0..sroa_idx = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 1, i32 1
  store i8 11, i8* %.compoundliteral7.sroa.2.0..sroa_idx, align 1
  %.compoundliteral7.sroa.6.0..sroa_idx10 = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 1, i32 2
  store i16 0, i16* %.compoundliteral7.sroa.6.0..sroa_idx10, align 2
  %.compoundliteral7.sroa.7.0..sroa_idx11 = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 1, i32 3
  store i32 0, i32* %.compoundliteral7.sroa.7.0..sroa_idx11, align 4
  %.compoundliteral20.sroa.0.0..sroa_idx = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 2, i32 0
  store i8 103, i8* %.compoundliteral20.sroa.0.0..sroa_idx, align 16
  %.compoundliteral20.sroa.2.0..sroa_idx = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 2, i32 1
  store i8 11, i8* %.compoundliteral20.sroa.2.0..sroa_idx, align 1
  %.compoundliteral20.sroa.6.0..sroa_idx8 = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 2, i32 2
  store i16 0, i16* %.compoundliteral20.sroa.6.0..sroa_idx8, align 2
  %.compoundliteral20.sroa.7.0..sroa_idx9 = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 2, i32 3
  store i32 32, i32* %.compoundliteral20.sroa.7.0..sroa_idx9, align 4
  %.compoundliteral33.sroa.0.0..sroa_idx = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 3, i32 0
  store i8 79, i8* %.compoundliteral33.sroa.0.0..sroa_idx, align 8
  %.compoundliteral33.sroa.2.0..sroa_idx = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 3, i32 1
  store i8 -80, i8* %.compoundliteral33.sroa.2.0..sroa_idx, align 1
  %.compoundliteral33.sroa.6.0..sroa_idx6 = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 3, i32 2
  store i16 0, i16* %.compoundliteral33.sroa.6.0..sroa_idx6, align 2
  %.compoundliteral33.sroa.7.0..sroa_idx7 = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 3, i32 3
  store i32 0, i32* %.compoundliteral33.sroa.7.0..sroa_idx7, align 4
  %cmp28 = icmp sgt i32 %i37, 0
  br i1 %cmp28, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %i39 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i36, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i39 to %struct.bpf_insn*
  %arrayidx100 = getelementptr inbounds [2 x %struct.bpf_insn], [2 x %struct.bpf_insn]* %zext_patch, i64 0, i64 0
  %i40 = bitcast [2 x %struct.bpf_insn]* %zext_patch to i64*
  %dst_reg101 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %tmpcast, i64 0, i32 1
  %code52 = bitcast i64* %insn to i8*
  %arrayidx84 = getelementptr inbounds [4 x %struct.bpf_insn], [4 x %struct.bpf_insn]* %rnd_hi32_patch, i64 0, i64 0
  %i41 = bitcast [4 x %struct.bpf_insn]* %rnd_hi32_patch to i64*
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %aux.034 = phi %struct.bpf_insn_aux_data* [ %i, %for.body.lr.ph ], [ %aux.1, %for.inc ]
  %i.031 = phi i32 [ 0, %for.body.lr.ph ], [ %inc129, %for.inc ]
  %delta.030 = phi i32 [ 0, %for.body.lr.ph ], [ %delta.1, %for.inc ]
  %insns.029 = phi %struct.bpf_insn* [ %arraydecay, %for.body.lr.ph ], [ %insns.1, %for.inc ]
  %add = add i32 %delta.030, %i.031
  %idxprom = sext i32 %add to i64
  %i42 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insns.029, i64 %idxprom, i32 0
  %i43 = bitcast i8* %i42 to i64*
  %i44 = load i64, i64* %i43, align 4
  store i64 %i44, i64* %insn, align 8
  %zext_dst = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux.034, i64 %idxprom, i32 4
  %i45 = load i8, i8* %zext_dst, align 1
  %i46 = and i8 %i45, 1
  %tobool48.not = icmp eq i8 %i46, 0
  br i1 %tobool48.not, label %if.then, label %if.end96

if.then:                                          ; preds = %for.body
  br i1 %tobool.not, label %for.inc, label %if.end

if.end:                                           ; preds = %if.then
  %i47 = load i8, i8* %code52, align 8
  %and53 = and i8 %i47, 7
  %call = call fastcc zeroext i1 @insn_no_def(i8 %i47) #22
  br i1 %call, label %for.inc, label %if.end56

if.end56:                                         ; preds = %if.end
  %bf.load58 = load i8, i8* %dst_reg101, align 1
  %bf.clear59 = and i8 %bf.load58, 15
  %call61 = call fastcc zeroext i1 @is_reg64(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef null, i32 noundef 1) #22
  br i1 %call61, label %if.then62, label %if.end72

if.then62:                                        ; preds = %if.end56
  %i48 = and i8 %i47, -25
  %i49 = icmp eq i8 %i48, 0
  %inc = zext i1 %i49 to i32
  %spec.select = add i32 %i.031, %inc
  br label %for.inc

if.end72:                                         ; preds = %if.end56
  %cmp74 = icmp eq i8 %and53, 1
  br i1 %cmp74, label %land.lhs.true76, label %if.end82

land.lhs.true76:                                  ; preds = %if.end72
  %i50 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux.034, i64 %idxprom, i32 0
  %ptr_type = bitcast %union.anon.13* %i50 to i32*
  %i51 = load i32, i32* %ptr_type, align 8
  %cmp79 = icmp eq i32 %i51, 2
  br i1 %cmp79, label %for.inc, label %if.end82

if.end82:                                         ; preds = %land.lhs.true76, %if.end72
  %call83 = call fastcc i32 @get_random_int() #22
  store i64 %i44, i64* %i41, align 16
  store i32 %call83, i32* %.compoundliteral7.sroa.7.0..sroa_idx11, align 4
  %bf.load92 = load i8, i8* %.compoundliteral33.sroa.2.0..sroa_idx, align 1
  %bf.clear93 = and i8 %bf.load92, -16
  %bf.set94 = or i8 %bf.clear93, %bf.clear59
  store i8 %bf.set94, i8* %.compoundliteral33.sroa.2.0..sroa_idx, align 1
  br label %apply_patch_buffer

if.end96:                                         ; preds = %for.body
  %call97 = call zeroext i1 @bpf_jit_needs_zext() #23
  br i1 %call97, label %if.end99, label %for.inc

if.end99:                                         ; preds = %if.end96
  store i64 %i44, i64* %i40, align 16
  %bf.load102 = load i8, i8* %dst_reg101, align 1
  %bf.clear103 = and i8 %bf.load102, 15
  %bf.shl = shl i8 %bf.load102, 4
  %bf.set118 = or i8 %bf.clear103, %bf.shl
  store i8 %bf.set118, i8* %.compoundliteral.sroa.2.0..sroa_idx, align 1
  br label %apply_patch_buffer

apply_patch_buffer:                               ; preds = %if.end99, %if.end82
  %patch_len.0 = phi i32 [ 2, %if.end99 ], [ 4, %if.end82 ]
  %patch.0 = phi %struct.bpf_insn* [ %arrayidx100, %if.end99 ], [ %arrayidx84, %if.end82 ]
  %call120 = call fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef %add, %struct.bpf_insn* noundef %patch.0, i32 noundef %patch_len.0) #22
  %tobool121.not = icmp eq %struct.bpf_prog* %call120, null
  br i1 %tobool121.not, label %return, label %if.end123

if.end123:                                        ; preds = %apply_patch_buffer
  store %struct.bpf_prog* %call120, %struct.bpf_prog** %prog, align 8
  %i52 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %call120, i64 0, i32 10
  %arraydecay126 = bitcast %union.anon.146* %i52 to %struct.bpf_insn*
  %i53 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %sub = add i32 %delta.030, -1
  %add128 = add i32 %sub, %patch_len.0
  br label %for.inc

for.inc:                                          ; preds = %if.end123, %if.end96, %land.lhs.true76, %if.then62, %if.end, %if.then
  %insns.1 = phi %struct.bpf_insn* [ %arraydecay126, %if.end123 ], [ %insns.029, %if.end96 ], [ %insns.029, %if.end ], [ %insns.029, %land.lhs.true76 ], [ %insns.029, %if.then ], [ %insns.029, %if.then62 ]
  %delta.1 = phi i32 [ %add128, %if.end123 ], [ %delta.030, %if.end96 ], [ %delta.030, %if.end ], [ %delta.030, %land.lhs.true76 ], [ %delta.030, %if.then ], [ %delta.030, %if.then62 ]
  %i.1 = phi i32 [ %i.031, %if.end123 ], [ %i.031, %if.end96 ], [ %i.031, %if.end ], [ %i.031, %land.lhs.true76 ], [ %i.031, %if.then ], [ %spec.select, %if.then62 ]
  %aux.1 = phi %struct.bpf_insn_aux_data* [ %i53, %if.end123 ], [ %aux.034, %if.end96 ], [ %aux.034, %if.end ], [ %aux.034, %land.lhs.true76 ], [ %aux.034, %if.then ], [ %aux.034, %if.then62 ]
  %inc129 = add i32 %i.1, 1
  %cmp = icmp slt i32 %inc129, %i37
  br i1 %cmp, label %for.body, label %return

return:                                           ; preds = %for.inc, %apply_patch_buffer, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ -12, %apply_patch_buffer ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local zeroext i1 @bpf_jit_needs_zext() local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @fixup_call_args(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %prog1 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog1, align 8
  %i22 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i22 to %struct.bpf_insn*
  %jit_requested = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 1
  %bf.load = load i16, i16* %jit_requested, align 2
  %i23 = and i16 %bf.load, 2
  %tobool.not = icmp eq i16 %i23, 0
  br i1 %tobool.not, label %if.end11, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 7
  %i24 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %i24.idx = getelementptr %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i24, i64 0, i32 10
  %i24.idx.val = load i8, i8* %i24.idx, align 1
  %call = call fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %i24.idx.val) #22
  br i1 %call, label %if.end11, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call4 = call fastcc i32 @jit_subprogs(%struct.bpf_verifier_env* noundef %env) #22
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.then
  %Pivot = icmp slt i32 %call4, 0
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %call4, 0
  br i1 %SwitchLeaf2, label %return, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %call4, -14
  br i1 %SwitchLeaf, label %if.then9, label %NewDefault

if.then9:                                         ; preds = %LeafBlock
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end11

if.end11:                                         ; preds = %NewDefault, %land.lhs.true, %entry
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i25 = load i32, i32* %len, align 4
  %cmp1217.not = icmp eq i32 %i25, 0
  br i1 %cmp1217.not, label %return, label %for.body

for.body:                                         ; preds = %for.inc, %if.end11
  %i.020 = phi i32 [ %inc, %for.inc ], [ 0, %if.end11 ]
  %insn.018 = phi %struct.bpf_insn* [ %incdec.ptr, %for.inc ], [ %arraydecay, %if.end11 ]
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.018, i64 0, i32 0
  %i26 = load i8, i8* %code, align 4
  %cmp15.not = icmp eq i8 %i26, -123
  br i1 %cmp15.not, label %lor.lhs.false, label %for.inc

lor.lhs.false:                                    ; preds = %for.body
  %src_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.018, i64 0, i32 1
  %bf.load17 = load i8, i8* %src_reg, align 1
  %bf.lshr18.mask = and i8 %bf.load17, -16
  %cmp20.not = icmp eq i8 %bf.lshr18.mask, 16
  br i1 %cmp20.not, label %if.end23, label %for.inc

if.end23:                                         ; preds = %lor.lhs.false
  %insn.018.idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.018, i64 0, i32 3
  %insn.018.idx.val = load i32, i32* %insn.018.idx, align 4
  %call24 = call fastcc i32 @get_callee_stack_depth(%struct.bpf_verifier_env* noundef %env, i32 %insn.018.idx.val, i32 noundef %i.020) #22
  %cmp25 = icmp slt i32 %call24, 0
  br i1 %cmp25, label %return, label %if.end28

if.end28:                                         ; preds = %if.end23
  call void @bpf_patch_call_args(%struct.bpf_insn* noundef %insn.018, i32 noundef %call24) #23
  br label %for.inc

for.inc:                                          ; preds = %if.end28, %lor.lhs.false, %for.body
  %inc = add nuw i32 %i.020, 1
  %incdec.ptr = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.018, i64 1
  %i27 = load i32, i32* %len, align 4
  %cmp12 = icmp ult i32 %inc, %i27
  br i1 %cmp12, label %for.body, label %return

return:                                           ; preds = %for.inc, %if.end23, %if.end11, %if.then9, %LeafBlock1
  %retval.0 = phi i32 [ -14, %if.then9 ], [ %call4, %LeafBlock1 ], [ 0, %if.end11 ], [ 0, %for.inc ], [ %call24, %if.end23 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @print_verification_stats(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %level = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i = load i32, i32* %level, align 8
  %and = and i32 %i, 4
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  %i21 = bitcast %struct.bpf_verifier_env* %env to i8*
  %verification_time = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 26
  %i22 = load i64, i64* %verification_time, align 8
  %call = call fastcc i64 @div_u64(i64 noundef %i22) #22, !range !13
  call void (i8*, i8*, ...) @verbose(i8* noundef %i21, i8* noundef getelementptr inbounds ([29 x i8], [29 x i8]* @.str.288, i64 0, i64 0), i64 noundef %call) #22
  call void (i8*, i8*, ...) @verbose(i8* noundef %i21, i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.289, i64 0, i64 0)) #22
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i23 = load i32, i32* %subprog_cnt, align 8
  %cmp19.not = icmp eq i32 %i23, 0
  br i1 %cmp19.not, label %for.end, label %for.body

for.body:                                         ; preds = %for.inc, %if.then
  %i.020 = phi i32 [ %add, %for.inc ], [ 0, %if.then ]
  %idxprom = sext i32 %i.020 to i64
  %stack_depth = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom, i32 2
  %i24 = load i16, i16* %stack_depth, align 4
  %conv = zext i16 %i24 to i32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i21, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.290, i64 0, i64 0), i32 noundef %conv) #22
  %add = add nuw i32 %i.020, 1
  %i25 = load i32, i32* %subprog_cnt, align 8
  %cmp2 = icmp ult i32 %add, %i25
  br i1 %cmp2, label %if.then4, label %for.inc

if.then4:                                         ; preds = %for.body
  call void (i8*, i8*, ...) @verbose(i8* noundef %i21, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.291, i64 0, i64 0)) #22
  br label %for.inc

for.inc:                                          ; preds = %if.then4, %for.body
  %i26 = load i32, i32* %subprog_cnt, align 8
  %cmp = icmp ult i32 %add, %i26
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %if.then
  call void (i8*, i8*, ...) @verbose(i8* noundef %i21, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i64 0, i64 0)) #22
  br label %if.end5

if.end5:                                          ; preds = %for.end, %entry
  %i27 = bitcast %struct.bpf_verifier_env* %env to i8*
  %insn_processed = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 23
  %i28 = load i32, i32* %insn_processed, align 8
  %max_states_per_insn = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 27
  %i29 = load i32, i32* %max_states_per_insn, align 8
  %total_states = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 28
  %i30 = load i32, i32* %total_states, align 4
  %peak_states = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 29
  %i31 = load i32, i32* %peak_states, align 8
  %longest_mark_read_walk = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 30
  %i32 = load i32, i32* %longest_mark_read_walk, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i27, i8* noundef getelementptr inbounds ([98 x i8], [98 x i8]* @.str.292, i64 0, i64 0), i32 noundef %i28, i32 noundef 1000000, i32 noundef %i29, i32 noundef %i30, i32 noundef %i31, i32 noundef %i32) #22
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc noalias i8* @kmalloc_array(i64 noundef %n, i64 noundef %size, i32 noundef %flags) unnamed_addr #6 {
entry:
  %i = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %n, i64 %size)
  %i46 = extractvalue { i64, i1 } %i, 1
  br i1 %i46, label %return, label %if.end7

if.end7:                                          ; preds = %entry
  %i47 = extractvalue { i64, i1 } %i, 0
  %call8 = call noalias align 8 i8* @__kmalloc(i64 noundef %i47, i32 noundef %flags) #23
  br label %return

return:                                           ; preds = %if.end7, %entry
  %retval.0 = phi i8* [ %call8, %if.end7 ], [ null, %entry ]
  ret i8* %retval.0
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @convert_pseudo_ld_imm64(%struct.bpf_prog* %env.0.2.val) unnamed_addr #15 {
entry:
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %env.0.2.val, i64 0, i32 4
  %i8 = load i32, i32* %len, align 4
  %cmp5 = icmp sgt i32 %i8, 0
  br i1 %cmp5, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %i9 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %env.0.2.val, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i9 to %struct.bpf_insn*
  %xtraiter = and i32 %i8, 1
  %i10 = icmp eq i32 %i8, 1
  br i1 %i10, label %for.end.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i32 %i8, -2
  br label %for.body

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %insn.06 = phi %struct.bpf_insn* [ %arraydecay, %for.body.preheader.new ], [ %incdec.ptr.1, %for.inc.1 ]
  %niter = phi i32 [ 0, %for.body.preheader.new ], [ %niter.next.1, %for.inc.1 ]
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.06, i64 0, i32 0
  %i11 = load i8, i8* %code, align 4
  %cmp2 = icmp eq i8 %i11, 24
  br i1 %cmp2, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %src_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.06, i64 0, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %bf.clear = and i8 %bf.load, 15
  store i8 %bf.clear, i8* %src_reg, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body
  %code.1 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.06, i64 1, i32 0
  %i12 = load i8, i8* %code.1, align 4
  %cmp2.1 = icmp eq i8 %i12, 24
  br i1 %cmp2.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %src_reg.1 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.06, i64 1, i32 1
  %bf.load.1 = load i8, i8* %src_reg.1, align 1
  %bf.clear.1 = and i8 %bf.load.1, 15
  store i8 %bf.clear.1, i8* %src_reg.1, align 1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %incdec.ptr.1 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.06, i64 2
  %niter.next.1 = add i32 %niter, 2
  %niter.ncmp.1 = icmp eq i32 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %for.end.loopexit.unr-lcssa, label %for.body

for.end.loopexit.unr-lcssa:                       ; preds = %for.inc.1, %for.body.preheader
  %insn.06.unr = phi %struct.bpf_insn* [ %arraydecay, %for.body.preheader ], [ %incdec.ptr.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.end, label %for.body.epil

for.body.epil:                                    ; preds = %for.end.loopexit.unr-lcssa
  %code.epil = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.06.unr, i64 0, i32 0
  %i13 = load i8, i8* %code.epil, align 4
  %cmp2.epil = icmp eq i8 %i13, 24
  br i1 %cmp2.epil, label %if.then.epil, label %for.end

if.then.epil:                                     ; preds = %for.body.epil
  %src_reg.epil = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.06.unr, i64 0, i32 1
  %bf.load.epil = load i8, i8* %src_reg.epil, align 1
  %bf.clear.epil = and i8 %bf.load.epil, 15
  store i8 %bf.clear.epil, i8* %src_reg.epil, align 1
  br label %for.end

for.end:                                          ; preds = %if.then.epil, %for.body.epil, %for.end.loopexit.unr-lcssa, %entry
  ret void
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @adjust_btf_func(%struct.bpf_verifier_env* nocapture noundef readonly %env) unnamed_addr #15 {
entry:
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 7
  %i9 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %func_info = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i9, i64 0, i32 25
  %i10 = load %struct.util_est*, %struct.util_est** %func_info, align 8
  %tobool.not = icmp eq %struct.util_est* %i10, null
  br i1 %tobool.not, label %for.end, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i11 = load i32, i32* %subprog_cnt, align 8
  %cmp7.not = icmp eq i32 %i11, 0
  br i1 %cmp7.not, label %for.end, label %for.body

for.body:                                         ; preds = %for.body, %for.cond.preheader
  %i.08 = phi i32 [ %inc, %for.body ], [ 0, %for.cond.preheader ]
  %idxprom = sext i32 %i.08 to i64
  %start = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom, i32 0
  %i12 = load i32, i32* %start, align 4
  %i13 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux2 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i13, i64 0, i32 7
  %i14 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux2, align 8
  %func_info3 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i14, i64 0, i32 25
  %i15 = load %struct.util_est*, %struct.util_est** %func_info3, align 8
  %insn_off = getelementptr %struct.util_est, %struct.util_est* %i15, i64 %idxprom, i32 0
  store i32 %i12, i32* %insn_off, align 4
  %inc = add nuw i32 %i.08, 1
  %i16 = load i32, i32* %subprog_cnt, align 8
  %cmp = icmp ult i32 %inc, %i16
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %for.cond.preheader, %entry
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @release_maps(%struct.bpf_verifier_env* nocapture noundef readonly %env) unnamed_addr #6 {
entry:
  %used_map_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 12
  %i = load i32, i32* %used_map_cnt, align 8
  %cmp4.not = icmp eq i32 %i, 0
  br i1 %cmp4.not, label %for.end11, label %for.body8

for.body8:                                        ; preds = %for.body8, %entry
  %i.05 = phi i32 [ %inc, %for.body8 ], [ 0, %entry ]
  %idxprom9 = sext i32 %i.05 to i64
  %arrayidx10 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 11, i64 %idxprom9
  %i6 = load %struct.bpf_map*, %struct.bpf_map** %arrayidx10, align 8
  call void @bpf_map_put(%struct.bpf_map* noundef %i6) #23
  %inc = add nuw i32 %i.05, 1
  %i7 = load i32, i32* %used_map_cnt, align 8
  %cmp = icmp ult i32 %inc, %i7
  br i1 %cmp, label %for.body8, label %for.end11

for.end11:                                        ; preds = %for.body8, %entry
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @mutex_unlock(%struct.mutex* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @vfree(i8* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @kfree(i8* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @bpf_map_put(%struct.bpf_map* noundef) local_unnamed_addr #9

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #16

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local noalias i8* @__kmalloc(i64 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn writeonly
define internal fastcc i64 @div_u64(i64 noundef %dividend) unnamed_addr #13 {
entry:
  %remainder = alloca i32, align 4
  %call = call fastcc i64 @div_u64_rem(i64 noundef %dividend, i32* noundef nonnull %remainder) #22
  ret i64 %call
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn writeonly
define internal fastcc i64 @div_u64_rem(i64 noundef %dividend, i32* nocapture noundef writeonly %remainder) unnamed_addr #13 {
entry:
  %rem = urem i64 %dividend, 1000
  %conv1 = trunc i64 %rem to i32
  store i32 %conv1, i32* %remainder, align 4
  %div = udiv i64 %dividend, 1000
  ret i64 %div
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @jit_subprogs(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %prog1 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog1, align 8
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i213 = load i32, i32* %subprog_cnt, align 8
  %cmp = icmp ult i32 %i213, 2
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %i214 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %insnsi = bitcast %union.anon.146* %i214 to [0 x %struct.bpf_insn]*
  %arraydecay = bitcast %union.anon.146* %i214 to %struct.bpf_insn*
  %len2 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i215 = load i32, i32* %len2, align 4
  %cmp3176.not = icmp eq i32 %i215, 0
  br i1 %cmp3176.not, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %i.0179 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %insn.0177 = phi %struct.bpf_insn* [ %arraydecay, %for.body.lr.ph ], [ %incdec.ptr, %for.inc ]
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0177, i64 0, i32 0
  %i216 = load i8, i8* %code, align 4
  %cmp4.not = icmp eq i8 %i216, -123
  br i1 %cmp4.not, label %lor.lhs.false, label %for.inc

lor.lhs.false:                                    ; preds = %for.body
  %src_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0177, i64 0, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %bf.lshr.mask = and i8 %bf.load, -16
  %cmp7.not = icmp eq i8 %bf.lshr.mask, 16
  br i1 %cmp7.not, label %if.end10, label %for.inc

if.end10:                                         ; preds = %lor.lhs.false
  %imm = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0177, i64 0, i32 3
  %i217 = load i32, i32* %imm, align 4
  %add = add nuw i32 %i.0179, 1
  %add11 = add i32 %i217, %add
  %call = call fastcc i32 @find_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef %add11) #22
  %cmp12 = icmp slt i32 %call, 0
  br i1 %cmp12, label %if.then14, label %if.end52

if.then14:                                        ; preds = %if.end10
  %.b169 = load i1, i1* @jit_subprogs.__warned, align 1
  br i1 %.b169, label %return, label %if.then20

if.then20:                                        ; preds = %if.then14
  store i1 true, i1* @jit_subprogs.__warned, align 1
  %i218 = load i32, i32* %imm, align 4
  %add31 = add i32 %i218, %add
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.214, i64 0, i64 0), i32 noundef %add31) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 10622, i32 2313, i64 12) #24, !srcloc !14
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 221) #24, !srcloc !15
  br label %return

if.end52:                                         ; preds = %if.end10
  %conv53 = trunc i32 %call to i16
  %off = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.0177, i64 0, i32 2
  store i16 %conv53, i16* %off, align 2
  %i219 = load i32, i32* %imm, align 4
  %i220 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %idxprom = sext i32 %i.0179 to i64
  %i221 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i220, i64 %idxprom, i32 0
  %call_imm = bitcast %union.anon.13* %i221 to i32*
  store i32 %i219, i32* %call_imm, align 8
  store i32 1, i32* %imm, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end52, %lor.lhs.false, %for.body
  %inc = add nuw i32 %i.0179, 1
  %incdec.ptr = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.0177, i64 1
  %i222 = load i32, i32* %len2, align 4
  %cmp3 = icmp ult i32 %inc, %i222
  br i1 %cmp3, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %if.end
  %call56 = call i32 @bpf_prog_alloc_jited_linfo(%struct.bpf_prog* noundef %i) #23
  %tobool57.not = icmp eq i32 %call56, 0
  br i1 %tobool57.not, label %if.end59, label %out_undo_insn

if.end59:                                         ; preds = %for.end
  %i223 = load i32, i32* %subprog_cnt, align 8
  %conv61 = zext i32 %i223 to i64
  %call62 = call fastcc i8* @kcalloc(i64 noundef %conv61) #22
  %i224 = bitcast i8* %call62 to %struct.bpf_prog**
  %tobool63.not = icmp eq i8* %call62, null
  br i1 %tobool63.not, label %out_undo_insn, label %for.cond66.preheader

for.cond66.preheader:                             ; preds = %if.end59
  %i225 = load i32, i32* %subprog_cnt, align 8
  %cmp68181.not = icmp eq i32 %i225, 0
  br i1 %cmp68181.not, label %for.cond174.preheader, label %for.body70.lr.ph

for.body70.lr.ph:                                 ; preds = %for.cond66.preheader
  %type = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 2
  %aux108 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 7
  br label %for.body70

for.cond174.preheader:                            ; preds = %if.end168, %for.cond66.preheader
  %i226 = load i32, i32* %subprog_cnt, align 8
  %cmp176189.not = icmp eq i32 %i226, 0
  br i1 %cmp176189.not, label %for.cond224.preheader, label %for.body178

for.body70:                                       ; preds = %if.end168, %for.body70.lr.ph
  %i.1183 = phi i32 [ 0, %for.body70.lr.ph ], [ %add71, %if.end168 ]
  %subprog_end.0182 = phi i32 [ 0, %for.body70.lr.ph ], [ %i227, %if.end168 ]
  %add71 = add nuw i32 %i.1183, 1
  %idxprom72 = sext i32 %add71 to i64
  %start = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom72, i32 0
  %i227 = load i32, i32* %start, align 4
  %sub = sub i32 %i227, %subprog_end.0182
  %call74 = call fastcc i32 @bpf_prog_size(i32 noundef %sub) #22, !range !16
  %call75 = call %struct.bpf_prog* @bpf_prog_alloc_no_stats(i32 noundef %call74, i32 noundef 1051840) #23
  %idxprom76 = sext i32 %i.1183 to i64
  %arrayidx77 = getelementptr %struct.bpf_prog*, %struct.bpf_prog** %i224, i64 %idxprom76
  store %struct.bpf_prog* %call75, %struct.bpf_prog** %arrayidx77, align 8
  %tobool80.not = icmp eq %struct.bpf_prog* %call75, null
  br i1 %tobool80.not, label %out_free, label %if.end82

if.end82:                                         ; preds = %for.body70
  %i228 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %call75, i64 0, i32 10
  %i229 = bitcast %union.anon.146* %i228 to i8*
  %idxprom88 = sext i32 %subprog_end.0182 to i64
  %i230 = getelementptr [0 x %struct.bpf_insn], [0 x %struct.bpf_insn]* %insnsi, i64 0, i64 %idxprom88, i32 0
  %conv90 = sext i32 %sub to i64
  %mul = shl nsw i64 %conv90, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i229, i8* align 8 %i230, i64 %mul, i1 false)
  %i231 = load i32, i32* %type, align 4
  %i232 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %type93 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i232, i64 0, i32 2
  store i32 %i231, i32* %type93, align 4
  %i233 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %len96 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i233, i64 0, i32 4
  store i32 %sub, i32* %len96, align 4
  %i234 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %call99 = call i32 @bpf_prog_calc_tag(%struct.bpf_prog* noundef %i234) #23
  %tobool100.not = icmp eq i32 %call99, 0
  br i1 %tobool100.not, label %if.end102, label %out_free

if.end102:                                        ; preds = %if.end82
  %i235 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %is_func = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i235, i64 0, i32 1
  %bf.load105 = load i16, i16* %is_func, align 2
  %bf.set = or i16 %bf.load105, 64
  store i16 %bf.set, i16* %is_func, align 2
  %i236 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i236, i64 0, i32 7
  %i237 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %func_idx = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i237, i64 0, i32 8
  store i32 %i.1183, i32* %func_idx, align 8
  %i238 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux108, align 8
  %btf = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i238, i64 0, i32 24
  %i239 = load %struct.btf*, %struct.btf** %btf, align 8
  %i240 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %aux111 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i240, i64 0, i32 7
  %i241 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux111, align 8
  %btf112 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i241, i64 0, i32 24
  store %struct.btf* %i239, %struct.btf** %btf112, align 8
  %i242 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux108, align 8
  %func_info = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i242, i64 0, i32 25
  %i243 = load %struct.util_est*, %struct.util_est** %func_info, align 8
  %i244 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %aux116 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i244, i64 0, i32 7
  %i245 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux116, align 8
  %func_info117 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i245, i64 0, i32 25
  store %struct.util_est* %i243, %struct.util_est** %func_info117, align 8
  %i246 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %aux120 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i246, i64 0, i32 7
  %i247 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux120, align 8
  %arrayidx121 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i247, i64 0, i32 21, i64 0
  store i8 70, i8* %arrayidx121, align 8
  %stack_depth = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom76, i32 2
  %i248 = load i16, i16* %stack_depth, align 4
  %conv125 = zext i16 %i248 to i32
  %i249 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %aux128 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i249, i64 0, i32 7
  %i250 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux128, align 8
  %stack_depth129 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i250, i64 0, i32 5
  store i32 %conv125, i32* %stack_depth129, align 4
  %i251 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %jit_requested = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i251, i64 0, i32 1
  %bf.load132 = load i16, i16* %jit_requested, align 2
  %bf.set134 = or i16 %bf.load132, 2
  store i16 %bf.set134, i16* %jit_requested, align 2
  %i252 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux108, align 8
  %linfo = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i252, i64 0, i32 26
  %i253 = load %struct.ethtool_pauseparam*, %struct.ethtool_pauseparam** %linfo, align 8
  %i254 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %aux138 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i254, i64 0, i32 7
  %i255 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux138, align 8
  %linfo139 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i255, i64 0, i32 26
  store %struct.ethtool_pauseparam* %i253, %struct.ethtool_pauseparam** %linfo139, align 8
  %i256 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux108, align 8
  %nr_linfo = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i256, i64 0, i32 29
  %i257 = load i32, i32* %nr_linfo, align 4
  %i258 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %aux143 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i258, i64 0, i32 7
  %i259 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux143, align 8
  %nr_linfo144 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i259, i64 0, i32 29
  store i32 %i257, i32* %nr_linfo144, align 4
  %i260 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux108, align 8
  %jited_linfo = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i260, i64 0, i32 27
  %i261 = load i8**, i8*** %jited_linfo, align 8
  %i262 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %aux148 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i262, i64 0, i32 7
  %i263 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux148, align 8
  %jited_linfo149 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i263, i64 0, i32 27
  store i8** %i261, i8*** %jited_linfo149, align 8
  %linfo_idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom76, i32 1
  %i264 = load i32, i32* %linfo_idx, align 4
  %i265 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %aux155 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i265, i64 0, i32 7
  %i266 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux155, align 8
  %linfo_idx156 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i266, i64 0, i32 30
  store i32 %i264, i32* %linfo_idx156, align 8
  %i267 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx77, align 8
  %call159 = call %struct.bpf_prog* @bpf_int_jit_compile(%struct.bpf_prog* noundef %i267) #23
  store %struct.bpf_prog* %call159, %struct.bpf_prog** %arrayidx77, align 8
  %jited = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %call159, i64 0, i32 1
  %bf.load164 = load i16, i16* %jited, align 2
  %bf.clear165 = and i16 %bf.load164, 1
  %tobool166.not = icmp eq i16 %bf.clear165, 0
  br i1 %tobool166.not, label %out_free, label %if.end168

if.end168:                                        ; preds = %if.end102
  %call170 = call i32 @_cond_resched() #23
  %i268 = load i32, i32* %subprog_cnt, align 8
  %cmp68 = icmp ult i32 %add71, %i268
  br i1 %cmp68, label %for.body70, label %for.cond174.preheader

for.cond224.preheader:                            ; preds = %for.end212, %for.cond174.preheader
  %i269 = load i32, i32* %subprog_cnt, align 8
  %cmp226191.not = icmp eq i32 %i269, 0
  br i1 %cmp226191.not, label %for.cond252.preheader, label %for.body228

for.body178:                                      ; preds = %for.end212, %for.cond174.preheader
  %i.2190 = phi i32 [ %inc222, %for.end212 ], [ 0, %for.cond174.preheader ]
  %idxprom179 = sext i32 %i.2190 to i64
  %arrayidx180 = getelementptr %struct.bpf_prog*, %struct.bpf_prog** %i224, i64 %idxprom179
  %i270 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx180, align 8
  %len186184 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i270, i64 0, i32 4
  %i271 = load i32, i32* %len186184, align 4
  %cmp187185.not = icmp eq i32 %i271, 0
  br i1 %cmp187185.not, label %for.end212, label %for.body189.preheader

for.body189.preheader:                            ; preds = %for.body178
  %i272 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i270, i64 0, i32 10
  %arraydecay182 = bitcast %union.anon.146* %i272 to %struct.bpf_insn*
  br label %for.body189

for.body189:                                      ; preds = %for.inc209, %for.body189.preheader
  %j.0188 = phi i32 [ %inc210, %for.inc209 ], [ 0, %for.body189.preheader ]
  %insn.1186 = phi %struct.bpf_insn* [ %incdec.ptr211, %for.inc209 ], [ %arraydecay182, %for.body189.preheader ]
  %code190 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.1186, i64 0, i32 0
  %i273 = load i8, i8* %code190, align 4
  %cmp192.not = icmp eq i8 %i273, -123
  br i1 %cmp192.not, label %lor.lhs.false194, label %for.inc209

lor.lhs.false194:                                 ; preds = %for.body189
  %src_reg195 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.1186, i64 0, i32 1
  %bf.load196 = load i8, i8* %src_reg195, align 1
  %bf.lshr197.mask = and i8 %bf.load196, -16
  %cmp199.not = icmp eq i8 %bf.lshr197.mask, 16
  br i1 %cmp199.not, label %if.end202, label %for.inc209

if.end202:                                        ; preds = %lor.lhs.false194
  %off203 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.1186, i64 0, i32 2
  %i274 = load i16, i16* %off203, align 2
  %idxprom205 = sext i16 %i274 to i64
  %arrayidx206 = getelementptr %struct.bpf_prog*, %struct.bpf_prog** %i224, i64 %idxprom205
  %i275 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx206, align 8
  %bpf_func = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i275, i64 0, i32 9
  %i276 = bitcast i32 (i8*, %struct.bpf_insn*)** %bpf_func to i64 (i64, i64, i64, i64, i64)**
  %i277 = load i64 (i64, i64, i64, i64, i64)*, i64 (i64, i64, i64, i64, i64)** %i276, align 8
  %sub.ptr.lhs.cast = ptrtoint i64 (i64, i64, i64, i64, i64)* %i277 to i64
  %i278 = trunc i64 %sub.ptr.lhs.cast to i32
  %conv207 = sub i32 %i278, ptrtoint (i64 (i64, i64, i64, i64, i64)* @__bpf_call_base to i32)
  %imm208 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.1186, i64 0, i32 3
  store i32 %conv207, i32* %imm208, align 4
  br label %for.inc209

for.inc209:                                       ; preds = %if.end202, %lor.lhs.false194, %for.body189
  %inc210 = add nuw i32 %j.0188, 1
  %incdec.ptr211 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.1186, i64 1
  %i279 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx180, align 8
  %len186 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i279, i64 0, i32 4
  %i280 = load i32, i32* %len186, align 4
  %cmp187 = icmp ult i32 %inc210, %i280
  br i1 %cmp187, label %for.body189, label %for.end212

for.end212:                                       ; preds = %for.inc209, %for.body178
  %.lcssa = phi %struct.bpf_prog* [ %i270, %for.body178 ], [ %i279, %for.inc209 ]
  %aux215 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %.lcssa, i64 0, i32 7
  %i281 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux215, align 8
  %func216 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i281, i64 0, i32 11
  %i282 = bitcast %struct.bpf_prog*** %func216 to i8**
  store i8* %call62, i8** %i282, align 8
  %i283 = load i32, i32* %subprog_cnt, align 8
  %i284 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx180, align 8
  %aux220 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i284, i64 0, i32 7
  %i285 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux220, align 8
  %func_cnt = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i285, i64 0, i32 7
  store i32 %i283, i32* %func_cnt, align 4
  %inc222 = add nuw i32 %i.2190, 1
  %i286 = load i32, i32* %subprog_cnt, align 8
  %cmp176 = icmp ult i32 %inc222, %i286
  br i1 %cmp176, label %for.body178, label %for.cond224.preheader

for.cond252.preheader:                            ; preds = %if.end246, %for.cond224.preheader
  %i287 = load i32, i32* %subprog_cnt, align 8
  %cmp254193.not = icmp eq i32 %i287, 0
  br i1 %cmp254193.not, label %for.cond266.preheader, label %for.body256

for.body228:                                      ; preds = %if.end246, %for.cond224.preheader
  %i.3192 = phi i32 [ %inc250, %if.end246 ], [ 0, %for.cond224.preheader ]
  %idxprom229 = sext i32 %i.3192 to i64
  %arrayidx230 = getelementptr %struct.bpf_prog*, %struct.bpf_prog** %i224, i64 %idxprom229
  %i288 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx230, align 8
  %bpf_func231 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i288, i64 0, i32 9
  %i289 = load i32 (i8*, %struct.bpf_insn*)*, i32 (i8*, %struct.bpf_insn*)** %bpf_func231, align 8
  %call234 = call %struct.bpf_prog* @bpf_int_jit_compile(%struct.bpf_prog* noundef %i288) #23
  %i290 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx230, align 8
  %cmp237.not = icmp eq %struct.bpf_prog* %call234, %i290
  br i1 %cmp237.not, label %lor.lhs.false239, label %if.then245

lor.lhs.false239:                                 ; preds = %for.body228
  %bpf_func242 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i290, i64 0, i32 9
  %i291 = load i32 (i8*, %struct.bpf_insn*)*, i32 (i8*, %struct.bpf_insn*)** %bpf_func242, align 8
  %cmp243.not = icmp eq i32 (i8*, %struct.bpf_insn*)* %i291, %i289
  br i1 %cmp243.not, label %if.end246, label %if.then245

if.then245:                                       ; preds = %lor.lhs.false239, %for.body228
  %i292 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i292, i8* noundef getelementptr inbounds ([38 x i8], [38 x i8]* @.str.287, i64 0, i64 0)) #22
  br label %out_free

if.end246:                                        ; preds = %lor.lhs.false239
  %call248 = call i32 @_cond_resched() #23
  %inc250 = add nuw i32 %i.3192, 1
  %i293 = load i32, i32* %subprog_cnt, align 8
  %cmp226 = icmp ult i32 %inc250, %i293
  br i1 %cmp226, label %for.body228, label %for.cond252.preheader

for.cond266.preheader:                            ; preds = %for.body256, %for.cond252.preheader
  %i294 = load i32, i32* %len2, align 4
  %cmp268195.not = icmp eq i32 %i294, 0
  br i1 %cmp268195.not, label %for.end299, label %for.body270.lr.ph

for.body270.lr.ph:                                ; preds = %for.cond266.preheader
  %insn_aux_data284 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  br label %for.body270

for.body256:                                      ; preds = %for.body256, %for.cond252.preheader
  %i.4194 = phi i32 [ %inc262, %for.body256 ], [ 0, %for.cond252.preheader ]
  %idxprom257 = sext i32 %i.4194 to i64
  %arrayidx258 = getelementptr %struct.bpf_prog*, %struct.bpf_prog** %i224, i64 %idxprom257
  %i295 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx258, align 8
  call fastcc void @bpf_prog_lock_ro(%struct.bpf_prog* noundef %i295) #22
  %inc262 = add nuw i32 %i.4194, 1
  %i296 = load i32, i32* %subprog_cnt, align 8
  %cmp254 = icmp ult i32 %inc262, %i296
  br i1 %cmp254, label %for.body256, label %for.cond266.preheader

for.body270:                                      ; preds = %for.inc296, %for.body270.lr.ph
  %i.5198 = phi i32 [ 0, %for.body270.lr.ph ], [ %inc297, %for.inc296 ]
  %insn.2196 = phi %struct.bpf_insn* [ %arraydecay, %for.body270.lr.ph ], [ %incdec.ptr298, %for.inc296 ]
  %code271 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.2196, i64 0, i32 0
  %i297 = load i8, i8* %code271, align 4
  %cmp273.not = icmp eq i8 %i297, -123
  br i1 %cmp273.not, label %lor.lhs.false275, label %for.inc296

lor.lhs.false275:                                 ; preds = %for.body270
  %src_reg276 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.2196, i64 0, i32 1
  %bf.load277 = load i8, i8* %src_reg276, align 1
  %bf.lshr278.mask = and i8 %bf.load277, -16
  %cmp280.not = icmp eq i8 %bf.lshr278.mask, 16
  br i1 %cmp280.not, label %if.end283, label %for.inc296

if.end283:                                        ; preds = %lor.lhs.false275
  %i298 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data284, align 8
  %idxprom285 = sext i32 %i.5198 to i64
  %i299 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i298, i64 %idxprom285, i32 0
  %call_imm287 = bitcast %union.anon.13* %i299 to i32*
  %i300 = load i32, i32* %call_imm287, align 8
  %conv288 = trunc i32 %i300 to i16
  %off289 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.2196, i64 0, i32 2
  store i16 %conv288, i16* %off289, align 2
  %sext = shl i32 %i300, 16
  %conv291 = ashr exact i32 %sext, 16
  %add292 = add nuw i32 %i.5198, 1
  %add293 = add i32 %add292, %conv291
  %call294 = call fastcc i32 @find_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef %add293) #22
  %imm295 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.2196, i64 0, i32 3
  store i32 %call294, i32* %imm295, align 4
  br label %for.inc296

for.inc296:                                       ; preds = %if.end283, %lor.lhs.false275, %for.body270
  %inc297 = add nuw i32 %i.5198, 1
  %incdec.ptr298 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.2196, i64 1
  %i301 = load i32, i32* %len2, align 4
  %cmp268 = icmp ult i32 %inc297, %i301
  br i1 %cmp268, label %for.body270, label %for.end299

for.end299:                                       ; preds = %for.inc296, %for.cond266.preheader
  %jited300 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 1
  %bf.load301 = load i16, i16* %jited300, align 2
  %bf.set303 = or i16 %bf.load301, 1
  store i16 %bf.set303, i16* %jited300, align 2
  %i302 = load %struct.bpf_prog*, %struct.bpf_prog** %i224, align 8
  %bpf_func305 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i302, i64 0, i32 9
  %i303 = load i32 (i8*, %struct.bpf_insn*)*, i32 (i8*, %struct.bpf_insn*)** %bpf_func305, align 8
  %bpf_func306 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 9
  store i32 (i8*, %struct.bpf_insn*)* %i303, i32 (i8*, %struct.bpf_insn*)** %bpf_func306, align 8
  %aux307 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 7
  %i304 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux307, align 8
  %func308 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i304, i64 0, i32 11
  %i305 = bitcast %struct.bpf_prog*** %func308 to i8**
  store i8* %call62, i8** %i305, align 8
  %i306 = load i32, i32* %subprog_cnt, align 8
  %i307 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux307, align 8
  %func_cnt311 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i307, i64 0, i32 7
  store i32 %i306, i32* %func_cnt311, align 4
  call void @bpf_prog_free_unused_jited_linfo(%struct.bpf_prog* noundef %i) #23
  br label %return

out_free:                                         ; preds = %if.then245, %if.end102, %if.end82, %for.body70
  %err.0 = phi i32 [ -524, %if.then245 ], [ -12, %if.end82 ], [ -12, %for.body70 ], [ -524, %if.end102 ]
  %i308 = load i32, i32* %subprog_cnt, align 8
  %cmp314199.not = icmp eq i32 %i308, 0
  br i1 %cmp314199.not, label %for.end326, label %for.body316

for.body316:                                      ; preds = %for.inc324, %out_free
  %i.6200 = phi i32 [ %inc325, %for.inc324 ], [ 0, %out_free ]
  %idxprom317 = sext i32 %i.6200 to i64
  %arrayidx318 = getelementptr %struct.bpf_prog*, %struct.bpf_prog** %i224, i64 %idxprom317
  %i309 = load %struct.bpf_prog*, %struct.bpf_prog** %arrayidx318, align 8
  %tobool319.not = icmp eq %struct.bpf_prog* %i309, null
  br i1 %tobool319.not, label %for.inc324, label %if.then320

if.then320:                                       ; preds = %for.body316
  call fastcc void @bpf_jit_free(%struct.bpf_prog* noundef nonnull %i309) #22
  br label %for.inc324

for.inc324:                                       ; preds = %if.then320, %for.body316
  %inc325 = add nuw i32 %i.6200, 1
  %i310 = load i32, i32* %subprog_cnt, align 8
  %cmp314 = icmp ult i32 %inc325, %i310
  br i1 %cmp314, label %for.body316, label %for.end326

for.end326:                                       ; preds = %for.inc324, %out_free
  call void @kfree(i8* noundef nonnull %call62) #23
  br label %out_undo_insn

out_undo_insn:                                    ; preds = %for.end326, %if.end59, %for.end
  %err.1 = phi i32 [ %call56, %for.end ], [ %err.0, %for.end326 ], [ -12, %if.end59 ]
  %jit_requested327 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 1
  %bf.load328 = load i16, i16* %jit_requested327, align 2
  %bf.clear329 = and i16 %bf.load328, -3
  store i16 %bf.clear329, i16* %jit_requested327, align 2
  %i311 = load i32, i32* %len2, align 4
  %cmp335201.not = icmp eq i32 %i311, 0
  br i1 %cmp335201.not, label %for.end360, label %for.body337.lr.ph

for.body337.lr.ph:                                ; preds = %out_undo_insn
  %insn_aux_data352 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  br label %for.body337

for.body337:                                      ; preds = %for.inc357, %for.body337.lr.ph
  %i.7204 = phi i32 [ 0, %for.body337.lr.ph ], [ %inc358, %for.inc357 ]
  %insn.3202 = phi %struct.bpf_insn* [ %arraydecay, %for.body337.lr.ph ], [ %incdec.ptr359, %for.inc357 ]
  %code338 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.3202, i64 0, i32 0
  %i312 = load i8, i8* %code338, align 4
  %cmp340.not = icmp eq i8 %i312, -123
  br i1 %cmp340.not, label %lor.lhs.false342, label %for.inc357

lor.lhs.false342:                                 ; preds = %for.body337
  %src_reg343 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.3202, i64 0, i32 1
  %bf.load344 = load i8, i8* %src_reg343, align 1
  %bf.lshr345.mask = and i8 %bf.load344, -16
  %cmp347.not = icmp eq i8 %bf.lshr345.mask, 16
  br i1 %cmp347.not, label %if.end350, label %for.inc357

if.end350:                                        ; preds = %lor.lhs.false342
  %off351 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.3202, i64 0, i32 2
  store i16 0, i16* %off351, align 2
  %i313 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data352, align 8
  %idxprom353 = sext i32 %i.7204 to i64
  %i314 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i313, i64 %idxprom353, i32 0
  %call_imm355 = bitcast %union.anon.13* %i314 to i32*
  %i315 = load i32, i32* %call_imm355, align 8
  %imm356 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn.3202, i64 0, i32 3
  store i32 %i315, i32* %imm356, align 4
  br label %for.inc357

for.inc357:                                       ; preds = %if.end350, %lor.lhs.false342, %for.body337
  %inc358 = add nuw i32 %i.7204, 1
  %incdec.ptr359 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn.3202, i64 1
  %i316 = load i32, i32* %len2, align 4
  %cmp335 = icmp ult i32 %inc358, %i316
  br i1 %cmp335, label %for.body337, label %for.end360

for.end360:                                       ; preds = %for.inc357, %out_undo_insn
  call void @bpf_prog_free_jited_linfo(%struct.bpf_prog* noundef %i) #23
  br label %return

return:                                           ; preds = %for.end360, %for.end299, %if.then20, %if.then14, %entry
  %retval.0 = phi i32 [ %err.1, %for.end360 ], [ 0, %for.end299 ], [ 0, %entry ], [ -14, %if.then20 ], [ -14, %if.then14 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @get_callee_stack_depth(%struct.bpf_verifier_env* noundef %env, i32 %insn.0.3.val, i32 noundef %idx) unnamed_addr #6 {
entry:
  %add = add i32 %idx, 1
  %add1 = add i32 %add, %insn.0.3.val
  %call = call fastcc i32 @find_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef %add1) #22
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end33

if.then:                                          ; preds = %entry
  %.b6 = load i1, i1* @get_callee_stack_depth.__warned, align 1
  br i1 %.b6, label %return, label %if.then6

if.then6:                                         ; preds = %if.then
  store i1 true, i1* @get_callee_stack_depth.__warned, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.214, i64 0, i64 0), i32 noundef %add1) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 2754, i32 2313, i64 12) #24, !srcloc !17
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 158) #24, !srcloc !18
  br label %return

if.end33:                                         ; preds = %entry
  %idxprom = sext i32 %call to i64
  %stack_depth = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom, i32 2
  %i7 = load i16, i16* %stack_depth, align 4
  %conv34 = zext i16 %i7 to i32
  br label %return

return:                                           ; preds = %if.end33, %if.then6, %if.then
  %retval.0 = phi i32 [ %conv34, %if.end33 ], [ -14, %if.then6 ], [ -14, %if.then ]
  ret i32 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @bpf_patch_call_args(%struct.bpf_insn* noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @find_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef %off) unnamed_addr #6 {
entry:
  %off.addr = alloca i32, align 4
  store i32 %off, i32* %off.addr, align 4
  %i = bitcast i32* %off.addr to i8*
  %arraydecay = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 0
  %i4 = bitcast %struct.bpf_subprog_info* %arraydecay to i8*
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i5 = load i32, i32* %subprog_cnt, align 8
  %conv = zext i32 %i5 to i64
  %call = call i8* @bsearch(i8* noundef nonnull %i, i8* noundef %i4, i64 noundef %conv, i64 noundef 12, i32 (i8*, i8*)* noundef nonnull @cmp_subprogs) #23
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sub.ptr.lhs.cast = ptrtoint i8* %call to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.bpf_subprog_info* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 12
  %conv3 = trunc i64 %sub.ptr.div to i32
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %conv3, %if.end ], [ -2, %entry ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal i32 @cmp_subprogs(i8* nocapture noundef readonly %a, i8* nocapture noundef readonly %b) #7 {
entry:
  %start = bitcast i8* %a to i32*
  %i = load i32, i32* %start, align 4
  %start1 = bitcast i8* %b to i32*
  %i1 = load i32, i32* %start1, align 4
  %sub = sub i32 %i, %i1
  ret i32 %sub
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i8* @bsearch(i8* noundef, i8* noundef, i64 noundef, i64 noundef, i32 (i8*, i8*)* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_prog_alloc_jited_linfo(%struct.bpf_prog* noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc noalias i8* @kcalloc(i64 noundef %n) unnamed_addr #6 {
entry:
  %call = call fastcc i8* @kmalloc_array(i64 noundef %n, i64 noundef 8, i32 noundef 3520) #22
  ret i8* %call
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc i32 @bpf_prog_size(i32 noundef %proglen) unnamed_addr #2 {
entry:
  %i = shl i32 %proglen, 3
  %i3 = add i32 %i, 56
  ret i32 %i3
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local %struct.bpf_prog* @bpf_prog_alloc_no_stats(i32 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_prog_calc_tag(%struct.bpf_prog* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local %struct.bpf_prog* @bpf_int_jit_compile(%struct.bpf_prog* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @_cond_resched() local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i64 @__bpf_call_base(i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef) #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @bpf_prog_lock_ro(%struct.bpf_prog* noundef %fp) unnamed_addr #6 {
entry:
  %i = bitcast %struct.bpf_prog* %fp to i8*
  call fastcc void @set_vm_flush_reset_perms(i8* noundef %i) #22
  %i3 = ptrtoint %struct.bpf_prog* %fp to i64
  %pages = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %fp, i64 0, i32 0
  %i4 = load i16, i16* %pages, align 8
  %conv = zext i16 %i4 to i32
  %call = call i32 @set_memory_ro(i64 noundef %i3, i32 noundef %conv) #23
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @bpf_prog_free_unused_jited_linfo(%struct.bpf_prog* noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @bpf_jit_free(%struct.bpf_prog* noundef %fp) unnamed_addr #6 {
entry:
  call fastcc void @bpf_prog_unlock_free(%struct.bpf_prog* noundef %fp) #22
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @bpf_prog_free_jited_linfo(%struct.bpf_prog* noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @bpf_prog_unlock_free(%struct.bpf_prog* noundef %fp) unnamed_addr #6 {
entry:
  call void @__bpf_prog_free(%struct.bpf_prog* noundef %fp) #23
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @__bpf_prog_free(%struct.bpf_prog* noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @set_vm_flush_reset_perms(i8* noundef %addr) unnamed_addr #6 {
entry:
  %call = call %struct.vm_struct* @find_vm_area(i8* noundef %addr) #23
  %tobool.not = icmp eq %struct.vm_struct* %call, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %flags = getelementptr inbounds %struct.vm_struct, %struct.vm_struct* %call, i64 0, i32 3
  %i = load i64, i64* %flags, align 8
  %or = or i64 %i, 256
  store i64 %or, i64* %flags, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @set_memory_ro(i64 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local %struct.vm_struct* @find_vm_area(i8* noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @insn_no_def(i8 %insn.0.0.val) unnamed_addr #7 {
entry:
  %i5 = and i8 %insn.0.0.val, 7
  %switch.tableidx = add nsw i8 %i5, -2
  %i6 = icmp ult i8 %switch.tableidx, 5
  %switch.cast = trunc i8 %switch.tableidx to i5
  %switch.downshift = lshr i5 -5, %switch.cast
  %i7 = and i5 %switch.downshift, 1
  %switch.masked = icmp ne i5 %i7, 0
  %i8 = select i1 %i6, i1 %switch.masked, i1 false
  ret i1 %i8
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @is_reg64(%struct.bpf_insn* nocapture noundef readonly %insn, %struct.bpf_reg_state* nocapture noundef readonly %reg, i32 noundef %t) unnamed_addr #7 {
entry:
  %code1 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i = load i8, i8* %code1, align 4
  %conv = zext i8 %i to i32
  %and = and i8 %i, 7
  %cmp = icmp eq i8 %and, 5
  br i1 %cmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  %and4 = and i8 %i, -16
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.then
  %Pivot = icmp slt i8 %and4, -112
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %and4, -112
  br i1 %SwitchLeaf2, label %return, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %and4, -128
  br i1 %SwitchLeaf, label %if.then15, label %NewDefault

if.then15:                                        ; preds = %LeafBlock
  %src_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %bf.lshr.mask = and i8 %bf.load, -16
  %cmp17 = icmp ne i8 %bf.lshr.mask, 16
  %cmp21 = icmp eq i32 %t, 0
  %spec.select = and i1 %cmp21, %cmp17
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end26

if.end26:                                         ; preds = %NewDefault, %entry
  %i2 = and i8 %i, 5
  %i3 = icmp eq i8 %i2, 5
  br i1 %i3, label %return, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %if.end26
  %i4 = and i8 %i, -9
  %i5 = icmp eq i8 %i4, -44
  br i1 %i5, label %land.lhs.true40, label %if.end44

land.lhs.true40:                                  ; preds = %lor.lhs.false33
  %imm = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i6 = load i32, i32* %imm, align 4
  %cmp41 = icmp eq i32 %i6, 64
  br i1 %cmp41, label %return, label %if.end44

if.end44:                                         ; preds = %land.lhs.true40, %lor.lhs.false33
  %i7 = icmp eq i8 %i2, 4
  br i1 %i7, label %return, label %if.end53

if.end53:                                         ; preds = %if.end44
  br label %NodeBlock10

NodeBlock10:                                      ; preds = %if.end53
  %Pivot11 = icmp eq i8 %and, 0
  br i1 %Pivot11, label %if.then83, label %NodeBlock8

NodeBlock8:                                       ; preds = %NodeBlock10
  %Pivot9 = icmp ult i8 %and, 3
  br i1 %Pivot9, label %LeafBlock4, label %LeafBlock6

LeafBlock6:                                       ; preds = %NodeBlock8
  %SwitchLeaf7 = icmp eq i8 %and, 3
  br i1 %SwitchLeaf7, label %if.then70, label %NewDefault3

LeafBlock4:                                       ; preds = %NodeBlock8
  %SwitchLeaf5 = icmp eq i8 %and, 1
  br i1 %SwitchLeaf5, label %if.then57, label %NewDefault3

if.then57:                                        ; preds = %LeafBlock4
  %cmp58.not = icmp eq i32 %t, 0
  br i1 %cmp58.not, label %return, label %if.then60

if.then60:                                        ; preds = %if.then57
  %and62 = and i32 %conv, 24
  %cmp63 = icmp eq i32 %and62, 24
  br label %return

if.then70:                                        ; preds = %LeafBlock6
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i8 = load i32, i32* %type, align 8
  %cmp71.not = icmp eq i32 %i8, 1
  br i1 %cmp71.not, label %if.end74, label %return

if.end74:                                         ; preds = %if.then70
  %and76 = and i32 %conv, 24
  %cmp77 = icmp eq i32 %and76, 24
  br label %return

if.then83:                                        ; preds = %NodeBlock10
  %cmp88 = icmp ult i8 %i, 32
  %cmp92.not = icmp eq i32 %t, 0
  %spec.select1 = or i1 %cmp92.not, %cmp88
  br label %return

NewDefault3:                                      ; preds = %LeafBlock4, %LeafBlock6
  br label %return

return:                                           ; preds = %NewDefault3, %if.then83, %if.end74, %if.then70, %if.then60, %if.then57, %if.end44, %land.lhs.true40, %if.end26, %if.then15, %LeafBlock1
  %retval.0 = phi i1 [ %cmp63, %if.then60 ], [ %cmp77, %if.end74 ], [ true, %LeafBlock1 ], [ true, %land.lhs.true40 ], [ true, %if.end26 ], [ false, %if.end44 ], [ true, %if.then57 ], [ true, %if.then70 ], [ true, %NewDefault3 ], [ %spec.select, %if.then15 ], [ %spec.select1, %if.then83 ]
  ret i1 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @get_random_int() unnamed_addr #6 {
entry:
  %call = call i32 @get_random_u32() #23
  ret i32 %call
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc %struct.bpf_prog* @bpf_patch_insn_data(%struct.bpf_verifier_env* noundef %env, i32 noundef %off, %struct.bpf_insn* noundef %patch, i32 noundef %len) unnamed_addr #6 {
entry:
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %call = call %struct.bpf_prog* @bpf_patch_insn_single(%struct.bpf_prog* noundef %i, i32 noundef %off, %struct.bpf_insn* noundef %patch, i32 noundef %len) #23
  %i13 = bitcast %struct.bpf_prog* %call to i8*
  %call1 = call fastcc zeroext i1 @IS_ERR(i8* noundef %i13) #22
  br i1 %call1, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %call2 = call fastcc i64 @PTR_ERR(i8* noundef %i13) #22
  %cmp = icmp eq i64 %call2, -34
  br i1 %cmp, label %if.then3, label %return

if.then3:                                         ; preds = %if.then
  %i14 = bitcast %struct.bpf_verifier_env* %env to i8*
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i15 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %idxprom = zext i32 %off to i64
  %orig_idx = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i15, i64 %idxprom, i32 7
  %i16 = load i32, i32* %orig_idx, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i14, i8* noundef getelementptr inbounds ([47 x i8], [47 x i8]* @.str.285, i64 0, i64 0), i32 noundef %i16) #22
  br label %return

if.end4:                                          ; preds = %entry
  %call5 = call fastcc i32 @adjust_insn_aux_data(%struct.bpf_verifier_env* noundef %env, %struct.bpf_prog* noundef %call, i32 noundef %off, i32 noundef %len) #22
  %tobool.not = icmp eq i32 %call5, 0
  br i1 %tobool.not, label %if.end7, label %return

if.end7:                                          ; preds = %if.end4
  call fastcc void @adjust_subprog_starts(%struct.bpf_verifier_env* noundef %env, i32 noundef %off, i32 noundef %len) #22
  br label %return

return:                                           ; preds = %if.end7, %if.end4, %if.then3, %if.then
  %retval.0 = phi %struct.bpf_prog* [ %call, %if.end7 ], [ null, %if.then3 ], [ null, %if.then ], [ null, %if.end4 ]
  ret %struct.bpf_prog* %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local %struct.bpf_prog* @bpf_patch_insn_single(%struct.bpf_prog* noundef, i32 noundef, %struct.bpf_insn* noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @IS_ERR(i8* noundef readnone %ptr) unnamed_addr #2 {
entry:
  %cmp = icmp ugt i8* %ptr, inttoptr (i64 -4096 to i8*)
  ret i1 %cmp
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc i64 @PTR_ERR(i8* noundef %ptr) unnamed_addr #2 {
entry:
  %i = ptrtoint i8* %ptr to i64
  ret i64 %i
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @adjust_insn_aux_data(%struct.bpf_verifier_env* nocapture noundef %env, %struct.bpf_prog* nocapture noundef readonly %new_prog, i32 noundef %off, i32 noundef %cnt) unnamed_addr #6 {
entry:
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %i32 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %new_prog, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i32 to %struct.bpf_insn*
  %idx.ext = zext i32 %off to i64
  %add.ptr = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idx.ext
  %idx.ext1 = zext i32 %cnt to i64
  %add.ptr2 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %add.ptr, i64 %idx.ext1
  %add.ptr3 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %add.ptr2, i64 -1
  %call = call fastcc zeroext i1 @insn_has_def32(%struct.bpf_insn* noundef %add.ptr3) #22
  %arrayidx = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i, i64 %idx.ext
  %zext_dst = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i, i64 %idx.ext, i32 4
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %zext_dst, align 1
  %cmp = icmp eq i32 %cnt, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %new_prog, i64 0, i32 4
  %i33 = load i32, i32* %len, align 4
  %conv = zext i32 %i33 to i64
  %call4 = call fastcc i64 @array_size(i64 noundef %conv, i64 noundef 24) #22
  %call5 = call i8* @vzalloc(i64 noundef %call4) #23
  %i34 = bitcast i8* %call5 to %struct.bpf_insn_aux_data*
  %tobool.not = icmp eq i8* %call5, null
  br i1 %tobool.not, label %return, label %if.end7

if.end7:                                          ; preds = %if.end
  %i35 = bitcast %struct.bpf_insn_aux_data* %i to i8*
  %mul = mul nuw nsw i64 %idx.ext, 24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call5, i8* align 8 %i35, i64 %mul, i1 false)
  %add.ptr10 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i34, i64 %idx.ext
  %add.ptr12 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %add.ptr10, i64 %idx.ext1
  %add.ptr13 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %add.ptr12, i64 -1
  %i36 = bitcast %struct.bpf_insn_aux_data* %add.ptr13 to i8*
  %i37 = bitcast %struct.bpf_insn_aux_data* %arrayidx to i8*
  %i38 = add i32 %cnt, %off
  %sub16 = sub i32 1, %i38
  %add = add i32 %sub16, %i33
  %conv17 = zext i32 %add to i64
  %mul18 = mul nuw nsw i64 %conv17, 24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i36, i8* align 8 %i37, i64 %mul18, i1 false)
  %sub20 = add i32 %i38, -1
  %cmp2130 = icmp ugt i32 %sub20, %off
  br i1 %cmp2130, label %for.body, label %for.end

for.body:                                         ; preds = %for.body, %if.end7
  %i.031 = phi i32 [ %inc, %for.body ], [ %off, %if.end7 ]
  %idxprom23 = sext i32 %i.031 to i64
  %seen = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i34, i64 %idxprom23, i32 3
  store i8 1, i8* %seen, align 8
  %add.ptr26 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idxprom23
  %call27 = call fastcc zeroext i1 @insn_has_def32(%struct.bpf_insn* noundef %add.ptr26) #22
  %zext_dst30 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i34, i64 %idxprom23, i32 4
  %frombool31 = zext i1 %call27 to i8
  store i8 %frombool31, i8* %zext_dst30, align 1
  %inc = add nuw i32 %i.031, 1
  %exitcond.not = icmp eq i32 %inc, %sub20
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.end7
  %i39 = bitcast %struct.bpf_insn_aux_data** %insn_aux_data to i8**
  store i8* %call5, i8** %i39, align 8
  call void @vfree(i8* noundef %i35) #23
  br label %return

return:                                           ; preds = %for.end, %if.end, %entry
  %retval.0 = phi i32 [ 0, %for.end ], [ 0, %entry ], [ -12, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @adjust_subprog_starts(%struct.bpf_verifier_env* nocapture noundef %env, i32 noundef %off, i32 noundef %len) unnamed_addr #15 {
entry:
  %cmp = icmp eq i32 %len, 1
  br i1 %cmp, label %for.end, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %sub = add i32 %len, -1
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.cond.preheader
  %i.07 = phi i32 [ 0, %for.cond.preheader ], [ %inc, %for.inc ]
  %idxprom = sext i32 %i.07 to i64
  %start = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom, i32 0
  %i = load i32, i32* %start, align 4
  %cmp2.not = icmp ugt i32 %i, %off
  br i1 %cmp2.not, label %if.end4, label %for.inc

if.end4:                                          ; preds = %for.body
  %add = add i32 %sub, %i
  store i32 %add, i32* %start, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end4, %for.body
  %inc = add i32 %i.07, 1
  %i8 = load i32, i32* %subprog_cnt, align 8
  %cmp1.not = icmp ugt i32 %inc, %i8
  br i1 %cmp1.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @insn_has_def32(%struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %insn.idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %insn.idx.val = load i8, i8* %insn.idx, align 4
  %call = call fastcc zeroext i1 @insn_no_def(i8 %insn.idx.val) #22
  br i1 %call, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = call fastcc zeroext i1 @is_reg64(%struct.bpf_insn* noundef %insn, %struct.bpf_reg_state* noundef null, i32 noundef 1) #22
  %lnot = xor i1 %call1, true
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %lnot, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @get_random_u32() local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @bpf_user_rnd_init_once() local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @bpf_map_ptr_unpriv(i64 %aux.0.0.0.val) unnamed_addr #7 {
entry:
  %and = and i64 %aux.0.0.0.val, 1
  %tobool = icmp ne i64 %and, 0
  ret i1 %tobool
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @bpf_map_ptr_poisoned(i64 %aux.0.0.0.val) unnamed_addr #7 {
entry:
  %and = and i64 %aux.0.0.0.val, -2
  %i1 = inttoptr i64 %and to %struct.bpf_map*
  %cmp = icmp eq %struct.bpf_map* %i1, inttoptr (i64 -2401263026318485698 to %struct.bpf_map*)
  ret i1 %cmp
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i8* @func_id_name(i32 noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_sock_convert_ctx_access(i32 noundef, %struct.bpf_insn* noundef, %struct.bpf_insn* noundef, %struct.bpf_prog* noundef, i32* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_tcp_sock_convert_ctx_access(i32 noundef, %struct.bpf_insn* noundef, %struct.bpf_insn* noundef, %struct.bpf_prog* noundef, i32* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_xdp_sock_convert_ctx_access(i32 noundef, %struct.bpf_insn* noundef, %struct.bpf_insn* noundef, %struct.bpf_prog* noundef, i32* noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc i32 @bpf_ctx_off_adjust_machine(i32 noundef %size) unnamed_addr #2 {
entry:
  %cmp = icmp ugt i32 %size, 8
  %rem = and i32 %size, 7
  %cmp1 = icmp eq i32 %rem, 0
  %i = and i1 %cmp, %cmp1
  %size.addr.0 = select i1 %i, i32 8, i32 %size
  ret i32 %size.addr.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i8 @bpf_ctx_narrow_access_offset(i32 noundef %off, i32 noundef %size_default) unnamed_addr #2 {
entry:
  %sub = add i32 %size_default, 255
  %and = and i32 %sub, %off
  %conv = trunc i32 %and to i8
  ret i8 %conv
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @verifier_remove_insns(%struct.bpf_verifier_env* noundef %env, i32 noundef %off, i32 noundef %cnt) unnamed_addr #6 {
entry:
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i24 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i24, i64 0, i32 4
  %i25 = load i32, i32* %len, align 4
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i24, i64 0, i32 7
  %i26 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %i26.idx = getelementptr %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i26, i64 0, i32 10
  %i26.idx.val = load i8, i8* %i26.idx, align 1
  %call = call fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %i26.idx.val) #22
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @bpf_prog_offload_remove_insns(%struct.bpf_verifier_env* noundef %env, i32 noundef %off, i32 noundef %cnt) #23
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %i27 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %call3 = call i32 @bpf_remove_insns(%struct.bpf_prog* noundef %i27, i32 noundef %off, i32 noundef %cnt) #23
  %tobool.not = icmp eq i32 %call3, 0
  br i1 %tobool.not, label %if.end5, label %return

if.end5:                                          ; preds = %if.end
  call fastcc void @adjust_subprog_starts_after_remove(%struct.bpf_verifier_env* noundef %env, i32 noundef %off, i32 noundef %cnt) #22
  call fastcc void @bpf_adj_linfo_after_remove(%struct.bpf_verifier_env* noundef %env, i32 noundef %off, i32 noundef %cnt) #22
  %idx.ext = zext i32 %off to i64
  %add.ptr = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i, i64 %idx.ext
  %i28 = bitcast %struct.bpf_insn_aux_data* %add.ptr to i8*
  %idx.ext16 = zext i32 %cnt to i64
  %add.ptr17 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %add.ptr, i64 %idx.ext16
  %i29 = bitcast %struct.bpf_insn_aux_data* %add.ptr17 to i8*
  %i1 = add i32 %cnt, %off
  %sub18 = sub i32 %i25, %i1
  %conv = zext i32 %sub18 to i64
  %mul = mul nuw nsw i64 %conv, 24
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %i28, i8* align 8 %i29, i64 %mul, i1 false)
  br label %return

return:                                           ; preds = %if.end5, %if.end
  %retval.0 = phi i32 [ 0, %if.end5 ], [ %call3, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @bpf_prog_offload_remove_insns(%struct.bpf_verifier_env* noundef, i32 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_remove_insns(%struct.bpf_prog* noundef, i32 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @adjust_subprog_starts_after_remove(%struct.bpf_verifier_env* nocapture noundef %env, i32 noundef %off, i32 noundef %cnt) unnamed_addr #11 {
entry:
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i = load i32, i32* %subprog_cnt, align 8
  %cmp2.not = icmp eq i32 %i, 0
  br i1 %cmp2.not, label %for.end, label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %i.03 = phi i32 [ %inc, %for.inc ], [ 0, %entry ]
  %idxprom = sext i32 %i.03 to i64
  %start = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom, i32 0
  %i14 = load i32, i32* %start, align 4
  %cmp1.not = icmp ult i32 %i14, %off
  br i1 %cmp1.not, label %for.inc, label %for.end

for.inc:                                          ; preds = %for.body
  %inc = add nuw i32 %i.03, 1
  %exitcond.not = icmp eq i32 %inc, %i
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %for.body, %entry
  %i.0.lcssa = phi i32 [ 0, %entry ], [ %i, %for.inc ], [ %i.03, %for.body ]
  %cmp47 = icmp ult i32 %i.0.lcssa, %i
  br i1 %cmp47, label %for.body5.lr.ph, label %for.end15

for.body5.lr.ph:                                  ; preds = %for.end
  %add = add i32 %cnt, %off
  br label %for.body5

for.body5:                                        ; preds = %for.inc13, %for.body5.lr.ph
  %j.08 = phi i32 [ %i.0.lcssa, %for.body5.lr.ph ], [ %inc14, %for.inc13 ]
  %idxprom7 = sext i32 %j.08 to i64
  %start9 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom7, i32 0
  %i15 = load i32, i32* %start9, align 4
  %cmp10.not = icmp ult i32 %i15, %add
  br i1 %cmp10.not, label %for.inc13, label %for.end15

for.inc13:                                        ; preds = %for.body5
  %inc14 = add nuw i32 %j.08, 1
  %exitcond13.not = icmp eq i32 %inc14, %i
  br i1 %exitcond13.not, label %for.end15, label %for.body5

for.end15:                                        ; preds = %for.inc13, %for.body5, %for.end
  %j.0.lcssa = phi i32 [ %i.0.lcssa, %for.end ], [ %i, %for.inc13 ], [ %j.08, %for.body5 ]
  %idxprom17 = sext i32 %j.0.lcssa to i64
  %start19 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom17, i32 0
  %i16 = load i32, i32* %start19, align 4
  %add20 = add i32 %cnt, %off
  %cmp21.not = icmp ne i32 %i16, %add20
  %dec = sext i1 %cmp21.not to i32
  %spec.select = add i32 %j.0.lcssa, %dec
  %cmp24 = icmp sgt i32 %spec.select, %i.0.lcssa
  br i1 %cmp24, label %if.then25, label %if.else

if.then25:                                        ; preds = %for.end15
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i17 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux26 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i17, i64 0, i32 7
  %i18 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux26, align 8
  %add28 = add i32 %i, 1
  %sub = sub i32 %add28, %spec.select
  %idx.ext = sext i32 %i.0.lcssa to i64
  %add.ptr = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idx.ext
  %i19 = bitcast %struct.bpf_subprog_info* %add.ptr to i8*
  %idx.ext32 = sext i32 %spec.select to i64
  %add.ptr33 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idx.ext32
  %i20 = bitcast %struct.bpf_subprog_info* %add.ptr33 to i8*
  %conv = sext i32 %sub to i64
  %mul = mul nsw i64 %conv, 12
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %i19, i8* align 4 %i20, i64 %mul, i1 false)
  %sub34 = sub i32 %spec.select, %i.0.lcssa
  %i21 = load i32, i32* %subprog_cnt, align 8
  %sub36 = sub i32 %i21, %sub34
  store i32 %sub36, i32* %subprog_cnt, align 8
  %func_info = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i18, i64 0, i32 25
  %i22 = load %struct.util_est*, %struct.util_est** %func_info, align 8
  %tobool.not = icmp eq %struct.util_est* %i22, null
  br i1 %tobool.not, label %if.end60, label %if.then37

if.then37:                                        ; preds = %if.then25
  %func_info_cnt = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i18, i64 0, i32 28
  %i23 = load i32, i32* %func_info_cnt, align 8
  %sub38 = sub i32 %i23, %spec.select
  %add.ptr41 = getelementptr %struct.util_est, %struct.util_est* %i22, i64 %idx.ext
  %i24 = bitcast %struct.util_est* %add.ptr41 to i8*
  %add.ptr44 = getelementptr %struct.util_est, %struct.util_est* %i22, i64 %idx.ext32
  %i25 = bitcast %struct.util_est* %add.ptr44 to i8*
  %conv45 = sext i32 %sub38 to i64
  %mul46 = shl nsw i64 %conv45, 3
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %i24, i8* align 4 %i25, i64 %mul46, i1 false)
  %i26 = load i32, i32* %func_info_cnt, align 8
  %sub49 = sub i32 %i26, %sub34
  store i32 %sub49, i32* %func_info_cnt, align 8
  br label %if.end60

if.else:                                          ; preds = %for.end15
  %idxprom52 = sext i32 %i.0.lcssa to i64
  %start54 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom52, i32 0
  %i27 = load i32, i32* %start54, align 4
  %cmp55 = icmp eq i32 %i27, %off
  %inc58 = zext i1 %cmp55 to i32
  %spec.select1 = add i32 %i.0.lcssa, %inc58
  br label %if.end60

if.end60:                                         ; preds = %if.else, %if.then37, %if.then25
  %i.1 = phi i32 [ %i.0.lcssa, %if.then37 ], [ %i.0.lcssa, %if.then25 ], [ %spec.select1, %if.else ]
  %i28 = load i32, i32* %subprog_cnt, align 8
  %cmp63.not11 = icmp ugt i32 %i.1, %i28
  br i1 %cmp63.not11, label %for.end73, label %for.body65

for.body65:                                       ; preds = %for.body65, %if.end60
  %i.212 = phi i32 [ %inc72, %for.body65 ], [ %i.1, %if.end60 ]
  %idxprom67 = sext i32 %i.212 to i64
  %start69 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom67, i32 0
  %i29 = load i32, i32* %start69, align 4
  %sub70 = sub i32 %i29, %cnt
  store i32 %sub70, i32* %start69, align 4
  %inc72 = add i32 %i.212, 1
  %i30 = load i32, i32* %subprog_cnt, align 8
  %cmp63.not = icmp ugt i32 %inc72, %i30
  br i1 %cmp63.not, label %for.end73, label %for.body65

for.end73:                                        ; preds = %for.body65, %if.end60
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @bpf_adj_linfo_after_remove(%struct.bpf_verifier_env* nocapture noundef %env, i32 noundef %off, i32 noundef %cnt) unnamed_addr #11 {
entry:
  %prog1 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog1, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 7
  %i17 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %nr_linfo2 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i17, i64 0, i32 29
  %i18 = load i32, i32* %nr_linfo2, align 4
  %tobool.not = icmp eq i32 %i18, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %linfo4 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i17, i64 0, i32 26
  %i19 = load %struct.ethtool_pauseparam*, %struct.ethtool_pauseparam** %linfo4, align 8
  br label %for.body

for.body:                                         ; preds = %for.inc, %if.end
  %i.02 = phi i32 [ %inc, %for.inc ], [ 0, %if.end ]
  %idxprom = zext i32 %i.02 to i64
  %insn_off = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %idxprom, i32 0
  %i20 = load i32, i32* %insn_off, align 4
  %cmp5.not = icmp ult i32 %i20, %off
  br i1 %cmp5.not, label %for.inc, label %for.end

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.02, 1
  %exitcond.not = icmp eq i32 %inc, %i18
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %for.body
  %i.0.lcssa.ph = phi i32 [ %i18, %for.inc ], [ %i.02, %for.body ]
  %cmp94 = icmp ugt i32 %i18, %i.0.lcssa.ph
  br i1 %cmp94, label %for.body10.lr.ph, label %for.end20

for.body10.lr.ph:                                 ; preds = %for.end
  %add = add i32 %cnt, %off
  %i21 = sub i32 %i18, %i.0.lcssa.ph
  br label %for.body10

for.body10:                                       ; preds = %if.then15, %for.body10.lr.ph
  %l_cnt.06 = phi i32 [ 0, %for.body10.lr.ph ], [ %inc16, %if.then15 ]
  %i.15 = phi i32 [ %i.0.lcssa.ph, %for.body10.lr.ph ], [ %inc19, %if.then15 ]
  %idxprom11 = zext i32 %i.15 to i64
  %insn_off13 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %idxprom11, i32 0
  %i22 = load i32, i32* %insn_off13, align 4
  %cmp14 = icmp ult i32 %i22, %add
  br i1 %cmp14, label %if.then15, label %for.end20

if.then15:                                        ; preds = %for.body10
  %inc16 = add nuw i32 %l_cnt.06, 1
  %inc19 = add i32 %i.15, 1
  %exitcond14.not = icmp eq i32 %inc16, %i21
  br i1 %exitcond14.not, label %for.end20, label %for.body10

for.end20:                                        ; preds = %if.then15, %for.body10, %for.end
  %i.1.lcssa = phi i32 [ %i.0.lcssa.ph, %for.end ], [ %i18, %if.then15 ], [ %i.15, %for.body10 ]
  %l_cnt.0.lcssa = phi i32 [ 0, %for.end ], [ %i21, %if.then15 ], [ %l_cnt.06, %for.body10 ]
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i23 = load i32, i32* %len, align 4
  %cmp21 = icmp ne i32 %i23, %off
  %tobool22 = icmp ne i32 %l_cnt.0.lcssa, 0
  %or.cond = select i1 %cmp21, i1 %tobool22, i1 false
  br i1 %or.cond, label %land.lhs.true23, label %if.end36

land.lhs.true23:                                  ; preds = %for.end20
  %cmp24 = icmp eq i32 %i.1.lcssa, %i18
  br i1 %cmp24, label %if.then30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true23
  %idxprom25 = zext i32 %i.1.lcssa to i64
  %insn_off27 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %idxprom25, i32 0
  %i24 = load i32, i32* %insn_off27, align 4
  %add28 = add i32 %cnt, %off
  %cmp29.not = icmp eq i32 %i24, %add28
  br i1 %cmp29.not, label %if.end36, label %if.then30

if.then30:                                        ; preds = %lor.lhs.false, %land.lhs.true23
  %dec = add i32 %l_cnt.0.lcssa, -1
  %add31 = add i32 %cnt, %off
  %dec32 = add i32 %i.1.lcssa, -1
  %idxprom33 = zext i32 %dec32 to i64
  %insn_off35 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %idxprom33, i32 0
  store i32 %add31, i32* %insn_off35, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then30, %lor.lhs.false, %for.end20
  %i.2 = phi i32 [ %dec32, %if.then30 ], [ %i.1.lcssa, %lor.lhs.false ], [ %i.1.lcssa, %for.end20 ]
  %l_cnt.1 = phi i32 [ %dec, %if.then30 ], [ %l_cnt.0.lcssa, %lor.lhs.false ], [ %l_cnt.0.lcssa, %for.end20 ]
  %tobool37.not = icmp eq i32 %l_cnt.1, 0
  br i1 %tobool37.not, label %if.end46, label %if.then38

if.then38:                                        ; preds = %if.end36
  %idx.ext = zext i32 %i.0.lcssa.ph to i64
  %add.ptr = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %idx.ext
  %i25 = bitcast %struct.ethtool_pauseparam* %add.ptr to i8*
  %idx.ext39 = zext i32 %i.2 to i64
  %add.ptr40 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %idx.ext39
  %i26 = bitcast %struct.ethtool_pauseparam* %add.ptr40 to i8*
  %sub = sub i32 %i18, %i.2
  %conv = zext i32 %sub to i64
  %mul = shl nuw nsw i64 %conv, 4
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %i25, i8* align 4 %i26, i64 %mul, i1 false)
  %i27 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %nr_linfo42 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i27, i64 0, i32 29
  %i28 = load i32, i32* %nr_linfo42, align 4
  %sub43 = sub i32 %i28, %l_cnt.1
  store i32 %sub43, i32* %nr_linfo42, align 4
  %i29 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %nr_linfo45 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i29, i64 0, i32 29
  %i30 = load i32, i32* %nr_linfo45, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then38, %if.end36
  %nr_linfo.0 = phi i32 [ %i30, %if.then38 ], [ %i18, %if.end36 ]
  %cmp4811 = icmp ult i32 %i.0.lcssa.ph, %nr_linfo.0
  br i1 %cmp4811, label %for.body50.preheader, label %for.cond58.preheader

for.body50.preheader:                             ; preds = %if.end46
  %i31 = zext i32 %i.0.lcssa.ph to i64
  %wide.trip.count = zext i32 %nr_linfo.0 to i64
  %i32 = sub nsw i64 %wide.trip.count, %i31
  %i33 = xor i64 %i31, -1
  %i34 = add nsw i64 %wide.trip.count, %i33
  %xtraiter = and i64 %i32, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body50.prol.loopexit, label %for.body50.prol

for.body50.prol:                                  ; preds = %for.body50.prol, %for.body50.preheader
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for.body50.prol ], [ %i31, %for.body50.preheader ]
  %prol.iter = phi i64 [ %prol.iter.next, %for.body50.prol ], [ 0, %for.body50.preheader ]
  %insn_off53.prol = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %indvars.iv.prol, i32 0
  %i35 = load i32, i32* %insn_off53.prol, align 4
  %sub54.prol = sub i32 %i35, %cnt
  store i32 %sub54.prol, i32* %insn_off53.prol, align 4
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.prol, 1
  %prol.iter.next = add nuw nsw i64 %prol.iter, 1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.next, %xtraiter
  br i1 %prol.iter.cmp.not, label %for.body50.prol.loopexit, label %for.body50.prol, !llvm.loop !19

for.body50.prol.loopexit:                         ; preds = %for.body50.prol, %for.body50.preheader
  %indvars.iv.unr = phi i64 [ %i31, %for.body50.preheader ], [ %indvars.iv.next.prol, %for.body50.prol ]
  %i36 = icmp ult i64 %i34, 3
  br i1 %i36, label %for.cond58.preheader, label %for.body50

for.cond58.preheader:                             ; preds = %for.body50, %for.body50.prol.loopexit, %if.end46
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %add71 = add i32 %l_cnt.1, %i.0.lcssa.ph
  br label %for.body61

for.body50:                                       ; preds = %for.body50, %for.body50.prol.loopexit
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %for.body50 ], [ %indvars.iv.unr, %for.body50.prol.loopexit ]
  %insn_off53 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %indvars.iv, i32 0
  %i37 = load i32, i32* %insn_off53, align 4
  %sub54 = sub i32 %i37, %cnt
  store i32 %sub54, i32* %insn_off53, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %insn_off53.1 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %indvars.iv.next, i32 0
  %i38 = load i32, i32* %insn_off53.1, align 4
  %sub54.1 = sub i32 %i38, %cnt
  store i32 %sub54.1, i32* %insn_off53.1, align 4
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %insn_off53.2 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %indvars.iv.next.1, i32 0
  %i39 = load i32, i32* %insn_off53.2, align 4
  %sub54.2 = sub i32 %i39, %cnt
  store i32 %sub54.2, i32* %insn_off53.2, align 4
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv, 3
  %insn_off53.3 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i19, i64 %indvars.iv.next.2, i32 0
  %i40 = load i32, i32* %insn_off53.3, align 4
  %sub54.3 = sub i32 %i40, %cnt
  store i32 %sub54.3, i32* %insn_off53.3, align 4
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %exitcond16.not.3 = icmp eq i64 %indvars.iv.next.3, %wide.trip.count
  br i1 %exitcond16.not.3, label %for.cond58.preheader, label %for.body50

for.body61:                                       ; preds = %for.inc87, %for.cond58.preheader
  %i.413 = phi i32 [ 0, %for.cond58.preheader ], [ %inc88, %for.inc87 ]
  %idxprom62 = zext i32 %i.413 to i64
  %linfo_idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom62, i32 1
  %i41 = load i32, i32* %linfo_idx, align 4
  %cmp64 = icmp ugt i32 %i41, %i.0.lcssa.ph
  br i1 %cmp64, label %if.then66, label %for.inc87

if.then66:                                        ; preds = %for.body61
  %cmp72.not = icmp ult i32 %i41, %add71
  %sub79 = sub i32 %i41, %l_cnt.1
  %i.0.lcssa.ph.sink = select i1 %cmp72.not, i32 %i.0.lcssa.ph, i32 %sub79
  store i32 %i.0.lcssa.ph.sink, i32* %linfo_idx, align 4
  br label %for.inc87

for.inc87:                                        ; preds = %if.then66, %for.body61
  %inc88 = add i32 %i.413, 1
  %i42 = load i32, i32* %subprog_cnt, align 8
  %cmp59.not = icmp ugt i32 %inc88, %i42
  br i1 %cmp59.not, label %return, label %for.body61

return:                                           ; preds = %for.inc87, %entry
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @insn_is_cond_jump(i8 noundef zeroext %code) unnamed_addr #2 {
entry:
  %i = and i8 %code, 7
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp ult i8 %i, 6
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %i, 6
  br i1 %SwitchLeaf2, label %return, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %i, 5
  br i1 %SwitchLeaf, label %if.end7, label %NewDefault

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.then6

if.then6:                                         ; preds = %NewDefault
  br label %return

if.end7:                                          ; preds = %LeafBlock
  %and9 = and i8 %code, -16
  br label %NodeBlock12

NodeBlock12:                                      ; preds = %if.end7
  %Pivot13 = icmp slt i8 %and9, -112
  br i1 %Pivot13, label %LeafBlock4, label %NodeBlock10

NodeBlock10:                                      ; preds = %NodeBlock12
  %Pivot11 = icmp slt i8 %and9, 0
  br i1 %Pivot11, label %LeafBlock6, label %LeafBlock8

LeafBlock8:                                       ; preds = %NodeBlock10
  %SwitchLeaf9 = icmp eq i8 %and9, 0
  br i1 %SwitchLeaf9, label %return, label %NewDefault3

LeafBlock6:                                       ; preds = %NodeBlock10
  %SwitchLeaf7 = icmp eq i8 %and9, -112
  br i1 %SwitchLeaf7, label %return, label %NewDefault3

LeafBlock4:                                       ; preds = %NodeBlock12
  %SwitchLeaf5 = icmp eq i8 %and9, -128
  br i1 %SwitchLeaf5, label %return, label %NewDefault3

NewDefault3:                                      ; preds = %LeafBlock4, %LeafBlock6, %LeafBlock8
  br label %land.rhs

land.rhs:                                         ; preds = %NewDefault3
  br label %return

return:                                           ; preds = %land.rhs, %LeafBlock4, %LeafBlock6, %LeafBlock8, %if.then6, %LeafBlock1
  %retval.0 = phi i1 [ false, %if.then6 ], [ true, %LeafBlock1 ], [ false, %LeafBlock4 ], [ true, %land.rhs ], [ false, %LeafBlock6 ], [ false, %LeafBlock8 ]
  ret i1 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @bpf_prog_offload_replace_insn(%struct.bpf_verifier_env* noundef, i32 noundef, %struct.bpf_insn* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @kvfree(i8* noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @copy_verifier_state(%struct.bpf_verifier_state* nocapture noundef %dst_state, %struct.bpf_verifier_state* nocapture noundef readonly %src) unnamed_addr #6 {
entry:
  %jmp_history_cnt = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 10
  %i = load i32, i32* %jmp_history_cnt, align 8
  %mul = shl i32 %i, 3
  %jmp_history_cnt2 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 10
  %i90 = load i32, i32* %jmp_history_cnt2, align 8
  %cmp = icmp ult i32 %i90, %i
  br i1 %cmp, label %if.then, label %if.end9

if.then:                                          ; preds = %entry
  %jmp_history = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 9
  %i91 = bitcast %struct.util_est** %jmp_history to i8**
  %i92 = load i8*, i8** %i91, align 8
  call void @kfree(i8* noundef %i92) #23
  %conv5 = zext i32 %mul to i64
  %call10.i = call noalias align 8 i8* @__kmalloc(i64 noundef %conv5, i32 noundef 1051840) #23
  store i8* %call10.i, i8** %i91, align 8
  %tobool.not = icmp eq i8* %call10.i, null
  br i1 %tobool.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.then, %entry
  %jmp_history10 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 9
  %i93 = bitcast %struct.util_est** %jmp_history10 to i8**
  %i94 = load i8*, i8** %i93, align 8
  %jmp_history11 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 9
  %i95 = bitcast %struct.util_est** %jmp_history11 to i8**
  %i96 = load i8*, i8** %i95, align 8
  %conv12 = zext i32 %mul to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i94, i8* align 4 %i96, i64 %conv12, i1 false)
  %i97 = load i32, i32* %jmp_history_cnt, align 8
  store i32 %i97, i32* %jmp_history_cnt2, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 4
  %i98 = load i32, i32* %curframe, align 8
  %curframe15 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 4
  %i.086 = add i32 %i98, 1
  %i99 = load i32, i32* %curframe15, align 8
  %cmp16.not87 = icmp ugt i32 %i.086, %i99
  br i1 %cmp16.not87, label %for.end, label %for.body

for.body:                                         ; preds = %for.body, %if.end9
  %i.088 = phi i32 [ %i.0, %for.body ], [ %i.086, %if.end9 ]
  %idxprom = sext i32 %i.088 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 0, i64 %idxprom
  %i100 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  call fastcc void @free_func_state(%struct.bpf_func_state* noundef %i100) #22
  store %struct.bpf_func_state* null, %struct.bpf_func_state** %arrayidx, align 8
  %i.0 = add i32 %i.088, 1
  %i101 = load i32, i32* %curframe15, align 8
  %cmp16.not = icmp ugt i32 %i.0, %i101
  br i1 %cmp16.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.end9
  %speculative = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 6
  %i102 = load i8, i8* %speculative, align 8
  %i103 = and i8 %i102, 1
  %speculative22 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 6
  store i8 %i103, i8* %speculative22, align 8
  %i104 = load i32, i32* %curframe, align 8
  store i32 %i104, i32* %curframe15, align 8
  %active_spin_lock = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 5
  %i105 = load i32, i32* %active_spin_lock, align 4
  %active_spin_lock25 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 5
  store i32 %i105, i32* %active_spin_lock25, align 4
  %branches = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 2
  %i106 = load i32, i32* %branches, align 8
  %branches26 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 2
  store i32 %i106, i32* %branches26, align 8
  %parent = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 1
  %i107 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %parent, align 8
  %parent27 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 1
  store %struct.bpf_verifier_state* %i107, %struct.bpf_verifier_state** %parent27, align 8
  %first_insn_idx = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 7
  %i108 = load i32, i32* %first_insn_idx, align 4
  %first_insn_idx28 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 7
  store i32 %i108, i32* %first_insn_idx28, align 4
  %last_insn_idx = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 8
  %i109 = load i32, i32* %last_insn_idx, align 8
  %last_insn_idx29 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 8
  store i32 %i109, i32* %last_insn_idx29, align 8
  br label %for.body34

for.cond30:                                       ; preds = %if.end47
  %i110 = load i32, i32* %curframe, align 8
  %cmp32.not = icmp ugt i32 %inc56, %i110
  br i1 %cmp32.not, label %return, label %for.body34

for.body34:                                       ; preds = %for.cond30, %for.end
  %i.189 = phi i32 [ 0, %for.end ], [ %inc56, %for.cond30 ]
  %idxprom36 = sext i32 %i.189 to i64
  %arrayidx37 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %dst_state, i64 0, i32 0, i64 %idxprom36
  %i111 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx37, align 8
  %tobool38.not = icmp eq %struct.bpf_func_state* %i111, null
  br i1 %tobool38.not, label %if.then39, label %if.end47

if.then39:                                        ; preds = %for.body34
  %call40 = call fastcc i8* @kzalloc(i64 noundef 1184) #22
  %tobool41.not = icmp eq i8* %call40, null
  br i1 %tobool41.not, label %return, label %if.end43

if.end43:                                         ; preds = %if.then39
  %i112 = bitcast i8* %call40 to %struct.bpf_func_state*
  %i113 = bitcast %struct.bpf_func_state** %arrayidx37 to i8**
  store i8* %call40, i8** %i113, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.end43, %for.body34
  %dst.0 = phi %struct.bpf_func_state* [ %i111, %for.body34 ], [ %i112, %if.end43 ]
  %arrayidx50 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %src, i64 0, i32 0, i64 %idxprom36
  %i114 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx50, align 8
  %call51 = call fastcc i32 @copy_func_state(%struct.bpf_func_state* noundef %dst.0, %struct.bpf_func_state* noundef %i114) #22
  %tobool52.not = icmp eq i32 %call51, 0
  %inc56 = add i32 %i.189, 1
  br i1 %tobool52.not, label %for.cond30, label %return

return:                                           ; preds = %if.end47, %if.then39, %for.cond30, %if.then
  %retval.0 = phi i32 [ -12, %if.then ], [ -12, %if.then39 ], [ %call51, %if.end47 ], [ 0, %for.cond30 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @free_func_state(%struct.bpf_func_state* noundef %state) unnamed_addr #6 {
entry:
  %tobool.not = icmp eq %struct.bpf_func_state* %state, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 5
  %i = bitcast %struct.util_est** %refs to i8**
  %i4 = load i8*, i8** %i, align 8
  call void @kfree(i8* noundef %i4) #23
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i5 = bitcast %struct.bpf_stack_state** %stack to i8**
  %i6 = load i8*, i8** %i5, align 8
  call void @kfree(i8* noundef %i6) #23
  %i7 = bitcast %struct.bpf_func_state* %state to i8*
  call void @kfree(i8* noundef nonnull %i7) #23
  br label %return

return:                                           ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @copy_func_state(%struct.bpf_func_state* nocapture noundef %dst, %struct.bpf_func_state* nocapture noundef readonly %src) unnamed_addr #6 {
entry:
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %src, i64 0, i32 6
  %i = load i32, i32* %allocated_stack, align 8
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %src, i64 0, i32 4
  %i11 = load i32, i32* %acquired_refs, align 4
  %call = call fastcc i32 @realloc_func_state(%struct.bpf_func_state* noundef %dst, i32 noundef %i, i32 noundef %i11, i1 noundef zeroext false) #22
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %i12 = bitcast %struct.bpf_func_state* %dst to i8*
  %i13 = bitcast %struct.bpf_func_state* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(1156) %i12, i8* noundef align 8 dereferenceable(1156) %i13, i64 1156, i1 false)
  %call1 = call fastcc i32 @copy_reference_state(%struct.bpf_func_state* noundef %dst, %struct.bpf_func_state* noundef %src) #22
  %tobool2.not = icmp eq i32 %call1, 0
  br i1 %tobool2.not, label %if.end4, label %return

if.end4:                                          ; preds = %if.end
  %call5 = call fastcc i32 @copy_stack_state(%struct.bpf_func_state* noundef %dst, %struct.bpf_func_state* noundef %src) #22
  br label %return

return:                                           ; preds = %if.end4, %if.end, %entry
  %retval.0 = phi i32 [ %call5, %if.end4 ], [ %call, %entry ], [ %call1, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @realloc_func_state(%struct.bpf_func_state* nocapture noundef %state, i32 noundef %stack_size, i32 noundef %refs_size, i1 noundef zeroext %copy_old) unnamed_addr #6 {
entry:
  %call = call fastcc i32 @realloc_reference_state(%struct.bpf_func_state* noundef %state, i32 noundef %refs_size, i1 noundef zeroext %copy_old) #22
  %tobool1.not = icmp eq i32 %call, 0
  br i1 %tobool1.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call3 = call fastcc i32 @realloc_stack_state(%struct.bpf_func_state* noundef %state, i32 noundef %stack_size, i1 noundef zeroext %copy_old) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call3, %if.end ], [ %call, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @copy_reference_state(%struct.bpf_func_state* nocapture noundef %dst, %struct.bpf_func_state* nocapture noundef readonly %src) unnamed_addr #6 {
entry:
  %refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %src, i64 0, i32 5
  %i = load %struct.util_est*, %struct.util_est** %refs, align 8
  %tobool.not = icmp eq %struct.util_est* %i, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %dst, i64 0, i32 4
  %i7 = load i32, i32* %acquired_refs, align 4
  %acquired_refs1 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %src, i64 0, i32 4
  %i8 = load i32, i32* %acquired_refs1, align 4
  %cmp = icmp slt i32 %i7, %i8
  br i1 %cmp, label %do.body10, label %if.end21

do.body10:                                        ; preds = %if.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 640, i32 2307, i64 12) #24, !srcloc !20
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 124) #24, !srcloc !21
  %i9 = bitcast %struct.bpf_func_state* %dst to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(1184) %i9, i8 0, i64 1184, i1 false)
  br label %return

if.end21:                                         ; preds = %if.end
  %refs22 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %dst, i64 0, i32 5
  %i10 = bitcast %struct.util_est** %refs22 to i8**
  %i11 = load i8*, i8** %i10, align 8
  %i12 = bitcast %struct.util_est** %refs to i8**
  %i13 = load i8*, i8** %i12, align 8
  %conv25 = sext i32 %i8 to i64
  %mul = shl nsw i64 %conv25, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i11, i8* align 4 %i13, i64 %mul, i1 false)
  br label %return

return:                                           ; preds = %if.end21, %do.body10, %entry
  %retval.0 = phi i32 [ -14, %do.body10 ], [ 0, %if.end21 ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @copy_stack_state(%struct.bpf_func_state* nocapture noundef %dst, %struct.bpf_func_state* nocapture noundef readonly %src) unnamed_addr #6 {
entry:
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %src, i64 0, i32 7
  %i = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %tobool.not = icmp eq %struct.bpf_stack_state* %i, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %dst, i64 0, i32 6
  %i7 = load i32, i32* %allocated_stack, align 8
  %allocated_stack1 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %src, i64 0, i32 6
  %i8 = load i32, i32* %allocated_stack1, align 8
  %cmp = icmp slt i32 %i7, %i8
  br i1 %cmp, label %do.body10, label %if.end21

do.body10:                                        ; preds = %if.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 642, i32 2307, i64 12) #24, !srcloc !22
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 125) #24, !srcloc !23
  %i9 = bitcast %struct.bpf_func_state* %dst to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(1184) %i9, i8 0, i64 1184, i1 false)
  br label %return

if.end21:                                         ; preds = %if.end
  %stack22 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %dst, i64 0, i32 7
  %i10 = bitcast %struct.bpf_stack_state** %stack22 to i8**
  %i11 = load i8*, i8** %i10, align 8
  %i12 = bitcast %struct.bpf_stack_state** %stack to i8**
  %i13 = load i8*, i8** %i12, align 8
  %div = sdiv i32 %i8, 8
  %conv25 = sext i32 %div to i64
  %mul = mul nsw i64 %conv25, 112
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i11, i8* align 8 %i13, i64 %mul, i1 false)
  br label %return

return:                                           ; preds = %if.end21, %do.body10, %entry
  %retval.0 = phi i32 [ -14, %do.body10 ], [ 0, %if.end21 ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #17

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @realloc_reference_state(%struct.bpf_func_state* nocapture noundef %state, i32 noundef %size, i1 noundef zeroext %copy_old) unnamed_addr #6 {
entry:
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 4
  %i = load i32, i32* %acquired_refs, align 4
  %cmp = icmp ult i32 %i, %size
  br i1 %cmp, label %if.end9, label %if.then

if.then:                                          ; preds = %entry
  br i1 %copy_old, label %return, label %if.end

if.end:                                           ; preds = %if.then
  store i32 %size, i32* %acquired_refs, align 4
  %tobool4 = icmp eq i32 %size, 0
  %tobool5 = icmp ne i32 %i, 0
  %or.cond1 = select i1 %tobool4, i1 %tobool5, i1 false
  br i1 %or.cond1, label %if.then6, label %return

if.then6:                                         ; preds = %if.end
  %refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 5
  %i26 = bitcast %struct.util_est** %refs to i8**
  %i27 = load i8*, i8** %i26, align 8
  call void @kfree(i8* noundef %i27) #23
  store %struct.util_est* null, %struct.util_est** %refs, align 8
  br label %return

if.end9:                                          ; preds = %entry
  %conv = sext i32 %size to i64
  %call = call fastcc i8* @kmalloc_array(i64 noundef %conv, i64 noundef 8, i32 noundef 3264) #22
  %i28 = bitcast i8* %call to %struct.util_est*
  %tobool10.not = icmp eq i8* %call, null
  br i1 %tobool10.not, label %return, label %if.end12

if.end12:                                         ; preds = %if.end9
  br i1 %copy_old, label %if.then14, label %if.end27

if.then14:                                        ; preds = %if.end12
  %refs15 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 5
  %i29 = load %struct.util_est*, %struct.util_est** %refs15, align 8
  %tobool16.not = icmp eq %struct.util_est* %i29, null
  br i1 %tobool16.not, label %if.end22, label %if.then17

if.then17:                                        ; preds = %if.then14
  %i30 = bitcast %struct.util_est* %i29 to i8*
  %conv20 = zext i32 %i to i64
  %mul21 = shl nuw nsw i64 %conv20, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %call, i8* nonnull align 4 %i30, i64 %mul21, i1 false)
  br label %if.end22

if.end22:                                         ; preds = %if.then17, %if.then14
  %idx.ext = zext i32 %i to i64
  %add.ptr = getelementptr %struct.util_est, %struct.util_est* %i28, i64 %idx.ext
  %i31 = bitcast %struct.util_est* %add.ptr to i8*
  %sub = sub i32 %size, %i
  %conv24 = zext i32 %sub to i64
  %mul25 = shl nuw nsw i64 %conv24, 3
  call void @llvm.memset.p0i8.i64(i8* align 4 %i31, i8 0, i64 %mul25, i1 false)
  br label %if.end27

if.end27:                                         ; preds = %if.end22, %if.end12
  store i32 %size, i32* %acquired_refs, align 4
  %refs30 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 5
  %i32 = bitcast %struct.util_est** %refs30 to i8**
  %i33 = load i8*, i8** %i32, align 8
  call void @kfree(i8* noundef %i33) #23
  store i8* %call, i8** %i32, align 8
  br label %return

return:                                           ; preds = %if.end27, %if.end9, %if.then6, %if.end, %if.then
  %retval.0 = phi i32 [ 0, %if.end27 ], [ 0, %if.then ], [ 0, %if.then6 ], [ 0, %if.end ], [ -12, %if.end9 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @realloc_stack_state(%struct.bpf_func_state* nocapture noundef %state, i32 noundef %size, i1 noundef zeroext %copy_old) unnamed_addr #6 {
entry:
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 6
  %i = load i32, i32* %allocated_stack, align 8
  %div = sdiv i32 %size, 8
  %cmp = icmp ult i32 %i, %size
  br i1 %cmp, label %if.end9, label %if.then

if.then:                                          ; preds = %entry
  br i1 %copy_old, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %mul = shl nsw i32 %div, 3
  store i32 %mul, i32* %allocated_stack, align 8
  %tobool4 = icmp eq i32 %size, 0
  %tobool5 = icmp ne i32 %i, 0
  %or.cond1 = select i1 %tobool4, i1 %tobool5, i1 false
  br i1 %or.cond1, label %if.then6, label %return

if.then6:                                         ; preds = %if.end
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i26 = bitcast %struct.bpf_stack_state** %stack to i8**
  %i27 = load i8*, i8** %i26, align 8
  call void @kfree(i8* noundef %i27) #23
  store %struct.bpf_stack_state* null, %struct.bpf_stack_state** %stack, align 8
  br label %return

if.end9:                                          ; preds = %entry
  %conv = sext i32 %div to i64
  %call = call fastcc i8* @kmalloc_array(i64 noundef %conv, i64 noundef 112, i32 noundef 3264) #22
  %i28 = bitcast i8* %call to %struct.bpf_stack_state*
  %tobool10.not = icmp eq i8* %call, null
  br i1 %tobool10.not, label %return, label %if.end12

if.end12:                                         ; preds = %if.end9
  br i1 %copy_old, label %if.then14, label %if.end27

if.then14:                                        ; preds = %if.end12
  %stack15 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i29 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack15, align 8
  %tobool16.not = icmp eq %struct.bpf_stack_state* %i29, null
  br i1 %tobool16.not, label %if.end22, label %if.then17

if.then17:                                        ; preds = %if.then14
  %i30 = bitcast %struct.bpf_stack_state* %i29 to i8*
  %div19 = lshr i32 %i, 3
  %conv20 = zext i32 %div19 to i64
  %mul21 = mul nuw nsw i64 %conv20, 112
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %call, i8* nonnull align 8 %i30, i64 %mul21, i1 false)
  br label %if.end22

if.end22:                                         ; preds = %if.then17, %if.then14
  %div23 = lshr i32 %i, 3
  %idx.ext = zext i32 %div23 to i64
  %add.ptr = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i28, i64 %idx.ext
  %i31 = bitcast %struct.bpf_stack_state* %add.ptr to i8*
  %sub = sub i32 %size, %i
  %conv24 = zext i32 %sub to i64
  %div26 = mul nuw nsw i64 %conv24, 14
  call void @llvm.memset.p0i8.i64(i8* align 8 %i31, i8 0, i64 %div26, i1 false)
  br label %if.end27

if.end27:                                         ; preds = %if.end22, %if.end12
  %mul28 = shl nsw i32 %div, 3
  store i32 %mul28, i32* %allocated_stack, align 8
  %stack30 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i32 = bitcast %struct.bpf_stack_state** %stack30 to i8**
  %i33 = load i8*, i8** %i32, align 8
  call void @kfree(i8* noundef %i33) #23
  store i8* %call, i8** %i32, align 8
  br label %return

return:                                           ; preds = %if.end27, %if.end9, %if.then6, %if.end, %if.then
  %retval.0 = phi i32 [ 0, %if.end27 ], [ 0, %if.then ], [ 0, %if.then6 ], [ 0, %if.end ], [ -12, %if.end9 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @clear_jmp_history(%struct.bpf_verifier_state* nocapture noundef %state) unnamed_addr #6 {
entry:
  %jmp_history = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %state, i64 0, i32 9
  %i = bitcast %struct.util_est** %jmp_history to i8**
  %i3 = load i8*, i8** %i, align 8
  call void @kfree(i8* noundef %i3) #23
  store %struct.util_est* null, %struct.util_est** %jmp_history, align 8
  %jmp_history_cnt = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %state, i64 0, i32 10
  store i32 0, i32* %jmp_history_cnt, align 8
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @init_func_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* nocapture noundef %state, i32 noundef %callsite, i32 noundef %frameno, i32 noundef %subprogno) unnamed_addr #6 {
entry:
  %callsite1 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 1
  store i32 %callsite, i32* %callsite1, align 8
  %frameno2 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 2
  store i32 %frameno, i32* %frameno2, align 4
  %subprogno3 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 3
  store i32 %subprogno, i32* %subprogno3, align 8
  call fastcc void @init_reg_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %state) #22
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @is_state_visited(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %test_state_freq = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 7
  %i224 = load i8, i8* %test_state_freq, align 1
  %i225 = and i8 %i224, 1
  %prev_insn_idx = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 1
  %i226 = load i32, i32* %prev_insn_idx, align 4
  %last_insn_idx = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 8
  store i32 %i226, i32* %last_insn_idx, align 8
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i227 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %idxprom = sext i32 %insn_idx to i64
  %prune_point = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i227, i64 %idxprom, i32 6
  %i228 = load i8, i8* %prune_point, align 1
  %i229 = and i8 %i228, 1
  %tobool2.not = icmp eq i8 %i229, 0
  br i1 %tobool2.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %jmps_processed = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 25
  %i230 = load i32, i32* %jmps_processed, align 8
  %prev_jmps_processed = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 24
  %i231 = load i32, i32* %prev_jmps_processed, align 4
  %sub = sub i32 %i230, %i231
  %cmp = icmp ugt i32 %sub, 1
  br i1 %cmp, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end
  %insn_processed = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 23
  %i232 = load i32, i32* %insn_processed, align 8
  %prev_insn_processed = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 22
  %i233 = load i32, i32* %prev_insn_processed, align 4
  %sub3 = sub i32 %i232, %i233
  %cmp4 = icmp ugt i32 %sub3, 7
  %spec.select = select i1 %cmp4, i8 1, i8 %i225
  br label %if.end6

if.end6:                                          ; preds = %land.lhs.true, %if.end
  %add_new_state.0 = phi i8 [ %i225, %if.end ], [ %spec.select, %land.lhs.true ]
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %env.idx.val = load %struct.bpf_prog*, %struct.bpf_prog** %env.idx, align 8
  %env.idx1 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx1.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx1, align 8
  %env.idx2 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 9
  %env.idx2.val = load %struct.bpf_verifier_state_list**, %struct.bpf_verifier_state_list*** %env.idx2, align 8
  %env.idx.val.idx = getelementptr %struct.bpf_prog, %struct.bpf_prog* %env.idx.val, i64 0, i32 4
  %env.idx.val.idx.val = load i32, i32* %env.idx.val.idx, align 4
  %call = call fastcc %struct.bpf_verifier_state_list** @explored_state(i32 %env.idx.val.idx.val, %struct.bpf_verifier_state* %env.idx1.val, %struct.bpf_verifier_state_list** %env.idx2.val, i32 noundef %insn_idx) #22
  %i234 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %call, align 8
  %env.idx9 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %env.idx9.val = load %struct.bpf_prog*, %struct.bpf_prog** %env.idx9, align 8
  %env.idx10 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx10.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx10, align 8
  %env.idx11 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 9
  %env.idx11.val = load %struct.bpf_verifier_state_list**, %struct.bpf_verifier_state_list*** %env.idx11, align 8
  %env.idx9.val.idx = getelementptr %struct.bpf_prog, %struct.bpf_prog* %env.idx9.val, i64 0, i32 4
  %env.idx9.val.idx.val = load i32, i32* %env.idx9.val.idx, align 4
  call fastcc void @clean_live_states(i32 %env.idx9.val.idx.val, %struct.bpf_verifier_state* %env.idx10.val, %struct.bpf_verifier_state_list** %env.idx11.val, i32 noundef %insn_idx, %struct.bpf_verifier_state* noundef %i) #22
  %tobool7.not155163 = icmp eq %struct.bpf_verifier_state_list* %i234, null
  br i1 %tobool7.not155163, label %while.end, label %while.body.lr.ph.lr.ph

while.body.lr.ph.lr.ph:                           ; preds = %if.end6
  %insn_processed27 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 23
  %prev_insn_processed28 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 22
  %peak_states = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 29
  %free_list = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 10
  br label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %next113, %while.body.lr.ph.lr.ph
  %sl.0.ph167 = phi %struct.bpf_verifier_state_list* [ %i234, %while.body.lr.ph.lr.ph ], [ %i256, %next113 ]
  %pprev.0.ph166 = phi %struct.bpf_verifier_state_list** [ %call, %while.body.lr.ph.lr.ph ], [ %next114, %next113 ]
  %states_cnt.0.ph165 = phi i32 [ 0, %while.body.lr.ph.lr.ph ], [ %inc, %next113 ]
  %add_new_state.1.ph164 = phi i8 [ %add_new_state.0, %while.body.lr.ph.lr.ph ], [ %add_new_state.3, %next113 ]
  br label %while.body

while.body:                                       ; preds = %if.end111, %while.body.lr.ph
  %sl.0158 = phi %struct.bpf_verifier_state_list* [ %sl.0.ph167, %while.body.lr.ph ], [ %i255, %if.end111 ]
  %states_cnt.0157 = phi i32 [ %states_cnt.0.ph165, %while.body.lr.ph ], [ %inc, %if.end111 ]
  %add_new_state.1156 = phi i8 [ %add_new_state.1.ph164, %while.body.lr.ph ], [ %add_new_state.2, %if.end111 ]
  %inc = add i32 %states_cnt.0157, 1
  %state = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 0
  %insn_idx8 = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 0, i32 3
  %i235 = load i32, i32* %insn_idx8, align 4
  %cmp9.not = icmp eq i32 %i235, %insn_idx
  br i1 %cmp9.not, label %if.end11, label %next113

if.end11:                                         ; preds = %while.body
  %branches = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 0, i32 2
  %i236 = load i32, i32* %branches, align 8
  %tobool13.not = icmp eq i32 %i236, 0
  br i1 %tobool13.not, label %if.end33, label %if.then14

if.then14:                                        ; preds = %if.end11
  %call16 = call fastcc zeroext i1 @states_maybe_looping(%struct.bpf_verifier_state* noundef %state, %struct.bpf_verifier_state* noundef %i) #22
  br i1 %call16, label %land.lhs.true17, label %if.end21

land.lhs.true17:                                  ; preds = %if.then14
  %call19 = call fastcc zeroext i1 @states_equal(%struct.bpf_verifier_state* noundef %state, %struct.bpf_verifier_state* noundef %i) #22
  br i1 %call19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %land.lhs.true17
  call void (%struct.bpf_verifier_env*, i32, i8*, ...) @verbose_linfo(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i64 0, i64 0)) #22
  %i237 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i237, i8* noundef getelementptr inbounds ([35 x i8], [35 x i8]* @.str.68, i64 0, i64 0), i32 noundef %insn_idx) #22
  br label %return

if.end21:                                         ; preds = %land.lhs.true17, %if.then14
  %i238 = load i32, i32* %jmps_processed, align 8
  %i239 = load i32, i32* %prev_jmps_processed, align 4
  %sub24 = sub i32 %i238, %i239
  %cmp25 = icmp ult i32 %sub24, 20
  br i1 %cmp25, label %land.lhs.true26, label %miss

land.lhs.true26:                                  ; preds = %if.end21
  %i240 = load i32, i32* %insn_processed27, align 8
  %i241 = load i32, i32* %prev_insn_processed28, align 4
  %sub29 = sub i32 %i240, %i241
  %cmp30 = icmp ult i32 %sub29, 100
  %spec.select140 = select i1 %cmp30, i8 0, i8 %add_new_state.1156
  br label %miss

if.end33:                                         ; preds = %if.end11
  %call35 = call fastcc zeroext i1 @states_equal(%struct.bpf_verifier_state* noundef %state, %struct.bpf_verifier_state* noundef %i) #22
  br i1 %call35, label %if.then36, label %miss

if.then36:                                        ; preds = %if.end33
  %hit_cnt = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 3
  %i242 = load i32, i32* %hit_cnt, align 4
  %inc37 = add i32 %i242, 1
  store i32 %inc37, i32* %hit_cnt, align 4
  %call39 = call fastcc i32 @propagate_liveness(%struct.bpf_verifier_env* noundef %env, %struct.bpf_verifier_state* noundef %state, %struct.bpf_verifier_state* noundef %i) #22
  %tobool40.not = icmp eq i32 %call39, 0
  br i1 %tobool40.not, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.then36
  %call41 = call fastcc i32 @push_jmp_history(%struct.bpf_verifier_env* noundef %env, %struct.bpf_verifier_state* noundef %i) #22
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.then36
  %cond42 = phi i32 [ %call41, %cond.false ], [ %call39, %if.then36 ]
  %tobool43.not = icmp eq i32 %cond42, 0
  br i1 %tobool43.not, label %cond.false45, label %cond.end48

cond.false45:                                     ; preds = %cond.end
  %call47 = call fastcc i32 @propagate_precision(%struct.bpf_verifier_env* noundef %env, %struct.bpf_verifier_state* noundef %state) #22
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false45, %cond.end
  %cond49 = phi i32 [ %call47, %cond.false45 ], [ %cond42, %cond.end ]
  %tobool50.not = icmp eq i32 %cond49, 0
  %.cond49 = select i1 %tobool50.not, i32 1, i32 %cond49
  br label %return

miss:                                             ; preds = %if.end33, %land.lhs.true26, %if.end21
  %add_new_state.2 = phi i8 [ %add_new_state.1156, %if.end21 ], [ %add_new_state.1156, %if.end33 ], [ %spec.select140, %land.lhs.true26 ]
  %i243 = and i8 %add_new_state.2, 1
  %tobool54.not = icmp eq i8 %i243, 0
  br i1 %tobool54.not, label %if.end57, label %if.then55

if.then55:                                        ; preds = %miss
  %miss_cnt = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 2
  %i244 = load i32, i32* %miss_cnt, align 8
  %inc56 = add i32 %i244, 1
  store i32 %inc56, i32* %miss_cnt, align 8
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %miss
  %miss_cnt58 = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 2
  %i245 = load i32, i32* %miss_cnt58, align 8
  %hit_cnt59 = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 3
  %i246 = load i32, i32* %hit_cnt59, align 4
  %mul = mul i32 %i246, 3
  %add = add i32 %mul, 3
  %cmp60 = icmp sgt i32 %i245, %add
  br i1 %cmp60, label %if.then61, label %next113

if.then61:                                        ; preds = %if.end57
  %next = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 1
  %i247 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %next, align 8
  store %struct.bpf_verifier_state_list* %i247, %struct.bpf_verifier_state_list** %pprev.0.ph166, align 8
  %arrayidx63 = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 0, i32 0, i64 0
  %i248 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx63, align 8
  %live = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i248, i64 0, i32 0, i64 0, i32 13
  %i249 = load i32, i32* %live, align 8
  %and = and i32 %i249, 8
  %tobool65.not = icmp eq i32 %and, 0
  br i1 %tobool65.not, label %if.else, label %if.then66

if.then66:                                        ; preds = %if.then61
  %i250 = load i32, i32* %branches, align 8
  %tobool69 = icmp ne i32 %i250, 0
  %.b139 = load i1, i1* @is_state_visited.__warned, align 1
  %lnot73 = xor i1 %.b139, true
  %i251 = select i1 %tobool69, i1 %lnot73, i1 false
  br i1 %i251, label %if.then80, label %if.end100

if.then80:                                        ; preds = %if.then66
  store i1 true, i1* @is_state_visited.__warned, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.69, i64 0, i64 0), i32 noundef %i250) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 9274, i32 2313, i64 12) #24, !srcloc !24
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 218) #24, !srcloc !25
  br label %if.end100

if.end100:                                        ; preds = %if.then80, %if.then66
  call fastcc void @free_verifier_state(%struct.bpf_verifier_state* noundef %state, i1 noundef zeroext false) #22
  %i252 = bitcast %struct.bpf_verifier_state_list* %sl.0158 to i8*
  call void @kfree(i8* noundef nonnull %i252) #23
  %i253 = load i32, i32* %peak_states, align 8
  %dec = add i32 %i253, -1
  store i32 %dec, i32* %peak_states, align 8
  br label %if.end111

if.else:                                          ; preds = %if.then61
  %i254 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %free_list, align 8
  store %struct.bpf_verifier_state_list* %i254, %struct.bpf_verifier_state_list** %next, align 8
  store %struct.bpf_verifier_state_list* %sl.0158, %struct.bpf_verifier_state_list** %free_list, align 8
  br label %if.end111

if.end111:                                        ; preds = %if.else, %if.end100
  %i255 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %pprev.0.ph166, align 8
  %tobool7.not = icmp eq %struct.bpf_verifier_state_list* %i255, null
  br i1 %tobool7.not, label %while.end, label %while.body

next113:                                          ; preds = %if.end57, %while.body
  %add_new_state.3 = phi i8 [ %add_new_state.1156, %while.body ], [ %add_new_state.2, %if.end57 ]
  %next114 = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.0158, i64 0, i32 1
  %i256 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %next114, align 8
  %tobool7.not155 = icmp eq %struct.bpf_verifier_state_list* %i256, null
  br i1 %tobool7.not155, label %while.end, label %while.body.lr.ph

while.end:                                        ; preds = %next113, %if.end111, %if.end6
  %add_new_state.1.lcssa = phi i8 [ %add_new_state.0, %if.end6 ], [ %add_new_state.2, %if.end111 ], [ %add_new_state.3, %next113 ]
  %states_cnt.0.lcssa = phi i32 [ 0, %if.end6 ], [ %inc, %if.end111 ], [ %inc, %next113 ]
  %max_states_per_insn = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 27
  %i257 = load i32, i32* %max_states_per_insn, align 8
  %cmp115 = icmp ult i32 %i257, %states_cnt.0.lcssa
  br i1 %cmp115, label %if.then117, label %if.end119

if.then117:                                       ; preds = %while.end
  store i32 %states_cnt.0.lcssa, i32* %max_states_per_insn, align 8
  br label %if.end119

if.end119:                                        ; preds = %if.then117, %while.end
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i258 = load i8, i8* %allow_ptr_leaks, align 8
  %i259 = and i8 %i258, 1
  %tobool120.not137 = icmp eq i8 %i259, 0
  %cmp122 = icmp sgt i32 %states_cnt.0.lcssa, 64
  %or.cond = select i1 %tobool120.not137, i1 %cmp122, i1 false
  br i1 %or.cond, label %if.then124, label %if.end126

if.then124:                                       ; preds = %if.end119
  %call125 = call fastcc i32 @push_jmp_history(%struct.bpf_verifier_env* noundef %env, %struct.bpf_verifier_state* noundef %i) #22
  br label %return

if.end126:                                        ; preds = %if.end119
  %i260 = and i8 %add_new_state.1.lcssa, 1
  %tobool127.not = icmp eq i8 %i260, 0
  br i1 %tobool127.not, label %if.then128, label %if.end130

if.then128:                                       ; preds = %if.end126
  %call129 = call fastcc i32 @push_jmp_history(%struct.bpf_verifier_env* noundef %env, %struct.bpf_verifier_state* noundef %i) #22
  br label %return

if.end130:                                        ; preds = %if.end126
  %call131 = call fastcc i8* @kzalloc(i64 noundef 136) #22
  %tobool132.not = icmp eq i8* %call131, null
  br i1 %tobool132.not, label %return, label %if.end134

if.end134:                                        ; preds = %if.end130
  %total_states = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 28
  %i261 = load i32, i32* %total_states, align 4
  %inc135 = add i32 %i261, 1
  store i32 %inc135, i32* %total_states, align 4
  %peak_states136 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 29
  %i262 = load i32, i32* %peak_states136, align 8
  %inc137 = add i32 %i262, 1
  store i32 %inc137, i32* %peak_states136, align 8
  %i263 = load i32, i32* %jmps_processed, align 8
  store i32 %i263, i32* %prev_jmps_processed, align 4
  %insn_processed140 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 23
  %i264 = load i32, i32* %insn_processed140, align 8
  %prev_insn_processed141 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 22
  store i32 %i264, i32* %prev_insn_processed141, align 4
  %state142 = bitcast i8* %call131 to %struct.bpf_verifier_state*
  %call143 = call fastcc i32 @copy_verifier_state(%struct.bpf_verifier_state* noundef nonnull %state142, %struct.bpf_verifier_state* noundef %i) #22
  %tobool144.not = icmp eq i32 %call143, 0
  br i1 %tobool144.not, label %if.end146, label %if.then145

if.then145:                                       ; preds = %if.end134
  call fastcc void @free_verifier_state(%struct.bpf_verifier_state* noundef nonnull %state142, i1 noundef zeroext false) #22
  call void @kfree(i8* noundef nonnull %call131) #23
  br label %return

if.end146:                                        ; preds = %if.end134
  %insn_idx147 = getelementptr inbounds i8, i8* %call131, i64 76
  %i265 = bitcast i8* %insn_idx147 to i32*
  store i32 %insn_idx, i32* %i265, align 4
  %branches149 = getelementptr inbounds i8, i8* %call131, i64 72
  %i266 = bitcast i8* %branches149 to i32*
  %i267 = load i32, i32* %i266, align 8
  %cmp150 = icmp ne i32 %i267, 1
  %.b136138 = load i1, i1* @is_state_visited.__warned.70, align 1
  %lnot159 = xor i1 %.b136138, true
  %i268 = select i1 %cmp150, i1 %lnot159, i1 false
  br i1 %i268, label %if.then168, label %if.end193

if.then168:                                       ; preds = %if.end146
  store i1 true, i1* @is_state_visited.__warned.70, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([53 x i8], [53 x i8]* @.str.71, i64 0, i64 0), i32 noundef %i267, i32 noundef %insn_idx) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 9330, i32 2313, i64 12) #24, !srcloc !26
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 219) #24, !srcloc !27
  br label %if.end193

if.end193:                                        ; preds = %if.then168, %if.end146
  %parent = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 1
  %i269 = bitcast %struct.bpf_verifier_state** %parent to i8**
  store i8* %call131, i8** %i269, align 8
  %first_insn_idx = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 7
  store i32 %insn_idx, i32* %first_insn_idx, align 4
  call fastcc void @clear_jmp_history(%struct.bpf_verifier_state* noundef %i) #22
  %env.idx3 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %env.idx3.val = load %struct.bpf_prog*, %struct.bpf_prog** %env.idx3, align 8
  %env.idx4 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx4.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx4, align 8
  %env.idx5 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 9
  %env.idx5.val = load %struct.bpf_verifier_state_list**, %struct.bpf_verifier_state_list*** %env.idx5, align 8
  %env.idx3.val.idx = getelementptr %struct.bpf_prog, %struct.bpf_prog* %env.idx3.val, i64 0, i32 4
  %env.idx3.val.idx.val = load i32, i32* %env.idx3.val.idx, align 4
  %call201 = call fastcc %struct.bpf_verifier_state_list** @explored_state(i32 %env.idx3.val.idx.val, %struct.bpf_verifier_state* %env.idx4.val, %struct.bpf_verifier_state_list** %env.idx5.val, i32 noundef %insn_idx) #22
  %i270 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %call201, align 8
  %next202 = getelementptr inbounds i8, i8* %call131, i64 120
  %i271 = bitcast i8* %next202 to %struct.bpf_verifier_state_list**
  store %struct.bpf_verifier_state_list* %i270, %struct.bpf_verifier_state_list** %i271, align 8
  %env.idx6 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %env.idx6.val = load %struct.bpf_prog*, %struct.bpf_prog** %env.idx6, align 8
  %env.idx7 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx7.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx7, align 8
  %env.idx8 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 9
  %env.idx8.val = load %struct.bpf_verifier_state_list**, %struct.bpf_verifier_state_list*** %env.idx8, align 8
  %env.idx6.val.idx = getelementptr %struct.bpf_prog, %struct.bpf_prog* %env.idx6.val, i64 0, i32 4
  %env.idx6.val.idx.val = load i32, i32* %env.idx6.val.idx, align 4
  %call203 = call fastcc %struct.bpf_verifier_state_list** @explored_state(i32 %env.idx6.val.idx.val, %struct.bpf_verifier_state* %env.idx7.val, %struct.bpf_verifier_state_list** %env.idx8.val, i32 noundef %insn_idx) #22
  %i272 = bitcast %struct.bpf_verifier_state_list** %call203 to i8**
  store i8* %call131, i8** %i272, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %frame214 = bitcast i8* %call131 to [8 x %struct.bpf_func_state*]*
  %i273 = load i32, i32* %curframe, align 8
  br label %for.body

for.body:                                         ; preds = %for.cond228.preheader, %if.end193
  %i274 = phi i32 [ %i273, %if.end193 ], [ %i285, %for.cond228.preheader ]
  %j.0172 = phi i32 [ 0, %if.end193 ], [ %inc243, %for.cond228.preheader ]
  %cmp207 = icmp ult i32 %j.0172, %i274
  %cond209 = select i1 %cmp207, i64 6, i64 0
  %idxprom215 = sext i32 %j.0172 to i64
  %arrayidx216 = getelementptr [8 x %struct.bpf_func_state*], [8 x %struct.bpf_func_state*]* %frame214, i64 0, i64 %idxprom215
  %arrayidx222 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom215
  br label %for.body213

for.cond228.preheader:                            ; preds = %for.body213
  %i275 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i275, i64 0, i32 0, i64 0, i32 13
  store i32 0, i32* %live238, align 8
  %i276 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i276, i64 0, i32 0, i64 1, i32 13
  store i32 0, i32* %live238.1, align 8
  %i277 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i277, i64 0, i32 0, i64 2, i32 13
  store i32 0, i32* %live238.2, align 8
  %i278 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i278, i64 0, i32 0, i64 3, i32 13
  store i32 0, i32* %live238.3, align 8
  %i279 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i279, i64 0, i32 0, i64 4, i32 13
  store i32 0, i32* %live238.4, align 8
  %i280 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i280, i64 0, i32 0, i64 5, i32 13
  store i32 0, i32* %live238.5, align 8
  %i281 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i281, i64 0, i32 0, i64 6, i32 13
  store i32 0, i32* %live238.6, align 8
  %i282 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i282, i64 0, i32 0, i64 7, i32 13
  store i32 0, i32* %live238.7, align 8
  %i283 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i283, i64 0, i32 0, i64 8, i32 13
  store i32 0, i32* %live238.8, align 8
  %i284 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %live238.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i284, i64 0, i32 0, i64 9, i32 13
  store i32 0, i32* %live238.9, align 8
  %inc243 = add i32 %j.0172, 1
  %i285 = load i32, i32* %curframe, align 8
  %cmp204.not = icmp ugt i32 %inc243, %i285
  br i1 %cmp204.not, label %for.body249, label %for.body

for.body213:                                      ; preds = %for.body213, %for.body
  %indvars.iv = phi i64 [ %cond209, %for.body ], [ %indvars.iv.next.1, %for.body213 ]
  %i286 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx216, align 8
  %arrayidx219 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i286, i64 0, i32 0, i64 %indvars.iv
  %i287 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %parent226 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i287, i64 0, i32 0, i64 %indvars.iv, i32 10
  store %struct.bpf_reg_state* %arrayidx219, %struct.bpf_reg_state** %parent226, align 8
  %indvars.iv.next = or i64 %indvars.iv, 1
  %i288 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx216, align 8
  %arrayidx219.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i288, i64 0, i32 0, i64 %indvars.iv.next
  %i289 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx222, align 8
  %parent226.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i289, i64 0, i32 0, i64 %indvars.iv.next, i32 10
  store %struct.bpf_reg_state* %arrayidx219.1, %struct.bpf_reg_state** %parent226.1, align 8
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %exitcond.not.1 = icmp eq i64 %indvars.iv.next.1, 10
  br i1 %exitcond.not.1, label %for.cond228.preheader, label %for.body213

for.body249:                                      ; preds = %for.inc276, %for.cond228.preheader
  %j.1176 = phi i32 [ %inc277, %for.inc276 ], [ 0, %for.cond228.preheader ]
  %idxprom252 = sext i32 %j.1176 to i64
  %arrayidx253 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom252
  %i290 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx253, align 8
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i290, i64 0, i32 6
  %i291 = load i32, i32* %allocated_stack, align 8
  %cmp258174 = icmp sgt i32 %i291, 7
  br i1 %cmp258174, label %for.body260.lr.ph, label %for.inc276

for.body260.lr.ph:                                ; preds = %for.body249
  %arrayidx256 = getelementptr [8 x %struct.bpf_func_state*], [8 x %struct.bpf_func_state*]* %frame214, i64 0, i64 %idxprom252
  %i292 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx256, align 8
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i290, i64 0, i32 7
  %stack264 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i292, i64 0, i32 7
  br label %for.body260

for.body260:                                      ; preds = %for.body260, %for.body260.lr.ph
  %indvars.iv192 = phi i64 [ 0, %for.body260.lr.ph ], [ %indvars.iv.next193, %for.body260 ]
  %i293 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %live263 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i293, i64 %indvars.iv192, i32 0, i32 13
  store i32 0, i32* %live263, align 8
  %i294 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack264, align 8
  %spilled_ptr267 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i294, i64 %indvars.iv192, i32 0
  %i295 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %parent272 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i295, i64 %indvars.iv192, i32 0, i32 10
  store %struct.bpf_reg_state* %spilled_ptr267, %struct.bpf_reg_state** %parent272, align 8
  %indvars.iv.next193 = add nuw nsw i64 %indvars.iv192, 1
  %i296 = load i32, i32* %allocated_stack, align 8
  %div = sdiv i32 %i296, 8
  %i297 = sext i32 %div to i64
  %cmp258 = icmp slt i64 %indvars.iv.next193, %i297
  br i1 %cmp258, label %for.body260, label %for.inc276

for.inc276:                                       ; preds = %for.body260, %for.body249
  %inc277 = add i32 %j.1176, 1
  %i298 = load i32, i32* %curframe, align 8
  %cmp247.not = icmp ugt i32 %inc277, %i298
  br i1 %cmp247.not, label %return, label %for.body249

return:                                           ; preds = %for.inc276, %if.then145, %if.end130, %if.then128, %if.then124, %cond.end48, %if.then20, %entry
  %retval.0 = phi i32 [ -22, %if.then20 ], [ %call125, %if.then124 ], [ %call143, %if.then145 ], [ %call129, %if.then128 ], [ 0, %entry ], [ %.cond49, %cond.end48 ], [ -12, %if.end130 ], [ 0, %for.inc276 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @signal_pending(%struct.task_struct* noundef %p) unnamed_addr #6 {
entry:
  %call = call fastcc i32 @test_tsk_thread_flag(%struct.task_struct* noundef %p) #22
  %tobool = icmp ne i32 %call, 0
  %lnot.ext = zext i1 %tobool to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @test_ti_thread_flag(%struct.thread_info* noundef %ti, i32 noundef %flag) unnamed_addr #6 {
entry:
  %i = zext i32 %flag to i64
  %flags = getelementptr inbounds %struct.thread_info, %struct.thread_info* %ti, i64 0, i32 0
  %call = call fastcc zeroext i1 @test_bit(i64 noundef %i, i64* noundef %flags) #22
  %conv1 = zext i1 %call to i32
  ret i32 %conv1
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef readonly %state) unnamed_addr #6 {
entry:
  %tn_buf = alloca [48 x i8], align 16
  %types_buf = alloca [9 x i8], align 1
  %frameno = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 2
  %i = load i32, i32* %frameno, align 4
  %tobool.not = icmp eq i32 %i, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i139 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i139, i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.89, i64 0, i64 0), i32 noundef %i) #22
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %i140 = bitcast %struct.bpf_verifier_env* %env to i8*
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  br label %for.body

for.cond85.preheader:                             ; preds = %for.inc
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 6
  %i141 = load i32, i32* %allocated_stack, align 8
  %cmp86119 = icmp sgt i32 %i141, 7
  br i1 %cmp86119, label %for.cond89.preheader.lr.ph, label %for.end166

for.cond89.preheader.lr.ph:                       ; preds = %for.cond85.preheader
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %arrayidx115 = getelementptr inbounds [9 x i8], [9 x i8]* %types_buf, i64 0, i64 8
  %arraydecay162 = getelementptr inbounds [9 x i8], [9 x i8]* %types_buf, i64 0, i64 0
  %arrayidx111.1 = getelementptr inbounds [9 x i8], [9 x i8]* %types_buf, i64 0, i64 1
  %arrayidx111.2 = getelementptr inbounds [9 x i8], [9 x i8]* %types_buf, i64 0, i64 2
  %arrayidx111.3 = getelementptr inbounds [9 x i8], [9 x i8]* %types_buf, i64 0, i64 3
  %arrayidx111.4 = getelementptr inbounds [9 x i8], [9 x i8]* %types_buf, i64 0, i64 4
  %arrayidx111.5 = getelementptr inbounds [9 x i8], [9 x i8]* %types_buf, i64 0, i64 5
  %arrayidx111.6 = getelementptr inbounds [9 x i8], [9 x i8]* %types_buf, i64 0, i64 6
  %arrayidx111.7 = getelementptr inbounds [9 x i8], [9 x i8]* %types_buf, i64 0, i64 7
  br label %for.cond89.preheader

for.body:                                         ; preds = %for.inc, %if.end
  %indvars.iv = phi i64 [ 0, %if.end ], [ %indvars.iv.next, %for.inc ]
  %type = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 0
  %i143 = load i32, i32* %type, align 8
  %cmp2 = icmp eq i32 %i143, 0
  br i1 %cmp2, label %for.inc, label %if.end4

if.end4:                                          ; preds = %for.body
  %i144 = trunc i64 %indvars.iv to i32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.90, i64 0, i64 0), i32 noundef %i144) #22
  %live = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 13
  %i145 = load i32, i32* %live, align 8
  call fastcc void @print_liveness(%struct.bpf_verifier_env* noundef %env, i32 noundef %i145) #22
  %idxprom5 = zext i32 %i143 to i64
  %arrayidx6 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom5
  %i146 = load i8*, i8** %arrayidx6, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91, i64 0, i64 0), i8* noundef %i146) #22
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end4
  %Pivot = icmp slt i32 %i143, 6
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i143, 6
  br i1 %SwitchLeaf2, label %land.lhs.true13, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i143, 1
  br i1 %SwitchLeaf, label %land.lhs.true, label %NewDefault

land.lhs.true:                                    ; preds = %LeafBlock
  %precise = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 14
  %i147 = load i8, i8* %precise, align 4
  %i148 = and i8 %i147, 1
  %tobool8.not = icmp eq i8 %i148, 0
  br i1 %tobool8.not, label %if.end10, label %if.then9

if.then9:                                         ; preds = %land.lhs.true
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i64 0, i64 0)) #22
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %land.lhs.true
  br label %NodeBlock6

NodeBlock6:                                       ; preds = %if.end10
  %Pivot7 = icmp slt i32 %i143, 6
  br i1 %Pivot7, label %LeafBlock4, label %land.lhs.true13

LeafBlock4:                                       ; preds = %NodeBlock6
  %SwitchLeaf5 = icmp eq i32 %i143, 1
  br i1 %SwitchLeaf5, label %land.lhs.true13, label %NewDefault3

land.lhs.true13:                                  ; preds = %LeafBlock4, %NodeBlock6, %LeafBlock1
  %i149 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 5, i32 1
  %i150 = load i64, i64* %i149, align 8
  %call = call fastcc zeroext i1 @tnum_is_const(i64 %i150) #22
  br i1 %call, label %if.then14, label %if.else

if.then14:                                        ; preds = %land.lhs.true13
  %value = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 5, i32 0
  %i151 = load i64, i64* %value, align 8
  %off = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 2
  %i152 = load i32, i32* %off, align 8
  %conv = sext i32 %i152 to i64
  %add = add i64 %i151, %conv
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.93, i64 0, i64 0), i64 noundef %add) #22
  br label %for.inc

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.else

NewDefault3:                                      ; preds = %LeafBlock4
  br label %if.else

if.else:                                          ; preds = %NewDefault3, %NewDefault, %land.lhs.true13
  %id = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 3
  %i153 = load i32, i32* %id, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([7 x i8], [7 x i8]* @.str.94, i64 0, i64 0), i32 noundef %i153) #22
  %call16 = call fastcc zeroext i1 @reg_type_may_be_refcounted_or_null(i32 noundef %i143) #22
  br i1 %call16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.else
  %ref_obj_id = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 4
  %i154 = load i32, i32* %ref_obj_id, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([15 x i8], [15 x i8]* @.str.95, i64 0, i64 0), i32 noundef %i154) #22
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.else
  %cmp19.not = icmp eq i32 %i143, 1
  br i1 %cmp19.not, label %if.end23, label %if.then21

if.then21:                                        ; preds = %if.end18
  %off22 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 2
  %i155 = load i32, i32* %off22, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.96, i64 0, i64 0), i32 noundef %i155) #22
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %if.end18
  %call24 = call fastcc zeroext i1 @type_is_pkt_pointer(i32 noundef %i143) #22
  br i1 %call24, label %if.then25, label %if.else27

if.then25:                                        ; preds = %if.end23
  %i156 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 1
  %range = bitcast %union.anon.147* %i156 to i16*
  %i157 = load i16, i16* %range, align 8
  %conv26 = zext i16 %i157 to i32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.97, i64 0, i64 0), i32 noundef %conv26) #22
  br label %if.end39

if.else27:                                        ; preds = %if.end23
  %i158 = add i32 %i143, -3
  %i159 = icmp ult i32 %i158, 3
  br i1 %i159, label %if.then36, label %if.end39

if.then36:                                        ; preds = %if.else27
  %map_ptr = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 1, i32 0
  %i160 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %key_size = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i160, i64 0, i32 4
  %i161 = load i32, i32* %key_size, align 4
  %value_size = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i160, i64 0, i32 5
  %i162 = load i32, i32* %value_size, align 32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.98, i64 0, i64 0), i32 noundef %i161, i32 noundef %i162) #22
  br label %if.end39

if.end39:                                         ; preds = %if.then36, %if.else27, %if.then25
  %i163 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 5, i32 0
  %i164 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 5, i32 1
  %i165 = load i64, i64* %i164, align 8
  %call41 = call fastcc zeroext i1 @tnum_is_const(i64 %i165) #22
  br i1 %call41, label %if.then42, label %if.else45

if.then42:                                        ; preds = %if.end39
  %i166 = load i64, i64* %i163, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([10 x i8], [10 x i8]* @.str.99, i64 0, i64 0), i64 noundef %i166) #22
  br label %if.end83

if.else45:                                        ; preds = %if.end39
  %smin_value = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 6
  %i167 = load i64, i64* %smin_value, align 8
  %umin_value = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 8
  %i168 = load i64, i64* %umin_value, align 8
  %cmp46.not = icmp eq i64 %i167, %i168
  %cmp50.not = icmp eq i64 %i167, -9223372036854775808
  %or.cond = or i1 %cmp50.not, %cmp46.not
  br i1 %or.cond, label %if.end54, label %if.then52

if.then52:                                        ; preds = %if.else45
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.100, i64 0, i64 0), i64 noundef %i167) #22
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %if.else45
  %smax_value = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 7
  %i169 = load i64, i64* %smax_value, align 8
  %umax_value = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 9
  %i170 = load i64, i64* %umax_value, align 8
  %cmp55.not = icmp eq i64 %i169, %i170
  %cmp59.not = icmp eq i64 %i169, 9223372036854775807
  %or.cond114 = or i1 %cmp59.not, %cmp55.not
  br i1 %or.cond114, label %if.end63, label %if.then61

if.then61:                                        ; preds = %if.end54
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.101, i64 0, i64 0), i64 noundef %i169) #22
  br label %if.end63

if.end63:                                         ; preds = %if.then61, %if.end54
  %i171 = load i64, i64* %umin_value, align 8
  %cmp65.not = icmp eq i64 %i171, 0
  br i1 %cmp65.not, label %if.end69, label %if.then67

if.then67:                                        ; preds = %if.end63
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.102, i64 0, i64 0), i64 noundef %i171) #22
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %if.end63
  %i172 = load i64, i64* %umax_value, align 8
  %cmp71.not = icmp eq i64 %i172, -1
  br i1 %cmp71.not, label %if.end75, label %if.then73

if.then73:                                        ; preds = %if.end69
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.103, i64 0, i64 0), i64 noundef %i172) #22
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %if.end69
  %i173 = load i64, i64* %i164, align 8
  %call77 = call fastcc zeroext i1 @tnum_is_unknown(i64 %i173) #22
  br i1 %call77, label %if.end83, label %if.then78

if.then78:                                        ; preds = %if.end75
  %i174 = load i64, i64* %i163, align 8
  %call80 = call i32 @tnum_strn(i8* noundef %arraydecay, i64 noundef 48, i64 %i174, i64 %i173) #22
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.104, i64 0, i64 0), i8* noundef %arraydecay) #22
  br label %if.end83

if.end83:                                         ; preds = %if.then78, %if.end75, %if.then42
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i64 0, i64 0)) #22
  br label %for.inc

for.inc:                                          ; preds = %if.end83, %if.then14, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 11
  br i1 %exitcond.not, label %for.cond85.preheader, label %for.body

for.cond89.preheader:                             ; preds = %for.inc164, %for.cond89.preheader.lr.ph
  %indvars.iv128 = phi i64 [ 0, %for.cond89.preheader.lr.ph ], [ %indvars.iv.next129, %for.inc164 ]
  %i175 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx96 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i175, i64 %indvars.iv128, i32 1, i64 0
  %i176 = load i8, i8* %arrayidx96, align 1
  %cmp98.not = icmp eq i8 %i176, 0
  %idxprom108 = zext i8 %i176 to i64
  %arrayidx109 = getelementptr [4 x i8], [4 x i8]* @slot_type_char, i64 0, i64 %idxprom108
  %i177 = load i8, i8* %arrayidx109, align 1
  store i8 %i177, i8* %arraydecay162, align 1
  %arrayidx96.1 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i175, i64 %indvars.iv128, i32 1, i64 1
  %i178 = load i8, i8* %arrayidx96.1, align 1
  %cmp98.not.1 = icmp eq i8 %i178, 0
  %idxprom108.1 = zext i8 %i178 to i64
  %arrayidx109.1 = getelementptr [4 x i8], [4 x i8]* @slot_type_char, i64 0, i64 %idxprom108.1
  %i179 = load i8, i8* %arrayidx109.1, align 1
  store i8 %i179, i8* %arrayidx111.1, align 1
  %arrayidx96.2 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i175, i64 %indvars.iv128, i32 1, i64 2
  %i180 = load i8, i8* %arrayidx96.2, align 1
  %cmp98.not.2 = icmp eq i8 %i180, 0
  %idxprom108.2 = zext i8 %i180 to i64
  %arrayidx109.2 = getelementptr [4 x i8], [4 x i8]* @slot_type_char, i64 0, i64 %idxprom108.2
  %i181 = load i8, i8* %arrayidx109.2, align 1
  store i8 %i181, i8* %arrayidx111.2, align 1
  %arrayidx96.3 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i175, i64 %indvars.iv128, i32 1, i64 3
  %i182 = load i8, i8* %arrayidx96.3, align 1
  %cmp98.not.3 = icmp eq i8 %i182, 0
  %idxprom108.3 = zext i8 %i182 to i64
  %arrayidx109.3 = getelementptr [4 x i8], [4 x i8]* @slot_type_char, i64 0, i64 %idxprom108.3
  %i183 = load i8, i8* %arrayidx109.3, align 1
  store i8 %i183, i8* %arrayidx111.3, align 1
  %arrayidx96.4 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i175, i64 %indvars.iv128, i32 1, i64 4
  %i184 = load i8, i8* %arrayidx96.4, align 1
  %cmp98.not.4 = icmp eq i8 %i184, 0
  %idxprom108.4 = zext i8 %i184 to i64
  %arrayidx109.4 = getelementptr [4 x i8], [4 x i8]* @slot_type_char, i64 0, i64 %idxprom108.4
  %i185 = load i8, i8* %arrayidx109.4, align 1
  store i8 %i185, i8* %arrayidx111.4, align 1
  %arrayidx96.5 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i175, i64 %indvars.iv128, i32 1, i64 5
  %i186 = load i8, i8* %arrayidx96.5, align 1
  %cmp98.not.5 = icmp eq i8 %i186, 0
  %idxprom108.5 = zext i8 %i186 to i64
  %arrayidx109.5 = getelementptr [4 x i8], [4 x i8]* @slot_type_char, i64 0, i64 %idxprom108.5
  %i187 = load i8, i8* %arrayidx109.5, align 1
  store i8 %i187, i8* %arrayidx111.5, align 1
  %arrayidx96.6 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i175, i64 %indvars.iv128, i32 1, i64 6
  %i188 = load i8, i8* %arrayidx96.6, align 1
  %cmp98.not.6 = icmp eq i8 %i188, 0
  %idxprom108.6 = zext i8 %i188 to i64
  %arrayidx109.6 = getelementptr [4 x i8], [4 x i8]* @slot_type_char, i64 0, i64 %idxprom108.6
  %i189 = load i8, i8* %arrayidx109.6, align 1
  store i8 %i189, i8* %arrayidx111.6, align 1
  %arrayidx96.7 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i175, i64 %indvars.iv128, i32 1, i64 7
  %i190 = load i8, i8* %arrayidx96.7, align 1
  %cmp98.not.7 = icmp eq i8 %i190, 0
  %i191 = select i1 %cmp98.not.7, i1 %cmp98.not.6, i1 false
  %i192 = select i1 %i191, i1 %cmp98.not.5, i1 false
  %i193 = select i1 %i192, i1 %cmp98.not.4, i1 false
  %i194 = select i1 %i193, i1 %cmp98.not.3, i1 false
  %i195 = select i1 %i194, i1 %cmp98.not.2, i1 false
  %i196 = select i1 %i195, i1 %cmp98.not.1, i1 false
  %narrow = select i1 %i196, i1 %cmp98.not, i1 false
  %idxprom108.7 = zext i8 %i190 to i64
  %arrayidx109.7 = getelementptr [4 x i8], [4 x i8]* @slot_type_char, i64 0, i64 %idxprom108.7
  %i197 = load i8, i8* %arrayidx109.7, align 1
  store i8 %i197, i8* %arrayidx111.7, align 1
  store i8 0, i8* %arrayidx115, align 1
  br i1 %narrow, label %for.inc164, label %if.end118

if.end118:                                        ; preds = %for.cond89.preheader
  %i198 = trunc i64 %indvars.iv128 to i32
  %.tr = xor i32 %i198, -1
  %i199 = shl i32 %.tr, 3
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i64 0, i64 0), i32 noundef %i199) #22
  %i200 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %live123 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i200, i64 %indvars.iv128, i32 0, i32 13
  %i201 = load i32, i32* %live123, align 8
  call fastcc void @print_liveness(%struct.bpf_verifier_env* noundef %env, i32 noundef %i201) #22
  %i202 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx128 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i202, i64 %indvars.iv128, i32 1, i64 0
  %i203 = load i8, i8* %arrayidx128, align 8
  %cmp130 = icmp eq i8 %i203, 1
  br i1 %cmp130, label %if.then132, label %if.else161

if.then132:                                       ; preds = %if.end118
  %type137 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i202, i64 %indvars.iv128, i32 0, i32 0
  %i204 = load i32, i32* %type137, align 8
  %idxprom138 = zext i32 %i204 to i64
  %arrayidx139 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom138
  %i205 = load i8*, i8** %arrayidx139, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91, i64 0, i64 0), i8* noundef %i205) #22
  %cmp140 = icmp eq i32 %i204, 1
  br i1 %cmp140, label %land.lhs.true142, label %for.inc164

land.lhs.true142:                                 ; preds = %if.then132
  %precise143 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i202, i64 %indvars.iv128, i32 0, i32 14
  %i206 = load i8, i8* %precise143, align 4
  %i207 = and i8 %i206, 1
  %tobool144.not = icmp eq i8 %i207, 0
  br i1 %tobool144.not, label %land.lhs.true150, label %if.then146

if.then146:                                       ; preds = %land.lhs.true142
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i64 0, i64 0)) #22
  br label %land.lhs.true150

land.lhs.true150:                                 ; preds = %if.then146, %land.lhs.true142
  %i208 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i202, i64 %indvars.iv128, i32 0, i32 5, i32 1
  %i209 = load i64, i64* %i208, align 8
  %call152 = call fastcc zeroext i1 @tnum_is_const(i64 %i209) #22
  br i1 %call152, label %if.then154, label %for.inc164

if.then154:                                       ; preds = %land.lhs.true150
  %value156 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i202, i64 %indvars.iv128, i32 0, i32 5, i32 0
  %i210 = load i64, i64* %value156, align 8
  %off157 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i202, i64 %indvars.iv128, i32 0, i32 2
  %i211 = load i32, i32* %off157, align 8
  %conv158 = sext i32 %i211 to i64
  %add159 = add i64 %i210, %conv158
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.93, i64 0, i64 0), i64 noundef %add159) #22
  br label %for.inc164

if.else161:                                       ; preds = %if.end118
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91, i64 0, i64 0), i8* noundef %arraydecay162) #22
  br label %for.inc164

for.inc164:                                       ; preds = %if.else161, %if.then154, %land.lhs.true150, %if.then132, %for.cond89.preheader
  %indvars.iv.next129 = add nuw nsw i64 %indvars.iv128, 1
  %i212 = load i32, i32* %allocated_stack, align 8
  %div = sdiv i32 %i212, 8
  %i213 = sext i32 %div to i64
  %cmp86 = icmp slt i64 %indvars.iv.next129, %i213
  br i1 %cmp86, label %for.cond89.preheader, label %for.end166

for.end166:                                       ; preds = %for.inc164, %for.cond85.preheader
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 4
  %i214 = load i32, i32* %acquired_refs, align 4
  %tobool167.not = icmp eq i32 %i214, 0
  br i1 %tobool167.not, label %if.end195, label %land.lhs.true168

land.lhs.true168:                                 ; preds = %for.end166
  %refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 5
  %i215 = load %struct.util_est*, %struct.util_est** %refs, align 8
  %id170 = getelementptr inbounds %struct.util_est, %struct.util_est* %i215, i64 0, i32 0
  %i216 = load i32, i32* %id170, align 4
  %tobool171.not = icmp eq i32 %i216, 0
  br i1 %tobool171.not, label %if.end195, label %if.then172

if.then172:                                       ; preds = %land.lhs.true168
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.107, i64 0, i64 0), i32 noundef %i216) #22
  %i218 = load i32, i32* %acquired_refs, align 4
  %cmp178122 = icmp sgt i32 %i218, 1
  br i1 %cmp178122, label %for.body180, label %if.end195

for.body180:                                      ; preds = %for.inc192, %if.then172
  %indvars.iv133 = phi i64 [ %indvars.iv.next134, %for.inc192 ], [ 1, %if.then172 ]
  %i219 = load %struct.util_est*, %struct.util_est** %refs, align 8
  %id184 = getelementptr %struct.util_est, %struct.util_est* %i219, i64 %indvars.iv133, i32 0
  %i220 = load i32, i32* %id184, align 4
  %tobool185.not = icmp eq i32 %i220, 0
  br i1 %tobool185.not, label %for.inc192, label %if.then186

if.then186:                                       ; preds = %for.body180
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.108, i64 0, i64 0), i32 noundef %i220) #22
  br label %for.inc192

for.inc192:                                       ; preds = %if.then186, %for.body180
  %indvars.iv.next134 = add nuw nsw i64 %indvars.iv133, 1
  %i221 = load i32, i32* %acquired_refs, align 4
  %i222 = sext i32 %i221 to i64
  %cmp178 = icmp slt i64 %indvars.iv.next134, %i222
  br i1 %cmp178, label %for.body180, label %if.end195

if.end195:                                        ; preds = %for.inc192, %if.then172, %land.lhs.true168, %for.end166
  call void (i8*, i8*, ...) @verbose(i8* noundef %i140, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i64 0, i64 0)) #22
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal void @verbose_linfo(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_off, i8* noundef %prefix_fmt, ...) unnamed_addr #6 {
entry:
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %log = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18
  %call = call fastcc zeroext i1 @bpf_verifier_log_needed(%struct.bpf_verifier_log* noundef %log) #22
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %env.idx.val = load %struct.bpf_prog*, %struct.bpf_prog** %env.idx, align 8
  %call1 = call fastcc %struct.ethtool_pauseparam* @find_linfo(%struct.bpf_prog* %env.idx.val, i32 noundef %insn_off) #22
  %tobool.not = icmp eq %struct.ethtool_pauseparam* %call1, null
  br i1 %tobool.not, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %prev_linfo = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 17
  %i = load %struct.ethtool_pauseparam*, %struct.ethtool_pauseparam** %prev_linfo, align 8
  %cmp = icmp eq %struct.ethtool_pauseparam* %call1, %i
  br i1 %cmp, label %return, label %if.end3

if.end3:                                          ; preds = %lor.lhs.false
  %tobool4.not = icmp eq i8* %prefix_fmt, null
  br i1 %tobool4.not, label %if.end11, label %if.then5

if.then5:                                         ; preds = %if.end3
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay6 = bitcast [1 x %struct.__va_list_tag]* %args to i8*
  call void @llvm.va_start(i8* nonnull %arraydecay6)
  call void @bpf_verifier_vlog(%struct.bpf_verifier_log* noundef %log, i8* noundef nonnull %prefix_fmt, %struct.__va_list_tag* noundef %arraydecay) #22
  call void @llvm.va_end(i8* %arraydecay6)
  br label %if.end11

if.end11:                                         ; preds = %if.then5, %if.end3
  %i11 = bitcast %struct.bpf_verifier_env* %env to i8*
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i12 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i12, i64 0, i32 7
  %i13 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %btf = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i13, i64 0, i32 24
  %i14 = load %struct.btf*, %struct.btf** %btf, align 8
  %line_off = getelementptr inbounds %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %call1, i64 0, i32 2
  %i15 = load i32, i32* %line_off, align 4
  %call12 = call i8* @btf_name_by_offset(%struct.btf* noundef %i14, i32 noundef %i15) #23
  %call13 = call fastcc i8* @ltrim(i8* noundef %call12) #22
  call void (i8*, i8*, ...) @verbose(i8* noundef %i11, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.45, i64 0, i64 0), i8* noundef %call13) #22
  store %struct.ethtool_pauseparam* %call1, %struct.ethtool_pauseparam** %prev_linfo, align 8
  br label %return

return:                                           ; preds = %if.end11, %lor.lhs.false, %if.end, %entry
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @print_bpf_insn(%struct.bpf_insn_cbs* noundef, %struct.bpf_insn* noundef, i1 noundef zeroext) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_prog_offload_verify_insn(%struct.bpf_verifier_env* noundef, i32 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_alu_op(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef readonly %insn) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i = load i8, i8* %code, align 4
  %conv = zext i8 %i to i32
  %and = and i8 %i, -16
  %conv2 = zext i8 %and to i32
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %entry
  %Pivot6 = icmp slt i8 %and, -80
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i8 %and, -48
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i8 %and, -48
  br i1 %SwitchLeaf4, label %if.else, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %and, -80
  br i1 %SwitchLeaf2, label %if.then87, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i8 %and, -128
  br i1 %SwitchLeaf, label %if.then10, label %NewDefault

if.then10:                                        ; preds = %LeafBlock
  %and13 = and i32 %conv, 8
  %cmp14.not = icmp eq i32 %and13, 0
  br i1 %cmp14.not, label %lor.lhs.false16, label %if.then27

lor.lhs.false16:                                  ; preds = %if.then10
  %src_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %cmp18.not = icmp ult i8 %bf.load, 16
  br i1 %cmp18.not, label %lor.lhs.false20, label %if.then27

lor.lhs.false20:                                  ; preds = %lor.lhs.false16
  %off = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i117 = load i16, i16* %off, align 2
  %cmp22.not = icmp eq i16 %i117, 0
  br i1 %cmp22.not, label %lor.lhs.false24, label %if.then27

lor.lhs.false24:                                  ; preds = %lor.lhs.false20
  %imm = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i118 = load i32, i32* %imm, align 4
  %cmp25.not = icmp eq i32 %i118, 0
  br i1 %cmp25.not, label %if.end58, label %if.then27

if.then27:                                        ; preds = %lor.lhs.false24, %lor.lhs.false20, %lor.lhs.false16, %if.then10
  %i119 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i119, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.114, i64 0, i64 0)) #22
  br label %return

if.else:                                          ; preds = %LeafBlock3
  %src_reg28 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load29 = load i8, i8* %src_reg28, align 1
  %cmp32.not = icmp ult i8 %bf.load29, 16
  br i1 %cmp32.not, label %lor.lhs.false34, label %if.then56

lor.lhs.false34:                                  ; preds = %if.else
  %off35 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i120 = load i16, i16* %off35, align 2
  %cmp37.not = icmp eq i16 %i120, 0
  br i1 %cmp37.not, label %lor.lhs.false39, label %if.then56

lor.lhs.false39:                                  ; preds = %lor.lhs.false34
  %imm40 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i121 = load i32, i32* %imm40, align 4
  br label %NodeBlock16

NodeBlock16:                                      ; preds = %lor.lhs.false39
  %Pivot17 = icmp slt i32 %i121, 32
  br i1 %Pivot17, label %LeafBlock8, label %NodeBlock14

NodeBlock14:                                      ; preds = %NodeBlock16
  %Pivot15 = icmp slt i32 %i121, 64
  br i1 %Pivot15, label %LeafBlock10, label %LeafBlock12

LeafBlock12:                                      ; preds = %NodeBlock14
  %SwitchLeaf13 = icmp eq i32 %i121, 64
  br i1 %SwitchLeaf13, label %lor.lhs.false50, label %NewDefault7

LeafBlock10:                                      ; preds = %NodeBlock14
  %SwitchLeaf11 = icmp eq i32 %i121, 32
  br i1 %SwitchLeaf11, label %lor.lhs.false50, label %NewDefault7

LeafBlock8:                                       ; preds = %NodeBlock16
  %SwitchLeaf9 = icmp eq i32 %i121, 16
  br i1 %SwitchLeaf9, label %lor.lhs.false50, label %NewDefault7

lor.lhs.false50:                                  ; preds = %LeafBlock8, %LeafBlock10, %LeafBlock12
  %i122 = and i8 %i, 7
  %cmp54 = icmp eq i8 %i122, 7
  br i1 %cmp54, label %if.then56, label %if.end58

NewDefault7:                                      ; preds = %LeafBlock8, %LeafBlock10, %LeafBlock12
  br label %if.then56

if.then56:                                        ; preds = %NewDefault7, %lor.lhs.false50, %lor.lhs.false34, %if.else
  %i123 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i123, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.115, i64 0, i64 0)) #22
  br label %return

if.end58:                                         ; preds = %lor.lhs.false50, %lor.lhs.false24
  %dst_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load59 = load i8, i8* %dst_reg, align 1
  %bf.clear = and i8 %bf.load59, 15
  %conv60 = zext i8 %bf.clear to i32
  %call61 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv60, i32 noundef 0) #22
  %tobool.not = icmp eq i32 %call61, 0
  br i1 %tobool.not, label %if.end74, label %return

if.end74:                                         ; preds = %if.end58
  %bf.load65 = load i8, i8* %dst_reg, align 1
  %bf.clear66 = and i8 %bf.load65, 15
  %conv67 = zext i8 %bf.clear66 to i32
  %call79 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv67, i32 noundef 1) #22
  %tobool80.not = icmp eq i32 %call79, 0
  br i1 %tobool80.not, label %if.end336, label %return

if.then87:                                        ; preds = %LeafBlock1
  %and90 = and i32 %conv, 8
  %cmp91.not = icmp eq i32 %and90, 0
  br i1 %cmp91.not, label %if.else112, label %if.then93

if.then93:                                        ; preds = %if.then87
  %imm94 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i125 = load i32, i32* %imm94, align 4
  %cmp95.not = icmp eq i32 %i125, 0
  br i1 %cmp95.not, label %lor.lhs.false97, label %if.then102

lor.lhs.false97:                                  ; preds = %if.then93
  %off98 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i126 = load i16, i16* %off98, align 2
  %cmp100.not = icmp eq i16 %i126, 0
  br i1 %cmp100.not, label %if.end103, label %if.then102

if.then102:                                       ; preds = %lor.lhs.false97, %if.then93
  %i127 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i127, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.117, i64 0, i64 0)) #22
  br label %return

if.end103:                                        ; preds = %lor.lhs.false97
  %src_reg104 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load105 = load i8, i8* %src_reg104, align 1
  %bf.lshr106 = lshr i8 %bf.load105, 4
  %conv107 = zext i8 %bf.lshr106 to i32
  %call108 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv107, i32 noundef 0) #22
  %tobool109.not = icmp eq i32 %call108, 0
  br i1 %tobool109.not, label %if.end126, label %return

if.else112:                                       ; preds = %if.then87
  %src_reg113 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load114 = load i8, i8* %src_reg113, align 1
  %cmp117.not = icmp ult i8 %bf.load114, 16
  br i1 %cmp117.not, label %lor.lhs.false119, label %if.then124

lor.lhs.false119:                                 ; preds = %if.else112
  %off120 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i128 = load i16, i16* %off120, align 2
  %cmp122.not = icmp eq i16 %i128, 0
  br i1 %cmp122.not, label %if.end126, label %if.then124

if.then124:                                       ; preds = %lor.lhs.false119, %if.else112
  %i129 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i129, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.117, i64 0, i64 0)) #22
  br label %return

if.end126:                                        ; preds = %lor.lhs.false119, %if.end103
  %dst_reg127 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load128 = load i8, i8* %dst_reg127, align 1
  %bf.clear129 = and i8 %bf.load128, 15
  %conv130 = zext i8 %bf.clear129 to i32
  %call131 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv130, i32 noundef 2) #22
  %tobool132.not = icmp eq i32 %call131, 0
  br i1 %tobool132.not, label %if.end134, label %return

if.end134:                                        ; preds = %if.end126
  %i130 = load i8, i8* %code, align 4
  %conv136 = zext i8 %i130 to i32
  %and137 = and i32 %conv136, 8
  %cmp138.not = icmp eq i32 %and137, 0
  %bf.load187 = load i8, i8* %dst_reg127, align 1
  br i1 %cmp138.not, label %if.else185, label %if.then140

if.then140:                                       ; preds = %if.end134
  %bf.lshr144 = lshr i8 %bf.load187, 4
  %i131 = zext i8 %bf.lshr144 to i64
  %add.ptr = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i131
  %bf.clear149 = and i8 %bf.load187, 15
  %i132 = zext i8 %bf.clear149 to i64
  %add.ptr152 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i132
  %and155 = and i32 %conv136, 7
  %cmp156 = icmp eq i32 %and155, 7
  br i1 %cmp156, label %if.then158, label %if.else170

if.then158:                                       ; preds = %if.then140
  %i133 = bitcast %struct.bpf_reg_state* %add.ptr152 to i8*
  %i134 = bitcast %struct.bpf_reg_state* %add.ptr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %i133, i8* noundef align 8 dereferenceable(104) %i134, i64 104, i1 false)
  %live = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i132, i32 13
  %i135 = load i32, i32* %live, align 8
  %or = or i32 %i135, 4
  store i32 %or, i32* %live, align 8
  %subreg_def = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i132, i32 12
  store i32 0, i32* %subreg_def, align 4
  br label %if.end336

if.else170:                                       ; preds = %if.then140
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %add.ptr, i64 0, i32 0
  %i137 = load i32, i32* %type, align 8
  %cmp171 = icmp eq i32 %i137, 1
  br i1 %cmp171, label %if.then173, label %if.else177

if.then173:                                       ; preds = %if.else170
  %i138 = bitcast %struct.bpf_reg_state* %add.ptr152 to i8*
  %i139 = bitcast %struct.bpf_reg_state* %add.ptr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %i138, i8* noundef align 8 dereferenceable(104) %i139, i64 104, i1 false)
  %live174 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i132, i32 13
  %i140 = load i32, i32* %live174, align 8
  %or175 = or i32 %i140, 4
  store i32 %or175, i32* %live174, align 8
  %insn_idx = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 0
  %i141 = load i32, i32* %insn_idx, align 8
  %add = add i32 %i141, 1
  %subreg_def176 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i132, i32 12
  store i32 %add, i32* %subreg_def176, align 4
  br label %if.end183

if.else177:                                       ; preds = %if.else170
  %conv181 = zext i8 %bf.clear149 to i32
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef %conv181) #22
  br label %if.end183

if.end183:                                        ; preds = %if.else177, %if.then173
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %add.ptr152, i32 noundef 4) #22
  br label %if.end336

if.else185:                                       ; preds = %if.end134
  %bf.clear188 = and i8 %bf.load187, 15
  %conv189 = zext i8 %bf.clear188 to i32
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef %conv189) #22
  %bf.load191 = load i8, i8* %dst_reg127, align 1
  %bf.clear192 = and i8 %bf.load191, 15
  %idxprom = zext i8 %bf.clear192 to i64
  %type193 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 0
  store i32 1, i32* %type193, align 8
  %i142 = load i8, i8* %code, align 4
  %i143 = and i8 %i142, 7
  %cmp197 = icmp eq i8 %i143, 7
  %bf.load201 = load i8, i8* %dst_reg127, align 1
  %bf.clear202 = and i8 %bf.load201, 15
  %i144 = zext i8 %bf.clear202 to i64
  %add.ptr205 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i144
  %imm206 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i145 = load i32, i32* %imm206, align 4
  br i1 %cmp197, label %if.then199, label %if.else208

if.then199:                                       ; preds = %if.else185
  %conv207 = sext i32 %i145 to i64
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %add.ptr205, i64 noundef %conv207) #22
  br label %if.end336

if.else208:                                       ; preds = %if.else185
  %conv216 = zext i32 %i145 to i64
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %add.ptr205, i64 noundef %conv216) #22
  br label %if.end336

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3
  br label %if.else219

if.else219:                                       ; preds = %NewDefault
  %cmp221 = icmp ugt i8 %and, -48
  br i1 %cmp221, label %if.then223, label %if.else225

if.then223:                                       ; preds = %if.else219
  %i146 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i146, i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str.119, i64 0, i64 0), i32 noundef %conv2) #22
  br label %return

if.else225:                                       ; preds = %if.else219
  %and228 = and i32 %conv, 8
  %cmp229.not = icmp eq i32 %and228, 0
  br i1 %cmp229.not, label %if.else250, label %if.then231

if.then231:                                       ; preds = %if.else225
  %imm232 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i147 = load i32, i32* %imm232, align 4
  %cmp233.not = icmp eq i32 %i147, 0
  br i1 %cmp233.not, label %lor.lhs.false235, label %if.then240

lor.lhs.false235:                                 ; preds = %if.then231
  %off236 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i148 = load i16, i16* %off236, align 2
  %cmp238.not = icmp eq i16 %i148, 0
  br i1 %cmp238.not, label %if.end241, label %if.then240

if.then240:                                       ; preds = %lor.lhs.false235, %if.then231
  %i149 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i149, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.120, i64 0, i64 0)) #22
  br label %return

if.end241:                                        ; preds = %lor.lhs.false235
  %src_reg242 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load243 = load i8, i8* %src_reg242, align 1
  %bf.lshr244 = lshr i8 %bf.load243, 4
  %conv245 = zext i8 %bf.lshr244 to i32
  %call246 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv245, i32 noundef 0) #22
  %tobool247.not = icmp eq i32 %call246, 0
  br i1 %tobool247.not, label %if.end264, label %return

if.else250:                                       ; preds = %if.else225
  %src_reg251 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load252 = load i8, i8* %src_reg251, align 1
  %cmp255.not = icmp ult i8 %bf.load252, 16
  br i1 %cmp255.not, label %lor.lhs.false257, label %if.then262

lor.lhs.false257:                                 ; preds = %if.else250
  %off258 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i150 = load i16, i16* %off258, align 2
  %cmp260.not = icmp eq i16 %i150, 0
  br i1 %cmp260.not, label %if.end264, label %if.then262

if.then262:                                       ; preds = %lor.lhs.false257, %if.else250
  %i151 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i151, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.120, i64 0, i64 0)) #22
  br label %return

if.end264:                                        ; preds = %lor.lhs.false257, %if.end241
  %dst_reg265 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load266 = load i8, i8* %dst_reg265, align 1
  %bf.clear267 = and i8 %bf.load266, 15
  %conv268 = zext i8 %bf.clear267 to i32
  %call269 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv268, i32 noundef 0) #22
  %tobool270.not = icmp eq i32 %call269, 0
  br i1 %tobool270.not, label %if.end272, label %return

if.end272:                                        ; preds = %if.end264
  br label %NodeBlock23

NodeBlock23:                                      ; preds = %if.end272
  %Pivot24 = icmp slt i8 %and, 48
  br i1 %Pivot24, label %LeafBlock19, label %LeafBlock21

LeafBlock21:                                      ; preds = %NodeBlock23
  %SwitchLeaf22 = icmp eq i8 %and, 48
  br i1 %SwitchLeaf22, label %land.lhs.true280, label %NewDefault18

LeafBlock19:                                      ; preds = %NodeBlock23
  %SwitchLeaf20 = icmp eq i8 %and, -112
  br i1 %SwitchLeaf20, label %land.lhs.true280, label %NewDefault18

land.lhs.true280:                                 ; preds = %LeafBlock19, %LeafBlock21
  %i152 = load i8, i8* %code, align 4
  %i153 = and i8 %i152, 8
  %cmp284 = icmp eq i8 %i153, 0
  br i1 %cmp284, label %land.lhs.true286, label %if.end291

land.lhs.true286:                                 ; preds = %land.lhs.true280
  %imm287 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i154 = load i32, i32* %imm287, align 4
  %cmp288 = icmp eq i32 %i154, 0
  br i1 %cmp288, label %if.then290, label %if.end291

if.then290:                                       ; preds = %land.lhs.true286
  %i155 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i155, i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.121, i64 0, i64 0)) #22
  br label %return

NewDefault18:                                     ; preds = %LeafBlock19, %LeafBlock21
  br label %if.end291

if.end291:                                        ; preds = %NewDefault18, %land.lhs.true286, %land.lhs.true280
  %i156 = and i8 %i, -32
  %i157 = icmp eq i8 %i156, 96
  %cmp301 = icmp eq i8 %and, -64
  %or.cond3 = or i1 %i157, %cmp301
  br i1 %or.cond3, label %land.lhs.true303, label %if.end325

land.lhs.true303:                                 ; preds = %if.end291
  %i158 = load i8, i8* %code, align 4
  %conv305 = zext i8 %i158 to i32
  %and306 = and i32 %conv305, 8
  %cmp307 = icmp eq i32 %and306, 0
  br i1 %cmp307, label %if.then309, label %if.end325

if.then309:                                       ; preds = %land.lhs.true303
  %imm315 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i159 = load i32, i32* %imm315, align 4
  %cmp316 = icmp slt i32 %i159, 0
  br i1 %cmp316, label %if.then322, label %lor.lhs.false318

lor.lhs.false318:                                 ; preds = %if.then309
  %and312 = and i32 %conv305, 7
  %cmp313 = icmp eq i32 %and312, 7
  %cond = select i1 %cmp313, i32 64, i32 32
  %cmp320.not = icmp slt i32 %i159, %cond
  br i1 %cmp320.not, label %if.end325, label %if.then322

if.then322:                                       ; preds = %lor.lhs.false318, %if.then309
  %i160 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i160, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.122, i64 0, i64 0), i32 noundef %i159) #22
  br label %return

if.end325:                                        ; preds = %lor.lhs.false318, %land.lhs.true303, %if.end291
  %bf.load327 = load i8, i8* %dst_reg265, align 1
  %bf.clear328 = and i8 %bf.load327, 15
  %conv329 = zext i8 %bf.clear328 to i32
  %call330 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv329, i32 noundef 2) #22
  %tobool331.not = icmp eq i32 %call330, 0
  br i1 %tobool331.not, label %if.end333, label %return

if.end333:                                        ; preds = %if.end325
  %call334 = call fastcc i32 @adjust_reg_min_max_vals(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br label %return

if.end336:                                        ; preds = %if.else208, %if.then199, %if.end183, %if.then158, %if.end74
  br label %return

return:                                           ; preds = %if.end336, %if.end333, %if.end325, %if.then322, %if.then290, %if.end264, %if.then262, %if.end241, %if.then240, %if.then223, %if.end126, %if.then124, %if.end103, %if.then102, %if.end74, %if.end58, %if.then56, %if.then27
  %retval.0 = phi i32 [ -22, %if.then27 ], [ 0, %if.end336 ], [ -22, %if.then56 ], [ -22, %if.then102 ], [ -22, %if.then124 ], [ -22, %if.then223 ], [ -22, %if.then240 ], [ -22, %if.then290 ], [ -22, %if.then322 ], [ %call334, %if.end333 ], [ -22, %if.then262 ], [ %call61, %if.end58 ], [ %call79, %if.end74 ], [ %call108, %if.end103 ], [ %call131, %if.end126 ], [ %call246, %if.end241 ], [ %call269, %if.end264 ], [ %call330, %if.end325 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %t) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %i30 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i30 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i31 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %insn_idx = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 0
  %arraydecay2 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i31, i64 0, i32 0, i64 0
  %cmp = icmp ugt i32 %regno, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i32 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i32, i8* noundef getelementptr inbounds ([16 x i8], [16 x i8]* @.str.152, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end:                                           ; preds = %entry
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i33 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %i34 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i33, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i34 to %struct.bpf_insn*
  %i35 = load i32, i32* %insn_idx, align 8
  %idx.ext = zext i32 %i35 to i64
  %add.ptr = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idx.ext
  %idxprom3 = zext i32 %regno to i64
  %arrayidx4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i31, i64 0, i32 0, i64 %idxprom3
  %call = call fastcc zeroext i1 @is_reg64(%struct.bpf_insn* noundef %add.ptr, %struct.bpf_reg_state* noundef %arrayidx4, i32 noundef %t) #22
  %cmp5 = icmp eq i32 %t, 0
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx4, i64 0, i32 0
  %i36 = load i32, i32* %type, align 8
  %cmp7 = icmp eq i32 %i36, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.then6
  %i37 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i37, i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str.153, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end9:                                          ; preds = %if.then6
  %cmp10 = icmp eq i32 %regno, 10
  br i1 %cmp10, label %return, label %if.end12

if.end12:                                         ; preds = %if.end9
  br i1 %call, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end12
  call fastcc void @mark_insn_zext(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arrayidx4) #22
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end12
  %cond = phi i8 [ 2, %if.then13 ], [ 1, %if.end12 ]
  %parent = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i31, i64 0, i32 0, i64 %idxprom3, i32 10
  %i38 = load %struct.bpf_reg_state*, %struct.bpf_reg_state** %parent, align 8
  %call16 = call fastcc i32 @mark_reg_read(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arrayidx4, %struct.bpf_reg_state* noundef %i38, i8 noundef zeroext %cond) #22
  br label %return

if.else:                                          ; preds = %if.end
  %cmp17 = icmp eq i32 %regno, 10
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.else
  %i39 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i39, i8* noundef getelementptr inbounds ([28 x i8], [28 x i8]* @.str.154, i64 0, i64 0)) #22
  br label %return

if.end20:                                         ; preds = %if.else
  %live = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i31, i64 0, i32 0, i64 %idxprom3, i32 13
  %i40 = load i32, i32* %live, align 8
  %or = or i32 %i40, 4
  store i32 %or, i32* %live, align 8
  br i1 %call, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.end20
  %i41 = load i32, i32* %insn_idx, align 8
  %add = add i32 %i41, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end20
  %cond24 = phi i32 [ %add, %cond.false ], [ 0, %if.end20 ]
  %subreg_def = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i31, i64 0, i32 0, i64 %idxprom3, i32 12
  store i32 %cond24, i32* %subreg_def, align 4
  %cmp25 = icmp eq i32 %t, 1
  br i1 %cmp25, label %if.then27, label %return

if.then27:                                        ; preds = %cond.end
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay2, i32 noundef %regno) #22
  br label %return

return:                                           ; preds = %if.then27, %cond.end, %if.then19, %if.end14, %if.end9, %if.then8, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ -13, %if.then8 ], [ %call16, %if.end14 ], [ -13, %if.then19 ], [ 0, %if.end9 ], [ 0, %cond.end ], [ 0, %if.then27 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i32 noundef %regno, i32 noundef %off, i32 noundef %bpf_size, i32 noundef %t, i32 noundef %value_regno, i1 noundef zeroext %strict_alignment_once) unnamed_addr #6 {
entry:
  %reg_type = alloca i32, align 4
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %idx.ext = zext i32 %regno to i64
  %add.ptr = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idx.ext
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %entry
  %i = call i32 @spirv.llvm_fshl_i32(i32 %bpf_size, i32 %bpf_size, i32 29)
  %Pivot6 = icmp slt i32 %i, 2
  br i1 %Pivot6, label %NodeBlock, label %NodeBlock3

NodeBlock3:                                       ; preds = %NodeBlock5
  %Pivot4 = icmp eq i32 %bpf_size, 16
  br i1 %Pivot4, label %if.end11, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock3
  %SwitchLeaf2 = icmp eq i32 %bpf_size, 24
  br i1 %SwitchLeaf2, label %if.then8, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot.not = icmp eq i32 %bpf_size, 8
  br i1 %Pivot.not, label %if.then2, label %LeafBlock

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %bpf_size, 0
  br i1 %SwitchLeaf, label %if.then5, label %NewDefault

if.then2:                                         ; preds = %NodeBlock
  br label %if.end11

if.then5:                                         ; preds = %LeafBlock
  br label %if.end11

if.then8:                                         ; preds = %LeafBlock1
  br label %if.end11

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end11.fold.split

if.end11.fold.split:                              ; preds = %NewDefault
  br label %if.end11

if.end11:                                         ; preds = %if.end11.fold.split, %if.then8, %if.then5, %if.then2, %NodeBlock3
  %cmp12 = phi i1 [ false, %if.then2 ], [ false, %if.then8 ], [ false, %if.then5 ], [ false, %NodeBlock3 ], [ true, %if.end11.fold.split ]
  %cmp197 = phi i1 [ true, %if.then2 ], [ false, %if.then8 ], [ true, %if.then5 ], [ true, %NodeBlock3 ], [ true, %if.end11.fold.split ]
  %bytes.0 = phi i32 [ 2, %if.then2 ], [ 8, %if.then8 ], [ 4, %if.then5 ], [ 1, %NodeBlock3 ], [ -22, %if.end11.fold.split ]
  br i1 %cmp12, label %return, label %if.end14

if.end14:                                         ; preds = %if.end11
  %call15 = call fastcc i32 @check_ptr_alignment(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %add.ptr, i32 noundef %off, i32 noundef %bytes.0, i1 noundef zeroext %strict_alignment_once) #22
  %tobool16.not = icmp eq i32 %call15, 0
  br i1 %tobool16.not, label %if.end18, label %return

if.end18:                                         ; preds = %if.end14
  %off19 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idx.ext, i32 2
  %i189 = load i32, i32* %off19, align 8
  %add = add i32 %i189, %off
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %add.ptr, i64 0, i32 0
  %i190 = load i32, i32* %type, align 8
  br label %NodeBlock16

NodeBlock16:                                      ; preds = %if.end18
  %Pivot17 = icmp slt i32 %i190, 4
  br i1 %Pivot17, label %LeafBlock8, label %NodeBlock14

NodeBlock14:                                      ; preds = %NodeBlock16
  %Pivot15 = icmp slt i32 %i190, 6
  br i1 %Pivot15, label %LeafBlock10, label %LeafBlock12

LeafBlock12:                                      ; preds = %NodeBlock14
  %SwitchLeaf13 = icmp eq i32 %i190, 6
  br i1 %SwitchLeaf13, label %if.then78, label %NewDefault7

LeafBlock10:                                      ; preds = %NodeBlock14
  %SwitchLeaf11 = icmp eq i32 %i190, 4
  br i1 %SwitchLeaf11, label %if.then21, label %NewDefault7

LeafBlock8:                                       ; preds = %NodeBlock16
  %SwitchLeaf9 = icmp eq i32 %i190, 2
  br i1 %SwitchLeaf9, label %if.then43, label %NewDefault7

if.then21:                                        ; preds = %LeafBlock10
  %call28 = call fastcc i32 @check_map_access_type(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %add, i32 noundef %bytes.0, i32 noundef %t) #22
  %tobool29.not = icmp eq i32 %call28, 0
  br i1 %tobool29.not, label %if.end31, label %return

if.end31:                                         ; preds = %if.then21
  %cmp23 = icmp sgt i32 %value_regno, -1
  %call32 = call fastcc i32 @check_map_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %add, i32 noundef %bytes.0, i1 noundef zeroext false) #22
  %tobool33 = icmp eq i32 %call32, 0
  %cmp35 = icmp eq i32 %t, 1
  %or.cond1 = and i1 %cmp35, %tobool33
  %or.cond2 = and i1 %cmp23, %or.cond1
  br i1 %or.cond2, label %if.then38, label %if.end194

if.then38:                                        ; preds = %if.end31
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef %value_regno) #22
  br label %if.end194

if.then43:                                        ; preds = %LeafBlock8
  store i32 1, i32* %reg_type, align 4
  %call51 = call fastcc i32 @check_ctx_reg(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %add.ptr, i32 noundef %regno) #22
  %cmp52 = icmp slt i32 %call51, 0
  br i1 %cmp52, label %return, label %if.end54

if.end54:                                         ; preds = %if.then43
  %cmp46 = icmp sgt i32 %value_regno, -1
  %call55 = call fastcc i32 @check_ctx_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i32 noundef %add, i32 noundef %bytes.0, i32 noundef %t, i32* noundef nonnull %reg_type) #22
  %tobool56 = icmp eq i32 %call55, 0
  %cmp58 = icmp eq i32 %t, 1
  %or.cond4 = and i1 %cmp58, %tobool56
  %or.cond5 = and i1 %cmp46, %or.cond4
  br i1 %or.cond5, label %if.then61, label %if.end194

if.then61:                                        ; preds = %if.end54
  %i193 = load i32, i32* %reg_type, align 4
  %cmp62 = icmp eq i32 %i193, 1
  br i1 %cmp62, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.then61
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef %value_regno) #22
  br label %if.end70

if.else64:                                        ; preds = %if.then61
  call fastcc void @mark_reg_known_zero(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef %value_regno) #22
  %call65 = call fastcc zeroext i1 @reg_type_may_be_null(i32 noundef %i193) #22
  br i1 %call65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.else64
  %id_gen = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i194 = load i32, i32* %id_gen, align 4
  %inc = add i32 %i194, 1
  store i32 %inc, i32* %id_gen, align 4
  %idxprom = sext i32 %value_regno to i64
  %id = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 3
  store i32 %inc, i32* %id, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.else64
  %idxprom68 = sext i32 %value_regno to i64
  %subreg_def = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom68, i32 12
  store i32 0, i32* %subreg_def, align 4
  br label %if.end70

if.end70:                                         ; preds = %if.end67, %if.then63
  %idxprom71 = sext i32 %value_regno to i64
  %type73 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom71, i32 0
  store i32 %i193, i32* %type73, align 8
  br label %if.end194

if.then78:                                        ; preds = %LeafBlock12
  %value = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idx.ext, i32 5, i32 0
  %i195 = load i64, i64* %value, align 8
  %i196 = trunc i64 %i195 to i32
  %conv80 = add i32 %add, %i196
  %call81 = call fastcc i32 @check_stack_access(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %add.ptr, i32 noundef %conv80, i32 noundef %bytes.0) #22
  %tobool82.not = icmp eq i32 %call81, 0
  br i1 %tobool82.not, label %if.end84, label %return

if.end84:                                         ; preds = %if.then78
  %env.idx18 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx18.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx18, align 8
  %add.ptr.idx19 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idx.ext, i32 11
  %add.ptr.idx19.val = load i32, i32* %add.ptr.idx19, align 8
  %call85 = call fastcc %struct.bpf_func_state* @func(%struct.bpf_verifier_state* %env.idx18.val, i32 %add.ptr.idx19.val) #22
  %call85.idx = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %call85, i64 0, i32 3
  %call85.idx.val = load i32, i32* %call85.idx, align 8
  call fastcc void @update_stack_depth(%struct.bpf_verifier_env* noundef %env, i32 %call85.idx.val, i32 noundef %conv80) #22
  %cmp90 = icmp eq i32 %t, 2
  br i1 %cmp90, label %if.then92, label %if.else94

if.then92:                                        ; preds = %if.end84
  %call93 = call fastcc i32 @check_stack_write(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %call85, i32 noundef %conv80, i32 noundef %bytes.0, i32 noundef %value_regno, i32 noundef %insn_idx) #22
  br label %if.end194

if.else94:                                        ; preds = %if.end84
  %call95 = call fastcc i32 @check_stack_read(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %call85, i32 noundef %conv80, i32 noundef %bytes.0, i32 noundef %value_regno) #22
  br label %if.end194

NewDefault7:                                      ; preds = %LeafBlock8, %LeafBlock10, %LeafBlock12
  br label %if.else97

if.else97:                                        ; preds = %NewDefault7
  %add.ptr.idx = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %add.ptr, i64 0, i32 0
  %add.ptr.idx.val = load i32, i32* %add.ptr.idx, align 8
  %call98 = call fastcc zeroext i1 @reg_is_pkt_pointer(i32 %add.ptr.idx.val) #22
  br i1 %call98, label %if.then99, label %if.else126

if.then99:                                        ; preds = %if.else97
  %cmp100 = icmp eq i32 %t, 2
  br i1 %cmp100, label %land.lhs.true102, label %if.end105

land.lhs.true102:                                 ; preds = %if.then99
  %call103 = call fastcc zeroext i1 @may_access_direct_pkt_data(%struct.bpf_verifier_env* noundef %env, %struct.bpf_call_arg_meta* noundef null, i32 noundef 2) #22
  br i1 %call103, label %if.end105, label %if.then104

if.then104:                                       ; preds = %land.lhs.true102
  %i197 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i197, i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.157, i64 0, i64 0)) #22
  br label %return

if.end105:                                        ; preds = %land.lhs.true102, %if.then99
  %cmp109 = icmp sgt i32 %value_regno, -1
  %call116 = call fastcc i32 @check_packet_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %add, i32 noundef %bytes.0, i1 noundef zeroext false) #22
  %tobool117 = icmp eq i32 %call116, 0
  %cmp119 = icmp eq i32 %t, 1
  %or.cond7 = and i1 %cmp119, %tobool117
  %or.cond8 = and i1 %cmp109, %or.cond7
  br i1 %or.cond8, label %if.then124, label %if.end194

if.then124:                                       ; preds = %if.end105
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef %value_regno) #22
  br label %if.end194

if.else126:                                       ; preds = %if.else97
  %cmp128 = icmp eq i32 %i190, 10
  br i1 %cmp128, label %if.then130, label %if.else151

if.then130:                                       ; preds = %if.else126
  %cmp134 = icmp sgt i32 %value_regno, -1
  %call141 = call fastcc i32 @check_flow_keys_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %add, i32 noundef %bytes.0) #22
  %tobool142 = icmp eq i32 %call141, 0
  %cmp144 = icmp eq i32 %t, 1
  %or.cond10 = and i1 %cmp144, %tobool142
  %or.cond11 = and i1 %cmp134, %or.cond10
  br i1 %or.cond11, label %if.then149, label %if.end194

if.then149:                                       ; preds = %if.then130
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef %value_regno) #22
  br label %if.end194

if.else151:                                       ; preds = %if.else126
  %call153 = call fastcc zeroext i1 @type_is_sk_pointer(i32 noundef %i190) #22
  br i1 %call153, label %if.then154, label %if.else169

if.then154:                                       ; preds = %if.else151
  %cmp155 = icmp eq i32 %t, 2
  br i1 %cmp155, label %if.then157, label %if.end161

if.then157:                                       ; preds = %if.then154
  %i200 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom159 = zext i32 %i190 to i64
  %arrayidx160 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom159
  %i201 = load i8*, i8** %arrayidx160, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i200, i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.160, i64 0, i64 0), i32 noundef %regno, i8* noundef %i201) #22
  br label %return

if.end161:                                        ; preds = %if.then154
  %call162 = call fastcc i32 @check_sock_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i32 noundef %regno, i32 noundef %add, i32 noundef %bytes.0) #22
  %tobool163 = icmp eq i32 %call162, 0
  %cmp165 = icmp sgt i32 %value_regno, -1
  %or.cond12 = and i1 %cmp165, %tobool163
  br i1 %or.cond12, label %if.then167, label %if.end194

if.then167:                                       ; preds = %if.end161
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef %value_regno) #22
  br label %if.end194

if.else169:                                       ; preds = %if.else151
  %cmp171 = icmp eq i32 %i190, 17
  br i1 %cmp171, label %if.then173, label %if.else184

if.then173:                                       ; preds = %if.else169
  %call174 = call fastcc i32 @check_tp_buffer_access(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %add.ptr, i32 noundef %regno, i32 noundef %add, i32 noundef %bytes.0) #22
  %tobool175 = icmp eq i32 %call174, 0
  %cmp177 = icmp eq i32 %t, 1
  %or.cond13 = and i1 %cmp177, %tobool175
  %cmp180 = icmp sgt i32 %value_regno, -1
  %or.cond14 = and i1 %cmp180, %or.cond13
  br i1 %or.cond14, label %if.then182, label %if.end194

if.then182:                                       ; preds = %if.then173
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef %value_regno) #22
  br label %if.end194

if.else184:                                       ; preds = %if.else169
  %i202 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom186 = zext i32 %i190 to i64
  %arrayidx187 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom186
  %i203 = load i8*, i8** %arrayidx187, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i202, i8* noundef getelementptr inbounds ([29 x i8], [29 x i8]* @.str.161, i64 0, i64 0), i32 noundef %regno, i8* noundef %i203) #22
  br label %return

if.end194:                                        ; preds = %if.then182, %if.then173, %if.then167, %if.end161, %if.then149, %if.then130, %if.then124, %if.end105, %if.else94, %if.then92, %if.end70, %if.end54, %if.then38, %if.end31
  %err.0 = phi i32 [ 0, %if.then38 ], [ %call32, %if.end31 ], [ 0, %if.end70 ], [ %call55, %if.end54 ], [ %call93, %if.then92 ], [ %call95, %if.else94 ], [ 0, %if.then124 ], [ %call116, %if.end105 ], [ 0, %if.then149 ], [ %call141, %if.then130 ], [ 0, %if.then167 ], [ %call162, %if.end161 ], [ 0, %if.then182 ], [ %call174, %if.then173 ]
  %tobool195 = icmp eq i32 %err.0, 0
  %or.cond15 = and i1 %cmp197, %tobool195
  %cmp200 = icmp sgt i32 %value_regno, -1
  %or.cond16 = and i1 %cmp200, %or.cond15
  %cmp203 = icmp eq i32 %t, 1
  %or.cond17 = and i1 %cmp203, %or.cond16
  br i1 %or.cond17, label %land.lhs.true205, label %return

land.lhs.true205:                                 ; preds = %if.end194
  %idxprom206 = sext i32 %value_regno to i64
  %arrayidx207 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom206
  %type208 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx207, i64 0, i32 0
  %i204 = load i32, i32* %type208, align 8
  %cmp209 = icmp eq i32 %i204, 1
  br i1 %cmp209, label %if.then211, label %return

if.then211:                                       ; preds = %land.lhs.true205
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %arrayidx207, i32 noundef %bytes.0) #22
  br label %return

return:                                           ; preds = %if.then211, %land.lhs.true205, %if.end194, %if.else184, %if.then157, %if.then104, %if.then78, %if.then43, %if.then21, %if.end14, %if.end11
  %retval.0 = phi i32 [ -13, %if.then104 ], [ -13, %if.then157 ], [ -13, %if.else184 ], [ %bytes.0, %if.end11 ], [ %call15, %if.end14 ], [ %call28, %if.then21 ], [ %call51, %if.then43 ], [ %call81, %if.then78 ], [ 0, %if.then211 ], [ 0, %land.lhs.true205 ], [ %err.0, %if.end194 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @reg_type_mismatch(i32 noundef %src, i32 noundef %prev) unnamed_addr #2 {
entry:
  %cmp.not = icmp eq i32 %src, %prev
  br i1 %cmp.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %call = call fastcc zeroext i1 @reg_type_mismatch_ok(i32 noundef %src) #22
  br i1 %call, label %lor.rhs, label %land.end

lor.rhs:                                          ; preds = %land.rhs
  %call1 = call fastcc zeroext i1 @reg_type_mismatch_ok(i32 noundef %prev) #22
  %lnot = xor i1 %call1, true
  br label %land.end

land.end:                                         ; preds = %lor.rhs, %land.rhs, %entry
  %i = phi i1 [ false, %entry ], [ true, %land.rhs ], [ %lnot, %lor.rhs ]
  ret i1 %i
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_xadd(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #6 {
entry:
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i = load i8, i8* %code, align 4
  %i37 = and i8 %i, 24
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot.not = icmp eq i8 %i37, 24
  br i1 %Pivot.not, label %lor.lhs.false, label %LeafBlock

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %i37, 0
  br i1 %SwitchLeaf, label %lor.lhs.false, label %NewDefault

lor.lhs.false:                                    ; preds = %LeafBlock, %NodeBlock
  %imm = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i38 = load i32, i32* %imm, align 4
  %cmp7.not = icmp eq i32 %i38, 0
  br i1 %cmp7.not, label %if.end, label %if.then

NewDefault:                                       ; preds = %LeafBlock
  br label %if.then

if.then:                                          ; preds = %NewDefault, %lor.lhs.false
  %i39 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i39, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.191, i64 0, i64 0)) #22
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %src_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load = load i8, i8* %src_reg, align 1
  %bf.lshr = lshr i8 %bf.load, 4
  %conv9 = zext i8 %bf.lshr to i32
  %call = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv9, i32 noundef 0) #22
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end11, label %return

if.end11:                                         ; preds = %if.end
  %bf.load12 = load i8, i8* %src_reg, align 1
  %bf.clear = and i8 %bf.load12, 15
  %conv13 = zext i8 %bf.clear to i32
  %call14 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv13, i32 noundef 0) #22
  %tobool15.not = icmp eq i32 %call14, 0
  br i1 %tobool15.not, label %if.end28, label %return

if.end28:                                         ; preds = %if.end11
  %bf.load19 = load i8, i8* %src_reg, align 1
  %bf.clear31 = and i8 %bf.load19, 15
  %conv32 = zext i8 %bf.clear31 to i32
  %env.idx1 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx1.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx1, align 8
  %call33 = call fastcc zeroext i1 @is_ctx_reg(%struct.bpf_verifier_state* %env.idx1.val, i32 noundef %conv32) #22
  br i1 %call33, label %if.then56, label %lor.lhs.false35

lor.lhs.false35:                                  ; preds = %if.end28
  %env.idx2 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx2.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx2, align 8
  %call40 = call fastcc zeroext i1 @is_pkt_reg(%struct.bpf_verifier_state* %env.idx2.val, i32 noundef %conv32) #22
  br i1 %call40, label %if.then56, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false35
  %env.idx3 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx3.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx3, align 8
  %call47 = call fastcc zeroext i1 @is_flow_key_reg(%struct.bpf_verifier_state* %env.idx3.val, i32 noundef %conv32) #22
  br i1 %call47, label %if.then56, label %lor.lhs.false49

lor.lhs.false49:                                  ; preds = %lor.lhs.false42
  %env.idx4 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx4.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx4, align 8
  %call54 = call fastcc zeroext i1 @is_sk_reg(%struct.bpf_verifier_state* %env.idx4.val, i32 noundef %conv32) #22
  br i1 %call54, label %if.then56, label %if.end66

if.then56:                                        ; preds = %lor.lhs.false49, %lor.lhs.false42, %lor.lhs.false35, %if.end28
  %i41 = bitcast %struct.bpf_verifier_env* %env to i8*
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call65 = call fastcc %struct.bpf_reg_state* @reg_state(%struct.bpf_verifier_state* %env.idx.val, i32 noundef %conv32) #22
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call65, i64 0, i32 0
  %i42 = load i32, i32* %type, align 8
  %idxprom = zext i32 %i42 to i64
  %arrayidx = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom
  %i43 = load i8*, i8** %arrayidx, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i41, i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.193, i64 0, i64 0), i32 noundef %conv32, i8* noundef %i43) #22
  br label %return

if.end66:                                         ; preds = %lor.lhs.false49
  %off = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i44 = load i16, i16* %off, align 2
  %conv71 = sext i16 %i44 to i32
  %i45 = load i8, i8* %code, align 4
  %i46 = and i8 %i45, 24
  %and74 = zext i8 %i46 to i32
  %call75 = call fastcc i32 @check_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i32 noundef %conv32, i32 noundef %conv71, i32 noundef %and74, i32 noundef 1, i32 noundef -1, i1 noundef zeroext true) #22
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.end78, label %return

if.end78:                                         ; preds = %if.end66
  %bf.load80 = load i8, i8* %src_reg, align 1
  %bf.clear81 = and i8 %bf.load80, 15
  %conv82 = zext i8 %bf.clear81 to i32
  %i47 = load i16, i16* %off, align 2
  %conv84 = sext i16 %i47 to i32
  %i48 = load i8, i8* %code, align 4
  %i49 = and i8 %i48, 24
  %and87 = zext i8 %i49 to i32
  %call88 = call fastcc i32 @check_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i32 noundef %conv82, i32 noundef %conv84, i32 noundef %and87, i32 noundef 2, i32 noundef -1, i1 noundef zeroext true) #22
  br label %return

return:                                           ; preds = %if.end78, %if.end66, %if.then56, %if.end11, %if.end, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ -13, %if.then56 ], [ %call88, %if.end78 ], [ %call, %if.end ], [ %call14, %if.end11 ], [ %call75, %if.end66 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @is_ctx_reg(%struct.bpf_verifier_state* %env.0.8.val, i32 noundef %regno) unnamed_addr #7 {
entry:
  %call = call fastcc %struct.bpf_reg_state* @reg_state(%struct.bpf_verifier_state* %env.0.8.val, i32 noundef %regno) #22
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 2
  ret i1 %cmp
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc %struct.bpf_reg_state* @reg_state(%struct.bpf_verifier_state* %env.0.8.val, i32 noundef %regno) unnamed_addr #7 {
entry:
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.0.8.val) #22
  %i = zext i32 %regno to i64
  %add.ptr = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i
  ret %struct.bpf_reg_state* %add.ptr
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_func_call(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* nocapture noundef readonly %insn, i32* nocapture noundef %insn_idx) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %i50 = load i32, i32* %curframe, align 8
  %i51 = add i32 %i50, -7
  %cmp = icmp ult i32 %i51, -8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i52 = bitcast %struct.bpf_verifier_env* %env to i8*
  %add2 = add i32 %i50, 2
  call void (i8*, i8*, ...) @verbose(i8* noundef %i52, i8* noundef getelementptr inbounds ([41 x i8], [41 x i8]* @.str.213, i64 0, i64 0), i32 noundef %add2) #22
  br label %return

if.end:                                           ; preds = %entry
  %i53 = load i32, i32* %insn_idx, align 4
  %imm = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i54 = load i32, i32* %imm, align 4
  %add3 = add i32 %i54, %i53
  %add4 = add i32 %add3, 1
  %call = call fastcc i32 @find_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef %add4) #22
  %cmp5 = icmp slt i32 %call, 0
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %i55 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i55, i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.214, i64 0, i64 0), i32 noundef %add4) #22
  br label %return

if.end8:                                          ; preds = %if.end
  %i56 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i56 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i57 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %add12 = add i32 %i56, 1
  %idxprom13 = zext i32 %add12 to i64
  %arrayidx14 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom13
  %i58 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx14, align 8
  %tobool.not = icmp eq %struct.bpf_func_state* %i58, null
  br i1 %tobool.not, label %if.end18, label %if.then15

if.then15:                                        ; preds = %if.end8
  %i59 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i59, i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.215, i64 0, i64 0), i32 noundef %add12) #22
  br label %return

if.end18:                                         ; preds = %if.end8
  %call19 = call fastcc i8* @kzalloc(i64 noundef 1184) #22
  %i60 = bitcast i8* %call19 to %struct.bpf_func_state*
  %tobool20.not = icmp eq i8* %call19, null
  br i1 %tobool20.not, label %return, label %if.end22

if.end22:                                         ; preds = %if.end18
  %i61 = load i32, i32* %curframe, align 8
  %add25 = add i32 %i61, 1
  %idxprom26 = zext i32 %add25 to i64
  %arrayidx27 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom26
  %i62 = bitcast %struct.bpf_func_state** %arrayidx27 to i8**
  store i8* %call19, i8** %i62, align 8
  %i63 = load i32, i32* %insn_idx, align 4
  %i64 = load i32, i32* %curframe, align 8
  %add29 = add i32 %i64, 1
  call fastcc void @init_func_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef nonnull %i60, i32 noundef %i63, i32 noundef %add29, i32 noundef %call) #22
  %call30 = call fastcc i32 @transfer_reference_state(%struct.bpf_func_state* noundef nonnull %i60, %struct.bpf_func_state* noundef %i57) #22
  %tobool31.not = icmp eq i32 %call30, 0
  br i1 %tobool31.not, label %for.body, label %return

for.body:                                         ; preds = %if.end22
  %arrayidx36 = getelementptr i8, i8* %call19, i64 104
  %arrayidx39 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i57, i64 0, i32 0, i64 1
  %i65 = bitcast %struct.bpf_reg_state* %arrayidx39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %arrayidx36, i8* noundef align 8 dereferenceable(104) %i65, i64 104, i1 false)
  %arrayidx36.1 = getelementptr i8, i8* %call19, i64 208
  %arrayidx39.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i57, i64 0, i32 0, i64 2
  %i66 = bitcast %struct.bpf_reg_state* %arrayidx39.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %arrayidx36.1, i8* noundef align 8 dereferenceable(104) %i66, i64 104, i1 false)
  %arrayidx36.2 = getelementptr i8, i8* %call19, i64 312
  %arrayidx39.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i57, i64 0, i32 0, i64 3
  %i67 = bitcast %struct.bpf_reg_state* %arrayidx39.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %arrayidx36.2, i8* noundef align 8 dereferenceable(104) %i67, i64 104, i1 false)
  %arrayidx36.3 = getelementptr i8, i8* %call19, i64 416
  %arrayidx39.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i57, i64 0, i32 0, i64 4
  %i68 = bitcast %struct.bpf_reg_state* %arrayidx39.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %arrayidx36.3, i8* noundef align 8 dereferenceable(104) %i68, i64 104, i1 false)
  %arrayidx36.4 = getelementptr i8, i8* %call19, i64 520
  %arrayidx39.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i57, i64 0, i32 0, i64 5
  %i69 = bitcast %struct.bpf_reg_state* %arrayidx39.4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %arrayidx36.4, i8* noundef align 8 dereferenceable(104) %i69, i64 104, i1 false)
  %arraydecay = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i57, i64 0, i32 0, i64 0
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 0) #22
  %call48 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 0, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 1) #22
  %call48.1 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 1, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 2) #22
  %call48.2 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 2, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 3) #22
  %call48.3 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 3, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 4) #22
  %call48.4 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 4, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 5) #22
  %call48.5 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 5, i32 noundef 2) #22
  %i70 = load i32, i32* %curframe, align 8
  %inc53 = add i32 %i70, 1
  store i32 %inc53, i32* %curframe, align 8
  store i32 %add3, i32* %insn_idx, align 4
  %level = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i71 = load i32, i32* %level, align 8
  %and = and i32 %i71, 3
  %tobool54.not = icmp eq i32 %and, 0
  br i1 %tobool54.not, label %return, label %if.then55

if.then55:                                        ; preds = %for.body
  %i72 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i72, i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.216, i64 0, i64 0)) #22
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i57) #22
  call void (i8*, i8*, ...) @verbose(i8* noundef %i72, i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.217, i64 0, i64 0)) #22
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef nonnull %i60) #22
  br label %return

return:                                           ; preds = %if.then55, %for.body, %if.end22, %if.end18, %if.then15, %if.then6, %if.then
  %retval.0 = phi i32 [ -7, %if.then ], [ -14, %if.then6 ], [ -14, %if.then15 ], [ -12, %if.end18 ], [ %call30, %if.end22 ], [ 0, %if.then55 ], [ 0, %for.body ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_helper_call(%struct.bpf_verifier_env* noundef %env, i32 noundef %func_id, i32 noundef %insn_idx) unnamed_addr #6 {
entry:
  %meta = alloca %struct.bpf_call_arg_meta, align 8
  %i = icmp ugt i32 %func_id, 110
  br i1 %i, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i157 = bitcast %struct.bpf_verifier_env* %env to i8*
  %call = call i8* @func_id_name(i32 noundef %func_id) #23
  call void (i8*, i8*, ...) @verbose(i8* noundef %i157, i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.218, i64 0, i64 0), i8* noundef %call, i32 noundef %func_id) #22
  br label %return

if.end:                                           ; preds = %entry
  %ops = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 3
  %i158 = load %struct.bpf_verifier_ops*, %struct.bpf_verifier_ops** %ops, align 8
  %get_func_proto = getelementptr inbounds %struct.bpf_verifier_ops, %struct.bpf_verifier_ops* %i158, i64 0, i32 0
  %i159 = load %struct.bpf_func_proto* (i32, %struct.bpf_prog*)*, %struct.bpf_func_proto* (i32, %struct.bpf_prog*)** %get_func_proto, align 8
  %tobool.not = icmp eq %struct.bpf_func_proto* (i32, %struct.bpf_prog*)* %i159, null
  br i1 %tobool.not, label %if.end6, label %if.then2

if.then2:                                         ; preds = %if.end
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i160 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %call5 = call %struct.bpf_func_proto* %i159(i32 noundef %func_id, %struct.bpf_prog* noundef %i160) #23
  br label %if.end6

if.end6:                                          ; preds = %if.then2, %if.end
  %fn.0 = phi %struct.bpf_func_proto* [ %call5, %if.then2 ], [ null, %if.end ]
  %tobool7.not = icmp eq %struct.bpf_func_proto* %fn.0, null
  br i1 %tobool7.not, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end6
  %i161 = bitcast %struct.bpf_verifier_env* %env to i8*
  %call9 = call i8* @func_id_name(i32 noundef %func_id) #23
  call void (i8*, i8*, ...) @verbose(i8* noundef %i161, i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.219, i64 0, i64 0), i8* noundef %call9, i32 noundef %func_id) #22
  br label %return

if.end10:                                         ; preds = %if.end6
  %prog11 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i162 = load %struct.bpf_prog*, %struct.bpf_prog** %prog11, align 8
  %gpl_compatible = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i162, i64 0, i32 1
  %bf.load = load i16, i16* %gpl_compatible, align 2
  %i163 = and i16 %bf.load, 4
  %tobool12.not = icmp eq i16 %i163, 0
  br i1 %tobool12.not, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %if.end10
  %gpl_only = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn.0, i64 0, i32 1
  %i164 = load i8, i8* %gpl_only, align 8
  %i165 = and i8 %i164, 1
  %tobool13.not = icmp eq i8 %i165, 0
  br i1 %tobool13.not, label %if.end15, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  %i166 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i166, i8* noundef getelementptr inbounds ([69 x i8], [69 x i8]* @.str.220, i64 0, i64 0)) #22
  br label %return

if.end15:                                         ; preds = %land.lhs.true, %if.end10
  %i167 = bitcast %struct.bpf_func_proto* %fn.0 to i8**
  %i168 = load i8*, i8** %i167, align 8
  %call16 = call zeroext i1 @bpf_helper_changes_pkt_data(i8* noundef %i168) #23
  br i1 %call16, label %land.lhs.true18, label %if.end22

land.lhs.true18:                                  ; preds = %if.end15
  %arg1_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn.0, i64 0, i32 4
  %i169 = load i32, i32* %arg1_type, align 8
  %cmp19.not = icmp eq i32 %i169, 11
  br i1 %cmp19.not, label %if.end22, label %if.then20

if.then20:                                        ; preds = %land.lhs.true18
  %i170 = bitcast %struct.bpf_verifier_env* %env to i8*
  %call21 = call i8* @func_id_name(i32 noundef %func_id) #23
  call void (i8*, i8*, ...) @verbose(i8* noundef %i170, i8* noundef getelementptr inbounds ([54 x i8], [54 x i8]* @.str.221, i64 0, i64 0), i8* noundef %call21, i32 noundef %func_id) #22
  br label %return

if.end22:                                         ; preds = %land.lhs.true18, %if.end15
  %i171 = bitcast %struct.bpf_call_arg_meta* %meta to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(48) %i171, i8 0, i64 48, i1 false)
  %pkt_access = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn.0, i64 0, i32 2
  %i172 = load i8, i8* %pkt_access, align 1
  %i173 = and i8 %i172, 1
  %pkt_access24 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 2
  store i8 %i173, i8* %pkt_access24, align 1
  %call26 = call fastcc i32 @check_func_proto(%struct.bpf_func_proto* noundef nonnull %fn.0, i32 noundef %func_id) #22
  %tobool27.not = icmp eq i32 %call26, 0
  br i1 %tobool27.not, label %if.end30, label %if.then28

if.then28:                                        ; preds = %if.end22
  %i174 = bitcast %struct.bpf_verifier_env* %env to i8*
  %call29 = call i8* @func_id_name(i32 noundef %func_id) #23
  call void (i8*, i8*, ...) @verbose(i8* noundef %i174, i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @.str.222, i64 0, i64 0), i8* noundef %call29, i32 noundef %func_id) #22
  br label %return

if.end30:                                         ; preds = %if.end22
  %func_id31 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 8
  store i32 %func_id, i32* %func_id31, align 4
  %arg1_type32 = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn.0, i64 0, i32 4
  %i175 = load i32, i32* %arg1_type32, align 8
  %call33 = call fastcc i32 @check_func_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 1, i32 noundef %i175, %struct.bpf_call_arg_meta* noundef nonnull %meta) #22
  %tobool34.not = icmp eq i32 %call33, 0
  br i1 %tobool34.not, label %if.end36, label %return

if.end36:                                         ; preds = %if.end30
  %arg2_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn.0, i64 0, i32 5
  %i176 = load i32, i32* %arg2_type, align 4
  %call37 = call fastcc i32 @check_func_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 2, i32 noundef %i176, %struct.bpf_call_arg_meta* noundef nonnull %meta) #22
  %tobool38.not = icmp eq i32 %call37, 0
  br i1 %tobool38.not, label %if.end40, label %return

if.end40:                                         ; preds = %if.end36
  %arg3_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn.0, i64 0, i32 6
  %i177 = load i32, i32* %arg3_type, align 8
  %call41 = call fastcc i32 @check_func_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 3, i32 noundef %i177, %struct.bpf_call_arg_meta* noundef nonnull %meta) #22
  %tobool42.not = icmp eq i32 %call41, 0
  br i1 %tobool42.not, label %if.end44, label %return

if.end44:                                         ; preds = %if.end40
  %arg4_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn.0, i64 0, i32 7
  %i178 = load i32, i32* %arg4_type, align 4
  %call45 = call fastcc i32 @check_func_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 4, i32 noundef %i178, %struct.bpf_call_arg_meta* noundef nonnull %meta) #22
  %tobool46.not = icmp eq i32 %call45, 0
  br i1 %tobool46.not, label %if.end48, label %return

if.end48:                                         ; preds = %if.end44
  %arg5_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn.0, i64 0, i32 8
  %i179 = load i32, i32* %arg5_type, align 8
  %call49 = call fastcc i32 @check_func_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 5, i32 noundef %i179, %struct.bpf_call_arg_meta* noundef nonnull %meta) #22
  %tobool50.not = icmp eq i32 %call49, 0
  br i1 %tobool50.not, label %if.end52, label %return

if.end52:                                         ; preds = %if.end48
  %meta.idx = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 0
  %meta.idx.val = load %struct.bpf_map*, %struct.bpf_map** %meta.idx, align 8
  %call53 = call fastcc i32 @record_func_map(%struct.bpf_verifier_env* noundef %env, %struct.bpf_map* %meta.idx.val, i32 noundef %func_id, i32 noundef %insn_idx) #22
  %tobool54.not = icmp eq i32 %call53, 0
  br i1 %tobool54.not, label %for.cond.preheader, label %return

for.cond.preheader:                               ; preds = %if.end52
  %access_size = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 4
  %i180 = load i32, i32* %access_size, align 8
  %cmp57149 = icmp sgt i32 %i180, 0
  br i1 %cmp57149, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %regno = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 3
  br label %for.body

for.cond:                                         ; preds = %for.body
  %i181 = load i32, i32* %access_size, align 8
  %cmp57 = icmp slt i32 %inc, %i181
  br i1 %cmp57, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %i.0150 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.cond ]
  %i182 = load i32, i32* %regno, align 4
  %call58 = call fastcc i32 @check_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i32 noundef %i182, i32 noundef %i.0150, i32 noundef 16, i32 noundef 2, i32 noundef -1, i1 noundef zeroext false) #22
  %tobool59.not = icmp eq i32 %call58, 0
  %inc = add nuw nsw i32 %i.0150, 1
  br i1 %tobool59.not, label %for.cond, label %return

for.end:                                          ; preds = %for.cond, %for.cond.preheader
  %cmp62 = icmp eq i32 %func_id, 12
  br i1 %cmp62, label %if.then63, label %if.else

if.then63:                                        ; preds = %for.end
  %call64 = call fastcc i32 @check_reference_leak(%struct.bpf_verifier_env* noundef %env) #22
  %tobool65.not = icmp eq i32 %call64, 0
  br i1 %tobool65.not, label %if.end76, label %if.then66

if.then66:                                        ; preds = %if.then63
  %i183 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i183, i8* noundef getelementptr inbounds ([40 x i8], [40 x i8]* @.str.223, i64 0, i64 0)) #22
  br label %return

if.else:                                          ; preds = %for.end
  %call68 = call fastcc zeroext i1 @is_release_function(i32 noundef %func_id) #22
  br i1 %call68, label %if.then69, label %if.end76

if.then69:                                        ; preds = %if.else
  %ref_obj_id = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 7
  %i184 = load i32, i32* %ref_obj_id, align 8
  %call70 = call fastcc i32 @release_reference(%struct.bpf_verifier_env* noundef %env, i32 noundef %i184) #22
  %tobool71.not = icmp eq i32 %call70, 0
  br i1 %tobool71.not, label %if.end76, label %if.then72

if.then72:                                        ; preds = %if.then69
  %i185 = bitcast %struct.bpf_verifier_env* %env to i8*
  %call73 = call i8* @func_id_name(i32 noundef %func_id) #23
  call void (i8*, i8*, ...) @verbose(i8* noundef %i185, i8* noundef getelementptr inbounds ([51 x i8], [51 x i8]* @.str.224, i64 0, i64 0), i8* noundef %call73, i32 noundef %func_id) #22
  br label %return

if.end76:                                         ; preds = %if.then69, %if.else, %if.then63
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call77 = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %cmp78 = icmp eq i32 %func_id, 81
  br i1 %cmp78, label %land.lhs.true79, label %for.body85

land.lhs.true79:                                  ; preds = %if.end76
  %arrayidx = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 2
  %call80 = call fastcc zeroext i1 @register_is_null(%struct.bpf_reg_state* noundef %arrayidx) #22
  br i1 %call80, label %for.body85, label %if.then81

if.then81:                                        ; preds = %land.lhs.true79
  %i186 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i186, i8* noundef getelementptr inbounds ([52 x i8], [52 x i8]* @.str.225, i64 0, i64 0)) #22
  br label %return

for.body85:                                       ; preds = %land.lhs.true79, %if.end76
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 0) #22
  %call89 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 0, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 1) #22
  %call89.1 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 1, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 2) #22
  %call89.2 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 2, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 3) #22
  %call89.3 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 3, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 4) #22
  %call89.4 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 4, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 5) #22
  %call89.5 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 5, i32 noundef 2) #22
  %subreg_def = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 12
  store i32 0, i32* %subreg_def, align 4
  %ret_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn.0, i64 0, i32 3
  %i187 = load i32, i32* %ret_type, align 4
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %for.body85
  %Pivot10 = icmp slt i32 %i187, 4
  br i1 %Pivot10, label %NodeBlock1, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp eq i32 %i187, 4
  br i1 %Pivot8, label %if.then136, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp slt i32 %i187, 6
  br i1 %Pivot6, label %if.then156, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp eq i32 %i187, 6
  br i1 %SwitchLeaf4, label %if.then146, label %NewDefault

NodeBlock1:                                       ; preds = %NodeBlock9
  %Pivot2 = icmp slt i32 %i187, 1
  br i1 %Pivot2, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock1
  %Pivot = icmp eq i32 %i187, 1
  br i1 %Pivot, label %if.then99, label %if.then107

LeafBlock:                                        ; preds = %NodeBlock1
  %SwitchLeaf = icmp eq i32 %i187, 0
  br i1 %SwitchLeaf, label %if.then95, label %NewDefault

if.then95:                                        ; preds = %LeafBlock
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 0) #22
  br label %if.end171

if.then99:                                        ; preds = %NodeBlock
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 0
  store i32 0, i32* %type, align 8
  br label %if.end171

if.then107:                                       ; preds = %NodeBlock
  call fastcc void @mark_reg_known_zero(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 0) #22
  %map_ptr = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 0
  %i188 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %cmp108 = icmp eq %struct.bpf_map* %i188, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.then107
  %i189 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i189, i8* noundef getelementptr inbounds ([41 x i8], [41 x i8]* @.str.226, i64 0, i64 0)) #22
  br label %return

if.end110:                                        ; preds = %if.then107
  %map_ptr113 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 1, i32 0
  store %struct.bpf_map* %i188, %struct.bpf_map** %map_ptr113, align 8
  %i190 = load i32, i32* %ret_type, align 4
  %cmp115 = icmp eq i32 %i190, 2
  %type118 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 0
  br i1 %cmp115, label %if.then116, label %if.else125

if.then116:                                       ; preds = %if.end110
  store i32 4, i32* %type118, align 8
  %i191 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %i191.idx = getelementptr %struct.bpf_map, %struct.bpf_map* %i191, i64 0, i32 8
  %i191.idx.val = load i32, i32* %i191.idx, align 4
  %call120 = call fastcc zeroext i1 @map_value_has_spin_lock(i32 %i191.idx.val) #22
  br i1 %call120, label %if.then121, label %if.end171

if.then121:                                       ; preds = %if.then116
  %id_gen = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i192 = load i32, i32* %id_gen, align 4
  %inc122 = add i32 %i192, 1
  store i32 %inc122, i32* %id_gen, align 4
  %id = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 3
  store i32 %inc122, i32* %id, align 4
  br label %if.end171

if.else125:                                       ; preds = %if.end110
  store i32 5, i32* %type118, align 8
  %id_gen128 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i193 = load i32, i32* %id_gen128, align 4
  %inc129 = add i32 %i193, 1
  store i32 %inc129, i32* %id_gen128, align 4
  %id131 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 3
  store i32 %inc129, i32* %id131, align 4
  br label %if.end171

if.then136:                                       ; preds = %NodeBlock7
  call fastcc void @mark_reg_known_zero(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 0) #22
  %type138 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 0
  store i32 12, i32* %type138, align 8
  %id_gen139 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i194 = load i32, i32* %id_gen139, align 4
  %inc140 = add i32 %i194, 1
  store i32 %inc140, i32* %id_gen139, align 4
  %id142 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 3
  store i32 %inc140, i32* %id142, align 4
  br label %if.end171

if.then146:                                       ; preds = %LeafBlock3
  call fastcc void @mark_reg_known_zero(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 0) #22
  %type148 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 0
  store i32 14, i32* %type148, align 8
  %id_gen149 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i195 = load i32, i32* %id_gen149, align 4
  %inc150 = add i32 %i195, 1
  store i32 %inc150, i32* %id_gen149, align 4
  %id152 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 3
  store i32 %inc150, i32* %id152, align 4
  br label %if.end171

if.then156:                                       ; preds = %NodeBlock5
  call fastcc void @mark_reg_known_zero(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call77, i32 noundef 0) #22
  %type158 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 0
  store i32 16, i32* %type158, align 8
  %id_gen159 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i196 = load i32, i32* %id_gen159, align 4
  %inc160 = add i32 %i196, 1
  store i32 %inc160, i32* %id_gen159, align 4
  %id162 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 3
  store i32 %inc160, i32* %id162, align 4
  br label %if.end171

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock3
  br label %if.else163

if.else163:                                       ; preds = %NewDefault
  %i197 = bitcast %struct.bpf_verifier_env* %env to i8*
  %call165 = call i8* @func_id_name(i32 noundef %func_id) #23
  call void (i8*, i8*, ...) @verbose(i8* noundef %i197, i8* noundef getelementptr inbounds ([38 x i8], [38 x i8]* @.str.227, i64 0, i64 0), i32 noundef %i187, i8* noundef %call165, i32 noundef %func_id) #22
  br label %return

if.end171:                                        ; preds = %if.then156, %if.then146, %if.then136, %if.else125, %if.then121, %if.then116, %if.then99, %if.then95
  %call172 = call fastcc zeroext i1 @is_ptr_cast_function(i32 noundef %func_id) #22
  br i1 %call172, label %if.then173, label %if.else177

if.then173:                                       ; preds = %if.end171
  %ref_obj_id174 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 7
  %i198 = load i32, i32* %ref_obj_id174, align 8
  br label %if.end190.sink.split

if.else177:                                       ; preds = %if.end171
  %call178 = call fastcc zeroext i1 @is_acquire_function(i32 noundef %func_id) #22
  br i1 %call178, label %if.then179, label %if.end190

if.then179:                                       ; preds = %if.else177
  %call181 = call fastcc i32 @acquire_reference_state(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx) #22
  %cmp182 = icmp slt i32 %call181, 0
  br i1 %cmp182, label %return, label %if.end184

if.end184:                                        ; preds = %if.then179
  %id186 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 3
  store i32 %call181, i32* %id186, align 4
  br label %if.end190.sink.split

if.end190.sink.split:                             ; preds = %if.end184, %if.then173
  %call181.sink = phi i32 [ %call181, %if.end184 ], [ %i198, %if.then173 ]
  %ref_obj_id188 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call77, i64 0, i32 4
  store i32 %call181.sink, i32* %ref_obj_id188, align 8
  br label %if.end190

if.end190:                                        ; preds = %if.end190.sink.split, %if.else177
  %i199 = load i32, i32* %ret_type, align 4
  call fastcc void @do_refine_retval_range(%struct.bpf_reg_state* noundef %call77, i32 noundef %i199, i32 noundef %func_id, %struct.bpf_call_arg_meta* noundef nonnull %meta) #22
  %map_ptr192 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 0
  %i200 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr192, align 8
  %call193 = call fastcc i32 @check_map_func_compatibility(%struct.bpf_verifier_env* noundef %env, %struct.bpf_map* noundef %i200, i32 noundef %func_id) #22
  %tobool194.not = icmp eq i32 %call193, 0
  br i1 %tobool194.not, label %if.end196, label %return

if.end196:                                        ; preds = %if.end190
  %cmp197 = icmp eq i32 %func_id, 67
  br i1 %cmp197, label %land.lhs.true198, label %if.end214

land.lhs.true198:                                 ; preds = %if.end196
  %i201 = load %struct.bpf_prog*, %struct.bpf_prog** %prog11, align 8
  %has_callchain_buf = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i201, i64 0, i32 1
  %bf.load200 = load i16, i16* %has_callchain_buf, align 2
  %i202 = and i16 %bf.load200, 256
  %tobool203.not = icmp eq i16 %i202, 0
  br i1 %tobool203.not, label %if.then204, label %if.end214

if.then204:                                       ; preds = %land.lhs.true198
  %i203 = load i32, i32* @sysctl_perf_event_max_stack, align 4
  %call205 = call i32 @get_callchain_buffers(i32 noundef %i203) #23
  %tobool206.not = icmp eq i32 %call205, 0
  br i1 %tobool206.not, label %if.end209, label %if.then207

if.then207:                                       ; preds = %if.then204
  %i204 = bitcast %struct.bpf_verifier_env* %env to i8*
  %call208 = call i8* @func_id_name(i32 noundef 67) #23
  call void (i8*, i8*, ...) @verbose(i8* noundef %i204, i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.228, i64 0, i64 0), i8* noundef %call208, i32 noundef 67) #22
  br label %return

if.end209:                                        ; preds = %if.then204
  %i205 = load %struct.bpf_prog*, %struct.bpf_prog** %prog11, align 8
  %has_callchain_buf211 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i205, i64 0, i32 1
  %bf.load212 = load i16, i16* %has_callchain_buf211, align 2
  %bf.set = or i16 %bf.load212, 256
  store i16 %bf.set, i16* %has_callchain_buf211, align 2
  br label %if.end214

if.end214:                                        ; preds = %if.end209, %land.lhs.true198, %if.end196
  br i1 %call16, label %if.then216, label %return

if.then216:                                       ; preds = %if.end214
  %env.idx11 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx11.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx11, align 8
  %env.idx11.val.idx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %env.idx11.val, i64 0, i32 4
  %env.idx11.val.idx.val = load i32, i32* %env.idx11.val.idx, align 8
  call fastcc void @clear_all_pkt_pointers(i32 %env.idx11.val.idx.val) #22
  br label %return

return:                                           ; preds = %if.then216, %if.end214, %if.then207, %if.end190, %if.then179, %if.else163, %if.then109, %if.then81, %if.then72, %if.then66, %for.body, %if.end52, %if.end48, %if.end44, %if.end40, %if.end36, %if.end30, %if.then28, %if.then20, %if.then14, %if.then8, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ -22, %if.then20 ], [ %call26, %if.then28 ], [ %call64, %if.then66 ], [ %call205, %if.then207 ], [ -22, %if.then109 ], [ -22, %if.else163 ], [ -22, %if.then81 ], [ %call70, %if.then72 ], [ -22, %if.then14 ], [ -22, %if.then8 ], [ %call33, %if.end30 ], [ %call37, %if.end36 ], [ %call41, %if.end40 ], [ %call45, %if.end44 ], [ %call49, %if.end48 ], [ %call53, %if.end52 ], [ %call181, %if.then179 ], [ %call193, %if.end190 ], [ 0, %if.then216 ], [ 0, %if.end214 ], [ %call58, %for.body ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @prepare_func_exit(%struct.bpf_verifier_env* noundef %env, i32* nocapture noundef %insn_idx) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %i22 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i22 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i23 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %type = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i23, i64 0, i32 0, i64 0, i32 0
  %i24 = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i24, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i25 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i25, i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @.str.260, i64 0, i64 0)) #22
  br label %return

if.end:                                           ; preds = %entry
  %dec = add i32 %i22, -1
  store i32 %dec, i32* %curframe, align 8
  %idxprom5 = zext i32 %dec to i64
  %arrayidx6 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom5
  %i26 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx6, align 8
  %i27 = bitcast %struct.bpf_func_state* %i26 to i8*
  %i28 = bitcast %struct.bpf_func_state* %i23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %i27, i8* noundef align 8 dereferenceable(104) %i28, i64 104, i1 false)
  %call = call fastcc i32 @transfer_reference_state(%struct.bpf_func_state* noundef %i26, %struct.bpf_func_state* noundef %i23) #22
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end10, label %return

if.end10:                                         ; preds = %if.end
  %callsite = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i23, i64 0, i32 1
  %i29 = load i32, i32* %callsite, align 8
  %add = add i32 %i29, 1
  store i32 %add, i32* %insn_idx, align 4
  %level = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i30 = load i32, i32* %level, align 8
  %and = and i32 %i30, 3
  %tobool11.not = icmp eq i32 %and, 0
  br i1 %tobool11.not, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.end10
  %i31 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i31, i8* noundef getelementptr inbounds ([24 x i8], [24 x i8]* @.str.261, i64 0, i64 0)) #22
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i23) #22
  %i32 = load i32, i32* %insn_idx, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i31, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.262, i64 0, i64 0), i32 noundef %i32) #22
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i26) #22
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end10
  call fastcc void @free_func_state(%struct.bpf_func_state* noundef %i23) #22
  %i33 = load i32, i32* %curframe, align 8
  %add16 = add i32 %i33, 1
  %idxprom17 = zext i32 %add16 to i64
  %arrayidx18 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom17
  store %struct.bpf_func_state* null, %struct.bpf_func_state** %arrayidx18, align 8
  br label %return

return:                                           ; preds = %if.end13, %if.end, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ 0, %if.end13 ], [ %call, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_reference_leak(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_func_state* @cur_func(%struct.bpf_verifier_state* %env.idx.val) #22
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %call, i64 0, i32 4
  %i = load i32, i32* %acquired_refs, align 4
  %cmp8 = icmp sgt i32 %i, 0
  br i1 %cmp8, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %i15 = bitcast %struct.bpf_verifier_env* %env to i8*
  %refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %call, i64 0, i32 5
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %i16 = load %struct.util_est*, %struct.util_est** %refs, align 8
  %id = getelementptr %struct.util_est, %struct.util_est* %i16, i64 %indvars.iv, i32 0
  %i17 = load i32, i32* %id, align 4
  %insn_idx = getelementptr %struct.util_est, %struct.util_est* %i16, i64 %indvars.iv, i32 1
  %i18 = load i32, i32* %insn_idx, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i15, i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.263, i64 0, i64 0), i32 noundef %i17, i32 noundef %i18) #22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %i19 = load i32, i32* %acquired_refs, align 4
  %i20 = sext i32 %i19 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %i20
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  %.lcssa = phi i32 [ %i, %entry ], [ %i19, %for.body ]
  %tobool.not = icmp eq i32 %.lcssa, 0
  %cond = select i1 %tobool.not, i32 0, i32 -22
  ret i32 %cond
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_return_code(%struct.bpf_verifier_env* noundef %env) unnamed_addr #6 {
entry:
  %tn_buf = alloca [48 x i8], align 16
  %call = call { i64, i64 } @tnum_range(i64 noundef 0, i64 noundef 1) #22
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %type = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 2
  %i25 = load i32, i32* %type, align 4
  br label %NodeBlock21

NodeBlock21:                                      ; preds = %entry
  %Pivot22 = icmp slt i32 %i25, 15
  br i1 %Pivot22, label %NodeBlock5, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %i25, 23
  br i1 %Pivot20, label %NodeBlock11, label %NodeBlock17

NodeBlock17:                                      ; preds = %NodeBlock19
  %Pivot18 = icmp slt i32 %i25, 25
  br i1 %Pivot18, label %LeafBlock13, label %LeafBlock15

LeafBlock15:                                      ; preds = %NodeBlock17
  %SwitchLeaf16 = icmp eq i32 %i25, 25
  br i1 %SwitchLeaf16, label %sw.epilog, label %NewDefault

LeafBlock13:                                      ; preds = %NodeBlock17
  %SwitchLeaf14 = icmp eq i32 %i25, 23
  br i1 %SwitchLeaf14, label %sw.epilog, label %NewDefault

NodeBlock11:                                      ; preds = %NodeBlock19
  %Pivot12 = icmp slt i32 %i25, 18
  br i1 %Pivot12, label %LeafBlock7, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock11
  %SwitchLeaf10 = icmp eq i32 %i25, 18
  br i1 %SwitchLeaf10, label %sw.bb, label %NewDefault

LeafBlock7:                                       ; preds = %NodeBlock11
  %SwitchLeaf8 = icmp eq i32 %i25, 15
  br i1 %SwitchLeaf8, label %sw.epilog, label %NewDefault

NodeBlock5:                                       ; preds = %NodeBlock21
  %Pivot6 = icmp slt i32 %i25, 9
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %i25, 13
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %i25, 13
  br i1 %SwitchLeaf4, label %sw.epilog, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i25, 9
  br i1 %SwitchLeaf2, label %sw.epilog, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i32 %i25, 8
  br i1 %SwitchLeaf, label %sw.bb6, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock9
  %expected_attach_type = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 3
  %i26 = load i32, i32* %expected_attach_type, align 8
  %.off = add i32 %i26, -19
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %if.then, label %sw.epilog

if.then:                                          ; preds = %sw.bb
  %call5 = call { i64, i64 } @tnum_range(i64 noundef 1, i64 noundef 1) #22
  br label %sw.epilog

sw.bb6:                                           ; preds = %LeafBlock
  %expected_attach_type8 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 3
  %i27 = load i32, i32* %expected_attach_type8, align 8
  %cmp9 = icmp eq i32 %i27, 1
  br i1 %cmp9, label %if.then10, label %sw.epilog

if.then10:                                        ; preds = %sw.bb6
  %call12 = call { i64, i64 } @tnum_range(i64 noundef 0, i64 noundef 3) #22
  %call14 = call { i64, i64 } @tnum_range(i64 noundef 2, i64 noundef 3) #22
  %i28 = extractvalue { i64, i64 } %call14, 0
  %i29 = extractvalue { i64, i64 } %call14, 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then10, %sw.bb6, %if.then, %sw.bb, %LeafBlock1, %LeafBlock3, %LeafBlock7, %LeafBlock13, %LeafBlock15
  %call.pn = phi { i64, i64 } [ %call, %LeafBlock1 ], [ %call, %LeafBlock3 ], [ %call, %LeafBlock7 ], [ %call, %LeafBlock13 ], [ %call, %LeafBlock15 ], [ %call12, %if.then10 ], [ %call, %sw.bb6 ], [ %call5, %if.then ], [ %call, %sw.bb ]
  %enforce_attach_type_range.sroa.0.0 = phi i64 [ 0, %LeafBlock1 ], [ 0, %LeafBlock3 ], [ 0, %LeafBlock7 ], [ 0, %LeafBlock13 ], [ 0, %LeafBlock15 ], [ %i28, %if.then10 ], [ 0, %sw.bb6 ], [ 0, %if.then ], [ 0, %sw.bb ]
  %enforce_attach_type_range.sroa.4.0 = phi i64 [ -1, %LeafBlock1 ], [ -1, %LeafBlock3 ], [ -1, %LeafBlock7 ], [ -1, %LeafBlock13 ], [ -1, %LeafBlock15 ], [ %i29, %if.then10 ], [ -1, %sw.bb6 ], [ -1, %if.then ], [ -1, %sw.bb ]
  %range.sroa.5.0 = extractvalue { i64, i64 } %call.pn, 1
  %range.sroa.0.0 = extractvalue { i64, i64 } %call.pn, 0
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call17 = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %type18 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call17, i64 0, i32 0
  %i30 = load i32, i32* %type18, align 8
  %cmp19.not = icmp eq i32 %i30, 1
  br i1 %cmp19.not, label %if.end22, label %if.then20

if.then20:                                        ; preds = %sw.epilog
  %i31 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom = zext i32 %i30 to i64
  %arrayidx = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom
  %i32 = load i8*, i8** %arrayidx, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i31, i8* noundef getelementptr inbounds ([59 x i8], [59 x i8]* @.str.264, i64 0, i64 0), i8* noundef %i32) #22
  br label %return

if.end22:                                         ; preds = %sw.epilog
  %i33 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call17, i64 0, i32 5, i32 0
  %i34 = load i64, i64* %i33, align 8
  %i35 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call17, i64 0, i32 5, i32 1
  %i36 = load i64, i64* %i35, align 8
  %call23 = call zeroext i1 @tnum_in(i64 %range.sroa.0.0, i64 %range.sroa.5.0, i64 %i34, i64 %i36) #22
  br i1 %call23, label %if.end35, label %if.then24

if.then24:                                        ; preds = %if.end22
  %i37 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i37, i8* noundef getelementptr inbounds ([33 x i8], [33 x i8]* @.str.265, i64 0, i64 0)) #22
  %i38 = load i64, i64* %i35, align 8
  %call26 = call fastcc zeroext i1 @tnum_is_unknown(i64 %i38) #22
  br i1 %call26, label %if.else, label %if.then27

if.then27:                                        ; preds = %if.then24
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  %i39 = load i64, i64* %i33, align 8
  %call29 = call i32 @tnum_strn(i8* noundef %arraydecay, i64 noundef 48, i64 %i39, i64 %i38) #22
  call void (i8*, i8*, ...) @verbose(i8* noundef %i37, i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.266, i64 0, i64 0), i8* noundef %arraydecay) #22
  br label %if.end31

if.else:                                          ; preds = %if.then24
  call void (i8*, i8*, ...) @verbose(i8* noundef %i37, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.267, i64 0, i64 0)) #22
  br label %if.end31

if.end31:                                         ; preds = %if.else, %if.then27
  %arraydecay32 = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  %call33 = call i32 @tnum_strn(i8* noundef %arraydecay32, i64 noundef 48, i64 %range.sroa.0.0, i64 %range.sroa.5.0) #22
  call void (i8*, i8*, ...) @verbose(i8* noundef %i37, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.268, i64 0, i64 0), i8* noundef %arraydecay32) #22
  br label %return

if.end35:                                         ; preds = %if.end22
  %call36 = call fastcc zeroext i1 @tnum_is_unknown(i64 %enforce_attach_type_range.sroa.4.0) #22
  br i1 %call36, label %return, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end35
  %call38 = call zeroext i1 @tnum_in(i64 %enforce_attach_type_range.sroa.0.0, i64 %enforce_attach_type_range.sroa.4.0, i64 %i34, i64 %i36) #22
  br i1 %call38, label %if.then39, label %return

if.then39:                                        ; preds = %land.lhs.true
  %enforce_expected_attach_type = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 1
  %bf.load = load i16, i16* %enforce_expected_attach_type, align 2
  %bf.set = or i16 %bf.load, 512
  store i16 %bf.set, i16* %enforce_expected_attach_type, align 2
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock7, %LeafBlock9, %LeafBlock13, %LeafBlock15
  br label %return

return:                                           ; preds = %NewDefault, %if.then39, %land.lhs.true, %if.end35, %if.end31, %if.then20
  %retval.0 = phi i32 [ -22, %if.then20 ], [ -22, %if.end31 ], [ 0, %NewDefault ], [ 0, %if.then39 ], [ 0, %land.lhs.true ], [ 0, %if.end35 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @update_branch_counts(%struct.bpf_verifier_state* noundef %st) unnamed_addr #6 {
entry:
  %tobool.not2 = icmp eq %struct.bpf_verifier_state* %st, null
  br i1 %tobool.not2, label %while.end, label %while.body

while.body:                                       ; preds = %if.end39, %entry
  %st.addr.03 = phi %struct.bpf_verifier_state* [ %i5, %if.end39 ], [ %st, %entry ]
  %branches = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st.addr.03, i64 0, i32 2
  %i = load i32, i32* %branches, align 8
  %dec = add i32 %i, -1
  store i32 %dec, i32* %branches, align 8
  %cmp = icmp slt i32 %dec, 0
  %.b1 = load i1, i1* @update_branch_counts.__warned, align 1
  %lnot4 = xor i1 %.b1, true
  %i4 = select i1 %cmp, i1 %lnot4, i1 false
  br i1 %i4, label %if.then, label %if.end29

if.then:                                          ; preds = %while.body
  store i1 true, i1* @update_branch_counts.__warned, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([49 x i8], [49 x i8]* @.str.269, i64 0, i64 0), i32 noundef %dec) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 855, i32 2313, i64 12) #24, !srcloc !28
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 126) #24, !srcloc !29
  br label %if.end29

if.end29:                                         ; preds = %if.then, %while.body
  %tobool37.not = icmp eq i32 %dec, 0
  br i1 %tobool37.not, label %if.end39, label %while.end

if.end39:                                         ; preds = %if.end29
  %parent = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st.addr.03, i64 0, i32 1
  %i5 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %parent, align 8
  %tobool.not = icmp eq %struct.bpf_verifier_state* %i5, null
  br i1 %tobool.not, label %while.end, label %while.body

while.end:                                        ; preds = %if.end39, %if.end29, %entry
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_cond_jmp_op(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* nocapture noundef readonly %insn, i32* nocapture noundef %insn_idx) unnamed_addr #6 {
entry:
  %lo_reg0 = alloca %struct.bpf_reg_state, align 8
  %lo_reg1 = alloca %struct.bpf_reg_state, align 8
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %i124 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i124 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i125 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i126 = load i8, i8* %code, align 4
  %and = and i8 %i126, -16
  %i127 = add i8 %and, 47
  %i128 = icmp ult i8 %i127, 48
  br i1 %i128, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %conv3 = zext i8 %and to i32
  %i129 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i129, i8* noundef getelementptr inbounds ([33 x i8], [33 x i8]* @.str.270, i64 0, i64 0), i32 noundef %conv3) #22
  br label %return

if.end:                                           ; preds = %entry
  %i130 = and i8 %i126, 8
  %cmp12.not = icmp eq i8 %i130, 0
  br i1 %cmp12.not, label %if.else, label %if.then14

if.then14:                                        ; preds = %if.end
  %imm = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i131 = load i32, i32* %imm, align 4
  %cmp15.not = icmp eq i32 %i131, 0
  br i1 %cmp15.not, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.then14
  %i132 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i132, i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.271, i64 0, i64 0)) #22
  br label %return

if.end18:                                         ; preds = %if.then14
  %src_reg19 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load = load i8, i8* %src_reg19, align 1
  %bf.lshr = lshr i8 %bf.load, 4
  %conv20 = zext i8 %bf.lshr to i32
  %call = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv20, i32 noundef 0) #22
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end33, label %return

if.end33:                                         ; preds = %if.end18
  %bf.load24 = load i8, i8* %src_reg19, align 1
  %bf.lshr25 = lshr i8 %bf.load24, 4
  %idxprom37 = zext i8 %bf.lshr25 to i64
  %arrayidx38 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i125, i64 0, i32 0, i64 %idxprom37
  br label %if.end47

if.else:                                          ; preds = %if.end
  %src_reg39 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load40 = load i8, i8* %src_reg39, align 1
  %cmp43.not = icmp ult i8 %bf.load40, 16
  br i1 %cmp43.not, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.else
  %i134 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i134, i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.271, i64 0, i64 0)) #22
  br label %return

if.end47:                                         ; preds = %if.else, %if.end33
  %src_reg.0 = phi %struct.bpf_reg_state* [ %arrayidx38, %if.end33 ], [ null, %if.else ]
  %dst_reg48 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load49 = load i8, i8* %dst_reg48, align 1
  %bf.clear = and i8 %bf.load49, 15
  %conv50 = zext i8 %bf.clear to i32
  %call51 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv50, i32 noundef 0) #22
  %tobool52.not = icmp eq i32 %call51, 0
  br i1 %tobool52.not, label %if.end54, label %return

if.end54:                                         ; preds = %if.end47
  %bf.load56 = load i8, i8* %dst_reg48, align 1
  %bf.clear57 = and i8 %bf.load56, 15
  %idxprom58 = zext i8 %bf.clear57 to i64
  %arrayidx59 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i125, i64 0, i32 0, i64 %idxprom58
  %i135 = load i8, i8* %code, align 4
  %conv61 = zext i8 %i135 to i32
  %and62 = and i32 %conv61, 7
  %cmp63 = icmp eq i32 %and62, 6
  %and67 = and i32 %conv61, 8
  %cmp68 = icmp eq i32 %and67, 0
  br i1 %cmp68, label %if.then70, label %if.else75

if.then70:                                        ; preds = %if.end54
  %imm71 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i136 = load i32, i32* %imm71, align 4
  %conv72 = sext i32 %i136 to i64
  br label %if.end85.sink.split

if.else75:                                        ; preds = %if.end54
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg.0, i64 0, i32 0
  %i137 = load i32, i32* %type, align 8
  %cmp76 = icmp eq i32 %i137, 1
  br i1 %cmp76, label %land.lhs.true, label %if.end85

land.lhs.true:                                    ; preds = %if.else75
  %i138 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg.0, i64 0, i32 5, i32 1
  %i139 = load i64, i64* %i138, align 8
  %call78 = call fastcc zeroext i1 @tnum_is_const(i64 %i139) #22
  br i1 %call78, label %if.then80, label %if.end85

if.then80:                                        ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg.0, i64 0, i32 5, i32 0
  %i140 = load i64, i64* %value, align 8
  br label %if.end85.sink.split

if.end85.sink.split:                              ; preds = %if.then80, %if.then70
  %.sink = phi i64 [ %i140, %if.then80 ], [ %conv72, %if.then70 ]
  %call83 = call fastcc i32 @is_branch_taken(%struct.bpf_reg_state* noundef %arrayidx59, i64 noundef %.sink, i8 noundef zeroext %and, i1 noundef zeroext %cmp63) #22
  br label %if.end85

if.end85:                                         ; preds = %if.end85.sink.split, %land.lhs.true, %if.else75
  %pred.0 = phi i32 [ -1, %land.lhs.true ], [ -1, %if.else75 ], [ %call83, %if.end85.sink.split ]
  %cmp86 = icmp sgt i32 %pred.0, -1
  br i1 %cmp86, label %if.then88, label %if.end111

if.then88:                                        ; preds = %if.end85
  %bf.load90 = load i8, i8* %dst_reg48, align 1
  %bf.clear91 = and i8 %bf.load90, 15
  %conv92 = zext i8 %bf.clear91 to i32
  %call93 = call fastcc i32 @mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv92) #22
  %i141 = load i8, i8* %code, align 4
  %i142 = and i8 %i141, 8
  %cmp97 = icmp eq i8 %i142, 0
  %tobool100 = icmp ne i32 %call93, 0
  %or.cond1 = select i1 %cmp97, i1 true, i1 %tobool100
  br i1 %or.cond1, label %if.end107, label %if.then101

if.then101:                                       ; preds = %if.then88
  %bf.load103 = load i8, i8* %dst_reg48, align 1
  %bf.lshr104 = lshr i8 %bf.load103, 4
  %conv105 = zext i8 %bf.lshr104 to i32
  %call106 = call fastcc i32 @mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv105) #22
  br label %if.end107

if.end107:                                        ; preds = %if.then101, %if.then88
  %err.0 = phi i32 [ %call93, %if.then88 ], [ %call106, %if.then101 ]
  %tobool108.not = icmp eq i32 %err.0, 0
  br i1 %tobool108.not, label %if.end111, label %return

if.end111:                                        ; preds = %if.end107, %if.end85
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end111
  %Pivot = icmp slt i32 %pred.0, 1
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %pred.0, 1
  br i1 %SwitchLeaf2, label %if.then114, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %pred.0, 0
  br i1 %SwitchLeaf, label %return, label %NewDefault

if.then114:                                       ; preds = %LeafBlock1
  %off = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i143 = load i16, i16* %off, align 2
  %conv115 = sext i16 %i143 to i32
  %i144 = load i32, i32* %insn_idx, align 4
  %add = add i32 %i144, %conv115
  store i32 %add, i32* %insn_idx, align 4
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end121

if.end121:                                        ; preds = %NewDefault
  %i145 = load i32, i32* %insn_idx, align 4
  %off122 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i146 = load i16, i16* %off122, align 2
  %conv123 = sext i16 %i146 to i32
  %add124 = add i32 %i145, 1
  %add125 = add i32 %add124, %conv123
  %call126 = call fastcc %struct.bpf_verifier_state* @push_stack(%struct.bpf_verifier_env* noundef %env, i32 noundef %add125, i32 noundef %i145) #22
  %tobool127.not = icmp eq %struct.bpf_verifier_state* %call126, null
  br i1 %tobool127.not, label %return, label %if.end129

if.end129:                                        ; preds = %if.end121
  %curframe131 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %call126, i64 0, i32 4
  %i147 = load i32, i32* %curframe131, align 8
  %idxprom132 = zext i32 %i147 to i64
  %arrayidx133 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %call126, i64 0, i32 0, i64 %idxprom132
  %i148 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx133, align 8
  %i149 = load i8, i8* %code, align 4
  %i150 = and i8 %i149, 8
  %cmp139.not = icmp eq i8 %i150, 0
  br i1 %cmp139.not, label %if.else232, label %if.then141

if.then141:                                       ; preds = %if.end129
  %bf.load144 = load i8, i8* %dst_reg48, align 1
  %bf.lshr145 = lshr i8 %bf.load144, 4
  %idxprom146 = zext i8 %bf.lshr145 to i64
  %arrayidx147 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i125, i64 0, i32 0, i64 %idxprom146
  %i151 = bitcast %struct.bpf_reg_state* %lo_reg0 to i8*
  %i152 = bitcast %struct.bpf_reg_state* %arrayidx59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i151, i8* noundef align 8 dereferenceable(104) %i152, i64 104, i1 false)
  %i153 = bitcast %struct.bpf_reg_state* %lo_reg1 to i8*
  %i154 = bitcast %struct.bpf_reg_state* %arrayidx147 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i153, i8* noundef align 8 dereferenceable(104) %i154, i64 104, i1 false)
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg0, i32 noundef 4) #22
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef nonnull %lo_reg1, i32 noundef 4) #22
  %type148 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx59, i64 0, i32 0
  %i155 = load i32, i32* %type148, align 8
  %cmp149 = icmp eq i32 %i155, 1
  br i1 %cmp149, label %land.lhs.true151, label %if.end246

land.lhs.true151:                                 ; preds = %if.then141
  %type152 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx147, i64 0, i32 0
  %i156 = load i32, i32* %type152, align 8
  %cmp153 = icmp eq i32 %i156, 1
  br i1 %cmp153, label %if.then155, label %if.end246

if.then155:                                       ; preds = %land.lhs.true151
  %i157 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i125, i64 0, i32 0, i64 %idxprom146, i32 5, i32 1
  %i158 = load i64, i64* %i157, align 8
  %call157 = call fastcc zeroext i1 @tnum_is_const(i64 %i158) #22
  br i1 %call157, label %if.then166, label %lor.lhs.false159

lor.lhs.false159:                                 ; preds = %if.then155
  br i1 %cmp63, label %land.lhs.true162, label %if.else179

land.lhs.true162:                                 ; preds = %lor.lhs.false159
  %i159 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 1
  %i160 = load i64, i64* %i159, align 8
  %call164 = call fastcc zeroext i1 @tnum_is_const(i64 %i160) #22
  br i1 %call164, label %if.then166, label %if.else179

if.then166:                                       ; preds = %land.lhs.true162, %if.then155
  %bf.load168 = load i8, i8* %dst_reg48, align 1
  %bf.clear169 = and i8 %bf.load168, 15
  %idxprom170 = zext i8 %bf.clear169 to i64
  %arrayidx171 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i148, i64 0, i32 0, i64 %idxprom170
  %value175 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg1, i64 0, i32 5, i32 0
  %value177 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i125, i64 0, i32 0, i64 %idxprom146, i32 5, i32 0
  %cond.in = select i1 %cmp63, i64* %value175, i64* %value177
  %cond = load i64, i64* %cond.in, align 8
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %arrayidx171, %struct.bpf_reg_state* noundef %arrayidx59, i64 noundef %cond, i8 noundef zeroext %and, i1 noundef zeroext %cmp63) #22
  br label %if.end246

if.else179:                                       ; preds = %land.lhs.true162, %lor.lhs.false159
  %i161 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i125, i64 0, i32 0, i64 %idxprom58, i32 5, i32 1
  %i162 = load i64, i64* %i161, align 8
  %call181 = call fastcc zeroext i1 @tnum_is_const(i64 %i162) #22
  br i1 %call181, label %if.then190, label %lor.lhs.false183

lor.lhs.false183:                                 ; preds = %if.else179
  br i1 %cmp63, label %land.lhs.true186, label %land.lhs.true209.critedge

land.lhs.true186:                                 ; preds = %lor.lhs.false183
  %i163 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 1
  %i164 = load i64, i64* %i163, align 8
  %call188 = call fastcc zeroext i1 @tnum_is_const(i64 %i164) #22
  br i1 %call188, label %if.then190, label %if.end246

if.then190:                                       ; preds = %land.lhs.true186, %if.else179
  %bf.load192 = load i8, i8* %dst_reg48, align 1
  %bf.lshr193 = lshr i8 %bf.load192, 4
  %idxprom194 = zext i8 %bf.lshr193 to i64
  %arrayidx195 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i148, i64 0, i32 0, i64 %idxprom194
  %value200 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %lo_reg0, i64 0, i32 5, i32 0
  %value203 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i125, i64 0, i32 0, i64 %idxprom58, i32 5, i32 0
  %cond205.in = select i1 %cmp63, i64* %value200, i64* %value203
  %cond205 = load i64, i64* %cond205.in, align 8
  call fastcc void @reg_set_min_max_inv(%struct.bpf_reg_state* noundef %arrayidx195, %struct.bpf_reg_state* noundef %arrayidx147, i64 noundef %cond205, i8 noundef zeroext %and, i1 noundef zeroext %cmp63) #22
  br label %if.end246

land.lhs.true209.critedge:                        ; preds = %lor.lhs.false183
  %.old = and i8 %i126, -80
  %.old123 = icmp eq i8 %.old, 16
  br i1 %.old123, label %if.then217, label %if.end246

if.then217:                                       ; preds = %land.lhs.true209.critedge
  %bf.load219 = load i8, i8* %dst_reg48, align 1
  %bf.lshr220 = lshr i8 %bf.load219, 4
  %idxprom221 = zext i8 %bf.lshr220 to i64
  %arrayidx222 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i148, i64 0, i32 0, i64 %idxprom221
  %bf.clear225 = and i8 %bf.load219, 15
  %idxprom226 = zext i8 %bf.clear225 to i64
  %arrayidx227 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i148, i64 0, i32 0, i64 %idxprom226
  call fastcc void @reg_combine_min_max(%struct.bpf_reg_state* noundef %arrayidx222, %struct.bpf_reg_state* noundef %arrayidx227, %struct.bpf_reg_state* noundef %arrayidx147, %struct.bpf_reg_state* noundef %arrayidx59, i8 noundef zeroext %and) #22
  br label %if.end246

if.else232:                                       ; preds = %if.end129
  %type233 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx59, i64 0, i32 0
  %i165 = load i32, i32* %type233, align 8
  %cmp234 = icmp eq i32 %i165, 1
  br i1 %cmp234, label %if.then236, label %if.end246

if.then236:                                       ; preds = %if.else232
  %bf.load238 = load i8, i8* %dst_reg48, align 1
  %bf.clear239 = and i8 %bf.load238, 15
  %idxprom240 = zext i8 %bf.clear239 to i64
  %arrayidx241 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i148, i64 0, i32 0, i64 %idxprom240
  %imm242 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i166 = load i32, i32* %imm242, align 4
  %conv243 = sext i32 %i166 to i64
  call fastcc void @reg_set_min_max(%struct.bpf_reg_state* noundef %arrayidx241, %struct.bpf_reg_state* noundef %arrayidx59, i64 noundef %conv243, i8 noundef zeroext %and, i1 noundef zeroext %cmp63) #22
  br label %if.end246

if.end246:                                        ; preds = %if.then236, %if.else232, %if.then217, %land.lhs.true209.critedge, %if.then190, %land.lhs.true186, %if.then166, %land.lhs.true151, %if.then141
  br i1 %cmp63, label %if.else285, label %land.lhs.true248

land.lhs.true248:                                 ; preds = %if.end246
  %i167 = load i8, i8* %code, align 4
  %i168 = and i8 %i167, 8
  %cmp252 = icmp eq i8 %i168, 0
  br i1 %cmp252, label %land.lhs.true254, label %if.else285

land.lhs.true254:                                 ; preds = %land.lhs.true248
  %imm255 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i169 = load i32, i32* %imm255, align 4
  %cmp256 = icmp eq i32 %i169, 0
  br i1 %cmp256, label %land.lhs.true258, label %if.else285

land.lhs.true258:                                 ; preds = %land.lhs.true254
  %cmp260 = icmp eq i8 %and, 16
  %cmp264 = icmp eq i8 %and, 80
  %i170 = and i8 %i126, -80
  %i171 = icmp eq i8 %i170, 16
  br i1 %i171, label %land.lhs.true266, label %if.else285

land.lhs.true266:                                 ; preds = %land.lhs.true258
  %type267 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx59, i64 0, i32 0
  %i172 = load i32, i32* %type267, align 8
  %call268 = call fastcc zeroext i1 @reg_type_may_be_null(i32 noundef %i172) #22
  br i1 %call268, label %if.then270, label %if.else285

if.then270:                                       ; preds = %land.lhs.true266
  %bf.load272 = load i8, i8* %dst_reg48, align 1
  %bf.clear273 = and i8 %bf.load272, 15
  %conv274 = zext i8 %bf.clear273 to i32
  call fastcc void @mark_ptr_or_null_regs(%struct.bpf_verifier_state* noundef %i, i32 noundef %conv274, i1 noundef zeroext %cmp264) #22
  %bf.load279 = load i8, i8* %dst_reg48, align 1
  %bf.clear280 = and i8 %bf.load279, 15
  %conv281 = zext i8 %bf.clear280 to i32
  call fastcc void @mark_ptr_or_null_regs(%struct.bpf_verifier_state* noundef nonnull %call126, i32 noundef %conv281, i1 noundef zeroext %cmp260) #22
  br label %if.end305

if.else285:                                       ; preds = %land.lhs.true266, %land.lhs.true258, %land.lhs.true254, %land.lhs.true248, %if.end246
  %bf.load287 = load i8, i8* %dst_reg48, align 1
  %bf.lshr288 = lshr i8 %bf.load287, 4
  %idxprom289 = zext i8 %bf.lshr288 to i64
  %arrayidx290 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i125, i64 0, i32 0, i64 %idxprom289
  %insn.idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %insn.idx.val = load i8, i8* %insn.idx, align 4
  call fastcc void @try_match_pkt_pointers(i8 %insn.idx.val, %struct.bpf_reg_state* noundef %arrayidx59, %struct.bpf_reg_state* noundef %arrayidx290, %struct.bpf_verifier_state* noundef %i, %struct.bpf_verifier_state* noundef nonnull %call126) #22
  br label %if.end305

if.end305:                                        ; preds = %if.else285, %if.then270
  %level = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i174 = load i32, i32* %level, align 8
  %and306 = and i32 %i174, 3
  %tobool307.not = icmp eq i32 %and306, 0
  br i1 %tobool307.not, label %return, label %if.then308

if.then308:                                       ; preds = %if.end305
  %i175 = load i32, i32* %curframe, align 8
  %idxprom311 = zext i32 %i175 to i64
  %arrayidx312 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom311
  %i176 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx312, align 8
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i176) #22
  br label %return

return:                                           ; preds = %if.then308, %if.end305, %if.end121, %if.then114, %LeafBlock, %if.end107, %if.end47, %if.then45, %if.end18, %if.then17, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ -22, %if.then17 ], [ 0, %if.then114 ], [ -22, %if.then45 ], [ %call, %if.end18 ], [ %call51, %if.end47 ], [ %err.0, %if.end107 ], [ %pred.0, %LeafBlock ], [ -14, %if.end121 ], [ 0, %if.then308 ], [ 0, %if.end305 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_ld_abs(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i = load i8, i8* %code, align 4
  %i39 = and i8 %i, -32
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i40 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %type = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i40, i64 0, i32 2
  %i41 = load i32, i32* %type, align 4
  %call2 = call fastcc zeroext i1 @may_access_skb(i32 noundef %i41) #22
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i42 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i42, i8* noundef getelementptr inbounds ([65 x i8], [65 x i8]* @.str.273, i64 0, i64 0)) #22
  br label %return

if.end:                                           ; preds = %entry
  %ops = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 3
  %i43 = load %struct.bpf_verifier_ops*, %struct.bpf_verifier_ops** %ops, align 8
  %gen_ld_abs = getelementptr inbounds %struct.bpf_verifier_ops, %struct.bpf_verifier_ops* %i43, i64 0, i32 3
  %i44 = load i32 (%struct.bpf_insn*, %struct.bpf_insn*)*, i32 (%struct.bpf_insn*, %struct.bpf_insn*)** %gen_ld_abs, align 8
  %tobool.not = icmp eq i32 (%struct.bpf_insn*, %struct.bpf_insn*)* %i44, null
  br i1 %tobool.not, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %i45 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i45, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0)) #22
  br label %return

if.end4:                                          ; preds = %if.end
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i46 = load i32, i32* %subprog_cnt, align 8
  %cmp = icmp ugt i32 %i46, 1
  br i1 %cmp, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  %i47 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i47, i8* noundef getelementptr inbounds ([69 x i8], [69 x i8]* @.str.275, i64 0, i64 0)) #22
  br label %return

if.end7:                                          ; preds = %if.end4
  %dst_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load = load i8, i8* %dst_reg, align 1
  %bf.clear = and i8 %bf.load, 15
  %cmp9.not = icmp eq i8 %bf.clear, 0
  br i1 %cmp9.not, label %lor.lhs.false, label %if.then28

lor.lhs.false:                                    ; preds = %if.end7
  %off = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i48 = load i16, i16* %off, align 2
  %cmp12.not = icmp ne i16 %i48, 0
  %i49 = and i8 %i, 24
  %cmp18 = icmp eq i8 %i49, 24
  %or.cond36 = select i1 %cmp12.not, i1 true, i1 %cmp18
  br i1 %or.cond36, label %if.then28, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %cmp22 = icmp ne i8 %i39, 32
  %cmp26.not = icmp ult i8 %bf.load, 16
  %or.cond = select i1 %cmp22, i1 true, i1 %cmp26.not
  br i1 %or.cond, label %if.end29, label %if.then28

if.then28:                                        ; preds = %lor.lhs.false20, %lor.lhs.false, %if.end7
  %i50 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i50, i8* noundef getelementptr inbounds ([39 x i8], [39 x i8]* @.str.276, i64 0, i64 0)) #22
  br label %return

if.end29:                                         ; preds = %lor.lhs.false20
  %call30 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 6, i32 noundef 0) #22
  %tobool31.not = icmp eq i32 %call30, 0
  br i1 %tobool31.not, label %if.end33, label %return

if.end33:                                         ; preds = %if.end29
  %call34 = call fastcc i32 @check_reference_leak(%struct.bpf_verifier_env* noundef %env) #22
  %tobool35.not = icmp eq i32 %call34, 0
  br i1 %tobool35.not, label %if.end37, label %if.then36

if.then36:                                        ; preds = %if.end33
  %i51 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i51, i8* noundef getelementptr inbounds ([57 x i8], [57 x i8]* @.str.277, i64 0, i64 0)) #22
  br label %return

if.end37:                                         ; preds = %if.end33
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i52 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %active_spin_lock = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i52, i64 0, i32 5
  %i53 = load i32, i32* %active_spin_lock, align 4
  %tobool38.not = icmp eq i32 %i53, 0
  br i1 %tobool38.not, label %if.end40, label %if.then39

if.then39:                                        ; preds = %if.end37
  %i54 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i54, i8* noundef getelementptr inbounds ([64 x i8], [64 x i8]* @.str.278, i64 0, i64 0)) #22
  br label %return

if.end40:                                         ; preds = %if.end37
  %type41 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 6, i32 0
  %i55 = load i32, i32* %type41, align 8
  %cmp42.not = icmp eq i32 %i55, 2
  br i1 %cmp42.not, label %if.end45, label %if.then44

if.then44:                                        ; preds = %if.end40
  %i56 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i56, i8* noundef getelementptr inbounds ([52 x i8], [52 x i8]* @.str.279, i64 0, i64 0)) #22
  br label %return

if.end45:                                         ; preds = %if.end40
  %cmp47 = icmp eq i8 %i39, 64
  br i1 %cmp47, label %if.then49, label %for.body

if.then49:                                        ; preds = %if.end45
  %bf.load51 = load i8, i8* %dst_reg, align 1
  %bf.lshr52 = lshr i8 %bf.load51, 4
  %conv53 = zext i8 %bf.lshr52 to i32
  %call54 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv53, i32 noundef 0) #22
  %tobool55.not = icmp eq i32 %call54, 0
  br i1 %tobool55.not, label %for.body, label %return

for.body:                                         ; preds = %if.then49, %if.end45
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef 0) #22
  %call64 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 0, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef 1) #22
  %call64.1 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 1, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef 2) #22
  %call64.2 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 2, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef 3) #22
  %call64.3 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 3, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef 4) #22
  %call64.4 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 4, i32 noundef 2) #22
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef 5) #22
  %call64.5 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef 5, i32 noundef 2) #22
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call, i32 noundef 0) #22
  %insn_idx = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 0
  %i57 = load i32, i32* %insn_idx, align 8
  %add = add i32 %i57, 1
  %subreg_def = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 12
  store i32 %add, i32* %subreg_def, align 4
  br label %return

return:                                           ; preds = %for.body, %if.then49, %if.then44, %if.then39, %if.then36, %if.end29, %if.then28, %if.then6, %if.then3, %if.then
  %retval.0 = phi i32 [ -22, %if.then6 ], [ -22, %if.then28 ], [ %call34, %if.then36 ], [ -22, %if.then39 ], [ -22, %if.then44 ], [ 0, %for.body ], [ -22, %if.then3 ], [ -22, %if.then ], [ %call30, %if.end29 ], [ %call54, %if.then49 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_ld_imm(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #6 {
entry:
  %env.idx3 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 0
  %env.idx3.val = load i32, i32* %env.idx3, align 8
  %env.idx4 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %env.idx4.val = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %env.idx4, align 8
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(i32 %env.idx3.val, %struct.bpf_insn_aux_data* %env.idx4.val) #22
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call1 = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i = load i8, i8* %code, align 4
  %i35 = and i8 %i, 24
  %cmp.not = icmp eq i8 %i35, 24
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i36 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i36, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.280, i64 0, i64 0)) #22
  br label %return

if.end:                                           ; preds = %entry
  %off = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 2
  %i37 = load i16, i16* %off, align 2
  %cmp4.not = icmp eq i16 %i37, 0
  br i1 %cmp4.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  %i38 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i38, i8* noundef getelementptr inbounds ([35 x i8], [35 x i8]* @.str.281, i64 0, i64 0)) #22
  br label %return

if.end7:                                          ; preds = %if.end
  %dst_reg = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load = load i8, i8* %dst_reg, align 1
  %bf.clear = and i8 %bf.load, 15
  %conv8 = zext i8 %bf.clear to i32
  %call9 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv8, i32 noundef 1) #22
  %tobool.not = icmp eq i32 %call9, 0
  br i1 %tobool.not, label %if.end11, label %return

if.end11:                                         ; preds = %if.end7
  %bf.load12 = load i8, i8* %dst_reg, align 1
  %cmp14 = icmp ult i8 %bf.load12, 16
  br i1 %cmp14, label %if.then16, label %if.end29

if.then16:                                        ; preds = %if.end11
  %imm17 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn, i64 1, i32 3
  %i39 = load i32, i32* %imm17, align 4
  %conv1834 = zext i32 %i39 to i64
  %shl = shl nuw i64 %conv1834, 32
  %imm19 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i40 = load i32, i32* %imm19, align 4
  %conv20 = zext i32 %i40 to i64
  %or = or i64 %shl, %conv20
  %bf.clear23 = and i8 %bf.load12, 15
  %idxprom = zext i8 %bf.clear23 to i64
  %type = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call1, i64 %idxprom, i32 0
  store i32 1, i32* %type, align 8
  %bf.load25 = load i8, i8* %dst_reg, align 1
  %bf.clear26 = and i8 %bf.load25, 15
  %idxprom27 = zext i8 %bf.clear26 to i64
  %arrayidx28 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call1, i64 %idxprom27
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %arrayidx28, i64 noundef %or) #22
  br label %return

if.end29:                                         ; preds = %if.end11
  %map_index = bitcast %struct.bpf_insn_aux_data* %call to i32*
  %i41 = load i32, i32* %map_index, align 8
  %idxprom30 = zext i32 %i41 to i64
  %arrayidx31 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 11, i64 %idxprom30
  %i42 = load %struct.bpf_map*, %struct.bpf_map** %arrayidx31, align 8
  %bf.clear34 = and i8 %bf.load12, 15
  %conv35 = zext i8 %bf.clear34 to i32
  call fastcc void @mark_reg_known_zero(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %call1, i32 noundef %conv35) #22
  %bf.load37 = load i8, i8* %dst_reg, align 1
  %bf.clear38 = and i8 %bf.load37, 15
  %idxprom39 = zext i8 %bf.clear38 to i64
  %map_ptr = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call1, i64 %idxprom39, i32 1, i32 0
  store %struct.bpf_map* %i42, %struct.bpf_map** %map_ptr, align 8
  %bf.load42 = load i8, i8* %dst_reg, align 1
  %bf.lshr43 = lshr i8 %bf.load42, 4
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end29
  %Pivot = icmp ult i8 %bf.load42, 32
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %bf.lshr43, 2
  br i1 %SwitchLeaf2, label %if.then47, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %bf.lshr43, 1
  br i1 %SwitchLeaf, label %if.then74, label %NewDefault

if.then47:                                        ; preds = %LeafBlock1
  %i43 = bitcast %struct.bpf_insn_aux_data* %call to %struct.util_est*
  %bf.clear50 = and i8 %bf.load42, 15
  %idxprom51 = zext i8 %bf.clear50 to i64
  %type53 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call1, i64 %idxprom51, i32 0
  store i32 4, i32* %type53, align 8
  %map_off = getelementptr inbounds %struct.util_est, %struct.util_est* %i43, i64 0, i32 1
  %i44 = load i32, i32* %map_off, align 4
  %bf.load55 = load i8, i8* %dst_reg, align 1
  %bf.clear56 = and i8 %bf.load55, 15
  %idxprom57 = zext i8 %bf.clear56 to i64
  %off59 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call1, i64 %idxprom57, i32 2
  store i32 %i44, i32* %off59, align 8
  %i42.idx = getelementptr %struct.bpf_map, %struct.bpf_map* %i42, i64 0, i32 8
  %i42.idx.val = load i32, i32* %i42.idx, align 4
  %call60 = call fastcc zeroext i1 @map_value_has_spin_lock(i32 %i42.idx.val) #22
  br i1 %call60, label %if.then61, label %return

if.then61:                                        ; preds = %if.then47
  %id_gen = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i45 = load i32, i32* %id_gen, align 4
  %inc = add i32 %i45, 1
  store i32 %inc, i32* %id_gen, align 4
  %bf.load63 = load i8, i8* %dst_reg, align 1
  %bf.clear64 = and i8 %bf.load63, 15
  %idxprom65 = zext i8 %bf.clear64 to i64
  %id = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call1, i64 %idxprom65, i32 3
  store i32 %inc, i32* %id, align 4
  br label %return

if.then74:                                        ; preds = %LeafBlock
  %bf.clear77 = and i8 %bf.load42, 15
  %idxprom78 = zext i8 %bf.clear77 to i64
  %type80 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call1, i64 %idxprom78, i32 0
  store i32 3, i32* %type80, align 8
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.else81

if.else81:                                        ; preds = %NewDefault
  %i46 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i46, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0)) #22
  br label %return

return:                                           ; preds = %if.else81, %if.then74, %if.then61, %if.then47, %if.then16, %if.end7, %if.then6, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ -22, %if.then6 ], [ 0, %if.then16 ], [ -22, %if.else81 ], [ %call9, %if.end7 ], [ 0, %if.then47 ], [ 0, %if.then61 ], [ 0, %if.then74 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @mark_reg_known_zero(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef writeonly %regs, i32 noundef %regno) unnamed_addr #6 {
entry:
  %cmp = icmp ugt i32 %regno, 10
  br i1 %cmp, label %do.body7, label %if.end19

do.body7:                                         ; preds = %entry
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 973, i32 2305, i64 12) #24, !srcloc !30
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 127) #24, !srcloc !31
  %i = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.67, i64 0, i64 0), i32 noundef %regno) #22
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %regs) #22
  %add.ptr.1 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 1
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.1) #22
  %add.ptr.2 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 2
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.2) #22
  %add.ptr.3 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 3
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.3) #22
  %add.ptr.4 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 4
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.4) #22
  %add.ptr.5 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 5
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.5) #22
  %add.ptr.6 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 6
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.6) #22
  %add.ptr.7 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 7
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.7) #22
  %add.ptr.8 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 8
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.8) #22
  %add.ptr.9 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 9
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.9) #22
  %add.ptr.10 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 10
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.10) #22
  br label %return

if.end19:                                         ; preds = %entry
  %idx.ext20 = zext i32 %regno to i64
  %add.ptr21 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 %idx.ext20
  call fastcc void @__mark_reg_known_zero(%struct.bpf_reg_state* noundef %add.ptr21) #22
  br label %return

return:                                           ; preds = %if.end19, %do.body7
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @map_value_has_spin_lock(i32 %map.0.8.val) unnamed_addr #7 {
entry:
  %cmp = icmp sgt i32 %map.0.8.val, -1
  ret i1 %cmp
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* nocapture noundef writeonly %reg) unnamed_addr #12 {
entry:
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %reg) #22
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  store i32 0, i32* %type, align 8
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn writeonly
define internal fastcc void @__mark_reg_known_zero(%struct.bpf_reg_state* nocapture noundef writeonly %reg) unnamed_addr #13 {
entry:
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %reg, i64 noundef 0) #22
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @may_access_skb(i32 noundef %type) unnamed_addr #2 {
entry:
  %switch.tableidx = add i32 %type, -1
  %i = icmp ult i32 %switch.tableidx, 4
  %switch.cast = trunc i32 %switch.tableidx to i4
  %switch.downshift = lshr i4 -3, %switch.cast
  %i1 = and i4 %switch.downshift, 1
  %switch.masked = icmp ne i4 %i1, 0
  %retval.0 = select i1 %i, i1 %switch.masked, i1 false
  ret i1 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef writeonly %regs, i32 noundef %regno) unnamed_addr #6 {
entry:
  %cmp = icmp ugt i32 %regno, 10
  br i1 %cmp, label %do.body7, label %if.end19

do.body7:                                         ; preds = %entry
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 1122, i32 2305, i64 12) #24, !srcloc !32
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 145) #24, !srcloc !33
  %i = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([29 x i8], [29 x i8]* @.str.66, i64 0, i64 0), i32 noundef %regno) #22
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %regs) #22
  %add.ptr.1 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 1
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.1) #22
  %add.ptr.2 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 2
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.2) #22
  %add.ptr.3 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 3
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.3) #22
  %add.ptr.4 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 4
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.4) #22
  %add.ptr.5 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 5
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.5) #22
  %add.ptr.6 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 6
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.6) #22
  %add.ptr.7 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 7
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.7) #22
  %add.ptr.8 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 8
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.8) #22
  br label %return

if.end19:                                         ; preds = %entry
  %idx.ext20 = zext i32 %regno to i64
  br label %return

return:                                           ; preds = %if.end19, %do.body7
  %.sink = phi i64 [ 9, %do.body7 ], [ %idx.ext20, %if.end19 ]
  %add.ptr.9 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 %.sink
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.9) #22
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef writeonly %regs, i32 noundef %regno) unnamed_addr #6 {
entry:
  %cmp = icmp ugt i32 %regno, 10
  br i1 %cmp, label %do.body7, label %if.end19

do.body7:                                         ; preds = %entry
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 1099, i32 2305, i64 12) #24, !srcloc !34
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 144) #24, !srcloc !35
  %i = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([28 x i8], [28 x i8]* @.str.123, i64 0, i64 0), i32 noundef %regno) #22
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %regs) #22
  %add.ptr.1 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 1
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.1) #22
  %add.ptr.2 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 2
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.2) #22
  %add.ptr.3 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 3
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.3) #22
  %add.ptr.4 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 4
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.4) #22
  %add.ptr.5 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 5
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.5) #22
  %add.ptr.6 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 6
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.6) #22
  %add.ptr.7 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 7
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.7) #22
  %add.ptr.8 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 8
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.8) #22
  %add.ptr.9 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 9
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %add.ptr.9) #22
  br label %return

if.end19:                                         ; preds = %entry
  %idx.ext20 = zext i32 %regno to i64
  %add.ptr21 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 %idx.ext20
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %add.ptr21) #22
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i14 = load i32, i32* %subprog_cnt, align 8
  %cmp22 = icmp ugt i32 %i14, 1
  br i1 %cmp22, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end19
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i15 = load i8, i8* %allow_ptr_leaks, align 8
  %i16 = and i8 %i15, 1
  %i17 = xor i8 %i16, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end19
  %i18 = phi i8 [ 1, %if.end19 ], [ %i17, %lor.rhs ]
  %precise = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 %idx.ext20, i32 14
  store i8 %i18, i8* %precise, align 4
  br label %return

return:                                           ; preds = %lor.end, %do.body7
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno) unnamed_addr #6 {
entry:
  %call = call fastcc i32 @__mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef -1) #22
  ret i32 %call
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc %struct.bpf_verifier_state* @push_stack(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i32 noundef %prev_insn_idx) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %call = call fastcc i8* @kzalloc(i64 noundef 136) #22
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %err28, label %if.end

if.end:                                           ; preds = %entry
  %insn_idx1 = getelementptr inbounds i8, i8* %call, i64 120
  %i21 = bitcast i8* %insn_idx1 to i32*
  store i32 %insn_idx, i32* %i21, align 8
  %prev_insn_idx2 = getelementptr inbounds i8, i8* %call, i64 124
  %i22 = bitcast i8* %prev_insn_idx2 to i32*
  store i32 %prev_insn_idx, i32* %i22, align 4
  %head = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 4
  %i23 = load %struct.bpf_verifier_stack_elem*, %struct.bpf_verifier_stack_elem** %head, align 8
  %next = getelementptr inbounds i8, i8* %call, i64 128
  %i24 = bitcast i8* %next to %struct.bpf_verifier_stack_elem**
  store %struct.bpf_verifier_stack_elem* %i23, %struct.bpf_verifier_stack_elem** %i24, align 8
  %i25 = bitcast %struct.bpf_verifier_stack_elem** %head to i8**
  store i8* %call, i8** %i25, align 8
  %stack_size = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 5
  %i26 = load i32, i32* %stack_size, align 8
  %inc = add i32 %i26, 1
  store i32 %inc, i32* %stack_size, align 8
  %st = bitcast i8* %call to %struct.bpf_verifier_state*
  %call4 = call fastcc i32 @copy_verifier_state(%struct.bpf_verifier_state* noundef nonnull %st, %struct.bpf_verifier_state* noundef %i) #22
  %tobool5.not = icmp eq i32 %call4, 0
  br i1 %tobool5.not, label %if.end7, label %err28

if.end7:                                          ; preds = %if.end
  %i27 = getelementptr inbounds i8, i8* %call, i64 88
  %i28 = load i8, i8* %i27, align 8
  %i29 = and i8 %i28, 1
  store i8 %i29, i8* %i27, align 8
  %i30 = load i32, i32* %stack_size, align 8
  %cmp = icmp sgt i32 %i30, 8192
  br i1 %cmp, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end7
  %i31 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i31, i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.143, i64 0, i64 0), i32 noundef %i30) #22
  br label %err28

if.end19:                                         ; preds = %if.end7
  %parent = getelementptr inbounds i8, i8* %call, i64 64
  %i32 = bitcast i8* %parent to %struct.bpf_verifier_state**
  %i33 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %i32, align 8
  %tobool21.not = icmp eq %struct.bpf_verifier_state* %i33, null
  br i1 %tobool21.not, label %return, label %if.then22

if.then22:                                        ; preds = %if.end19
  %branches = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i33, i64 0, i32 2
  %i34 = load i32, i32* %branches, align 8
  %inc25 = add i32 %i34, 1
  store i32 %inc25, i32* %branches, align 8
  br label %return

err28:                                            ; preds = %if.then17, %if.end, %entry
  %i35 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  call fastcc void @free_verifier_state(%struct.bpf_verifier_state* noundef %i35, i1 noundef zeroext true) #22
  store %struct.bpf_verifier_state* null, %struct.bpf_verifier_state** %cur_state, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %err28
  %call31 = call fastcc i32 @pop_stack(%struct.bpf_verifier_env* noundef %env, i32* noundef null, i32* noundef null) #22
  %tobool32.not = icmp eq i32 %call31, 0
  br i1 %tobool32.not, label %while.cond, label %return

return:                                           ; preds = %while.cond, %if.then22, %if.end19
  %retval.0 = phi %struct.bpf_verifier_state* [ %st, %if.then22 ], [ %st, %if.end19 ], [ null, %while.cond ]
  ret %struct.bpf_verifier_state* %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @reg_type_may_be_null(i32 noundef %type) unnamed_addr #2 {
entry:
  %switch.tableidx = add i32 %type, -5
  %i = icmp ult i32 %switch.tableidx, 12
  %switch.cast = trunc i32 %switch.tableidx to i12
  %switch.downshift = lshr i12 -1407, %switch.cast
  %i5 = and i12 %switch.downshift, 1
  %switch.masked = icmp ne i12 %i5, 0
  %i6 = select i1 %i, i1 %switch.masked, i1 false
  ret i1 %i6
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @mark_ptr_or_null_regs(%struct.bpf_verifier_state* nocapture noundef readonly %vstate, i32 noundef %regno, i1 noundef zeroext %is_null) unnamed_addr #6 {
entry:
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %vstate, i64 0, i32 4
  %i = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %vstate, i64 0, i32 0, i64 %idxprom
  %i16 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %idxprom2 = zext i32 %regno to i64
  %ref_obj_id4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i16, i64 0, i32 0, i64 %idxprom2, i32 4
  %i17 = load i32, i32* %ref_obj_id4, align 8
  %id7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i16, i64 0, i32 0, i64 %idxprom2, i32 3
  %i18 = load i32, i32* %id7, align 4
  %tobool.not = icmp eq i32 %i17, 0
  %cmp = icmp ne i32 %i17, %i18
  %or.cond = select i1 %tobool.not, i1 true, i1 %cmp
  %is_null.not = xor i1 %is_null, true
  %brmerge = or i1 %or.cond, %is_null.not
  br i1 %brmerge, label %for.body.preheader, label %if.then

if.then:                                          ; preds = %entry
  %call = call fastcc i32 @release_reference_state(%struct.bpf_func_state* noundef %i16, i32 noundef %i18) #22
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %for.body.preheader, label %do.body19

do.body19:                                        ; preds = %if.then
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 5994, i32 2307, i64 12) #24, !srcloc !36
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 210) #24, !srcloc !37
  br label %for.body.preheader

for.body.preheader:                               ; preds = %do.body19, %if.then, %entry
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %idxprom32 = sext i32 %i.015 to i64
  %arrayidx33 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %vstate, i64 0, i32 0, i64 %idxprom32
  %i19 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx33, align 8
  call fastcc void @__mark_ptr_or_null_regs(%struct.bpf_func_state* noundef %i19, i32 noundef %i18, i1 noundef zeroext %is_null) #22
  %inc = add i32 %i.015, 1
  %i20 = load i32, i32* %curframe, align 8
  %cmp29.not = icmp ugt i32 %inc, %i20
  br i1 %cmp29.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @try_match_pkt_pointers(i8 %insn.0.0.val, %struct.bpf_reg_state* nocapture noundef readonly %dst_reg, %struct.bpf_reg_state* noundef readonly %src_reg, %struct.bpf_verifier_state* nocapture noundef readonly %this_branch, %struct.bpf_verifier_state* nocapture noundef readonly %other_branch) unnamed_addr #15 {
entry:
  %conv = zext i8 %insn.0.0.val to i32
  %and = and i32 %conv, 8
  %cmp.not.not = icmp eq i32 %and, 0
  %and4 = and i32 %conv, 7
  %cmp5 = icmp eq i32 %and4, 6
  %or.cond = or i1 %cmp.not.not, %cmp5
  br i1 %or.cond, label %return, label %if.end8

if.end8:                                          ; preds = %entry
  %and11 = and i32 %conv, 240
  %i55 = add nsw i32 %and11, -32
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %if.end8
  %Pivot6 = icmp ult i32 %i55, 128
  br i1 %Pivot6, label %NodeBlock, label %NodeBlock3

NodeBlock3:                                       ; preds = %NodeBlock5
  %Pivot4 = icmp ult i32 %i55, 144
  br i1 %Pivot4, label %sw.bb43, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock3
  %SwitchLeaf2 = icmp eq i32 %i55, 144
  br i1 %SwitchLeaf2, label %sw.bb117, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp eq i32 %i55, 0
  br i1 %Pivot, label %sw.bb, label %LeafBlock

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i55, 16
  br i1 %SwitchLeaf, label %sw.bb80, label %NewDefault

sw.bb:                                            ; preds = %NodeBlock
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  %i57 = load i32, i32* %type, align 8
  br label %NodeBlock14

NodeBlock14:                                      ; preds = %sw.bb
  %Pivot15 = icmp slt i32 %i57, 8
  br i1 %Pivot15, label %LeafBlock8, label %NodeBlock12

NodeBlock12:                                      ; preds = %NodeBlock14
  %Pivot13 = icmp eq i32 %i57, 8
  br i1 %Pivot13, label %land.lhs.true, label %LeafBlock10

LeafBlock10:                                      ; preds = %NodeBlock12
  %SwitchLeaf11 = icmp eq i32 %i57, 9
  br i1 %SwitchLeaf11, label %land.lhs.true27, label %NewDefault7

LeafBlock8:                                       ; preds = %NodeBlock14
  %SwitchLeaf9 = icmp eq i32 %i57, 7
  br i1 %SwitchLeaf9, label %land.lhs.true20, label %NewDefault7

land.lhs.true:                                    ; preds = %NodeBlock12
  %type14 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i58 = load i32, i32* %type14, align 8
  %cmp15 = icmp eq i32 %i58, 9
  br i1 %cmp15, label %if.then22, label %lor.lhs.false31

land.lhs.true20:                                  ; preds = %LeafBlock8
  %call = call fastcc zeroext i1 @reg_is_init_pkt_pointer(%struct.bpf_reg_state* noundef %src_reg) #22
  br i1 %call, label %if.then22, label %lor.lhs.false31

if.then22:                                        ; preds = %land.lhs.true20, %land.lhs.true
  call fastcc void @find_good_pkt_pointers(%struct.bpf_verifier_state* noundef %this_branch, %struct.bpf_reg_state* noundef %dst_reg, i32 noundef %i57, i1 noundef zeroext false) #22
  br label %return

land.lhs.true27:                                  ; preds = %LeafBlock10
  %type28 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i59 = load i32, i32* %type28, align 8
  %cmp29 = icmp eq i32 %i59, 8
  br i1 %cmp29, label %if.then38, label %lor.lhs.false31

NewDefault7:                                      ; preds = %LeafBlock8, %LeafBlock10
  br label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %NewDefault7, %land.lhs.true27, %land.lhs.true20, %land.lhs.true
  %call32 = call fastcc zeroext i1 @reg_is_init_pkt_pointer(%struct.bpf_reg_state* noundef %dst_reg) #22
  br i1 %call32, label %land.lhs.true34, label %return

land.lhs.true34:                                  ; preds = %lor.lhs.false31
  %type35 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i60 = load i32, i32* %type35, align 8
  %cmp36 = icmp eq i32 %i60, 7
  br i1 %cmp36, label %if.then38, label %return

if.then38:                                        ; preds = %land.lhs.true34, %land.lhs.true27
  %type39 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i61 = load i32, i32* %type39, align 8
  call fastcc void @find_good_pkt_pointers(%struct.bpf_verifier_state* noundef %other_branch, %struct.bpf_reg_state* noundef %src_reg, i32 noundef %i61, i1 noundef zeroext true) #22
  br label %return

sw.bb43:                                          ; preds = %NodeBlock3
  %type44 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  %i62 = load i32, i32* %type44, align 8
  br label %NodeBlock23

NodeBlock23:                                      ; preds = %sw.bb43
  %Pivot24 = icmp slt i32 %i62, 8
  br i1 %Pivot24, label %LeafBlock17, label %NodeBlock21

NodeBlock21:                                      ; preds = %NodeBlock23
  %Pivot22 = icmp eq i32 %i62, 8
  br i1 %Pivot22, label %land.lhs.true47, label %LeafBlock19

LeafBlock19:                                      ; preds = %NodeBlock21
  %SwitchLeaf20 = icmp eq i32 %i62, 9
  br i1 %SwitchLeaf20, label %land.lhs.true64, label %NewDefault16

LeafBlock17:                                      ; preds = %NodeBlock23
  %SwitchLeaf18 = icmp eq i32 %i62, 7
  br i1 %SwitchLeaf18, label %land.lhs.true55, label %NewDefault16

land.lhs.true47:                                  ; preds = %NodeBlock21
  %type48 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i63 = load i32, i32* %type48, align 8
  %cmp49 = icmp eq i32 %i63, 9
  br i1 %cmp49, label %if.then58, label %lor.lhs.false68

land.lhs.true55:                                  ; preds = %LeafBlock17
  %call56 = call fastcc zeroext i1 @reg_is_init_pkt_pointer(%struct.bpf_reg_state* noundef %src_reg) #22
  br i1 %call56, label %if.then58, label %lor.lhs.false68

if.then58:                                        ; preds = %land.lhs.true55, %land.lhs.true47
  call fastcc void @find_good_pkt_pointers(%struct.bpf_verifier_state* noundef %other_branch, %struct.bpf_reg_state* noundef %dst_reg, i32 noundef %i62, i1 noundef zeroext true) #22
  br label %return

land.lhs.true64:                                  ; preds = %LeafBlock19
  %type65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i64 = load i32, i32* %type65, align 8
  %cmp66 = icmp eq i32 %i64, 8
  br i1 %cmp66, label %if.then75, label %lor.lhs.false68

NewDefault16:                                     ; preds = %LeafBlock17, %LeafBlock19
  br label %lor.lhs.false68

lor.lhs.false68:                                  ; preds = %NewDefault16, %land.lhs.true64, %land.lhs.true55, %land.lhs.true47
  %call69 = call fastcc zeroext i1 @reg_is_init_pkt_pointer(%struct.bpf_reg_state* noundef %dst_reg) #22
  br i1 %call69, label %land.lhs.true71, label %return

land.lhs.true71:                                  ; preds = %lor.lhs.false68
  %type72 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i65 = load i32, i32* %type72, align 8
  %cmp73 = icmp eq i32 %i65, 7
  br i1 %cmp73, label %if.then75, label %return

if.then75:                                        ; preds = %land.lhs.true71, %land.lhs.true64
  %type76 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i66 = load i32, i32* %type76, align 8
  call fastcc void @find_good_pkt_pointers(%struct.bpf_verifier_state* noundef %this_branch, %struct.bpf_reg_state* noundef %src_reg, i32 noundef %i66, i1 noundef zeroext false) #22
  br label %return

sw.bb80:                                          ; preds = %LeafBlock
  %type81 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  %i67 = load i32, i32* %type81, align 8
  br label %NodeBlock32

NodeBlock32:                                      ; preds = %sw.bb80
  %Pivot33 = icmp slt i32 %i67, 8
  br i1 %Pivot33, label %LeafBlock26, label %NodeBlock30

NodeBlock30:                                      ; preds = %NodeBlock32
  %Pivot31 = icmp eq i32 %i67, 8
  br i1 %Pivot31, label %land.lhs.true84, label %LeafBlock28

LeafBlock28:                                      ; preds = %NodeBlock30
  %SwitchLeaf29 = icmp eq i32 %i67, 9
  br i1 %SwitchLeaf29, label %land.lhs.true101, label %NewDefault25

LeafBlock26:                                      ; preds = %NodeBlock32
  %SwitchLeaf27 = icmp eq i32 %i67, 7
  br i1 %SwitchLeaf27, label %land.lhs.true92, label %NewDefault25

land.lhs.true84:                                  ; preds = %NodeBlock30
  %type85 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i68 = load i32, i32* %type85, align 8
  %cmp86 = icmp eq i32 %i68, 9
  br i1 %cmp86, label %if.then95, label %lor.lhs.false105

land.lhs.true92:                                  ; preds = %LeafBlock26
  %call93 = call fastcc zeroext i1 @reg_is_init_pkt_pointer(%struct.bpf_reg_state* noundef %src_reg) #22
  br i1 %call93, label %if.then95, label %lor.lhs.false105

if.then95:                                        ; preds = %land.lhs.true92, %land.lhs.true84
  call fastcc void @find_good_pkt_pointers(%struct.bpf_verifier_state* noundef %this_branch, %struct.bpf_reg_state* noundef %dst_reg, i32 noundef %i67, i1 noundef zeroext true) #22
  br label %return

land.lhs.true101:                                 ; preds = %LeafBlock28
  %type102 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i69 = load i32, i32* %type102, align 8
  %cmp103 = icmp eq i32 %i69, 8
  br i1 %cmp103, label %if.then112, label %lor.lhs.false105

NewDefault25:                                     ; preds = %LeafBlock26, %LeafBlock28
  br label %lor.lhs.false105

lor.lhs.false105:                                 ; preds = %NewDefault25, %land.lhs.true101, %land.lhs.true92, %land.lhs.true84
  %call106 = call fastcc zeroext i1 @reg_is_init_pkt_pointer(%struct.bpf_reg_state* noundef %dst_reg) #22
  br i1 %call106, label %land.lhs.true108, label %return

land.lhs.true108:                                 ; preds = %lor.lhs.false105
  %type109 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i70 = load i32, i32* %type109, align 8
  %cmp110 = icmp eq i32 %i70, 7
  br i1 %cmp110, label %if.then112, label %return

if.then112:                                       ; preds = %land.lhs.true108, %land.lhs.true101
  %type113 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i71 = load i32, i32* %type113, align 8
  call fastcc void @find_good_pkt_pointers(%struct.bpf_verifier_state* noundef %other_branch, %struct.bpf_reg_state* noundef %src_reg, i32 noundef %i71, i1 noundef zeroext false) #22
  br label %return

sw.bb117:                                         ; preds = %LeafBlock1
  %type118 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
  %i72 = load i32, i32* %type118, align 8
  br label %NodeBlock41

NodeBlock41:                                      ; preds = %sw.bb117
  %Pivot42 = icmp slt i32 %i72, 8
  br i1 %Pivot42, label %LeafBlock35, label %NodeBlock39

NodeBlock39:                                      ; preds = %NodeBlock41
  %Pivot40 = icmp eq i32 %i72, 8
  br i1 %Pivot40, label %land.lhs.true121, label %LeafBlock37

LeafBlock37:                                      ; preds = %NodeBlock39
  %SwitchLeaf38 = icmp eq i32 %i72, 9
  br i1 %SwitchLeaf38, label %land.lhs.true138, label %NewDefault34

LeafBlock35:                                      ; preds = %NodeBlock41
  %SwitchLeaf36 = icmp eq i32 %i72, 7
  br i1 %SwitchLeaf36, label %land.lhs.true129, label %NewDefault34

land.lhs.true121:                                 ; preds = %NodeBlock39
  %type122 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i73 = load i32, i32* %type122, align 8
  %cmp123 = icmp eq i32 %i73, 9
  br i1 %cmp123, label %if.then132, label %lor.lhs.false142

land.lhs.true129:                                 ; preds = %LeafBlock35
  %call130 = call fastcc zeroext i1 @reg_is_init_pkt_pointer(%struct.bpf_reg_state* noundef %src_reg) #22
  br i1 %call130, label %if.then132, label %lor.lhs.false142

if.then132:                                       ; preds = %land.lhs.true129, %land.lhs.true121
  call fastcc void @find_good_pkt_pointers(%struct.bpf_verifier_state* noundef %other_branch, %struct.bpf_reg_state* noundef %dst_reg, i32 noundef %i72, i1 noundef zeroext false) #22
  br label %return

land.lhs.true138:                                 ; preds = %LeafBlock37
  %type139 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i74 = load i32, i32* %type139, align 8
  %cmp140 = icmp eq i32 %i74, 8
  br i1 %cmp140, label %if.then149, label %lor.lhs.false142

NewDefault34:                                     ; preds = %LeafBlock35, %LeafBlock37
  br label %lor.lhs.false142

lor.lhs.false142:                                 ; preds = %NewDefault34, %land.lhs.true138, %land.lhs.true129, %land.lhs.true121
  %call143 = call fastcc zeroext i1 @reg_is_init_pkt_pointer(%struct.bpf_reg_state* noundef %dst_reg) #22
  br i1 %call143, label %land.lhs.true145, label %return

land.lhs.true145:                                 ; preds = %lor.lhs.false142
  %type146 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i75 = load i32, i32* %type146, align 8
  %cmp147 = icmp eq i32 %i75, 7
  br i1 %cmp147, label %if.then149, label %return

if.then149:                                       ; preds = %land.lhs.true145, %land.lhs.true138
  %type150 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
  %i76 = load i32, i32* %type150, align 8
  call fastcc void @find_good_pkt_pointers(%struct.bpf_verifier_state* noundef %this_branch, %struct.bpf_reg_state* noundef %src_reg, i32 noundef %i76, i1 noundef zeroext true) #22
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %return

return:                                           ; preds = %NewDefault, %if.then149, %land.lhs.true145, %lor.lhs.false142, %if.then132, %if.then112, %land.lhs.true108, %lor.lhs.false105, %if.then95, %if.then75, %land.lhs.true71, %lor.lhs.false68, %if.then58, %if.then38, %land.lhs.true34, %lor.lhs.false31, %if.then22, %entry
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_init_pkt_pointer(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 8
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %id = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 3
  %i1 = load i32, i32* %id, align 4
  %cmp1 = icmp eq i32 %i1, 0
  br i1 %cmp1, label %land.lhs.true2, label %land.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 2
  %i2 = load i32, i32* %off, align 8
  %cmp3 = icmp eq i32 %i2, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true2
  %i3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i4 = load i64, i64* %i3, align 8
  %i5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i6 = load i64, i64* %i5, align 8
  %call = call fastcc zeroext i1 @tnum_equals_const(i64 %i4, i64 %i6, i64 noundef 0) #22
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true2, %land.lhs.true, %entry
  %i7 = phi i1 [ false, %land.lhs.true2 ], [ false, %land.lhs.true ], [ false, %entry ], [ %call, %land.rhs ]
  ret i1 %i7
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @find_good_pkt_pointers(%struct.bpf_verifier_state* nocapture noundef readonly %vstate, %struct.bpf_reg_state* nocapture noundef readonly %dst_reg, i32 noundef %type, i1 noundef zeroext %range_right_open) unnamed_addr #15 {
entry:
  %off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 2
  %i = load i32, i32* %off, align 8
  %cmp = icmp slt i32 %i, 0
  %cmp2 = icmp eq i32 %i, 0
  %i15 = and i1 %cmp2, %range_right_open
  %or.cond13 = or i1 %cmp, %i15
  br i1 %or.cond13, label %for.end, label %if.end

if.end:                                           ; preds = %entry
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
  %i16 = load i64, i64* %umax_value, align 8
  %cmp3 = icmp ugt i64 %i16, 65535
  %conv = sext i32 %i to i64
  %add = add i64 %i16, %conv
  %cmp7 = icmp ugt i64 %add, 65535
  %or.cond = select i1 %cmp3, i1 true, i1 %cmp7
  br i1 %or.cond, label %for.end, label %if.end10

if.end10:                                         ; preds = %if.end
  %conv12 = trunc i32 %i to i16
  %dec = sext i1 %range_right_open to i16
  %spec.select = add i16 %conv12, %dec
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %vstate, i64 0, i32 4
  br label %for.body

for.body:                                         ; preds = %for.body, %if.end10
  %i.014 = phi i32 [ 0, %if.end10 ], [ %inc, %for.body ]
  %idxprom = sext i32 %i.014 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %vstate, i64 0, i32 0, i64 %idxprom
  %i17 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  call fastcc void @__find_good_pkt_pointers(%struct.bpf_func_state* noundef %i17, %struct.bpf_reg_state* noundef %dst_reg, i32 noundef %type, i16 noundef zeroext %spec.select) #22
  %inc = add i32 %i.014, 1
  %i18 = load i32, i32* %curframe, align 8
  %cmp16.not = icmp ugt i32 %inc, %i18
  br i1 %cmp16.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.end, %entry
  ret void
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @__find_good_pkt_pointers(%struct.bpf_func_state* nocapture noundef %state, %struct.bpf_reg_state* nocapture noundef readonly %dst_reg, i32 noundef %type, i16 noundef zeroext %new_range) unnamed_addr #15 {
entry:
  %id3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 3
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.inc ]
  %type1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 0
  %i = load i32, i32* %type1, align 8
  %cmp2 = icmp eq i32 %i, %type
  br i1 %cmp2, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %id = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 3
  %i43 = load i32, i32* %id, align 4
  %i44 = load i32, i32* %id3, align 4
  %cmp4 = icmp eq i32 %i43, %i44
  br i1 %cmp4, label %if.then, label %for.inc

if.then:                                          ; preds = %land.lhs.true
  %i45 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 1
  %range = bitcast %union.anon.147* %i45 to i16*
  %i46 = load i16, i16* %range, align 8
  %cmp6 = icmp ugt i16 %i46, %new_range
  %cond = select i1 %cmp6, i16 %i46, i16 %new_range
  store i16 %cond, i16* %range, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.then, %land.lhs.true, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 11
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 6
  %i47 = load i32, i32* %allocated_stack, align 8
  %cmp12 = icmp sgt i32 %i47, 7
  br i1 %cmp12, label %land.lhs.true14, label %cond.end26

land.lhs.true14:                                  ; preds = %for.end
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i48 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx17 = getelementptr inbounds %struct.bpf_stack_state, %struct.bpf_stack_state* %i48, i64 0, i32 1, i64 0
  %i49 = load i8, i8* %arrayidx17, align 8
  %cmp19 = icmp eq i8 %i49, 1
  %spilled_ptr = getelementptr inbounds %struct.bpf_stack_state, %struct.bpf_stack_state* %i48, i64 0, i32 0
  %spec.select = select i1 %cmp19, %struct.bpf_reg_state* %spilled_ptr, %struct.bpf_reg_state* null
  br label %cond.end26

cond.end26:                                       ; preds = %land.lhs.true14, %for.end
  %cond27 = phi %struct.bpf_reg_state* [ null, %for.end ], [ %spec.select, %land.lhs.true14 ]
  br i1 %cmp12, label %for.body33.lr.ph, label %for.end83

for.body33.lr.ph:                                 ; preds = %cond.end26
  %stack67 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  br label %for.body33

for.body33:                                       ; preds = %cond.end81, %for.body33.lr.ph
  %indvars.iv40 = phi i64 [ 0, %for.body33.lr.ph ], [ %indvars.iv.next41, %cond.end81 ]
  %reg.038 = phi %struct.bpf_reg_state* [ %cond27, %for.body33.lr.ph ], [ %cond82, %cond.end81 ]
  %tobool.not = icmp eq %struct.bpf_reg_state* %reg.038, null
  br i1 %tobool.not, label %for.inc60, label %if.end35

if.end35:                                         ; preds = %for.body33
  %type36 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.038, i64 0, i32 0
  %i51 = load i32, i32* %type36, align 8
  %cmp37 = icmp eq i32 %i51, %type
  br i1 %cmp37, label %land.lhs.true39, label %for.inc60

land.lhs.true39:                                  ; preds = %if.end35
  %id40 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.038, i64 0, i32 3
  %i52 = load i32, i32* %id40, align 4
  %i53 = load i32, i32* %id3, align 4
  %cmp42 = icmp eq i32 %i52, %i53
  br i1 %cmp42, label %if.then44, label %for.inc60

if.then44:                                        ; preds = %land.lhs.true39
  %i54 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.038, i64 0, i32 1
  %range45 = bitcast %union.anon.147* %i54 to i16*
  %i55 = load i16, i16* %range45, align 8
  %cmp49 = icmp ugt i16 %i55, %new_range
  %cond56 = select i1 %cmp49, i16 %i55, i16 %new_range
  store i16 %cond56, i16* %range45, align 8
  br label %for.inc60

for.inc60:                                        ; preds = %if.then44, %land.lhs.true39, %if.end35, %for.body33
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 1
  %i56 = load i32, i32* %allocated_stack, align 8
  %div63 = sdiv i32 %i56, 8
  %i57 = sext i32 %div63 to i64
  %cmp64 = icmp slt i64 %indvars.iv.next41, %i57
  br i1 %cmp64, label %land.lhs.true66, label %cond.end81

land.lhs.true66:                                  ; preds = %for.inc60
  %i58 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack67, align 8
  %arrayidx71 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i58, i64 %indvars.iv.next41, i32 1, i64 0
  %i59 = load i8, i8* %arrayidx71, align 8
  %cmp73 = icmp eq i8 %i59, 1
  %spilled_ptr79 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i58, i64 %indvars.iv.next41, i32 0
  %spec.select33 = select i1 %cmp73, %struct.bpf_reg_state* %spilled_ptr79, %struct.bpf_reg_state* null
  br label %cond.end81

cond.end81:                                       ; preds = %land.lhs.true66, %for.inc60
  %cond82 = phi %struct.bpf_reg_state* [ null, %for.inc60 ], [ %spec.select33, %land.lhs.true66 ]
  br i1 %cmp64, label %for.body33, label %for.end83

for.end83:                                        ; preds = %cond.end81, %cond.end26
  ret void
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @release_reference_state(%struct.bpf_func_state* nocapture noundef %state, i32 noundef %ptr_id) unnamed_addr #15 {
entry:
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 4
  %i = load i32, i32* %acquired_refs, align 4
  %sub = add i32 %i, -1
  %cmp15 = icmp sgt i32 %i, 0
  br i1 %cmp15, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 5
  %i25 = load %struct.util_est*, %struct.util_est** %refs, align 8
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %i.016 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %idxprom = sext i32 %i.016 to i64
  %arrayidx = getelementptr %struct.util_est, %struct.util_est* %i25, i64 %idxprom
  %id = getelementptr inbounds %struct.util_est, %struct.util_est* %arrayidx, i64 0, i32 0
  %i26 = load i32, i32* %id, align 4
  %cmp2 = icmp eq i32 %i26, %ptr_id
  br i1 %cmp2, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %tobool.not = icmp eq i32 %sub, 0
  %cmp3.not = icmp eq i32 %i.016, %sub
  %or.cond = select i1 %tobool.not, i1 true, i1 %cmp3.not
  br i1 %or.cond, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %idxprom9 = sext i32 %sub to i64
  %arrayidx10 = getelementptr %struct.util_est, %struct.util_est* %i25, i64 %idxprom9
  %i27 = bitcast %struct.util_est* %arrayidx10 to i64*
  %i28 = bitcast %struct.util_est* %arrayidx to i64*
  %i29 = load i64, i64* %i27, align 4
  store i64 %i29, i64* %i28, align 4
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %i30 = load %struct.util_est*, %struct.util_est** %refs, align 8
  %idxprom12 = sext i32 %sub to i64
  %arrayidx13 = getelementptr %struct.util_est, %struct.util_est* %i30, i64 %idxprom12
  %i31 = bitcast %struct.util_est* %arrayidx13 to i64*
  store i64 0, i64* %i31, align 4
  %i32 = load i32, i32* %acquired_refs, align 4
  %dec = add i32 %i32, -1
  store i32 %dec, i32* %acquired_refs, align 4
  br label %return

for.inc:                                          ; preds = %for.body
  %inc = add nuw i32 %i.016, 1
  %exitcond.not = icmp eq i32 %inc, %i
  br i1 %exitcond.not, label %return, label %for.body

return:                                           ; preds = %for.inc, %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -22, %entry ], [ -22, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @__mark_ptr_or_null_regs(%struct.bpf_func_state* nocapture noundef %state, i32 noundef %id, i1 noundef zeroext %is_null) unnamed_addr #6 {
entry:
  %arrayidx = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 0
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 1
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.1, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 2
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.2, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 3
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.3, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 4
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.4, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 5
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.5, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 6
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.6, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 7
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.7, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 8
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.8, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 9
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.9, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %arrayidx.10 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 10
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef %arrayidx.10, i32 noundef %id, i1 noundef zeroext %is_null) #22
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 6
  %i = load i32, i32* %allocated_stack, align 8
  %cmp1 = icmp sgt i32 %i, 7
  br i1 %cmp1, label %land.lhs.true, label %cond.end

land.lhs.true:                                    ; preds = %entry
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i31 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx4 = getelementptr inbounds %struct.bpf_stack_state, %struct.bpf_stack_state* %i31, i64 0, i32 1, i64 0
  %i32 = load i8, i8* %arrayidx4, align 8
  %cmp5 = icmp eq i8 %i32, 1
  %spilled_ptr = getelementptr inbounds %struct.bpf_stack_state, %struct.bpf_stack_state* %i31, i64 0, i32 0
  %spec.select = select i1 %cmp5, %struct.bpf_reg_state* %spilled_ptr, %struct.bpf_reg_state* null
  br label %cond.end

cond.end:                                         ; preds = %land.lhs.true, %entry
  %cond = phi %struct.bpf_reg_state* [ null, %entry ], [ %spec.select, %land.lhs.true ]
  br i1 %cmp1, label %for.body15.lr.ph, label %for.end41

for.body15.lr.ph:                                 ; preds = %cond.end
  %stack25 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  br label %for.body15

for.body15:                                       ; preds = %cond.end39, %for.body15.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body15.lr.ph ], [ %indvars.iv.next, %cond.end39 ]
  %reg.027 = phi %struct.bpf_reg_state* [ %cond, %for.body15.lr.ph ], [ %cond40, %cond.end39 ]
  %tobool16.not = icmp eq %struct.bpf_reg_state* %reg.027, null
  br i1 %tobool16.not, label %for.inc18, label %if.end

if.end:                                           ; preds = %for.body15
  call fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* noundef nonnull %reg.027, i32 noundef %id, i1 noundef zeroext %is_null) #22
  br label %for.inc18

for.inc18:                                        ; preds = %if.end, %for.body15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %i34 = load i32, i32* %allocated_stack, align 8
  %div21 = sdiv i32 %i34, 8
  %i35 = sext i32 %div21 to i64
  %cmp22 = icmp slt i64 %indvars.iv.next, %i35
  br i1 %cmp22, label %land.lhs.true24, label %cond.end39

land.lhs.true24:                                  ; preds = %for.inc18
  %i36 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack25, align 8
  %arrayidx29 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i36, i64 %indvars.iv.next, i32 1, i64 0
  %i37 = load i8, i8* %arrayidx29, align 8
  %cmp31 = icmp eq i8 %i37, 1
  %spilled_ptr37 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i36, i64 %indvars.iv.next, i32 0
  %spec.select23 = select i1 %cmp31, %struct.bpf_reg_state* %spilled_ptr37, %struct.bpf_reg_state* null
  br label %cond.end39

cond.end39:                                       ; preds = %land.lhs.true24, %for.inc18
  %cond40 = phi %struct.bpf_reg_state* [ null, %for.inc18 ], [ %spec.select23, %land.lhs.true24 ]
  br i1 %cmp22, label %for.body15, label %for.end41

for.end41:                                        ; preds = %cond.end39, %cond.end
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @mark_ptr_or_null_reg(%struct.bpf_reg_state* nocapture noundef %reg, i32 noundef %id, i1 noundef zeroext %is_null) unnamed_addr #6 {
entry:
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %call = call fastcc zeroext i1 @reg_type_may_be_null(i32 noundef %i) #22
  br i1 %call, label %land.lhs.true, label %if.end81

land.lhs.true:                                    ; preds = %entry
  %id1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 3
  %i3 = load i32, i32* %id1, align 4
  %cmp = icmp eq i32 %i3, %id
  br i1 %cmp, label %if.then, label %if.end81

if.then:                                          ; preds = %land.lhs.true
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 6
  %i4 = load i64, i64* %smin_value, align 8
  %tobool.not = icmp eq i64 %i4, 0
  br i1 %tobool.not, label %lor.lhs.false, label %do.body14

lor.lhs.false:                                    ; preds = %if.then
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 7
  %i5 = load i64, i64* %smax_value, align 8
  %tobool2.not = icmp eq i64 %i5, 0
  br i1 %tobool2.not, label %lor.lhs.false3, label %do.body14

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %i6 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i7 = load i64, i64* %i6, align 8
  %i8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i9 = load i64, i64* %i8, align 8
  %call4 = call fastcc zeroext i1 @tnum_equals_const(i64 %i7, i64 %i9, i64 noundef 0) #22
  br i1 %call4, label %lor.rhs, label %do.body14

lor.rhs:                                          ; preds = %lor.lhs.false3
  %off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 2
  %i10 = load i32, i32* %off, align 8
  %tobool5.not = icmp eq i32 %i10, 0
  br i1 %tobool5.not, label %if.end25, label %do.body14

do.body14:                                        ; preds = %lor.rhs, %lor.lhs.false3, %lor.lhs.false, %if.then
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 5919, i32 2307, i64 12) #24, !srcloc !38
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 209) #24, !srcloc !39
  call fastcc void @__mark_reg_known_zero(%struct.bpf_reg_state* noundef %reg) #22
  %off24 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 2
  store i32 0, i32* %off24, align 8
  br label %if.end25

if.end25:                                         ; preds = %do.body14, %lor.rhs
  br i1 %is_null, label %if.then27, label %if.else

if.then27:                                        ; preds = %if.end25
  store i32 1, i32* %type, align 8
  br label %if.end71

if.else:                                          ; preds = %if.end25
  %i11 = load i32, i32* %type, align 8
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.else
  %Pivot10 = icmp slt i32 %i11, 14
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %i11, 16
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %i11, 16
  br i1 %SwitchLeaf6, label %if.then65, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %i11, 14
  br i1 %SwitchLeaf4, label %if.then59, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %i11, 12
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i11, 12
  br i1 %SwitchLeaf2, label %if.then53, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i11, 5
  br i1 %SwitchLeaf, label %if.then32, label %NewDefault

if.then32:                                        ; preds = %LeafBlock
  %map_ptr = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 1, i32 0
  %i12 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %inner_map_meta = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i12, i64 0, i32 1
  %i13 = load %struct.bpf_map*, %struct.bpf_map** %inner_map_meta, align 8
  %tobool33.not = icmp eq %struct.bpf_map* %i13, null
  br i1 %tobool33.not, label %if.else39, label %if.then34

if.then34:                                        ; preds = %if.then32
  store i32 3, i32* %type, align 8
  %i14 = load %struct.bpf_map*, %struct.bpf_map** %inner_map_meta, align 8
  store %struct.bpf_map* %i14, %struct.bpf_map** %map_ptr, align 8
  br label %if.end71

if.else39:                                        ; preds = %if.then32
  %map_type = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i12, i64 0, i32 3
  %i15 = load i32, i32* %map_type, align 8
  %cmp41 = icmp eq i32 %i15, 17
  br i1 %cmp41, label %if.then43, label %if.else45

if.then43:                                        ; preds = %if.else39
  store i32 18, i32* %type, align 8
  br label %if.end71

if.else45:                                        ; preds = %if.else39
  store i32 4, i32* %type, align 8
  br label %if.end71

if.then53:                                        ; preds = %LeafBlock1
  store i32 11, i32* %type, align 8
  br label %if.end71

if.then59:                                        ; preds = %LeafBlock3
  store i32 13, i32* %type, align 8
  br label %if.end71

if.then65:                                        ; preds = %LeafBlock5
  store i32 15, i32* %type, align 8
  br label %if.end71

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock5
  br label %if.end71

if.end71:                                         ; preds = %NewDefault, %if.then65, %if.then59, %if.then53, %if.else45, %if.then43, %if.then34, %if.then27
  br i1 %is_null, label %if.then73, label %if.else75

if.then73:                                        ; preds = %if.end71
  store i32 0, i32* %id1, align 4
  %ref_obj_id = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 4
  store i32 0, i32* %ref_obj_id, align 8
  br label %if.end81

if.else75:                                        ; preds = %if.end71
  %call76 = call fastcc zeroext i1 @reg_may_point_to_spin_lock(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call76, label %if.end81, label %if.then77

if.then77:                                        ; preds = %if.else75
  store i32 0, i32* %id1, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.then77, %if.else75, %if.then73, %land.lhs.true, %entry
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_may_point_to_spin_lock(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 4
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %map_ptr = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 1, i32 0
  %i2 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %i2.idx = getelementptr %struct.bpf_map, %struct.bpf_map* %i2, i64 0, i32 8
  %i2.idx.val = load i32, i32* %i2.idx, align 4
  %call = call fastcc zeroext i1 @map_value_has_spin_lock(i32 %i2.idx.val) #22
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %i3 = phi i1 [ false, %entry ], [ %call, %land.rhs ]
  ret i1 %i3
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @__mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %spi) unnamed_addr #6 {
entry:
  %reg_mask = alloca i32, align 4
  %stack_mask = alloca i64, align 8
  %mask = alloca [1 x i64], align 8
  %history = alloca i32, align 4
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %first_insn_idx = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 7
  %i174 = load i32, i32* %first_insn_idx, align 4
  %insn_idx = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 0
  %i175 = load i32, i32* %insn_idx, align 8
  %cmp = icmp sgt i32 %regno, -1
  %shl = shl i32 1, %regno
  %cond = select i1 %cmp, i32 %shl, i32 0
  store i32 %cond, i32* %reg_mask, align 4
  %cmp1 = icmp sgt i32 %spi, -1
  %sh_prom = zext i32 %spi to i64
  %shl3 = shl i64 1, %sh_prom
  %cond6 = select i1 %cmp1, i64 %shl3, i64 0
  store i64 %cond6, i64* %stack_mask, align 8
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i176 = load i8, i8* %allow_ptr_leaks, align 8
  %i177 = and i8 %i176, 1
  %tobool.not = icmp eq i8 %i177, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %i178 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i178 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i179 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  br i1 %cmp, label %if.then8, label %while.cond

if.then8:                                         ; preds = %if.end
  %idxprom9 = sext i32 %regno to i64
  %type = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i179, i64 0, i32 0, i64 %idxprom9, i32 0
  %i180 = load i32, i32* %type, align 8
  %cmp11.not = icmp eq i32 %i180, 1
  br i1 %cmp11.not, label %if.end46, label %if.then12

if.then12:                                        ; preds = %if.then8
  %.b82 = load i1, i1* @__mark_chain_precision.__warned, align 1
  br i1 %.b82, label %return, label %if.then18

if.then18:                                        ; preds = %if.then12
  store i1 true, i1* @__mark_chain_precision.__warned, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([19 x i8], [19 x i8]* @.str.76, i64 0, i64 0)) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 1774, i32 2313, i64 12) #24, !srcloc !40
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 149) #24, !srcloc !41
  br label %return

if.end46:                                         ; preds = %if.then8
  %precise = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i179, i64 0, i32 0, i64 %idxprom9, i32 14
  %i181 = load i8, i8* %precise, align 4
  %i182 = and i8 %i181, 1
  %tobool47.not = icmp eq i8 %i182, 0
  br i1 %tobool47.not, label %if.end49, label %if.else

if.else:                                          ; preds = %if.end46
  store i32 0, i32* %reg_mask, align 4
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.end46
  %new_marks.0 = phi i8 [ 0, %if.else ], [ 1, %if.end46 ]
  store i8 1, i8* %precise, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end49, %if.end
  %new_marks.1 = phi i8 [ %new_marks.0, %if.end49 ], [ 0, %if.end ]
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i179, i64 0, i32 7
  %i183 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %idxprom54 = sext i32 %spi to i64
  %arrayidx56 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i183, i64 %idxprom54, i32 1, i64 0
  %i184 = load i8, i8* %arrayidx56, align 8
  %cmp58.not = icmp eq i8 %i184, 1
  br i1 %cmp58.not, label %if.end61, label %if.then60

if.then60:                                        ; preds = %while.body
  store i64 0, i64* %stack_mask, align 8
  br label %while.end

if.end61:                                         ; preds = %while.body
  %type65 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i183, i64 %idxprom54, i32 0, i32 0
  %i185 = load i32, i32* %type65, align 8
  %cmp66.not = icmp eq i32 %i185, 1
  br i1 %cmp66.not, label %if.end69, label %if.then68

if.then68:                                        ; preds = %if.end61
  store i64 0, i64* %stack_mask, align 8
  br label %while.end

if.end69:                                         ; preds = %if.end61
  %precise70 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i183, i64 %idxprom54, i32 0, i32 14
  %i186 = load i8, i8* %precise70, align 4
  %i187 = and i8 %i186, 1
  %tobool71.not = icmp eq i8 %i187, 0
  br i1 %tobool71.not, label %if.end74, label %if.else73

if.else73:                                        ; preds = %if.end69
  store i64 0, i64* %stack_mask, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.else73, %if.end69
  %new_marks.2 = phi i8 [ %new_marks.1, %if.else73 ], [ 1, %if.end69 ]
  store i8 1, i8* %precise70, align 4
  br label %while.end

while.end:                                        ; preds = %if.end74, %if.then68, %if.then60, %while.cond
  %new_marks.3 = phi i8 [ %new_marks.1, %if.then60 ], [ %new_marks.1, %if.then68 ], [ %new_marks.2, %if.end74 ], [ %new_marks.1, %while.cond ]
  %i188 = and i8 %new_marks.3, 1
  %tobool76.not = icmp eq i8 %i188, 0
  br i1 %tobool76.not, label %return, label %if.end78

if.end78:                                         ; preds = %while.end
  %i189 = load i32, i32* %reg_mask, align 4
  %tobool79 = icmp ne i32 %i189, 0
  %i190 = load i64, i64* %stack_mask, align 8
  %tobool80 = icmp ne i64 %i190, 0
  %or.cond = select i1 %tobool79, i1 true, i1 %tobool80
  br i1 %or.cond, label %for.cond.preheader, label %return

for.cond.preheader:                               ; preds = %if.end78
  %level = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i191 = bitcast %struct.bpf_verifier_env* %env to i8*
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %mask, i64 0, i64 0
  br label %for.cond

for.cond:                                         ; preds = %if.end259, %for.cond.preheader
  %skip_first.0 = phi i8 [ %skip_first.2, %if.end259 ], [ 1, %for.cond.preheader ]
  %last_idx.0 = phi i32 [ %i220, %if.end259 ], [ %i175, %for.cond.preheader ]
  %first_idx.0 = phi i32 [ %i221, %if.end259 ], [ %i174, %for.cond.preheader ]
  %st.0 = phi %struct.bpf_verifier_state* [ %i201, %if.end259 ], [ %i, %for.cond.preheader ]
  %jmp_history_cnt = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st.0, i64 0, i32 10
  %i193 = load i32, i32* %jmp_history_cnt, align 8
  store i32 %i193, i32* %history, align 4
  %i194 = load i32, i32* %level, align 8
  %and = and i32 %i194, 3
  %tobool83.not = icmp eq i32 %and, 0
  br i1 %tobool83.not, label %for.cond86.preheader, label %if.then84

if.then84:                                        ; preds = %for.cond
  call void (i8*, i8*, ...) @verbose(i8* noundef %i191, i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.77, i64 0, i64 0), i32 noundef %last_idx.0, i32 noundef %first_idx.0) #22
  br label %for.cond86.preheader

for.cond86.preheader:                             ; preds = %if.then84, %for.cond
  br label %for.cond86

for.cond86:                                       ; preds = %if.end107, %for.cond86.preheader
  %i.0 = phi i32 [ %call108, %if.end107 ], [ %last_idx.0, %for.cond86.preheader ]
  %skip_first.1 = phi i8 [ %skip_first.2, %if.end107 ], [ %skip_first.0, %for.cond86.preheader ]
  %i195 = and i8 %skip_first.1, 1
  %tobool87.not = icmp eq i8 %i195, 0
  br i1 %tobool87.not, label %if.else89, label %if.end90

if.else89:                                        ; preds = %for.cond86
  %call = call fastcc i32 @backtrack_insn(%struct.bpf_verifier_env* noundef %env, i32 noundef %i.0, i32* noundef nonnull %reg_mask, i64* noundef nonnull %stack_mask) #22
  br label %if.end90

if.end90:                                         ; preds = %if.else89, %for.cond86
  %err.0 = phi i32 [ %call, %if.else89 ], [ 0, %for.cond86 ]
  %skip_first.2 = phi i8 [ %skip_first.1, %if.else89 ], [ 0, %for.cond86 ]
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end90
  %Pivot = icmp slt i32 %err.0, 0
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %err.0, 0
  br i1 %SwitchLeaf2, label %if.end98, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %err.0, -524
  br i1 %SwitchLeaf, label %if.then93, label %NewDefault

if.then93:                                        ; preds = %LeafBlock
  call fastcc void @mark_all_scalars_precise(%struct.bpf_verifier_state* noundef %st.0) #22
  br label %return

if.end98:                                         ; preds = %LeafBlock1
  %i196 = load i32, i32* %reg_mask, align 4
  %tobool99 = icmp ne i32 %i196, 0
  %i197 = load i64, i64* %stack_mask, align 8
  %tobool101 = icmp ne i64 %i197, 0
  %or.cond1 = select i1 %tobool99, i1 true, i1 %tobool101
  br i1 %or.cond1, label %if.end103, label %return

if.end103:                                        ; preds = %if.end98
  %cmp104 = icmp eq i32 %i.0, %first_idx.0
  br i1 %cmp104, label %for.end, label %if.end107

if.end107:                                        ; preds = %if.end103
  %call108 = call fastcc i32 @get_prev_insn_idx(%struct.bpf_verifier_state* noundef %st.0, i32 noundef %i.0, i32* noundef nonnull %history) #22
  %i198 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i198, i64 0, i32 4
  %i199 = load i32, i32* %len, align 4
  %cmp109.not = icmp ult i32 %call108, %i199
  br i1 %cmp109.not, label %for.cond86, label %if.then111

if.then111:                                       ; preds = %if.end107
  call void (i8*, i8*, ...) @verbose(i8* noundef %i191, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.78, i64 0, i64 0), i32 noundef %call108) #22
  %.b7778 = load i1, i1* @__mark_chain_precision.__warned.79, align 1
  br i1 %.b7778, label %return, label %if.then125

if.then125:                                       ; preds = %if.then111
  store i1 true, i1* @__mark_chain_precision.__warned.79, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.80, i64 0, i64 0)) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 1842, i32 2313, i64 12) #24, !srcloc !42
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 150) #24, !srcloc !43
  br label %return

for.end:                                          ; preds = %if.end103
  %parent = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st.0, i64 0, i32 1
  %i201 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %parent, align 8
  %tobool158.not = icmp eq %struct.bpf_verifier_state* %i201, null
  br i1 %tobool158.not, label %return, label %if.end160

if.end160:                                        ; preds = %for.end
  %curframe162 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i201, i64 0, i32 4
  %i202 = load i32, i32* %curframe162, align 8
  %idxprom163 = zext i32 %i202 to i64
  %arrayidx164 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i201, i64 0, i32 0, i64 %idxprom163
  %i203 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx164, align 8
  %conv165 = zext i32 %i196 to i64
  call fastcc void @bitmap_from_u64(i64* noundef %arraydecay, i64 noundef %conv165) #22
  %call167 = call i64 @find_first_bit(i64* noundef %arraydecay, i64 noundef 32) #23
  %i.1101 = trunc i64 %call167 to i32
  %cmp170102 = icmp slt i32 %i.1101, 32
  br i1 %cmp170102, label %for.body, label %for.end191

for.body:                                         ; preds = %for.inc, %if.end160
  %i.1106 = phi i32 [ %i.1, %for.inc ], [ %i.1101, %if.end160 ]
  %new_marks.4105 = phi i8 [ %new_marks.6, %for.inc ], [ 0, %if.end160 ]
  %i.1.in104 = phi i64 [ %call189, %for.inc ], [ %call167, %if.end160 ]
  %and180100103 = phi i32 [ %and18099, %for.inc ], [ %i196, %if.end160 ]
  %sext80 = shl i64 %i.1.in104, 32
  %idxprom173 = ashr exact i64 %sext80, 32
  %type175 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i203, i64 0, i32 0, i64 %idxprom173, i32 0
  %i204 = load i32, i32* %type175, align 8
  %cmp176.not = icmp eq i32 %i204, 1
  br i1 %cmp176.not, label %if.end181, label %if.then178

if.then178:                                       ; preds = %for.body
  %shl179 = shl i32 1, %i.1106
  %neg = xor i32 %shl179, -1
  %and180 = and i32 %and180100103, %neg
  br label %for.inc

if.end181:                                        ; preds = %for.body
  %precise182 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i203, i64 0, i32 0, i64 %idxprom173, i32 14
  %i205 = load i8, i8* %precise182, align 4
  %i206 = and i8 %i205, 1
  %tobool183.not = icmp eq i8 %i206, 0
  %spec.select = select i1 %tobool183.not, i8 1, i8 %new_marks.4105
  store i8 1, i8* %precise182, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end181, %if.then178
  %and18099 = phi i32 [ %and180, %if.then178 ], [ %and180100103, %if.end181 ]
  %new_marks.6 = phi i8 [ %new_marks.4105, %if.then178 ], [ %spec.select, %if.end181 ]
  %sext81 = add i64 %sext80, 4294967296
  %conv188 = ashr exact i64 %sext81, 32
  %call189 = call i64 @find_next_bit(i64* noundef %arraydecay, i64 noundef 32, i64 noundef %conv188) #23
  %i.1 = trunc i64 %call189 to i32
  %cmp170 = icmp slt i32 %i.1, 32
  br i1 %cmp170, label %for.body, label %for.end191

for.end191:                                       ; preds = %for.inc, %if.end160
  %and180100.lcssa = phi i32 [ %i196, %if.end160 ], [ %and18099, %for.inc ]
  %new_marks.4.lcssa = phi i8 [ 0, %if.end160 ], [ %new_marks.6, %for.inc ]
  store i32 %and180100.lcssa, i32* %reg_mask, align 4
  call fastcc void @bitmap_from_u64(i64* noundef %arraydecay, i64 noundef %i197) #22
  %call194 = call i64 @find_first_bit(i64* noundef %arraydecay, i64 noundef 64) #23
  %i.2111 = trunc i64 %call194 to i32
  %cmp197112 = icmp slt i32 %i.2111, 64
  br i1 %cmp197112, label %for.body199.lr.ph, label %for.end242

for.body199.lr.ph:                                ; preds = %for.end191
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i203, i64 0, i32 6
  %stack204 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i203, i64 0, i32 7
  br label %for.body199

for.body199:                                      ; preds = %for.inc236, %for.body199.lr.ph
  %i.2116 = phi i32 [ %i.2111, %for.body199.lr.ph ], [ %i.2, %for.inc236 ]
  %new_marks.7115 = phi i8 [ %new_marks.4.lcssa, %for.body199.lr.ph ], [ %new_marks.9, %for.inc236 ]
  %i.2.in114 = phi i64 [ %call194, %for.body199.lr.ph ], [ %call240, %for.inc236 ]
  %and229109113 = phi i64 [ %i197, %for.body199.lr.ph ], [ %and229108, %for.inc236 ]
  %i207 = load i32, i32* %allocated_stack, align 8
  %div = sdiv i32 %i207, 8
  %cmp200.not = icmp sgt i32 %div, %i.2116
  br i1 %cmp200.not, label %if.end203, label %if.then202

if.then202:                                       ; preds = %for.body199
  store i64 %and229109113, i64* %stack_mask, align 8
  call fastcc void @mark_all_scalars_precise(%struct.bpf_verifier_state* noundef nonnull %i201) #22
  br label %return

if.end203:                                        ; preds = %for.body199
  %i208 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack204, align 8
  %sext = shl i64 %i.2.in114, 32
  %idxprom205 = ashr exact i64 %sext, 32
  %arrayidx208 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i208, i64 %idxprom205, i32 1, i64 0
  %i209 = load i8, i8* %arrayidx208, align 8
  %cmp210.not = icmp eq i8 %i209, 1
  br i1 %cmp210.not, label %if.end217, label %if.then212

if.then212:                                       ; preds = %if.end203
  %sh_prom213 = and i64 %i.2.in114, 4294967295
  %shl214 = shl i64 1, %sh_prom213
  %neg215 = xor i64 %shl214, -1
  %and216 = and i64 %and229109113, %neg215
  br label %for.inc236

if.end217:                                        ; preds = %if.end203
  %type222 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i208, i64 %idxprom205, i32 0, i32 0
  %i210 = load i32, i32* %type222, align 8
  %cmp223.not = icmp eq i32 %i210, 1
  br i1 %cmp223.not, label %if.end230, label %if.then225

if.then225:                                       ; preds = %if.end217
  %sh_prom226 = and i64 %i.2.in114, 4294967295
  %shl227 = shl i64 1, %sh_prom226
  %neg228 = xor i64 %shl227, -1
  %and229 = and i64 %and229109113, %neg228
  br label %for.inc236

if.end230:                                        ; preds = %if.end217
  %precise231 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i208, i64 %idxprom205, i32 0, i32 14
  %i211 = load i8, i8* %precise231, align 4
  %i212 = and i8 %i211, 1
  %tobool232.not = icmp eq i8 %i212, 0
  %spec.select83 = select i1 %tobool232.not, i8 1, i8 %new_marks.7115
  store i8 1, i8* %precise231, align 4
  br label %for.inc236

for.inc236:                                       ; preds = %if.end230, %if.then225, %if.then212
  %and229108 = phi i64 [ %and216, %if.then212 ], [ %and229, %if.then225 ], [ %and229109113, %if.end230 ]
  %new_marks.9 = phi i8 [ %new_marks.7115, %if.then212 ], [ %new_marks.7115, %if.then225 ], [ %spec.select83, %if.end230 ]
  %sext79 = add i64 %sext, 4294967296
  %conv239 = ashr exact i64 %sext79, 32
  %call240 = call i64 @find_next_bit(i64* noundef %arraydecay, i64 noundef 64, i64 noundef %conv239) #23
  %i.2 = trunc i64 %call240 to i32
  %cmp197 = icmp slt i32 %i.2, 64
  br i1 %cmp197, label %for.body199, label %for.end242

for.end242:                                       ; preds = %for.inc236, %for.end191
  %and229109.lcssa = phi i64 [ %i197, %for.end191 ], [ %and229108, %for.inc236 ]
  %new_marks.7.lcssa = phi i8 [ %new_marks.4.lcssa, %for.end191 ], [ %new_marks.9, %for.inc236 ]
  store i64 %and229109.lcssa, i64* %stack_mask, align 8
  %i213 = load i32, i32* %level, align 8
  %and245 = and i32 %i213, 3
  %tobool246.not = icmp eq i32 %and245, 0
  br i1 %tobool246.not, label %if.end251, label %if.then247

if.then247:                                       ; preds = %for.end242
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i203) #22
  %i214 = and i8 %new_marks.7.lcssa, 1
  %tobool248.not = icmp eq i8 %i214, 0
  %cond250 = select i1 %tobool248.not, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.82, i64 0, i64 0)
  call void (i8*, i8*, ...) @verbose(i8* noundef %i191, i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.81, i64 0, i64 0), i8* noundef %cond250, i32 noundef %and180100.lcssa, i64 noundef %and229109.lcssa) #22
  br label %if.end251

if.end251:                                        ; preds = %if.then247, %for.end242
  %tobool252 = icmp eq i32 %and180100.lcssa, 0
  %tobool254 = icmp eq i64 %and229109.lcssa, 0
  %or.cond2 = select i1 %tobool252, i1 %tobool254, i1 false
  %i219 = and i8 %new_marks.7.lcssa, 1
  %tobool257.not = icmp eq i8 %i219, 0
  %or.cond84 = select i1 %or.cond2, i1 true, i1 %tobool257.not
  br i1 %or.cond84, label %return, label %if.end259

if.end259:                                        ; preds = %if.end251
  %last_insn_idx = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i201, i64 0, i32 8
  %i220 = load i32, i32* %last_insn_idx, align 8
  %first_insn_idx260 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i201, i64 0, i32 7
  %i221 = load i32, i32* %first_insn_idx260, align 4
  br label %for.cond

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %return

return:                                           ; preds = %NewDefault, %if.end251, %if.then202, %for.end, %if.then125, %if.then111, %if.end98, %if.then93, %if.end78, %while.end, %if.then18, %if.then12, %entry
  %retval.0 = phi i32 [ 0, %if.then93 ], [ 0, %if.then202 ], [ 0, %entry ], [ -14, %if.then18 ], [ -14, %if.then12 ], [ 0, %while.end ], [ 0, %if.end78 ], [ -14, %if.then125 ], [ -14, %if.then111 ], [ %err.0, %NewDefault ], [ 0, %if.end98 ], [ 0, %for.end ], [ 0, %if.end251 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @backtrack_insn(%struct.bpf_verifier_env* noundef %env, i32 noundef %idx, i32* nocapture noundef %reg_mask, i64* nocapture noundef %stack_mask) unnamed_addr #6 {
entry:
  %cbs = alloca %struct.bpf_insn_cbs, align 8
  %cb_print = getelementptr inbounds %struct.bpf_insn_cbs, %struct.bpf_insn_cbs* %cbs, i64 0, i32 0
  store void (i8*, i8*, ...)* @verbose, void (i8*, i8*, ...)** %cb_print, align 8
  %cb_call = getelementptr inbounds %struct.bpf_insn_cbs, %struct.bpf_insn_cbs* %cbs, i64 0, i32 1
  %private_data = getelementptr inbounds %struct.bpf_insn_cbs, %struct.bpf_insn_cbs* %cbs, i64 0, i32 3
  %i = bitcast %struct.bpf_verifier_env* %env to i8*
  %i82 = bitcast i8** %private_data to %struct.bpf_verifier_env**
  %i83 = bitcast i8* (i8*, %struct.bpf_insn*)** %cb_call to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i83, i8 0, i64 16, i1 false)
  store %struct.bpf_verifier_env* %env, %struct.bpf_verifier_env** %i82, align 8
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i84 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %i85 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i84, i64 0, i32 10
  %arraydecay = bitcast %union.anon.146* %i85 to %struct.bpf_insn*
  %idx.ext = sext i32 %idx to i64
  %add.ptr = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idx.ext
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %add.ptr, i64 0, i32 0
  %i86 = load i8, i8* %code, align 4
  %and = and i8 %i86, 7
  %and4 = and i8 %i86, -16
  %and8 = and i8 %i86, -32
  %dst_reg = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idx.ext, i32 1
  %bf.load = load i8, i8* %dst_reg, align 1
  %bf.clear = and i8 %bf.load, 15
  %conv10 = zext i8 %bf.clear to i32
  %shl = shl i32 1, %conv10
  %bf.lshr = lshr i8 %bf.load, 4
  %conv12 = zext i8 %bf.lshr to i32
  %shl13 = shl i32 1, %conv12
  %cmp = icmp eq i8 %i86, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %level = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i87 = load i32, i32* %level, align 8
  %and17 = and i32 %i87, 3
  %tobool.not = icmp eq i32 %and17, 0
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end
  %i88 = load i32, i32* %reg_mask, align 4
  %i89 = load i64, i64* %stack_mask, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([27 x i8], [27 x i8]* @.str.84, i64 0, i64 0), i32 noundef %i88, i64 noundef %i89) #22
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i64 0, i64 0), i32 noundef %idx) #22
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i90 = load i8, i8* %allow_ptr_leaks, align 8
  %i91 = and i8 %i90, 1
  %tobool19 = icmp ne i8 %i91, 0
  call void @print_bpf_insn(%struct.bpf_insn_cbs* noundef nonnull %cbs, %struct.bpf_insn* noundef %add.ptr, i1 noundef zeroext %tobool19) #23
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end
  br label %NodeBlock3

NodeBlock3:                                       ; preds = %if.end20
  %Pivot4 = icmp ult i8 %and, 4
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot.not = icmp eq i8 %and, 7
  br i1 %Pivot.not, label %if.then27, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %and, 4
  br i1 %SwitchLeaf2, label %if.then27, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i8 %and, 1
  br i1 %SwitchLeaf, label %if.then60, label %NewDefault

if.then27:                                        ; preds = %LeafBlock1, %NodeBlock
  %i92 = load i32, i32* %reg_mask, align 4
  %and28 = and i32 %i92, %shl
  %tobool29.not = icmp eq i32 %and28, 0
  br i1 %tobool29.not, label %return, label %if.end31

if.end31:                                         ; preds = %if.then27
  %cmp33 = icmp eq i8 %and4, -80
  %i93 = load i8, i8* %code, align 4
  %i94 = and i8 %i93, 8
  %cmp39.not = icmp eq i8 %i94, 0
  br i1 %cmp33, label %if.then35, label %if.else46

if.then35:                                        ; preds = %if.end31
  %neg43 = xor i32 %shl, -1
  %and44 = and i32 %i92, %neg43
  br i1 %cmp39.not, label %if.else, label %if.then41

if.then41:                                        ; preds = %if.then35
  %or = or i32 %and44, %shl13
  store i32 %or, i32* %reg_mask, align 4
  br label %if.end324

if.else:                                          ; preds = %if.then35
  store i32 %and44, i32* %reg_mask, align 4
  br label %if.end324

if.else46:                                        ; preds = %if.end31
  br i1 %cmp39.not, label %if.end324, label %if.then52

if.then52:                                        ; preds = %if.else46
  %or53 = or i32 %i92, %shl13
  store i32 %or53, i32* %reg_mask, align 4
  br label %if.end324

if.then60:                                        ; preds = %LeafBlock
  %i95 = load i32, i32* %reg_mask, align 4
  %and61 = and i32 %i95, %shl
  %tobool62.not = icmp eq i32 %and61, 0
  br i1 %tobool62.not, label %return, label %if.end64

if.end64:                                         ; preds = %if.then60
  %neg65 = xor i32 %shl, -1
  %and66 = and i32 %i95, %neg65
  store i32 %and66, i32* %reg_mask, align 4
  %bf.load68 = load i8, i8* %dst_reg, align 1
  %bf.lshr69.mask = and i8 %bf.load68, -16
  %cmp71.not = icmp eq i8 %bf.lshr69.mask, -96
  br i1 %cmp71.not, label %if.end74, label %return

if.end74:                                         ; preds = %if.end64
  %i96 = load i8, i8* %code, align 4
  %i97 = and i8 %i96, 24
  %cmp78.not = icmp eq i8 %i97, 24
  br i1 %cmp78.not, label %if.end81, label %return

if.end81:                                         ; preds = %if.end74
  %off = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idx.ext, i32 2
  %i98 = load i16, i16* %off, align 2
  %i99 = xor i16 %i98, -1
  %i100 = sdiv i16 %i99, 8
  %div = sext i16 %i100 to i32
  %cmp84 = icmp ugt i16 %i100, 63
  br i1 %cmp84, label %if.then86, label %if.end121

if.then86:                                        ; preds = %if.end81
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.85, i64 0, i64 0), i32 noundef %div) #22
  %.b81 = load i1, i1* @backtrack_insn.__warned, align 1
  br i1 %.b81, label %return, label %if.then93

if.then93:                                        ; preds = %if.then86
  store i1 true, i1* @backtrack_insn.__warned, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.80, i64 0, i64 0)) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 1611, i32 2313, i64 12) #24, !srcloc !44
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 146) #24, !srcloc !45
  br label %return

if.end121:                                        ; preds = %if.end81
  %sh_prom = zext i32 %div to i64
  %shl122 = shl i64 1, %sh_prom
  %i101 = load i64, i64* %stack_mask, align 8
  %or123 = or i64 %i101, %shl122
  store i64 %or123, i64* %stack_mask, align 8
  br label %if.end324

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.else124

if.else124:                                       ; preds = %NewDefault
  %cmp126 = icmp eq i8 %and, 3
  %i102 = and i8 %i86, 6
  %i103 = icmp eq i8 %i102, 2
  br i1 %i103, label %if.then132, label %if.else222

if.then132:                                       ; preds = %if.else124
  %i104 = load i32, i32* %reg_mask, align 4
  %and133 = and i32 %i104, %shl
  %tobool134.not = icmp eq i32 %and133, 0
  br i1 %tobool134.not, label %if.end136, label %return

if.end136:                                        ; preds = %if.then132
  %bf.load138 = load i8, i8* %dst_reg, align 1
  %bf.clear139 = and i8 %bf.load138, 15
  %cmp141.not = icmp eq i8 %bf.clear139, 10
  br i1 %cmp141.not, label %if.end144, label %return

if.end144:                                        ; preds = %if.end136
  %i105 = load i8, i8* %code, align 4
  %i106 = and i8 %i105, 24
  %cmp148.not = icmp eq i8 %i106, 24
  br i1 %cmp148.not, label %if.end151, label %return

if.end151:                                        ; preds = %if.end144
  %off152 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %arraydecay, i64 %idx.ext, i32 2
  %i107 = load i16, i16* %off152, align 2
  %i108 = xor i16 %i107, -1
  %i109 = sdiv i16 %i108, 8
  %div156 = sext i16 %i109 to i32
  %cmp157 = icmp ugt i16 %i109, 63
  br i1 %cmp157, label %if.then159, label %if.end205

if.then159:                                       ; preds = %if.end151
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.85, i64 0, i64 0), i32 noundef %div156) #22
  %.b7780 = load i1, i1* @backtrack_insn.__warned.86, align 1
  br i1 %.b7780, label %return, label %if.then173

if.then173:                                       ; preds = %if.then159
  store i1 true, i1* @backtrack_insn.__warned.86, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.80, i64 0, i64 0)) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 1630, i32 2313, i64 12) #24, !srcloc !46
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 147) #24, !srcloc !47
  br label %return

if.end205:                                        ; preds = %if.end151
  %i110 = load i64, i64* %stack_mask, align 8
  %sh_prom206 = zext i32 %div156 to i64
  %shl207 = shl i64 1, %sh_prom206
  %and208 = and i64 %i110, %shl207
  %tobool209.not = icmp eq i64 %and208, 0
  br i1 %tobool209.not, label %return, label %if.end211

if.end211:                                        ; preds = %if.end205
  %neg214 = xor i64 %shl207, -1
  %and215 = and i64 %i110, %neg214
  store i64 %and215, i64* %stack_mask, align 8
  br i1 %cmp126, label %if.then219, label %if.end324

if.then219:                                       ; preds = %if.end211
  %i111 = load i32, i32* %reg_mask, align 4
  %or220 = or i32 %i111, %shl13
  store i32 %or220, i32* %reg_mask, align 4
  br label %if.end324

if.else222:                                       ; preds = %if.else124
  %i112 = add nsw i8 %and, -5
  %i113 = icmp ult i8 %i112, 2
  br i1 %i113, label %if.then230, label %if.else300

if.then230:                                       ; preds = %if.else222
  br label %NodeBlock10

NodeBlock10:                                      ; preds = %if.then230
  %Pivot11 = icmp slt i8 %and4, -112
  br i1 %Pivot11, label %LeafBlock6, label %LeafBlock8

LeafBlock8:                                       ; preds = %NodeBlock10
  %SwitchLeaf9 = icmp eq i8 %and4, -112
  br i1 %SwitchLeaf9, label %return, label %NewDefault5

LeafBlock6:                                       ; preds = %NodeBlock10
  %SwitchLeaf7 = icmp eq i8 %and4, -128
  br i1 %SwitchLeaf7, label %if.then234, label %NewDefault5

if.then234:                                       ; preds = %LeafBlock6
  %bf.load236 = load i8, i8* %dst_reg, align 1
  %bf.lshr237.mask = and i8 %bf.load236, -16
  %cmp239 = icmp eq i8 %bf.lshr237.mask, 16
  br i1 %cmp239, label %return, label %if.end242

if.end242:                                        ; preds = %if.then234
  %i114 = load i32, i32* %reg_mask, align 4
  %and243 = and i32 %i114, -2
  store i32 %and243, i32* %reg_mask, align 4
  %and244 = and i32 %i114, 62
  %tobool245.not = icmp eq i32 %and244, 0
  br i1 %tobool245.not, label %if.end324, label %if.then246

if.then246:                                       ; preds = %if.end242
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.87, i64 0, i64 0), i32 noundef %and243) #22
  %.b7879 = load i1, i1* @backtrack_insn.__warned.88, align 1
  br i1 %.b7879, label %return, label %if.then260

if.then260:                                       ; preds = %if.then246
  store i1 true, i1* @backtrack_insn.__warned.88, align 1
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.80, i64 0, i64 0)) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 1649, i32 2313, i64 12) #24, !srcloc !48
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 148) #24, !srcloc !49
  br label %return

if.else300:                                       ; preds = %if.else222
  %cmp302 = icmp eq i8 %and, 0
  br i1 %cmp302, label %if.then304, label %if.end324

if.then304:                                       ; preds = %if.else300
  %i115 = load i32, i32* %reg_mask, align 4
  %and305 = and i32 %i115, %shl
  %tobool306.not = icmp eq i32 %and305, 0
  br i1 %tobool306.not, label %return, label %if.end308

if.end308:                                        ; preds = %if.then304
  %neg309 = xor i32 %shl, -1
  %and310 = and i32 %i115, %neg309
  store i32 %and310, i32* %reg_mask, align 4
  %switch.selectcmp.case1 = icmp eq i8 %and8, 64
  %switch.selectcmp.case2 = icmp eq i8 %and8, 32
  %switch.selectcmp = or i1 %switch.selectcmp.case1, %switch.selectcmp.case2
  %i116 = select i1 %switch.selectcmp, i32 -524, i32 0
  br label %return

NewDefault5:                                      ; preds = %LeafBlock6, %LeafBlock8
  br label %if.end324

if.end324:                                        ; preds = %NewDefault5, %if.else300, %if.end242, %if.then219, %if.end211, %if.end121, %if.then52, %if.else46, %if.else, %if.then41
  br label %return

return:                                           ; preds = %if.end324, %if.end308, %if.then304, %if.then260, %if.then246, %if.then234, %LeafBlock8, %if.end205, %if.then173, %if.then159, %if.end144, %if.end136, %if.then132, %if.then93, %if.then86, %if.end74, %if.end64, %if.then60, %if.then27, %entry
  %retval.0 = phi i32 [ 0, %if.end324 ], [ 0, %entry ], [ 0, %if.then27 ], [ 0, %if.then60 ], [ 0, %if.end64 ], [ 0, %if.end74 ], [ -14, %if.then93 ], [ -14, %if.then86 ], [ -524, %if.then132 ], [ 0, %if.end136 ], [ 0, %if.end144 ], [ -14, %if.then173 ], [ -14, %if.then159 ], [ 0, %if.end205 ], [ -524, %if.then234 ], [ -14, %if.then260 ], [ -14, %if.then246 ], [ -524, %LeafBlock8 ], [ 0, %if.then304 ], [ %i116, %if.end308 ]
  ret i32 %retval.0
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @mark_all_scalars_precise(%struct.bpf_verifier_state* noundef readonly %st) unnamed_addr #15 {
entry:
  %tobool.not6 = icmp eq %struct.bpf_verifier_state* %st, null
  br i1 %tobool.not6, label %for.end35, label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc34, %entry
  %st.addr.07 = phi %struct.bpf_verifier_state* [ %i27, %for.inc34 ], [ %st, %entry ]
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st.addr.07, i64 0, i32 4
  br label %for.body2

for.body2:                                        ; preds = %for.inc31, %for.cond1.preheader
  %i.05 = phi i32 [ 0, %for.cond1.preheader ], [ %inc32, %for.inc31 ]
  %idxprom = sext i32 %i.05 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st.addr.07, i64 0, i32 0, i64 %idxprom
  %i = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %type = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 0, i32 0
  %i10 = load i32, i32* %type, align 8
  %cmp8.not = icmp eq i32 %i10, 1
  br i1 %cmp8.not, label %if.end, label %for.inc

for.body11.lr.ph:                                 ; preds = %for.inc.9
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 7
  br label %for.body11

if.end:                                           ; preds = %for.body2
  %precise = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 0, i32 14
  store i8 1, i8* %precise, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end, %for.body2
  %type.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 1, i32 0
  %i11 = load i32, i32* %type.1, align 8
  %cmp8.not.1 = icmp eq i32 %i11, 1
  br i1 %cmp8.not.1, label %if.end.1, label %for.inc.1

if.end.1:                                         ; preds = %for.inc
  %precise.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 1, i32 14
  store i8 1, i8* %precise.1, align 4
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.end.1, %for.inc
  %type.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 2, i32 0
  %i12 = load i32, i32* %type.2, align 8
  %cmp8.not.2 = icmp eq i32 %i12, 1
  br i1 %cmp8.not.2, label %if.end.2, label %for.inc.2

if.end.2:                                         ; preds = %for.inc.1
  %precise.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 2, i32 14
  store i8 1, i8* %precise.2, align 4
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.end.2, %for.inc.1
  %type.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 3, i32 0
  %i13 = load i32, i32* %type.3, align 8
  %cmp8.not.3 = icmp eq i32 %i13, 1
  br i1 %cmp8.not.3, label %if.end.3, label %for.inc.3

if.end.3:                                         ; preds = %for.inc.2
  %precise.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 3, i32 14
  store i8 1, i8* %precise.3, align 4
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.end.3, %for.inc.2
  %type.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 4, i32 0
  %i14 = load i32, i32* %type.4, align 8
  %cmp8.not.4 = icmp eq i32 %i14, 1
  br i1 %cmp8.not.4, label %if.end.4, label %for.inc.4

if.end.4:                                         ; preds = %for.inc.3
  %precise.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 4, i32 14
  store i8 1, i8* %precise.4, align 4
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.end.4, %for.inc.3
  %type.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 5, i32 0
  %i15 = load i32, i32* %type.5, align 8
  %cmp8.not.5 = icmp eq i32 %i15, 1
  br i1 %cmp8.not.5, label %if.end.5, label %for.inc.5

if.end.5:                                         ; preds = %for.inc.4
  %precise.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 5, i32 14
  store i8 1, i8* %precise.5, align 4
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.end.5, %for.inc.4
  %type.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 6, i32 0
  %i16 = load i32, i32* %type.6, align 8
  %cmp8.not.6 = icmp eq i32 %i16, 1
  br i1 %cmp8.not.6, label %if.end.6, label %for.inc.6

if.end.6:                                         ; preds = %for.inc.5
  %precise.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 6, i32 14
  store i8 1, i8* %precise.6, align 4
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.end.6, %for.inc.5
  %type.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 7, i32 0
  %i17 = load i32, i32* %type.7, align 8
  %cmp8.not.7 = icmp eq i32 %i17, 1
  br i1 %cmp8.not.7, label %if.end.7, label %for.inc.7

if.end.7:                                         ; preds = %for.inc.6
  %precise.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 7, i32 14
  store i8 1, i8* %precise.7, align 4
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.end.7, %for.inc.6
  %type.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 8, i32 0
  %i18 = load i32, i32* %type.8, align 8
  %cmp8.not.8 = icmp eq i32 %i18, 1
  br i1 %cmp8.not.8, label %if.end.8, label %for.inc.8

if.end.8:                                         ; preds = %for.inc.7
  %precise.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 8, i32 14
  store i8 1, i8* %precise.8, align 4
  br label %for.inc.8

for.inc.8:                                        ; preds = %if.end.8, %for.inc.7
  %type.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 9, i32 0
  %i19 = load i32, i32* %type.9, align 8
  %cmp8.not.9 = icmp eq i32 %i19, 1
  br i1 %cmp8.not.9, label %if.end.9, label %for.inc.9

if.end.9:                                         ; preds = %for.inc.8
  %precise.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 9, i32 14
  store i8 1, i8* %precise.9, align 4
  br label %for.inc.9

for.inc.9:                                        ; preds = %if.end.9, %for.inc.8
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 6
  %i20 = load i32, i32* %allocated_stack, align 8
  %cmp103 = icmp sgt i32 %i20, 7
  br i1 %cmp103, label %for.body11.lr.ph, label %for.inc31

for.body11:                                       ; preds = %for.inc28, %for.body11.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body11.lr.ph ], [ %indvars.iv.next, %for.inc28 ]
  %i21 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx14 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i21, i64 %indvars.iv, i32 1, i64 0
  %i22 = load i8, i8* %arrayidx14, align 8
  %cmp15.not = icmp eq i8 %i22, 1
  br i1 %cmp15.not, label %if.end18, label %for.inc28

if.end18:                                         ; preds = %for.body11
  %type22 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i21, i64 %indvars.iv, i32 0, i32 0
  %i23 = load i32, i32* %type22, align 8
  %cmp23.not = icmp eq i32 %i23, 1
  br i1 %cmp23.not, label %if.end26, label %for.inc28

if.end26:                                         ; preds = %if.end18
  %precise27 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i21, i64 %indvars.iv, i32 0, i32 14
  store i8 1, i8* %precise27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %if.end26, %if.end18, %for.body11
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %i24 = load i32, i32* %allocated_stack, align 8
  %div = sdiv i32 %i24, 8
  %i25 = sext i32 %div to i64
  %cmp10 = icmp slt i64 %indvars.iv.next, %i25
  br i1 %cmp10, label %for.body11, label %for.inc31

for.inc31:                                        ; preds = %for.inc28, %for.inc.9
  %inc32 = add i32 %i.05, 1
  %i26 = load i32, i32* %curframe, align 8
  %cmp.not = icmp ugt i32 %inc32, %i26
  br i1 %cmp.not, label %for.inc34, label %for.body2

for.inc34:                                        ; preds = %for.inc31
  %parent = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st.addr.07, i64 0, i32 1
  %i27 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %parent, align 8
  %tobool.not = icmp eq %struct.bpf_verifier_state* %i27, null
  br i1 %tobool.not, label %for.end35, label %for.cond1.preheader

for.end35:                                        ; preds = %for.inc34, %entry
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @get_prev_insn_idx(%struct.bpf_verifier_state* nocapture noundef readonly %st, i32 noundef %i, i32* nocapture noundef %history) unnamed_addr #10 {
entry:
  %i7 = load i32, i32* %history, align 4
  %tobool.not = icmp eq i32 %i7, 0
  br i1 %tobool.not, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %jmp_history = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st, i64 0, i32 9
  %i8 = load %struct.util_est*, %struct.util_est** %jmp_history, align 8
  %sub = add i32 %i7, -1
  %idxprom = zext i32 %sub to i64
  %idx = getelementptr %struct.util_est, %struct.util_est* %i8, i64 %idxprom, i32 1
  %i9 = load i32, i32* %idx, align 4
  %cmp = icmp eq i32 %i9, %i
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %prev_idx = getelementptr %struct.util_est, %struct.util_est* %i8, i64 %idxprom, i32 0
  %i10 = load i32, i32* %prev_idx, align 4
  store i32 %sub, i32* %history, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %dec5 = add i32 %i, -1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %i.addr.0 = phi i32 [ %i10, %if.then ], [ %dec5, %if.else ]
  ret i32 %i.addr.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn writeonly
define internal fastcc void @bitmap_from_u64(i64* nocapture noundef writeonly %dst, i64 noundef %mask) unnamed_addr #13 {
entry:
  store i64 %mask, i64* %dst, align 8
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i64 @find_first_bit(i64* noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i64 @find_next_bit(i64* noundef, i64 noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @tnum_is_unknown(i64 %a.coerce1) unnamed_addr #2 {
entry:
  %tobool.not = icmp eq i64 %a.coerce1, -1
  ret i1 %tobool.not
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @transfer_reference_state(%struct.bpf_func_state* nocapture noundef %dst, %struct.bpf_func_state* nocapture noundef readonly %src) unnamed_addr #6 {
entry:
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %src, i64 0, i32 4
  %i = load i32, i32* %acquired_refs, align 4
  %call = call fastcc i32 @realloc_reference_state(%struct.bpf_func_state* noundef %dst, i32 noundef %i, i1 noundef zeroext false) #22
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call1 = call fastcc i32 @copy_reference_state(%struct.bpf_func_state* noundef %dst, %struct.bpf_func_state* noundef %src) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call, %entry ], [ %call1, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local zeroext i1 @bpf_helper_changes_pkt_data(i8* noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc i32 @check_func_proto(%struct.bpf_func_proto* nocapture noundef readonly %fn, i32 noundef %func_id) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @check_raw_mode_ok(%struct.bpf_func_proto* noundef %fn) #22
  br i1 %call, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call fastcc zeroext i1 @check_arg_pair_ok(%struct.bpf_func_proto* noundef %fn) #22
  br i1 %call1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %call2 = call fastcc zeroext i1 @check_refcount_ok(%struct.bpf_func_proto* noundef %fn, i32 noundef %func_id) #22
  %phi.sel = select i1 %call2, i32 0, i32 -22
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %i = phi i32 [ -22, %land.lhs.true ], [ -22, %entry ], [ %phi.sel, %land.rhs ]
  ret i32 %i
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_func_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %arg_type, %struct.bpf_call_arg_meta* noundef %meta) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %idxprom = zext i32 %regno to i64
  %arrayidx = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx, i64 0, i32 0
  %i = load i32, i32* %type1, align 8
  %cmp = icmp eq i32 %arg_type, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call2 = call fastcc i32 @check_reg_arg(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef 0) #22
  %tobool.not = icmp eq i32 %call2, 0
  br i1 %tobool.not, label %if.end4, label %return

if.end4:                                          ; preds = %if.end
  %cmp5 = icmp eq i32 %arg_type, 12
  br i1 %cmp5, label %return, label %if.end10

if.end10:                                         ; preds = %if.end4
  %call11 = call fastcc zeroext i1 @type_is_pkt_pointer(i32 noundef %i) #22
  br i1 %call11, label %land.lhs.true, label %if.end14

land.lhs.true:                                    ; preds = %if.end10
  %call12 = call fastcc zeroext i1 @may_access_direct_pkt_data(%struct.bpf_verifier_env* noundef %env, %struct.bpf_call_arg_meta* noundef %meta, i32 noundef 1) #22
  br i1 %call12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %land.lhs.true
  %i156 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i156, i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.230, i64 0, i64 0)) #22
  br label %return

if.end14:                                         ; preds = %land.lhs.true, %if.end10
  %cmp18 = icmp eq i32 %arg_type, 4
  %cmp20 = icmp eq i32 %arg_type, 5
  %arg_type.off = add i32 %arg_type, -2
  %switch = icmp ult i32 %arg_type.off, 4
  br i1 %switch, label %if.then21, label %if.else34

if.then21:                                        ; preds = %if.end14
  %call22 = call fastcc zeroext i1 @register_is_null(%struct.bpf_reg_state* noundef %arrayidx) #22
  %or.cond3 = and i1 %cmp20, %call22
  %brmerge = select i1 %or.cond3, i1 true, i1 %call11
  br i1 %brmerge, label %if.end137, label %switch.early.test

switch.early.test:                                ; preds = %if.then21
  br label %NodeBlock

NodeBlock:                                        ; preds = %switch.early.test
  %Pivot = icmp slt i32 %i, 6
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i, 6
  br i1 %SwitchLeaf2, label %if.end137, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i, 4
  br i1 %SwitchLeaf, label %if.end137, label %NewDefault

if.else34:                                        ; preds = %if.end14
  %i157 = add i32 %arg_type, -9
  %i158 = icmp ult i32 %i157, 2
  br i1 %i158, label %if.then38, label %if.else42

if.then38:                                        ; preds = %if.else34
  %cmp39.not = icmp eq i32 %i, 1
  br i1 %cmp39.not, label %if.end137, label %err_type

if.else42:                                        ; preds = %if.else34
  br label %NodeBlock18

NodeBlock18:                                      ; preds = %if.else42
  %Pivot19 = icmp slt i32 %arg_type, 13
  br i1 %Pivot19, label %NodeBlock8, label %NodeBlock16

NodeBlock16:                                      ; preds = %NodeBlock18
  %Pivot17 = icmp eq i32 %arg_type, 13
  br i1 %Pivot17, label %if.then83, label %NodeBlock14

NodeBlock14:                                      ; preds = %NodeBlock16
  %Pivot15 = icmp slt i32 %arg_type, 17
  br i1 %Pivot15, label %LeafBlock10, label %LeafBlock12

LeafBlock12:                                      ; preds = %NodeBlock14
  %SwitchLeaf13 = icmp eq i32 %arg_type, 17
  br i1 %SwitchLeaf13, label %if.then77, label %NewDefault3

LeafBlock10:                                      ; preds = %NodeBlock14
  %SwitchLeaf11 = icmp eq i32 %arg_type, 14
  br i1 %SwitchLeaf11, label %if.then60, label %NewDefault3

NodeBlock8:                                       ; preds = %NodeBlock18
  %Pivot9 = icmp slt i32 %arg_type, 11
  br i1 %Pivot9, label %LeafBlock4, label %LeafBlock6

LeafBlock6:                                       ; preds = %NodeBlock8
  %SwitchLeaf7 = icmp eq i32 %arg_type, 11
  br i1 %SwitchLeaf7, label %if.then50, label %NewDefault3

LeafBlock4:                                       ; preds = %NodeBlock8
  %SwitchLeaf5 = icmp eq i32 %arg_type, 1
  br i1 %SwitchLeaf5, label %if.then44, label %NewDefault3

if.then44:                                        ; preds = %LeafBlock4
  %cmp45.not = icmp eq i32 %i, 3
  br i1 %cmp45.not, label %if.end137, label %err_type

if.then50:                                        ; preds = %LeafBlock6
  %cmp51.not = icmp eq i32 %i, 2
  br i1 %cmp51.not, label %if.end53, label %err_type

if.end53:                                         ; preds = %if.then50
  %call54 = call fastcc i32 @check_ctx_reg(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arrayidx, i32 noundef %regno) #22
  %cmp55 = icmp slt i32 %call54, 0
  br i1 %cmp55, label %return, label %if.end137

if.then60:                                        ; preds = %LeafBlock10
  %call61 = call fastcc zeroext i1 @type_is_sk_pointer(i32 noundef %i) #22
  br i1 %call61, label %if.end63, label %err_type

if.end63:                                         ; preds = %if.then60
  %ref_obj_id = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 4
  %i159 = load i32, i32* %ref_obj_id, align 8
  %tobool64.not = icmp eq i32 %i159, 0
  br i1 %tobool64.not, label %if.end137, label %if.then65

if.then65:                                        ; preds = %if.end63
  %ref_obj_id66 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 7
  %i160 = load i32, i32* %ref_obj_id66, align 8
  %tobool67.not = icmp eq i32 %i160, 0
  br i1 %tobool67.not, label %if.end71, label %if.then68

if.then68:                                        ; preds = %if.then65
  %i161 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i161, i8* noundef getelementptr inbounds ([70 x i8], [70 x i8]* @.str.231, i64 0, i64 0), i32 noundef %regno, i32 noundef %i159, i32 noundef %i160) #22
  br label %return

if.end71:                                         ; preds = %if.then65
  store i32 %i159, i32* %ref_obj_id66, align 8
  br label %if.end137

if.then77:                                        ; preds = %LeafBlock12
  %cmp78.not = icmp eq i32 %i, 11
  br i1 %cmp78.not, label %if.end137, label %err_type

if.then83:                                        ; preds = %NodeBlock16
  %func_id = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 8
  %i162 = load i32, i32* %func_id, align 4
  br label %NodeBlock25

NodeBlock25:                                      ; preds = %if.then83
  %Pivot26 = icmp slt i32 %i162, 94
  br i1 %Pivot26, label %LeafBlock21, label %LeafBlock23

LeafBlock23:                                      ; preds = %NodeBlock25
  %SwitchLeaf24 = icmp eq i32 %i162, 94
  br i1 %SwitchLeaf24, label %if.then93, label %NewDefault20

LeafBlock21:                                      ; preds = %NodeBlock25
  %SwitchLeaf22 = icmp eq i32 %i162, 93
  br i1 %SwitchLeaf22, label %if.then85, label %NewDefault20

if.then85:                                        ; preds = %LeafBlock21
  %call86 = call fastcc i32 @process_spin_lock(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i1 noundef zeroext true) #22
  %tobool87.not = icmp eq i32 %call86, 0
  br i1 %tobool87.not, label %if.end137, label %return

if.then93:                                        ; preds = %LeafBlock23
  %call94 = call fastcc i32 @process_spin_lock(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i1 noundef zeroext false) #22
  %tobool95.not = icmp eq i32 %call94, 0
  br i1 %tobool95.not, label %if.end137, label %return

NewDefault20:                                     ; preds = %LeafBlock21, %LeafBlock23
  br label %if.else98

if.else98:                                        ; preds = %NewDefault20
  %i163 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i163, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.232, i64 0, i64 0)) #22
  br label %return

NewDefault3:                                      ; preds = %LeafBlock4, %LeafBlock6, %LeafBlock10, %LeafBlock12
  br label %if.else101

if.else101:                                       ; preds = %NewDefault3
  %call102 = call fastcc zeroext i1 @arg_type_is_mem_ptr(i32 noundef %arg_type) #22
  br i1 %call102, label %if.then103, label %if.else118

if.then103:                                       ; preds = %if.else101
  %call104 = call fastcc zeroext i1 @register_is_null(%struct.bpf_reg_state* noundef %arrayidx) #22
  %cmp106 = icmp eq i32 %arg_type, 7
  %or.cond6 = and i1 %cmp106, %call104
  %brmerge154 = select i1 %or.cond6, i1 true, i1 %call11
  br i1 %brmerge154, label %if.end116, label %switch.early.test152

switch.early.test152:                             ; preds = %if.then103
  br label %NodeBlock32

NodeBlock32:                                      ; preds = %switch.early.test152
  %Pivot33 = icmp slt i32 %i, 6
  br i1 %Pivot33, label %LeafBlock28, label %LeafBlock30

LeafBlock30:                                      ; preds = %NodeBlock32
  %SwitchLeaf31 = icmp eq i32 %i, 6
  br i1 %SwitchLeaf31, label %if.end116, label %NewDefault27

LeafBlock28:                                      ; preds = %NodeBlock32
  %SwitchLeaf29 = icmp eq i32 %i, 4
  br i1 %SwitchLeaf29, label %if.end116, label %NewDefault27

if.end116:                                        ; preds = %LeafBlock28, %LeafBlock30, %if.then103
  %cmp117 = icmp eq i32 %arg_type, 8
  %raw_mode = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 1
  %frombool = zext i1 %cmp117 to i8
  store i8 %frombool, i8* %raw_mode, align 8
  br label %if.end137

if.else118:                                       ; preds = %if.else101
  %call119 = call fastcc zeroext i1 @arg_type_is_int_ptr(i32 noundef %arg_type) #22
  br i1 %call119, label %if.then120, label %if.else128

if.then120:                                       ; preds = %if.else118
  br i1 %call11, label %if.end137, label %switch.early.test153

switch.early.test153:                             ; preds = %if.then120
  br label %NodeBlock39

NodeBlock39:                                      ; preds = %switch.early.test153
  %Pivot40 = icmp slt i32 %i, 6
  br i1 %Pivot40, label %LeafBlock35, label %LeafBlock37

LeafBlock37:                                      ; preds = %NodeBlock39
  %SwitchLeaf38 = icmp eq i32 %i, 6
  br i1 %SwitchLeaf38, label %if.end137, label %NewDefault34

LeafBlock35:                                      ; preds = %NodeBlock39
  %SwitchLeaf36 = icmp eq i32 %i, 4
  br i1 %SwitchLeaf36, label %if.end137, label %NewDefault34

if.else128:                                       ; preds = %if.else118
  %i164 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i164, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.233, i64 0, i64 0), i32 noundef %arg_type) #22
  br label %return

if.end137:                                        ; preds = %LeafBlock35, %LeafBlock37, %if.then120, %if.end116, %if.then93, %if.then85, %if.then77, %if.end71, %if.end63, %if.end53, %if.then44, %if.then38, %LeafBlock, %LeafBlock1, %if.then21
  br label %NodeBlock48

NodeBlock48:                                      ; preds = %if.end137
  %Pivot49 = icmp slt i32 %arg_type, 2
  br i1 %Pivot49, label %LeafBlock42, label %NodeBlock46

NodeBlock46:                                      ; preds = %NodeBlock48
  %Pivot47 = icmp eq i32 %arg_type, 2
  br i1 %Pivot47, label %if.then143, label %LeafBlock44

LeafBlock44:                                      ; preds = %NodeBlock46
  %SwitchLeaf45 = icmp eq i32 %arg_type, 3
  br i1 %SwitchLeaf45, label %if.then158, label %NewDefault41

LeafBlock42:                                      ; preds = %NodeBlock48
  %SwitchLeaf43 = icmp eq i32 %arg_type, 1
  br i1 %SwitchLeaf43, label %if.then139, label %NewDefault41

if.then139:                                       ; preds = %LeafBlock42
  %map_ptr = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 1, i32 0
  %i165 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %map_ptr140 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 0
  store %struct.bpf_map* %i165, %struct.bpf_map** %map_ptr140, align 8
  br label %return

if.then143:                                       ; preds = %NodeBlock46
  %map_ptr144 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 0
  %i166 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr144, align 8
  %tobool145.not = icmp eq %struct.bpf_map* %i166, null
  br i1 %tobool145.not, label %if.then146, label %if.end147

if.then146:                                       ; preds = %if.then143
  %i167 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i167, i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.234, i64 0, i64 0)) #22
  br label %return

if.end147:                                        ; preds = %if.then143
  %key_size = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i166, i64 0, i32 4
  %i168 = load i32, i32* %key_size, align 4
  %call149 = call fastcc i32 @check_helper_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %i168, i1 noundef zeroext false, %struct.bpf_call_arg_meta* noundef null) #22
  br label %return

NewDefault41:                                     ; preds = %LeafBlock42, %LeafBlock44
  br label %lor.lhs.false152

lor.lhs.false152:                                 ; preds = %NewDefault41
  br i1 %cmp20, label %land.lhs.true154, label %lor.lhs.false156

land.lhs.true154:                                 ; preds = %lor.lhs.false152
  %call155 = call fastcc zeroext i1 @register_is_null(%struct.bpf_reg_state* noundef %arrayidx) #22
  %call155.not = xor i1 %call155, true
  %or.cond9 = or i1 %cmp18, %call155.not
  br i1 %or.cond9, label %if.then158, label %if.else168

lor.lhs.false156:                                 ; preds = %lor.lhs.false152
  br i1 %cmp18, label %if.then158, label %if.else168

if.then158:                                       ; preds = %lor.lhs.false156, %land.lhs.true154, %LeafBlock44
  %map_ptr159 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 0
  %i169 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr159, align 8
  %tobool160.not = icmp eq %struct.bpf_map* %i169, null
  br i1 %tobool160.not, label %if.then161, label %if.end162

if.then161:                                       ; preds = %if.then158
  %i170 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i170, i8* noundef getelementptr inbounds ([38 x i8], [38 x i8]* @.str.235, i64 0, i64 0)) #22
  br label %return

if.end162:                                        ; preds = %if.then158
  %raw_mode164 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 1
  %frombool165 = zext i1 %cmp18 to i8
  store i8 %frombool165, i8* %raw_mode164, align 8
  %value_size = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i169, i64 0, i32 5
  %i171 = load i32, i32* %value_size, align 32
  %call167 = call fastcc i32 @check_helper_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %i171, i1 noundef zeroext false, %struct.bpf_call_arg_meta* noundef %meta) #22
  br label %return

if.else168:                                       ; preds = %lor.lhs.false156, %land.lhs.true154
  %call169 = call fastcc zeroext i1 @arg_type_is_mem_size(i32 noundef %arg_type) #22
  br i1 %call169, label %if.then170, label %if.else199

if.then170:                                       ; preds = %if.else168
  %cmp171 = icmp eq i32 %arg_type, 10
  %smax_value = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 7
  %i172 = load i64, i64* %smax_value, align 8
  %msize_smax_value = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 5
  store i64 %i172, i64* %msize_smax_value, align 8
  %umax_value = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 9
  %i173 = load i64, i64* %umax_value, align 8
  %msize_umax_value = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 6
  store i64 %i173, i64* %msize_umax_value, align 8
  %i174 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 5, i32 1
  %i175 = load i64, i64* %i174, align 8
  %call173 = call fastcc zeroext i1 @tnum_is_const(i64 %i175) #22
  %spec.select = select i1 %call173, %struct.bpf_call_arg_meta* %meta, %struct.bpf_call_arg_meta* null
  %smin_value = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 6
  %i176 = load i64, i64* %smin_value, align 8
  %cmp176 = icmp slt i64 %i176, 0
  br i1 %cmp176, label %if.then177, label %if.end178

if.then177:                                       ; preds = %if.then170
  %i177 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i177, i8* noundef getelementptr inbounds ([66 x i8], [66 x i8]* @.str.236, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end178:                                        ; preds = %if.then170
  %umin_value = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 8
  %i178 = load i64, i64* %umin_value, align 8
  %cmp179 = icmp eq i64 %i178, 0
  br i1 %cmp179, label %if.then180, label %if.end186

if.then180:                                       ; preds = %if.end178
  %sub = add i32 %regno, -1
  %call182 = call fastcc i32 @check_helper_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %sub, i32 noundef 0, i1 noundef zeroext %cmp171, %struct.bpf_call_arg_meta* noundef %spec.select) #22
  %tobool183.not = icmp eq i32 %call182, 0
  br i1 %tobool183.not, label %if.end186, label %return

if.end186:                                        ; preds = %if.then180, %if.end178
  %i179 = load i64, i64* %umax_value, align 8
  %cmp188 = icmp ugt i64 %i179, 536870911
  br i1 %cmp188, label %if.then189, label %if.end190

if.then189:                                       ; preds = %if.end186
  %i180 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i180, i8* noundef getelementptr inbounds ([71 x i8], [71 x i8]* @.str.237, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end190:                                        ; preds = %if.end186
  %sub191 = add i32 %regno, -1
  %conv = trunc i64 %i179 to i32
  %call194 = call fastcc i32 @check_helper_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %sub191, i32 noundef %conv, i1 noundef zeroext %cmp171, %struct.bpf_call_arg_meta* noundef %spec.select) #22
  %tobool195.not = icmp eq i32 %call194, 0
  br i1 %tobool195.not, label %if.then196, label %return

if.then196:                                       ; preds = %if.end190
  %call197 = call fastcc i32 @mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno) #22
  br label %return

if.else199:                                       ; preds = %if.else168
  %call200 = call fastcc zeroext i1 @arg_type_is_int_ptr(i32 noundef %arg_type) #22
  br i1 %call200, label %if.then201, label %return

if.then201:                                       ; preds = %if.else199
  %call202 = call fastcc i32 @int_ptr_type_to_size(i32 noundef %arg_type) #22, !range !50
  %call203 = call fastcc i32 @check_helper_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %call202, i1 noundef zeroext false, %struct.bpf_call_arg_meta* noundef %meta) #22
  %tobool204.not = icmp eq i32 %call203, 0
  br i1 %tobool204.not, label %if.end206, label %return

if.end206:                                        ; preds = %if.then201
  %call207 = call fastcc i32 @check_ptr_alignment(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arrayidx, i32 noundef 0, i32 noundef %call202, i1 noundef zeroext true) #22
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %err_type

NewDefault27:                                     ; preds = %LeafBlock28, %LeafBlock30
  br label %err_type

NewDefault34:                                     ; preds = %LeafBlock35, %LeafBlock37
  br label %err_type

err_type:                                         ; preds = %NewDefault34, %NewDefault27, %NewDefault, %if.then77, %if.then60, %if.then50, %if.then44, %if.then38
  %expected_type.0 = phi i64 [ 1, %if.then38 ], [ 3, %if.then44 ], [ 2, %if.then50 ], [ 13, %if.then60 ], [ 11, %if.then77 ], [ 6, %NewDefault ], [ 6, %NewDefault27 ], [ 6, %NewDefault34 ]
  %i181 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom213 = zext i32 %i to i64
  %arrayidx214 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom213
  %i182 = load i8*, i8** %arrayidx214, align 8
  %arrayidx216 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %expected_type.0
  %i183 = load i8*, i8** %arrayidx216, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i181, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.238, i64 0, i64 0), i32 noundef %regno, i8* noundef %i182, i8* noundef %i183) #22
  br label %return

return:                                           ; preds = %err_type, %if.end206, %if.then201, %if.else199, %if.then196, %if.end190, %if.then189, %if.then180, %if.then177, %if.end162, %if.then161, %if.end147, %if.then146, %if.then139, %if.else128, %if.else98, %if.then93, %if.then85, %if.then68, %if.end53, %if.then13, %if.end4, %if.end, %entry
  %retval.0 = phi i32 [ -13, %if.then146 ], [ -13, %if.then161 ], [ -13, %if.then177 ], [ -13, %if.then189 ], [ -13, %err_type ], [ -14, %if.then68 ], [ -14, %if.else98 ], [ -14, %if.else128 ], [ -13, %if.then13 ], [ 0, %entry ], [ %call2, %if.end ], [ %call54, %if.end53 ], [ -13, %if.then85 ], [ -13, %if.then93 ], [ %call182, %if.then180 ], [ %call203, %if.then201 ], [ 0, %if.then139 ], [ %call149, %if.end147 ], [ %call167, %if.end162 ], [ %call194, %if.end190 ], [ %call197, %if.then196 ], [ %call207, %if.end206 ], [ 0, %if.else199 ], [ 0, %if.end4 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @record_func_map(%struct.bpf_verifier_env* noundef %env, %struct.bpf_map* %meta.0.0.val, i32 noundef %func_id, i32 noundef %insn_idx) unnamed_addr #6 {
entry:
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %idxprom = sext i32 %insn_idx to i64
  %arrayidx = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i, i64 %idxprom
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %entry
  %Pivot6 = icmp slt i32 %func_id, 12
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %func_id, 87
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp slt i32 %func_id, 90
  br i1 %SwitchLeaf4, label %if.end, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %func_id, 12
  br i1 %SwitchLeaf2, label %if.end, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %func_id.off = add i32 %func_id, -1
  %SwitchLeaf = icmp ult i32 %func_id.off, 3
  br i1 %SwitchLeaf, label %if.end, label %NewDefault

if.end:                                           ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3
  %cmp12 = icmp eq %struct.bpf_map* %meta.0.0.val, null
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  %i32 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i32, i8* noundef getelementptr inbounds ([41 x i8], [41 x i8]* @.str.226, i64 0, i64 0)) #22
  br label %return

if.end14:                                         ; preds = %if.end
  %map_flags = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %meta.0.0.val, i64 0, i32 7
  %i33 = load i32, i32* %map_flags, align 8
  %and = and i32 %i33, 128
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end23, label %land.lhs.true15

land.lhs.true15:                                  ; preds = %if.end14
  br label %NodeBlock13

NodeBlock13:                                      ; preds = %land.lhs.true15
  %Pivot14 = icmp slt i32 %func_id, 87
  br i1 %Pivot14, label %LeafBlock8, label %LeafBlock11

LeafBlock11:                                      ; preds = %NodeBlock13
  %SwitchLeaf12 = icmp slt i32 %func_id, 89
  br i1 %SwitchLeaf12, label %if.then22, label %NewDefault7

LeafBlock8:                                       ; preds = %NodeBlock13
  %0 = and i32 %func_id, -2
  %SwitchLeaf10 = icmp eq i32 %0, 2
  br i1 %SwitchLeaf10, label %if.then22, label %NewDefault7

if.then22:                                        ; preds = %LeafBlock8, %LeafBlock11
  %i34 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i34, i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.257, i64 0, i64 0)) #22
  br label %return

NewDefault7:                                      ; preds = %LeafBlock8, %LeafBlock11
  br label %if.end23

if.end23:                                         ; preds = %NewDefault7, %if.end14
  %map_state = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %arrayidx, i64 0, i32 0, i32 0
  %i35 = load i64, i64* %map_state, align 8
  %and24 = and i64 %i35, -2
  %tobool25.not = icmp eq i64 %and24, 0
  br i1 %tobool25.not, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.end23
  %unpriv_array = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %meta.0.0.val, i64 0, i32 15
  %i36 = load i8, i8* %unpriv_array, align 8
  %i37 = and i8 %i36, 1
  %tobool29 = icmp ne i8 %i37, 0
  call fastcc void @bpf_map_ptr_store(%struct.bpf_insn_aux_data* noundef %arrayidx, %struct.bpf_map* noundef nonnull %meta.0.0.val, i1 noundef zeroext %tobool29) #22
  br label %return

if.else:                                          ; preds = %if.end23
  %i38 = inttoptr i64 %and24 to %struct.bpf_map*
  %cmp33.not = icmp eq %struct.bpf_map* %i38, %meta.0.0.val
  br i1 %cmp33.not, label %return, label %if.then34

if.then34:                                        ; preds = %if.else
  %unpriv_array36 = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %meta.0.0.val, i64 0, i32 15
  %i39 = load i8, i8* %unpriv_array36, align 8
  %i40 = and i8 %i39, 1
  %tobool37 = icmp ne i8 %i40, 0
  call fastcc void @bpf_map_ptr_store(%struct.bpf_insn_aux_data* noundef %arrayidx, %struct.bpf_map* noundef nonnull inttoptr (i64 -2401263026318485698 to %struct.bpf_map*), i1 noundef zeroext %tobool37) #22
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3
  br label %return

return:                                           ; preds = %NewDefault, %if.then34, %if.else, %if.then26, %if.then22, %if.then13
  %retval.0 = phi i32 [ -22, %if.then13 ], [ -13, %if.then22 ], [ 0, %NewDefault ], [ 0, %if.else ], [ 0, %if.then34 ], [ 0, %if.then26 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @is_release_function(i32 noundef %func_id) unnamed_addr #2 {
entry:
  %cmp = icmp eq i32 %func_id, 86
  ret i1 %cmp
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @release_reference(%struct.bpf_verifier_env* noundef %env, i32 noundef %ref_obj_id) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %call = call fastcc %struct.bpf_func_state* @cur_func(%struct.bpf_verifier_state* %i) #22
  %call1 = call fastcc i32 @release_reference_state(%struct.bpf_func_state* noundef %call, i32 noundef %ref_obj_id) #22
  %tobool.not = icmp eq i32 %call1, 0
  br i1 %tobool.not, label %for.cond.preheader, label %return

for.cond.preheader:                               ; preds = %entry
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  br label %for.body

for.body:                                         ; preds = %for.body, %for.cond.preheader
  %i.08 = phi i32 [ 0, %for.cond.preheader ], [ %inc, %for.body ]
  %idxprom = sext i32 %i.08 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i9 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  call fastcc void @release_reg_references(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i9, i32 noundef %ref_obj_id) #22
  %inc = add i32 %i.08, 1
  %i10 = load i32, i32* %curframe, align 8
  %cmp.not = icmp ugt i32 %inc, %i10
  br i1 %cmp.not, label %return, label %for.body

return:                                           ; preds = %for.body, %entry
  %retval.0 = phi i32 [ %call1, %entry ], [ 0, %for.body ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @register_is_null(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %i2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i3 = load i64, i64* %i2, align 8
  %i4 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i5 = load i64, i64* %i4, align 8
  %call = call fastcc zeroext i1 @tnum_equals_const(i64 %i3, i64 %i5, i64 noundef 0) #22
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %i6 = phi i1 [ false, %entry ], [ %call, %land.rhs ]
  ret i1 %i6
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @is_ptr_cast_function(i32 noundef %func_id) unnamed_addr #2 {
entry:
  %i = add i32 %func_id, -95
  %i2 = icmp ult i32 %i, 2
  ret i1 %i2
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @is_acquire_function(i32 noundef %func_id) unnamed_addr #2 {
entry:
  %i = and i32 %func_id, -2
  %i3 = icmp eq i32 %i, 84
  %cmp2 = icmp eq i32 %func_id, 99
  %spec.select = or i1 %cmp2, %i3
  ret i1 %spec.select
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @acquire_reference_state(%struct.bpf_verifier_env* nocapture noundef %env, i32 noundef %insn_idx) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_func_state* @cur_func(%struct.bpf_verifier_state* %env.idx.val) #22
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %call, i64 0, i32 4
  %i = load i32, i32* %acquired_refs, align 4
  %add = add i32 %i, 1
  %call2 = call fastcc i32 @realloc_reference_state(%struct.bpf_func_state* noundef %call, i32 noundef %add, i1 noundef zeroext true) #22
  %tobool.not = icmp eq i32 %call2, 0
  br i1 %tobool.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %id_gen = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i9 = load i32, i32* %id_gen, align 4
  %inc = add i32 %i9, 1
  store i32 %inc, i32* %id_gen, align 4
  %refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %call, i64 0, i32 5
  %i10 = load %struct.util_est*, %struct.util_est** %refs, align 8
  %idxprom = sext i32 %i to i64
  %id3 = getelementptr %struct.util_est, %struct.util_est* %i10, i64 %idxprom, i32 0
  store i32 %inc, i32* %id3, align 4
  %i11 = load %struct.util_est*, %struct.util_est** %refs, align 8
  %insn_idx7 = getelementptr %struct.util_est, %struct.util_est* %i11, i64 %idxprom, i32 1
  store i32 %insn_idx, i32* %insn_idx7, align 4
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %inc, %if.end ], [ %call2, %entry ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @do_refine_retval_range(%struct.bpf_reg_state* nocapture noundef %regs, i32 noundef %ret_type, i32 noundef %func_id, %struct.bpf_call_arg_meta* nocapture noundef readonly %meta) unnamed_addr #10 {
entry:
  %cmp.not = icmp eq i32 %ret_type, 0
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %entry
  br label %NodeBlock

NodeBlock:                                        ; preds = %lor.lhs.false
  %Pivot = icmp slt i32 %func_id, 67
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %func_id, 67
  br i1 %SwitchLeaf2, label %if.end, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %func_id, 45
  br i1 %SwitchLeaf, label %if.end, label %NewDefault

if.end:                                           ; preds = %LeafBlock, %LeafBlock1
  %msize_smax_value = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 5
  %i = load i64, i64* %msize_smax_value, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 0, i32 7
  store i64 %i, i64* %smax_value, align 8
  %msize_umax_value = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 6
  %i6 = load i64, i64* %msize_umax_value, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %regs, i64 0, i32 9
  store i64 %i6, i64* %umax_value, align 8
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %regs) #22
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %regs) #22
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %return

return:                                           ; preds = %NewDefault, %if.end, %entry
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_map_func_compatibility(%struct.bpf_verifier_env* noundef %env, %struct.bpf_map* noundef readonly %map, i32 noundef %func_id) unnamed_addr #6 {
entry:
  %tobool.not = icmp eq %struct.bpf_map* %map, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %map_type = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %map, i64 0, i32 3
  %i = load i32, i32* %map_type, align 8
  br label %NodeBlock33

NodeBlock33:                                      ; preds = %if.end
  %Pivot34 = icmp slt i32 %i, 17
  br i1 %Pivot34, label %NodeBlock15, label %NodeBlock31

NodeBlock31:                                      ; preds = %NodeBlock33
  %Pivot32 = icmp slt i32 %i, 21
  br i1 %Pivot32, label %NodeBlock21, label %NodeBlock29

NodeBlock29:                                      ; preds = %NodeBlock31
  %Pivot30 = icmp slt i32 %i, 24
  br i1 %Pivot30, label %NodeBlock23, label %NodeBlock27

NodeBlock27:                                      ; preds = %NodeBlock29
  %Pivot28 = icmp eq i32 %i, 24
  br i1 %Pivot28, label %sw.bb76, label %LeafBlock25

LeafBlock25:                                      ; preds = %NodeBlock27
  %SwitchLeaf26 = icmp eq i32 %i, 25
  br i1 %SwitchLeaf26, label %sw.bb24, label %NewDefault

NodeBlock23:                                      ; preds = %NodeBlock29
  %Pivot24 = icmp slt i32 %i, 22
  br i1 %Pivot24, label %sw.bb20, label %sw.bb68

NodeBlock21:                                      ; preds = %NodeBlock31
  %Pivot22 = icmp slt i32 %i, 19
  br i1 %Pivot22, label %NodeBlock17, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp eq i32 %i, 19
  br i1 %Pivot20, label %sw.bb20, label %sw.bb64

NodeBlock17:                                      ; preds = %NodeBlock21
  %Pivot18.not = icmp eq i32 %i, 18
  br i1 %Pivot18.not, label %sw.bb54, label %sw.bb34

NodeBlock15:                                      ; preds = %NodeBlock33
  %Pivot16 = icmp slt i32 %i, 12
  br i1 %Pivot16, label %NodeBlock7, label %NodeBlock13

NodeBlock13:                                      ; preds = %NodeBlock15
  %Pivot14 = icmp slt i32 %i, 15
  br i1 %Pivot14, label %NodeBlock9, label %NodeBlock11

NodeBlock11:                                      ; preds = %NodeBlock13
  %Pivot12 = icmp eq i32 %i, 15
  br i1 %Pivot12, label %sw.bb44, label %sw.bb30

NodeBlock9:                                       ; preds = %NodeBlock13
  %Pivot10.not = icmp eq i32 %i, 14
  br i1 %Pivot10.not, label %sw.bb24, label %sw.bb40

NodeBlock7:                                       ; preds = %NodeBlock15
  %Pivot8 = icmp slt i32 %i, 7
  br i1 %Pivot8, label %NodeBlock, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp eq i32 %i, 7
  br i1 %Pivot6, label %sw.bb10, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp eq i32 %i, 8
  br i1 %SwitchLeaf4, label %sw.bb14, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock7
  %Pivot = icmp slt i32 %i, 4
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i, 4
  br i1 %SwitchLeaf2, label %sw.bb3, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i, 3
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %cmp.not = icmp eq i32 %func_id, 12
  br i1 %cmp.not, label %sw.epilog, label %error

sw.bb3:                                           ; preds = %LeafBlock1
  br label %NodeBlock44

NodeBlock44:                                      ; preds = %sw.bb3
  %Pivot45 = icmp slt i32 %func_id, 25
  br i1 %Pivot45, label %LeafBlock36, label %NodeBlock42

NodeBlock42:                                      ; preds = %NodeBlock44
  %Pivot43 = icmp slt i32 %func_id, 55
  br i1 %Pivot43, label %LeafBlock38, label %LeafBlock40

LeafBlock40:                                      ; preds = %NodeBlock42
  %SwitchLeaf41 = icmp eq i32 %func_id, 55
  br i1 %SwitchLeaf41, label %sw.epilog, label %NewDefault35

LeafBlock38:                                      ; preds = %NodeBlock42
  %SwitchLeaf39 = icmp eq i32 %func_id, 25
  br i1 %SwitchLeaf39, label %sw.epilog, label %NewDefault35

LeafBlock36:                                      ; preds = %NodeBlock44
  %SwitchLeaf37 = icmp eq i32 %func_id, 22
  br i1 %SwitchLeaf37, label %sw.epilog, label %NewDefault35

sw.bb10:                                          ; preds = %NodeBlock5
  %cmp11.not = icmp eq i32 %func_id, 27
  br i1 %cmp11.not, label %sw.epilog, label %error

sw.bb14:                                          ; preds = %LeafBlock3
  %i67 = and i32 %func_id, -5
  %.not = icmp eq i32 %i67, 33
  br i1 %.not, label %sw.epilog, label %error

sw.bb20:                                          ; preds = %NodeBlock19, %NodeBlock23
  %cmp21.not = icmp eq i32 %func_id, 81
  br i1 %cmp21.not, label %sw.epilog, label %error

sw.bb24:                                          ; preds = %NodeBlock9, %LeafBlock25
  br label %NodeBlock51

NodeBlock51:                                      ; preds = %sw.bb24
  %Pivot52 = icmp slt i32 %func_id, 51
  br i1 %Pivot52, label %LeafBlock47, label %LeafBlock49

LeafBlock49:                                      ; preds = %NodeBlock51
  %SwitchLeaf50 = icmp eq i32 %func_id, 51
  br i1 %SwitchLeaf50, label %sw.epilog, label %NewDefault46

LeafBlock47:                                      ; preds = %NodeBlock51
  %SwitchLeaf48 = icmp eq i32 %func_id, 1
  br i1 %SwitchLeaf48, label %sw.epilog, label %NewDefault46

sw.bb30:                                          ; preds = %NodeBlock11
  %cmp31.not = icmp eq i32 %func_id, 51
  br i1 %cmp31.not, label %sw.epilog, label %error

sw.bb34:                                          ; preds = %NodeBlock17
  br label %NodeBlock58

NodeBlock58:                                      ; preds = %sw.bb34
  %Pivot59 = icmp slt i32 %func_id, 51
  br i1 %Pivot59, label %LeafBlock54, label %LeafBlock56

LeafBlock56:                                      ; preds = %NodeBlock58
  %SwitchLeaf57 = icmp eq i32 %func_id, 51
  br i1 %SwitchLeaf57, label %sw.epilog, label %NewDefault53

LeafBlock54:                                      ; preds = %NodeBlock58
  %SwitchLeaf55 = icmp eq i32 %func_id, 1
  br i1 %SwitchLeaf55, label %sw.epilog, label %NewDefault53

sw.bb40:                                          ; preds = %NodeBlock9
  %cmp41.not = icmp eq i32 %func_id, 1
  br i1 %cmp41.not, label %sw.epilog, label %error

sw.bb44:                                          ; preds = %NodeBlock11
  br label %NodeBlock69

NodeBlock69:                                      ; preds = %sw.bb44
  %Pivot70 = icmp slt i32 %func_id, 52
  br i1 %Pivot70, label %LeafBlock61, label %NodeBlock67

NodeBlock67:                                      ; preds = %NodeBlock69
  %Pivot68 = icmp slt i32 %func_id, 60
  br i1 %Pivot68, label %LeafBlock63, label %LeafBlock65

LeafBlock65:                                      ; preds = %NodeBlock67
  %SwitchLeaf66 = icmp eq i32 %func_id, 60
  br i1 %SwitchLeaf66, label %sw.epilog, label %NewDefault60

LeafBlock63:                                      ; preds = %NodeBlock67
  %SwitchLeaf64 = icmp slt i32 %func_id, 54
  br i1 %SwitchLeaf64, label %sw.epilog, label %NewDefault60

LeafBlock61:                                      ; preds = %NodeBlock69
  %SwitchLeaf62 = icmp eq i32 %func_id, 3
  br i1 %SwitchLeaf62, label %sw.epilog, label %NewDefault60

sw.bb54:                                          ; preds = %NodeBlock17
  br label %NodeBlock76

NodeBlock76:                                      ; preds = %sw.bb54
  %Pivot77 = icmp slt i32 %func_id, 70
  br i1 %Pivot77, label %LeafBlock72, label %LeafBlock74

LeafBlock74:                                      ; preds = %NodeBlock76
  %SwitchLeaf75 = icmp slt i32 %func_id, 73
  br i1 %SwitchLeaf75, label %sw.epilog, label %NewDefault71

LeafBlock72:                                      ; preds = %NodeBlock76
  %SwitchLeaf73 = icmp eq i32 %func_id, 3
  br i1 %SwitchLeaf73, label %sw.epilog, label %NewDefault71

sw.bb64:                                          ; preds = %NodeBlock19
  %cmp65.not = icmp eq i32 %func_id, 82
  br i1 %cmp65.not, label %sw.epilog, label %error

sw.bb68:                                          ; preds = %NodeBlock23
  %func_id.off = add i32 %func_id, -87
  %switch = icmp ult i32 %func_id.off, 3
  br i1 %switch, label %sw.epilog, label %error

sw.bb76:                                          ; preds = %NodeBlock27
  %i68 = add i32 %func_id, -109
  %i69 = icmp ult i32 %i68, -2
  br i1 %i69, label %error, label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock25
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb76, %sw.bb68, %sw.bb64, %LeafBlock72, %LeafBlock74, %LeafBlock61, %LeafBlock63, %LeafBlock65, %sw.bb40, %LeafBlock54, %LeafBlock56, %sw.bb30, %LeafBlock47, %LeafBlock49, %sw.bb20, %sw.bb14, %sw.bb10, %LeafBlock36, %LeafBlock38, %LeafBlock40, %sw.bb
  br label %NodeBlock131

NodeBlock131:                                     ; preds = %sw.epilog
  %Pivot132 = icmp slt i32 %func_id, 52
  br i1 %Pivot132, label %NodeBlock101, label %NodeBlock129

NodeBlock129:                                     ; preds = %NodeBlock131
  %Pivot130 = icmp slt i32 %func_id, 81
  br i1 %Pivot130, label %NodeBlock115, label %NodeBlock127

NodeBlock127:                                     ; preds = %NodeBlock129
  %Pivot128 = icmp slt i32 %func_id, 87
  br i1 %Pivot128, label %NodeBlock119, label %NodeBlock125

NodeBlock125:                                     ; preds = %NodeBlock127
  %Pivot126 = icmp slt i32 %func_id, 107
  br i1 %Pivot126, label %LeafBlock121, label %LeafBlock123

LeafBlock123:                                     ; preds = %NodeBlock125
  %SwitchLeaf124 = icmp slt i32 %func_id, 109
  br i1 %SwitchLeaf124, label %sw.bb150, label %NewDefault78

LeafBlock121:                                     ; preds = %NodeBlock125
  %SwitchLeaf122 = icmp slt i32 %func_id, 90
  br i1 %SwitchLeaf122, label %sw.bb142, label %NewDefault78

NodeBlock119:                                     ; preds = %NodeBlock127
  %Pivot120 = icmp slt i32 %func_id, 82
  br i1 %Pivot120, label %sw.bb129, label %LeafBlock117

LeafBlock117:                                     ; preds = %NodeBlock119
  %SwitchLeaf118 = icmp eq i32 %func_id, 82
  br i1 %SwitchLeaf118, label %sw.bb137, label %NewDefault78

NodeBlock115:                                     ; preds = %NodeBlock129
  %Pivot116 = icmp slt i32 %func_id, 60
  br i1 %Pivot116, label %NodeBlock107, label %NodeBlock113

NodeBlock113:                                     ; preds = %NodeBlock115
  %Pivot114 = icmp slt i32 %func_id, 70
  br i1 %Pivot114, label %LeafBlock109, label %LeafBlock111

LeafBlock111:                                     ; preds = %NodeBlock113
  %SwitchLeaf112 = icmp slt i32 %func_id, 73
  br i1 %SwitchLeaf112, label %sw.bb124, label %NewDefault78

LeafBlock109:                                     ; preds = %NodeBlock113
  %SwitchLeaf110 = icmp eq i32 %func_id, 60
  br i1 %SwitchLeaf110, label %sw.bb119, label %NewDefault78

NodeBlock107:                                     ; preds = %NodeBlock115
  %Pivot108 = icmp slt i32 %func_id, 55
  br i1 %Pivot108, label %LeafBlock103, label %LeafBlock105

LeafBlock105:                                     ; preds = %NodeBlock107
  %SwitchLeaf106 = icmp eq i32 %func_id, 55
  br i1 %SwitchLeaf106, label %sw.bb90, label %NewDefault78

LeafBlock103:                                     ; preds = %NodeBlock107
  %SwitchLeaf104.not = icmp eq i32 %func_id, 54
  br i1 %SwitchLeaf104.not, label %NewDefault78, label %sw.bb119

NodeBlock101:                                     ; preds = %NodeBlock131
  %Pivot102 = icmp slt i32 %func_id, 27
  br i1 %Pivot102, label %NodeBlock87, label %NodeBlock99

NodeBlock99:                                      ; preds = %NodeBlock101
  %Pivot100 = icmp slt i32 %func_id, 37
  br i1 %Pivot100, label %NodeBlock93, label %NodeBlock97

NodeBlock97:                                      ; preds = %NodeBlock99
  %Pivot98 = icmp slt i32 %func_id, 51
  br i1 %Pivot98, label %LeafBlock95, label %sw.bb105

LeafBlock95:                                      ; preds = %NodeBlock97
  %SwitchLeaf96 = icmp eq i32 %func_id, 37
  br i1 %SwitchLeaf96, label %sw.bb100, label %NewDefault78

NodeBlock93:                                      ; preds = %NodeBlock99
  %Pivot94 = icmp slt i32 %func_id, 33
  br i1 %Pivot94, label %LeafBlock89, label %LeafBlock91

LeafBlock91:                                      ; preds = %NodeBlock93
  %SwitchLeaf92 = icmp eq i32 %func_id, 33
  br i1 %SwitchLeaf92, label %sw.bb100, label %NewDefault78

LeafBlock89:                                      ; preds = %NodeBlock93
  %SwitchLeaf90 = icmp eq i32 %func_id, 27
  br i1 %SwitchLeaf90, label %sw.bb95, label %NewDefault78

NodeBlock87:                                      ; preds = %NodeBlock101
  %Pivot88 = icmp slt i32 %func_id, 22
  br i1 %Pivot88, label %LeafBlock79, label %NodeBlock85

NodeBlock85:                                      ; preds = %NodeBlock87
  %Pivot86 = icmp slt i32 %func_id, 25
  br i1 %Pivot86, label %LeafBlock81, label %LeafBlock83

LeafBlock83:                                      ; preds = %NodeBlock85
  %SwitchLeaf84 = icmp eq i32 %func_id, 25
  br i1 %SwitchLeaf84, label %sw.bb90, label %NewDefault78

LeafBlock81:                                      ; preds = %NodeBlock85
  %SwitchLeaf82 = icmp eq i32 %func_id, 22
  br i1 %SwitchLeaf82, label %sw.bb90, label %NewDefault78

LeafBlock79:                                      ; preds = %NodeBlock87
  %SwitchLeaf80 = icmp eq i32 %func_id, 12
  br i1 %SwitchLeaf80, label %sw.bb82, label %NewDefault78

sw.bb82:                                          ; preds = %LeafBlock79
  %cmp84.not = icmp eq i32 %i, 3
  br i1 %cmp84.not, label %if.end86, label %error

if.end86:                                         ; preds = %sw.bb82
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i70 = load i32, i32* %subprog_cnt, align 8
  %cmp87 = icmp ugt i32 %i70, 1
  br i1 %cmp87, label %if.then88, label %return

if.then88:                                        ; preds = %if.end86
  %i71 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i71, i8* noundef getelementptr inbounds ([62 x i8], [62 x i8]* @.str.258, i64 0, i64 0)) #22
  br label %return

sw.bb90:                                          ; preds = %LeafBlock81, %LeafBlock83, %LeafBlock105
  %cmp92.not = icmp eq i32 %i, 4
  br i1 %cmp92.not, label %return, label %error

sw.bb95:                                          ; preds = %LeafBlock89
  %cmp97.not = icmp eq i32 %i, 7
  br i1 %cmp97.not, label %return, label %error

sw.bb100:                                         ; preds = %LeafBlock91, %LeafBlock95
  %cmp102.not = icmp eq i32 %i, 8
  br i1 %cmp102.not, label %return, label %error

sw.bb105:                                         ; preds = %NodeBlock97
  br label %NodeBlock142

NodeBlock142:                                     ; preds = %sw.bb105
  %Pivot143 = icmp slt i32 %i, 16
  br i1 %Pivot143, label %LeafBlock134, label %NodeBlock140

NodeBlock140:                                     ; preds = %NodeBlock142
  %Pivot141 = icmp slt i32 %i, 25
  br i1 %Pivot141, label %LeafBlock136, label %LeafBlock138

LeafBlock138:                                     ; preds = %NodeBlock140
  %SwitchLeaf139 = icmp eq i32 %i, 25
  br i1 %SwitchLeaf139, label %return, label %NewDefault133

LeafBlock136:                                     ; preds = %NodeBlock140
  %SwitchLeaf137 = icmp slt i32 %i, 18
  br i1 %SwitchLeaf137, label %return, label %NewDefault133

LeafBlock134:                                     ; preds = %NodeBlock142
  %SwitchLeaf135 = icmp eq i32 %i, 14
  br i1 %SwitchLeaf135, label %return, label %NewDefault133

sw.bb119:                                         ; preds = %LeafBlock103, %LeafBlock109
  %cmp121.not = icmp eq i32 %i, 15
  br i1 %cmp121.not, label %return, label %error

sw.bb124:                                         ; preds = %LeafBlock111
  %cmp126.not = icmp eq i32 %i, 18
  br i1 %cmp126.not, label %return, label %error

sw.bb129:                                         ; preds = %NodeBlock119
  br label %NodeBlock149

NodeBlock149:                                     ; preds = %sw.bb129
  %Pivot150 = icmp slt i32 %i, 21
  br i1 %Pivot150, label %LeafBlock145, label %LeafBlock147

LeafBlock147:                                     ; preds = %NodeBlock149
  %SwitchLeaf148 = icmp eq i32 %i, 21
  br i1 %SwitchLeaf148, label %return, label %NewDefault144

LeafBlock145:                                     ; preds = %NodeBlock149
  %SwitchLeaf146 = icmp eq i32 %i, 19
  br i1 %SwitchLeaf146, label %return, label %NewDefault144

sw.bb137:                                         ; preds = %LeafBlock117
  %cmp139.not = icmp eq i32 %i, 20
  br i1 %cmp139.not, label %return, label %error

sw.bb142:                                         ; preds = %LeafBlock121
  %i72 = and i32 %i, -2
  %switch66 = icmp eq i32 %i72, 22
  br i1 %switch66, label %return, label %error

sw.bb150:                                         ; preds = %LeafBlock123
  %cmp152.not = icmp eq i32 %i, 24
  br i1 %cmp152.not, label %return, label %error

NewDefault35:                                     ; preds = %LeafBlock36, %LeafBlock38, %LeafBlock40
  br label %error

NewDefault46:                                     ; preds = %LeafBlock47, %LeafBlock49
  br label %error

NewDefault53:                                     ; preds = %LeafBlock54, %LeafBlock56
  br label %error

NewDefault60:                                     ; preds = %LeafBlock61, %LeafBlock63, %LeafBlock65
  br label %error

NewDefault71:                                     ; preds = %LeafBlock72, %LeafBlock74
  br label %error

NewDefault133:                                    ; preds = %LeafBlock134, %LeafBlock136, %LeafBlock138
  br label %error

NewDefault144:                                    ; preds = %LeafBlock145, %LeafBlock147
  br label %error

error:                                            ; preds = %NewDefault144, %NewDefault133, %NewDefault71, %NewDefault60, %NewDefault53, %NewDefault46, %NewDefault35, %sw.bb150, %sw.bb142, %sw.bb137, %sw.bb124, %sw.bb119, %sw.bb100, %sw.bb95, %sw.bb90, %sw.bb82, %sw.bb76, %sw.bb68, %sw.bb64, %sw.bb40, %sw.bb30, %sw.bb20, %sw.bb14, %sw.bb10, %sw.bb
  %i73 = bitcast %struct.bpf_verifier_env* %env to i8*
  %call = call i8* @func_id_name(i32 noundef %func_id) #23
  call void (i8*, i8*, ...) @verbose(i8* noundef %i73, i8* noundef getelementptr inbounds ([41 x i8], [41 x i8]* @.str.259, i64 0, i64 0), i32 noundef %i, i8* noundef %call, i32 noundef %func_id) #22
  br label %return

NewDefault78:                                     ; preds = %LeafBlock79, %LeafBlock81, %LeafBlock83, %LeafBlock89, %LeafBlock91, %LeafBlock95, %LeafBlock103, %LeafBlock105, %LeafBlock109, %LeafBlock111, %LeafBlock117, %LeafBlock121, %LeafBlock123
  br label %return

return:                                           ; preds = %NewDefault78, %error, %sw.bb150, %sw.bb142, %sw.bb137, %LeafBlock145, %LeafBlock147, %sw.bb124, %sw.bb119, %LeafBlock134, %LeafBlock136, %LeafBlock138, %sw.bb100, %sw.bb95, %sw.bb90, %if.then88, %if.end86, %entry
  %retval.0 = phi i32 [ -22, %error ], [ -22, %if.then88 ], [ 0, %entry ], [ 0, %sw.bb142 ], [ 0, %LeafBlock145 ], [ 0, %LeafBlock147 ], [ 0, %LeafBlock134 ], [ 0, %LeafBlock136 ], [ 0, %LeafBlock138 ], [ 0, %NewDefault78 ], [ 0, %sw.bb150 ], [ 0, %sw.bb137 ], [ 0, %sw.bb124 ], [ 0, %sw.bb119 ], [ 0, %sw.bb100 ], [ 0, %sw.bb95 ], [ 0, %sw.bb90 ], [ 0, %if.end86 ]
  ret i32 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @get_callchain_buffers(i32 noundef) local_unnamed_addr #9

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong
define internal fastcc void @clear_all_pkt_pointers(i32 %env.0.8.val.0.4.val) unnamed_addr #18 {
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.05 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %inc = add i32 %i.05, 1
  %cmp.not = icmp ugt i32 %inc, %env.0.8.val.0.4.val
  br i1 %cmp.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer(i32 %reg.0.0.val) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @type_is_pkt_pointer(i32 noundef %reg.0.0.val) #22
  ret i1 %call
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @type_is_pkt_pointer(i32 noundef %type) unnamed_addr #2 {
entry:
  %i = add i32 %type, -7
  %i2 = icmp ult i32 %i, 2
  ret i1 %i2
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @release_reg_references(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* nocapture noundef %state, i32 noundef %ref_obj_id) unnamed_addr #6 {
entry:
  %arraydecay = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 0
  %ref_obj_id2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 0, i32 4
  %i = load i32, i32* %ref_obj_id2, align 8
  %cmp3 = icmp eq i32 %i, %ref_obj_id
  br i1 %cmp3, label %if.then, label %for.inc

if.then:                                          ; preds = %entry
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 0) #22
  br label %for.inc

for.inc:                                          ; preds = %if.then, %entry
  %ref_obj_id2.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 1, i32 4
  %i32 = load i32, i32* %ref_obj_id2.1, align 8
  %cmp3.1 = icmp eq i32 %i32, %ref_obj_id
  br i1 %cmp3.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 1) #22
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %ref_obj_id2.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 2, i32 4
  %i33 = load i32, i32* %ref_obj_id2.2, align 8
  %cmp3.2 = icmp eq i32 %i33, %ref_obj_id
  br i1 %cmp3.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 2) #22
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %ref_obj_id2.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 3, i32 4
  %i34 = load i32, i32* %ref_obj_id2.3, align 8
  %cmp3.3 = icmp eq i32 %i34, %ref_obj_id
  br i1 %cmp3.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 3) #22
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %ref_obj_id2.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 4, i32 4
  %i35 = load i32, i32* %ref_obj_id2.4, align 8
  %cmp3.4 = icmp eq i32 %i35, %ref_obj_id
  br i1 %cmp3.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 4) #22
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %ref_obj_id2.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 5, i32 4
  %i36 = load i32, i32* %ref_obj_id2.5, align 8
  %cmp3.5 = icmp eq i32 %i36, %ref_obj_id
  br i1 %cmp3.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 5) #22
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %ref_obj_id2.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 6, i32 4
  %i37 = load i32, i32* %ref_obj_id2.6, align 8
  %cmp3.6 = icmp eq i32 %i37, %ref_obj_id
  br i1 %cmp3.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 6) #22
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %ref_obj_id2.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 7, i32 4
  %i38 = load i32, i32* %ref_obj_id2.7, align 8
  %cmp3.7 = icmp eq i32 %i38, %ref_obj_id
  br i1 %cmp3.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 7) #22
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %ref_obj_id2.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 8, i32 4
  %i39 = load i32, i32* %ref_obj_id2.8, align 8
  %cmp3.8 = icmp eq i32 %i39, %ref_obj_id
  br i1 %cmp3.8, label %if.then.8, label %for.inc.8

if.then.8:                                        ; preds = %for.inc.7
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 8) #22
  br label %for.inc.8

for.inc.8:                                        ; preds = %if.then.8, %for.inc.7
  %ref_obj_id2.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 9, i32 4
  %i40 = load i32, i32* %ref_obj_id2.9, align 8
  %cmp3.9 = icmp eq i32 %i40, %ref_obj_id
  br i1 %cmp3.9, label %if.then.9, label %for.inc.9

if.then.9:                                        ; preds = %for.inc.8
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 9) #22
  br label %for.inc.9

for.inc.9:                                        ; preds = %if.then.9, %for.inc.8
  %ref_obj_id2.10 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 10, i32 4
  %i41 = load i32, i32* %ref_obj_id2.10, align 8
  %cmp3.10 = icmp eq i32 %i41, %ref_obj_id
  br i1 %cmp3.10, label %if.then.10, label %for.inc.10

if.then.10:                                       ; preds = %for.inc.9
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 10) #22
  br label %for.inc.10

for.inc.10:                                       ; preds = %if.then.10, %for.inc.9
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 6
  %i42 = load i32, i32* %allocated_stack, align 8
  %cmp4 = icmp sgt i32 %i42, 7
  br i1 %cmp4, label %land.lhs.true, label %cond.end

land.lhs.true:                                    ; preds = %for.inc.10
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i43 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx7 = getelementptr inbounds %struct.bpf_stack_state, %struct.bpf_stack_state* %i43, i64 0, i32 1, i64 0
  %i44 = load i8, i8* %arrayidx7, align 8
  %cmp8 = icmp eq i8 %i44, 1
  %spilled_ptr = getelementptr inbounds %struct.bpf_stack_state, %struct.bpf_stack_state* %i43, i64 0, i32 0
  %spec.select = select i1 %cmp8, %struct.bpf_reg_state* %spilled_ptr, %struct.bpf_reg_state* null
  br label %cond.end

cond.end:                                         ; preds = %land.lhs.true, %for.inc.10
  %cond = phi %struct.bpf_reg_state* [ null, %for.inc.10 ], [ %spec.select, %land.lhs.true ]
  br i1 %cmp4, label %for.body18.lr.ph, label %for.end49

for.body18.lr.ph:                                 ; preds = %cond.end
  %stack33 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  br label %for.body18

for.body18:                                       ; preds = %cond.end47, %for.body18.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body18.lr.ph ], [ %indvars.iv.next, %cond.end47 ]
  %reg.028 = phi %struct.bpf_reg_state* [ %cond, %for.body18.lr.ph ], [ %cond48, %cond.end47 ]
  %tobool.not = icmp eq %struct.bpf_reg_state* %reg.028, null
  br i1 %tobool.not, label %for.inc26, label %if.end20

if.end20:                                         ; preds = %for.body18
  %ref_obj_id21 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.028, i64 0, i32 4
  %i46 = load i32, i32* %ref_obj_id21, align 8
  %cmp22 = icmp eq i32 %i46, %ref_obj_id
  br i1 %cmp22, label %if.then24, label %for.inc26

if.then24:                                        ; preds = %if.end20
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef nonnull %reg.028) #22
  br label %for.inc26

for.inc26:                                        ; preds = %if.then24, %if.end20, %for.body18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %i47 = load i32, i32* %allocated_stack, align 8
  %div29 = sdiv i32 %i47, 8
  %i48 = sext i32 %div29 to i64
  %cmp30 = icmp slt i64 %indvars.iv.next, %i48
  br i1 %cmp30, label %land.lhs.true32, label %cond.end47

land.lhs.true32:                                  ; preds = %for.inc26
  %i49 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack33, align 8
  %arrayidx37 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i49, i64 %indvars.iv.next, i32 1, i64 0
  %i50 = load i8, i8* %arrayidx37, align 8
  %cmp39 = icmp eq i8 %i50, 1
  %spilled_ptr45 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i49, i64 %indvars.iv.next, i32 0
  %spec.select23 = select i1 %cmp39, %struct.bpf_reg_state* %spilled_ptr45, %struct.bpf_reg_state* null
  br label %cond.end47

cond.end47:                                       ; preds = %land.lhs.true32, %for.inc26
  %cond48 = phi %struct.bpf_reg_state* [ null, %for.inc26 ], [ %spec.select23, %land.lhs.true32 ]
  br i1 %cmp30, label %for.body18, label %for.end49

for.end49:                                        ; preds = %cond.end47, %cond.end
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @bpf_map_ptr_store(%struct.bpf_insn_aux_data* nocapture noundef %aux, %struct.bpf_map* noundef %map, i1 noundef zeroext %unpriv) unnamed_addr #10 {
entry:
  %aux.idx = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 0, i32 0
  %aux.idx.val = load i64, i64* %aux.idx, align 8
  %call = call fastcc zeroext i1 @bpf_map_ptr_unpriv(i64 %aux.idx.val) #22
  %or3 = or i1 %call, %unpriv
  %i = ptrtoint %struct.bpf_map* %map to i64
  %cond = zext i1 %or3 to i64
  %or6 = or i64 %cond, %i
  %map_state = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 0, i32 0
  store i64 %or6, i64* %map_state, align 8
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc zeroext i1 @may_access_direct_pkt_data(%struct.bpf_verifier_env* nocapture noundef %env, %struct.bpf_call_arg_meta* noundef readonly %meta, i32 noundef %t) unnamed_addr #10 {
entry:
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %type = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 2
  %i5 = load i32, i32* %type, align 4
  br label %NodeBlock31

NodeBlock31:                                      ; preds = %entry
  %Pivot32 = icmp slt i32 %i5, 14
  br i1 %Pivot32, label %NodeBlock11, label %NodeBlock29

NodeBlock29:                                      ; preds = %NodeBlock31
  %Pivot30 = icmp slt i32 %i5, 19
  br i1 %Pivot30, label %NodeBlock17, label %NodeBlock27

NodeBlock27:                                      ; preds = %NodeBlock29
  %Pivot28 = icmp slt i32 %i5, 21
  br i1 %Pivot28, label %LeafBlock19, label %NodeBlock25

NodeBlock25:                                      ; preds = %NodeBlock27
  %Pivot26 = icmp slt i32 %i5, 25
  br i1 %Pivot26, label %LeafBlock21, label %LeafBlock23

LeafBlock23:                                      ; preds = %NodeBlock25
  %SwitchLeaf24 = icmp eq i32 %i5, 25
  br i1 %SwitchLeaf24, label %sw.bb5, label %NewDefault

LeafBlock21:                                      ; preds = %NodeBlock25
  %SwitchLeaf22 = icmp slt i32 %i5, 23
  br i1 %SwitchLeaf22, label %sw.bb, label %NewDefault

LeafBlock19:                                      ; preds = %NodeBlock27
  %SwitchLeaf20 = icmp eq i32 %i5, 19
  br i1 %SwitchLeaf20, label %sw.bb, label %NewDefault

NodeBlock17:                                      ; preds = %NodeBlock29
  %Pivot18 = icmp slt i32 %i5, 16
  br i1 %Pivot18, label %LeafBlock13, label %LeafBlock15

LeafBlock15:                                      ; preds = %NodeBlock17
  %SwitchLeaf16 = icmp eq i32 %i5, 16
  br i1 %SwitchLeaf16, label %sw.bb1, label %NewDefault

LeafBlock13:                                      ; preds = %NodeBlock17
  %SwitchLeaf14 = icmp eq i32 %i5, 14
  br i1 %SwitchLeaf14, label %sw.bb1, label %NewDefault

NodeBlock11:                                      ; preds = %NodeBlock31
  %Pivot12 = icmp slt i32 %i5, 8
  br i1 %Pivot12, label %NodeBlock, label %NodeBlock9

NodeBlock9:                                       ; preds = %NodeBlock11
  %Pivot10 = icmp slt i32 %i5, 10
  br i1 %Pivot10, label %LeafBlock3, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %i5, 12
  br i1 %Pivot8, label %sw.bb, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %i5, 12
  br i1 %SwitchLeaf6, label %sw.bb1, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock9
  %SwitchLeaf4 = icmp eq i32 %i5, 8
  br i1 %SwitchLeaf4, label %sw.bb, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock11
  %Pivot = icmp slt i32 %i5, 6
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i5, 6
  br i1 %SwitchLeaf2, label %sw.bb1, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %i5.off = add i32 %i5, -3
  %SwitchLeaf = icmp ult i32 %i5.off, 2
  br i1 %SwitchLeaf, label %sw.bb1, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock3, %NodeBlock7, %LeafBlock19, %LeafBlock21
  %cmp = icmp eq i32 %t, 2
  br i1 %cmp, label %return, label %sw.bb1

sw.bb1:                                           ; preds = %sw.bb, %LeafBlock, %LeafBlock1, %LeafBlock5, %LeafBlock13, %LeafBlock15
  %tobool.not = icmp eq %struct.bpf_call_arg_meta* %meta, null
  br i1 %tobool.not, label %if.end4, label %if.then2

if.then2:                                         ; preds = %sw.bb1
  %pkt_access = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 2
  %i6 = load i8, i8* %pkt_access, align 1
  %i7 = and i8 %i6, 1
  %tobool3 = icmp ne i8 %i7, 0
  br label %return

if.end4:                                          ; preds = %sw.bb1
  %seen_direct_write = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 15
  store i8 1, i8* %seen_direct_write, align 1
  br label %return

sw.bb5:                                           ; preds = %LeafBlock23
  %cmp6 = icmp eq i32 %t, 2
  br i1 %cmp6, label %if.then7, label %return

if.then7:                                         ; preds = %sw.bb5
  %seen_direct_write8 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 15
  store i8 1, i8* %seen_direct_write8, align 1
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock5, %LeafBlock13, %LeafBlock15, %LeafBlock19, %LeafBlock21, %LeafBlock23
  br label %return

return:                                           ; preds = %NewDefault, %if.then7, %sw.bb5, %if.end4, %if.then2, %sw.bb
  %retval.0 = phi i1 [ %tobool3, %if.then2 ], [ true, %if.end4 ], [ false, %sw.bb ], [ true, %if.then7 ], [ true, %sw.bb5 ], [ false, %NewDefault ]
  ret i1 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_ctx_reg(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef readonly %reg, i32 noundef %regno) unnamed_addr #6 {
entry:
  %tn_buf = alloca [48 x i8], align 16
  %off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 2
  %i = load i32, i32* %off, align 8
  %tobool.not = icmp eq i32 %i, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i6 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i6, i8* noundef getelementptr inbounds ([55 x i8], [55 x i8]* @.str.174, i64 0, i64 0), i32 noundef %regno, i32 noundef %i) #22
  br label %return

if.end:                                           ; preds = %entry
  %i7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i9 = load i64, i64* %i8, align 8
  %call = call fastcc zeroext i1 @tnum_is_const(i64 %i9) #22
  br i1 %call, label %lor.lhs.false, label %if.then4

lor.lhs.false:                                    ; preds = %if.end
  %i10 = load i64, i64* %i7, align 8
  %tobool3.not = icmp eq i64 %i10, 0
  br i1 %tobool3.not, label %return, label %if.then4

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  %i11 = load i64, i64* %i7, align 8
  %call6 = call i32 @tnum_strn(i8* noundef %arraydecay, i64 noundef 48, i64 %i11, i64 %i9) #22
  %i12 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i12, i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @.str.175, i64 0, i64 0), i8* noundef %arraydecay) #22
  br label %return

return:                                           ; preds = %if.then4, %lor.lhs.false, %if.then
  %retval.0 = phi i32 [ -13, %if.then ], [ -13, %if.then4 ], [ 0, %lor.lhs.false ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @type_is_sk_pointer(i32 noundef %type) unnamed_addr #2 {
entry:
  %switch.tableidx = add i32 %type, -11
  %i = icmp ult i32 %switch.tableidx, 8
  %switch.cast = trunc i32 %switch.tableidx to i8
  %switch.downshift = lshr i8 -107, %switch.cast
  %i5 = and i8 %switch.downshift, 1
  %switch.masked = icmp ne i8 %i5, 0
  %i6 = select i1 %i, i1 %switch.masked, i1 false
  ret i1 %i6
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @process_spin_lock(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i1 noundef zeroext %is_lock) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %i = zext i32 %regno to i64
  %map_ptr = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 1, i32 0
  %i36 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %value = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 5, i32 0
  %i37 = load i64, i64* %value, align 8
  %type = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 0
  %i38 = load i32, i32* %type, align 8
  %cmp.not = icmp eq i32 %i38, 4
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i39 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i39, i8* noundef getelementptr inbounds ([35 x i8], [35 x i8]* @.str.239, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end:                                           ; preds = %entry
  %i40 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 5, i32 1
  %i41 = load i64, i64* %i40, align 8
  %call1 = call fastcc zeroext i1 @tnum_is_const(i64 %i41) #22
  br i1 %call1, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  %i42 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i42, i8* noundef getelementptr inbounds ([82 x i8], [82 x i8]* @.str.240, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end5:                                          ; preds = %if.end
  %btf = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i36, i64 0, i32 13
  %i43 = load %struct.btf*, %struct.btf** %btf, align 64
  %tobool6.not = icmp eq %struct.btf* %i43, null
  br i1 %tobool6.not, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end5
  %i44 = bitcast %struct.bpf_verifier_env* %env to i8*
  %arraydecay = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i36, i64 0, i32 21, i64 0
  call void (i8*, i8*, ...) @verbose(i8* noundef %i44, i8* noundef getelementptr inbounds ([56 x i8], [56 x i8]* @.str.241, i64 0, i64 0), i8* noundef %arraydecay) #22
  br label %return

if.end8:                                          ; preds = %if.end5
  %i36.idx = getelementptr %struct.bpf_map, %struct.bpf_map* %i36, i64 0, i32 8
  %i36.idx.val = load i32, i32* %i36.idx, align 4
  %call9 = call fastcc zeroext i1 @map_value_has_spin_lock(i32 %i36.idx.val) #22
  br i1 %call9, label %if.end25, label %if.then10

if.then10:                                        ; preds = %if.end8
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.then10
  %Pivot = icmp slt i32 %i36.idx.val, -2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i36.idx.val, -2
  br i1 %SwitchLeaf2, label %if.then17, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i36.idx.val, -7
  br i1 %SwitchLeaf, label %if.then12, label %NewDefault

if.then12:                                        ; preds = %LeafBlock
  %i46 = bitcast %struct.bpf_verifier_env* %env to i8*
  %arraydecay14 = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i36, i64 0, i32 21, i64 0
  call void (i8*, i8*, ...) @verbose(i8* noundef %i46, i8* noundef getelementptr inbounds ([51 x i8], [51 x i8]* @.str.242, i64 0, i64 0), i8* noundef %arraydecay14) #22
  br label %return

if.then17:                                        ; preds = %LeafBlock1
  %i47 = bitcast %struct.bpf_verifier_env* %env to i8*
  %arraydecay19 = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i36, i64 0, i32 21, i64 0
  call void (i8*, i8*, ...) @verbose(i8* noundef %i47, i8* noundef getelementptr inbounds ([46 x i8], [46 x i8]* @.str.243, i64 0, i64 0), i8* noundef %arraydecay19) #22
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.else20

if.else20:                                        ; preds = %NewDefault
  %i48 = bitcast %struct.bpf_verifier_env* %env to i8*
  %arraydecay22 = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i36, i64 0, i32 21, i64 0
  call void (i8*, i8*, ...) @verbose(i8* noundef %i48, i8* noundef getelementptr inbounds ([59 x i8], [59 x i8]* @.str.244, i64 0, i64 0), i8* noundef %arraydecay22) #22
  br label %return

if.end25:                                         ; preds = %if.end8
  %conv = sext i32 %i36.idx.val to i64
  %off = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 2
  %i49 = load i32, i32* %off, align 8
  %conv27 = sext i32 %i49 to i64
  %add = add i64 %i37, %conv27
  %cmp28.not = icmp eq i64 %add, %conv
  br i1 %cmp28.not, label %if.end34, label %if.then30

if.then30:                                        ; preds = %if.end25
  %i50 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i50, i8* noundef getelementptr inbounds ([50 x i8], [50 x i8]* @.str.245, i64 0, i64 0), i64 noundef %add) #22
  br label %return

if.end34:                                         ; preds = %if.end25
  %active_spin_lock = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %env.idx.val, i64 0, i32 5
  %i51 = load i32, i32* %active_spin_lock, align 4
  %tobool37.not = icmp eq i32 %i51, 0
  br i1 %is_lock, label %if.then36, label %if.else41

if.then36:                                        ; preds = %if.end34
  br i1 %tobool37.not, label %if.end39, label %if.then38

if.then38:                                        ; preds = %if.then36
  %i52 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i52, i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.246, i64 0, i64 0)) #22
  br label %return

if.end39:                                         ; preds = %if.then36
  %id = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 3
  %i53 = load i32, i32* %id, align 4
  store i32 %i53, i32* %active_spin_lock, align 4
  br label %return

if.else41:                                        ; preds = %if.end34
  br i1 %tobool37.not, label %if.then44, label %if.end45

if.then44:                                        ; preds = %if.else41
  %i54 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i54, i8* noundef getelementptr inbounds ([39 x i8], [39 x i8]* @.str.247, i64 0, i64 0)) #22
  br label %return

if.end45:                                         ; preds = %if.else41
  %id47 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 3
  %i55 = load i32, i32* %id47, align 4
  %cmp48.not = icmp eq i32 %i51, %i55
  br i1 %cmp48.not, label %if.end51, label %if.then50

if.then50:                                        ; preds = %if.end45
  %i56 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i56, i8* noundef getelementptr inbounds ([35 x i8], [35 x i8]* @.str.248, i64 0, i64 0)) #22
  br label %return

if.end51:                                         ; preds = %if.end45
  store i32 0, i32* %active_spin_lock, align 4
  br label %return

return:                                           ; preds = %if.end51, %if.then50, %if.then44, %if.end39, %if.then38, %if.then30, %if.else20, %if.then17, %if.then12, %if.then7, %if.then4, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ -22, %if.then30 ], [ -22, %if.then38 ], [ -22, %if.then50 ], [ -22, %if.then44 ], [ -22, %if.then7 ], [ -22, %if.then4 ], [ -22, %if.then17 ], [ -22, %if.else20 ], [ -22, %if.then12 ], [ 0, %if.end51 ], [ 0, %if.end39 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @arg_type_is_mem_ptr(i32 noundef %type) unnamed_addr #2 {
entry:
  %i = and i32 %type, -2
  %i3 = icmp eq i32 %i, 6
  %cmp2 = icmp eq i32 %type, 8
  %spec.select = or i1 %cmp2, %i3
  ret i1 %spec.select
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @arg_type_is_int_ptr(i32 noundef %type) unnamed_addr #2 {
entry:
  %i = add i32 %type, -15
  %i2 = icmp ult i32 %i, 2
  ret i1 %i2
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_helper_mem_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %access_size, i1 noundef zeroext %zero_size_allowed, %struct.bpf_call_arg_meta* noundef %meta) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %i = zext i32 %regno to i64
  %type = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 0
  %i19 = load i32, i32* %type, align 8
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i32 %i19, 7
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp slt i32 %i19, 9
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i19, 4
  br i1 %SwitchLeaf, label %sw.bb2, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock1
  %off = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 2
  %i20 = load i32, i32* %off, align 8
  %call1 = call fastcc i32 @check_packet_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %i20, i32 noundef %access_size, i1 noundef zeroext %zero_size_allowed) #22
  br label %return

sw.bb2:                                           ; preds = %LeafBlock
  %off3 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %i, i32 2
  %i21 = load i32, i32* %off3, align 8
  %tobool4.not = icmp eq %struct.bpf_call_arg_meta* %meta, null
  br i1 %tobool4.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %sw.bb2
  %raw_mode = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 1
  %i22 = load i8, i8* %raw_mode, align 8
  %i23 = and i8 %i22, 1
  %tobool5.not = icmp eq i8 %i23, 0
  %phi.sel = select i1 %tobool5.not, i32 1, i32 2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb2
  %i24 = phi i32 [ 1, %sw.bb2 ], [ %phi.sel, %land.rhs ]
  %call6 = call fastcc i32 @check_map_access_type(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %i21, i32 noundef %access_size, i32 noundef %i24) #22
  %tobool7.not = icmp eq i32 %call6, 0
  br i1 %tobool7.not, label %if.end, label %return

if.end:                                           ; preds = %land.end
  %i25 = load i32, i32* %off3, align 8
  %call10 = call fastcc i32 @check_map_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %i25, i32 noundef %access_size, i1 noundef zeroext %zero_size_allowed) #22
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  %call12 = call fastcc i32 @check_stack_boundary(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %access_size, i1 noundef zeroext %zero_size_allowed, %struct.bpf_call_arg_meta* noundef %meta) #22
  br label %return

return:                                           ; preds = %sw.default, %if.end, %land.end, %sw.bb
  %retval.0 = phi i32 [ %call12, %sw.default ], [ %call10, %if.end ], [ %call1, %sw.bb ], [ -13, %land.end ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @arg_type_is_mem_size(i32 noundef %type) unnamed_addr #2 {
entry:
  %i = add i32 %type, -9
  %i2 = icmp ult i32 %i, 2
  ret i1 %i2
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc i32 @int_ptr_type_to_size(i32 noundef %type) unnamed_addr #2 {
entry:
  %switch.selectcmp = icmp eq i32 %type, 16
  %switch.select = select i1 %switch.selectcmp, i32 8, i32 -22
  %switch.selectcmp2 = icmp eq i32 %type, 15
  %switch.select3 = select i1 %switch.selectcmp2, i32 4, i32 %switch.select
  ret i32 %switch.select3
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_ptr_alignment(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef readonly %reg, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %strict_alignment_once) unnamed_addr #6 {
entry:
  %strict_alignment = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 6
  %i = load i8, i8* %strict_alignment, align 4
  %i8 = and i8 %i, 1
  %tobool = icmp ne i8 %i8, 0
  %i9 = or i1 %tobool, %strict_alignment_once
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i10 = load i32, i32* %type, align 8
  br label %NodeBlock25

NodeBlock25:                                      ; preds = %entry
  %Pivot26 = icmp slt i32 %i10, 10
  br i1 %Pivot26, label %NodeBlock7, label %NodeBlock23

NodeBlock23:                                      ; preds = %NodeBlock25
  %Pivot24 = icmp slt i32 %i10, 13
  br i1 %Pivot24, label %NodeBlock11, label %NodeBlock21

NodeBlock21:                                      ; preds = %NodeBlock23
  %Pivot22 = icmp slt i32 %i10, 15
  br i1 %Pivot22, label %LeafBlock13, label %NodeBlock19

NodeBlock19:                                      ; preds = %NodeBlock21
  %Pivot20 = icmp slt i32 %i10, 18
  br i1 %Pivot20, label %LeafBlock15, label %LeafBlock17

LeafBlock17:                                      ; preds = %NodeBlock19
  %SwitchLeaf18 = icmp eq i32 %i10, 18
  br i1 %SwitchLeaf18, label %sw.bb11, label %NewDefault

LeafBlock15:                                      ; preds = %NodeBlock19
  %SwitchLeaf16 = icmp eq i32 %i10, 15
  br i1 %SwitchLeaf16, label %sw.bb10, label %NewDefault

LeafBlock13:                                      ; preds = %NodeBlock21
  %SwitchLeaf14 = icmp eq i32 %i10, 13
  br i1 %SwitchLeaf14, label %sw.bb9, label %NewDefault

NodeBlock11:                                      ; preds = %NodeBlock23
  %Pivot12 = icmp slt i32 %i10, 11
  br i1 %Pivot12, label %sw.bb4, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock11
  %SwitchLeaf10 = icmp eq i32 %i10, 11
  br i1 %SwitchLeaf10, label %sw.bb8, label %NewDefault

NodeBlock7:                                       ; preds = %NodeBlock25
  %Pivot8 = icmp slt i32 %i10, 6
  br i1 %Pivot8, label %NodeBlock, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp eq i32 %i10, 6
  br i1 %Pivot6, label %sw.bb7, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp slt i32 %i10, 9
  br i1 %SwitchLeaf4, label %sw.bb, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock7
  %Pivot = icmp slt i32 %i10, 4
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i10, 4
  br i1 %SwitchLeaf2, label %sw.bb5, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i10, 2
  br i1 %SwitchLeaf, label %sw.bb6, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock3
  %call = call fastcc i32 @check_pkt_ptr_alignment(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %reg, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %i9) #22
  br label %return

sw.bb4:                                           ; preds = %NodeBlock11
  br label %sw.epilog

sw.bb5:                                           ; preds = %LeafBlock1
  br label %sw.epilog

sw.bb6:                                           ; preds = %LeafBlock
  br label %sw.epilog

sw.bb7:                                           ; preds = %NodeBlock5
  br label %sw.epilog

sw.bb8:                                           ; preds = %LeafBlock9
  br label %sw.epilog

sw.bb9:                                           ; preds = %LeafBlock13
  br label %sw.epilog

sw.bb10:                                          ; preds = %LeafBlock15
  br label %sw.epilog

sw.bb11:                                          ; preds = %LeafBlock17
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock9, %LeafBlock13, %LeafBlock15, %LeafBlock17
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4
  %strict.0.shrunk = phi i1 [ %i9, %NewDefault ], [ %i9, %sw.bb11 ], [ %i9, %sw.bb10 ], [ %i9, %sw.bb9 ], [ %i9, %sw.bb8 ], [ true, %sw.bb7 ], [ %i9, %sw.bb6 ], [ %i9, %sw.bb5 ], [ %i9, %sw.bb4 ]
  %pointer_desc.0 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.50, i64 0, i64 0), %NewDefault ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.169, i64 0, i64 0), %sw.bb11 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.168, i64 0, i64 0), %sw.bb10 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @.str.167, i64 0, i64 0), %sw.bb9 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.166, i64 0, i64 0), %sw.bb8 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.165, i64 0, i64 0), %sw.bb7 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.164, i64 0, i64 0), %sw.bb6 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.163, i64 0, i64 0), %sw.bb5 ], [ getelementptr inbounds ([11 x i8], [11 x i8]* @.str.162, i64 0, i64 0), %sw.bb4 ]
  %call13 = call fastcc i32 @check_generic_ptr_alignment(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %reg, i8* noundef %pointer_desc.0, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %strict.0.shrunk) #22
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb
  %retval.0 = phi i32 [ %call13, %sw.epilog ], [ %call, %sw.bb ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_pkt_ptr_alignment(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef readonly %reg, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %strict) unnamed_addr #6 {
entry:
  %tn_buf = alloca [48 x i8], align 16
  %cmp = icmp ne i32 %size, 1
  %i = and i1 %cmp, %strict
  br i1 %i, label %if.end, label %return

if.end:                                           ; preds = %entry
  %off1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 2
  %i9 = load i32, i32* %off1, align 8
  %add = add i32 %off, 2
  %add2 = add i32 %add, %i9
  %conv = sext i32 %add2 to i64
  %call = call { i64, i64 } @tnum_const(i64 noundef %conv) #22
  %i10 = extractvalue { i64, i64 } %call, 0
  %i11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i12 = load i64, i64* %i11, align 8
  %i13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i14 = load i64, i64* %i13, align 8
  %call3 = call { i64, i64 } @tnum_add(i64 %i12, i64 %i14, i64 %i10, i64 0) #22
  %i15 = extractvalue { i64, i64 } %call3, 0
  %i16 = extractvalue { i64, i64 } %call3, 1
  %conv4 = sext i32 %size to i64
  %call5 = call zeroext i1 @tnum_is_aligned(i64 %i15, i64 %i16, i64 noundef %conv4) #22
  br i1 %call5, label %return, label %if.then6

if.then6:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  %call8 = call i32 @tnum_strn(i8* noundef %arraydecay, i64 noundef 48, i64 %i12, i64 %i14) #22
  %i17 = bitcast %struct.bpf_verifier_env* %env to i8*
  %i18 = load i32, i32* %off1, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i17, i8* noundef getelementptr inbounds ([50 x i8], [50 x i8]* @.str.170, i64 0, i64 0), i32 noundef 2, i8* noundef %arraydecay, i32 noundef %i18, i32 noundef %off, i32 noundef %size) #22
  br label %return

return:                                           ; preds = %if.then6, %if.end, %entry
  %retval.0 = phi i32 [ -13, %if.then6 ], [ 0, %entry ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_generic_ptr_alignment(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef readonly %reg, i8* noundef %pointer_desc, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %strict) unnamed_addr #6 {
entry:
  %tn_buf = alloca [48 x i8], align 16
  %cmp = icmp ne i32 %size, 1
  %i = and i1 %cmp, %strict
  br i1 %i, label %if.end, label %return

if.end:                                           ; preds = %entry
  %off1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 2
  %i8 = load i32, i32* %off1, align 8
  %add = add i32 %i8, %off
  %conv = sext i32 %add to i64
  %call = call { i64, i64 } @tnum_const(i64 noundef %conv) #22
  %i9 = extractvalue { i64, i64 } %call, 0
  %i10 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i11 = load i64, i64* %i10, align 8
  %i12 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i13 = load i64, i64* %i12, align 8
  %call2 = call { i64, i64 } @tnum_add(i64 %i11, i64 %i13, i64 %i9, i64 0) #22
  %i14 = extractvalue { i64, i64 } %call2, 0
  %i15 = extractvalue { i64, i64 } %call2, 1
  %conv3 = sext i32 %size to i64
  %call4 = call zeroext i1 @tnum_is_aligned(i64 %i14, i64 %i15, i64 noundef %conv3) #22
  br i1 %call4, label %return, label %if.then5

if.then5:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  %call7 = call i32 @tnum_strn(i8* noundef %arraydecay, i64 noundef 48, i64 %i11, i64 %i13) #22
  %i16 = bitcast %struct.bpf_verifier_env* %env to i8*
  %i17 = load i32, i32* %off1, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i16, i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.171, i64 0, i64 0), i8* noundef %pointer_desc, i8* noundef %arraydecay, i32 noundef %i17, i32 noundef %off, i32 noundef %size) #22
  br label %return

return:                                           ; preds = %if.then5, %if.end, %entry
  %retval.0 = phi i32 [ -13, %if.then5 ], [ 0, %entry ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_packet_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %zero_size_allowed) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %idxprom = zext i32 %regno to i64
  %smin_value = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 6
  %i = load i64, i64* %smin_value, align 8
  %cmp = icmp slt i64 %i, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i18 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i18, i8* noundef getelementptr inbounds ([84 x i8], [84 x i8]* @.str.144, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call fastcc i32 @__check_packet_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %zero_size_allowed) #22
  %tobool2.not = icmp eq i32 %call1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  %i19 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i19, i8* noundef getelementptr inbounds ([37 x i8], [37 x i8]* @.str.185, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end4:                                          ; preds = %if.end
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i20 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i20, i64 0, i32 7
  %i21 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %max_pkt_offset = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i21, i64 0, i32 3
  %i22 = load i32, i32* %max_pkt_offset, align 4
  %umax_value = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 9
  %i23 = load i64, i64* %umax_value, align 8
  %i24 = trunc i64 %i23 to i32
  %i25 = add i32 %off, -1
  %i26 = add i32 %i25, %size
  %conv7 = add i32 %i26, %i24
  %cmp8 = icmp ugt i32 %i22, %conv7
  %cond = select i1 %cmp8, i32 %i22, i32 %conv7
  store i32 %cond, i32* %max_pkt_offset, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %retval.0 = phi i32 [ -13, %if.then ], [ %call1, %if.then3 ], [ 0, %if.end4 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_map_access_type(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %off, i32 noundef %size, i32 noundef %type) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %idxprom = zext i32 %regno to i64
  %map_ptr = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 1, i32 0
  %i = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %i.idx = getelementptr %struct.bpf_map, %struct.bpf_map* %i, i64 0, i32 7
  %i.idx.val = load i32, i32* %i.idx, align 8
  %call1 = call fastcc i32 @bpf_map_flags_to_cap(i32 %i.idx.val) #22
  %cmp = icmp eq i32 %type, 2
  %i12 = and i32 %call1, 2
  %tobool.not = icmp eq i32 %i12, 0
  %or.cond = select i1 %cmp, i1 %tobool.not, i1 false
  br i1 %or.cond, label %return.sink.split, label %if.end

if.end:                                           ; preds = %entry
  %cmp2 = icmp eq i32 %type, 1
  %i13 = and i32 %call1, 1
  %tobool7.not = icmp eq i32 %i13, 0
  %or.cond9 = select i1 %cmp2, i1 %tobool7.not, i1 false
  br i1 %or.cond9, label %return.sink.split, label %return

return.sink.split:                                ; preds = %if.end, %entry
  %.sink10 = phi i8* [ getelementptr inbounds ([56 x i8], [56 x i8]* @.str.172, i64 0, i64 0), %entry ], [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.173, i64 0, i64 0), %if.end ]
  %i14 = bitcast %struct.bpf_verifier_env* %env to i8*
  %value_size9 = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i, i64 0, i32 5
  %i15 = load i32, i32* %value_size9, align 32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i14, i8* noundef %.sink10, i32 noundef %i15, i32 noundef %off, i32 noundef %size) #22
  br label %return

return:                                           ; preds = %return.sink.split, %if.end
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %return.sink.split ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_map_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %zero_size_allowed) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %i43 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i43 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i44 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %idxprom1 = zext i32 %regno to i64
  %level = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i45 = load i32, i32* %level, align 8
  %and = and i32 %i45, 3
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i44) #22
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %smin_value = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i44, i64 0, i32 0, i64 %idxprom1, i32 6
  %i46 = load i64, i64* %smin_value, align 8
  %cmp = icmp slt i64 %i46, 0
  br i1 %cmp, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.end
  %cmp4 = icmp eq i64 %i46, -9223372036854775808
  br i1 %cmp4, label %if.then19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %conv = sext i32 %off to i64
  %add = add i64 %i46, %conv
  %i47 = icmp ugt i64 %add, 2147483647
  br i1 %i47, label %if.then19, label %if.end20

if.then19:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %i48 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i48, i8* noundef getelementptr inbounds ([84 x i8], [84 x i8]* @.str.144, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end20:                                         ; preds = %lor.lhs.false, %if.end
  %conv22 = sext i32 %off to i64
  %i49 = trunc i64 %i46 to i32
  %conv24 = add i32 %i49, %off
  %call = call fastcc i32 @__check_map_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %conv24, i32 noundef %size, i1 noundef zeroext %zero_size_allowed) #22
  %tobool26.not = icmp eq i32 %call, 0
  br i1 %tobool26.not, label %if.end28, label %if.then27

if.then27:                                        ; preds = %if.end20
  %i50 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i50, i8* noundef getelementptr inbounds ([45 x i8], [45 x i8]* @.str.145, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end28:                                         ; preds = %if.end20
  %umax_value = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i44, i64 0, i32 0, i64 %idxprom1, i32 9
  %i51 = load i64, i64* %umax_value, align 8
  %cmp29 = icmp ugt i64 %i51, 536870911
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end28
  %i52 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i52, i8* noundef getelementptr inbounds ([84 x i8], [84 x i8]* @.str.146, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end32:                                         ; preds = %if.end28
  %i53 = trunc i64 %i51 to i32
  %conv36 = add i32 %i53, %off
  %call38 = call fastcc i32 @__check_map_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %conv36, i32 noundef %size, i1 noundef zeroext %zero_size_allowed) #22
  %tobool39.not = icmp eq i32 %call38, 0
  br i1 %tobool39.not, label %if.end41, label %if.then40

if.then40:                                        ; preds = %if.end32
  %i54 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i54, i8* noundef getelementptr inbounds ([45 x i8], [45 x i8]* @.str.147, i64 0, i64 0), i32 noundef %regno) #22
  br label %if.end41

if.end41:                                         ; preds = %if.then40, %if.end32
  %map_ptr = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i44, i64 0, i32 0, i64 %idxprom1, i32 1, i32 0
  %i55 = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %i55.idx = getelementptr %struct.bpf_map, %struct.bpf_map* %i55, i64 0, i32 8
  %i55.idx.val = load i32, i32* %i55.idx, align 4
  %call42 = call fastcc zeroext i1 @map_value_has_spin_lock(i32 %i55.idx.val) #22
  br i1 %call42, label %if.then43, label %return

if.then43:                                        ; preds = %if.end41
  %spin_lock_off = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i55, i64 0, i32 8
  %i56 = load i32, i32* %spin_lock_off, align 4
  %i57 = load i64, i64* %smin_value, align 8
  %add47 = add i64 %i57, %conv22
  %conv48 = zext i32 %i56 to i64
  %add49 = add nuw nsw i64 %conv48, 4
  %cmp50 = icmp ult i64 %add47, %add49
  br i1 %cmp50, label %land.lhs.true52, label %return

land.lhs.true52:                                  ; preds = %if.then43
  %i58 = load i64, i64* %umax_value, align 8
  %conv57 = sext i32 %size to i64
  %add56 = add nsw i64 %conv57, %conv22
  %add58 = add i64 %add56, %i58
  %cmp59 = icmp ugt i64 %add58, %conv48
  br i1 %cmp59, label %if.then61, label %return

if.then61:                                        ; preds = %land.lhs.true52
  %i59 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i59, i8* noundef getelementptr inbounds ([57 x i8], [57 x i8]* @.str.148, i64 0, i64 0)) #22
  br label %return

return:                                           ; preds = %if.then61, %land.lhs.true52, %if.then43, %if.end41, %if.then31, %if.then27, %if.then19
  %retval.0 = phi i32 [ -13, %if.then19 ], [ %call, %if.then27 ], [ -13, %if.then31 ], [ -13, %if.then61 ], [ %call38, %if.then43 ], [ %call38, %land.lhs.true52 ], [ %call38, %if.end41 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_stack_boundary(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %access_size, i1 noundef zeroext %zero_size_allowed, %struct.bpf_call_arg_meta* noundef %meta) unnamed_addr #6 {
entry:
  %tn_buf = alloca [48 x i8], align 16
  %tn_buf124 = alloca [48 x i8], align 16
  %env.idx3 = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx3.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx3, align 8
  %call = call fastcc %struct.bpf_reg_state* @reg_state(%struct.bpf_verifier_state* %env.idx3.val, i32 noundef %regno) #22
  %call.idx = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 11
  %call.idx.val = load i32, i32* %call.idx, align 8
  %call1 = call fastcc %struct.bpf_func_state* @func(%struct.bpf_verifier_state* %env.idx3.val, i32 %call.idx.val) #22
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp.not = icmp eq i32 %i, 6
  br i1 %cmp.not, label %if.end7, label %if.then

if.then:                                          ; preds = %entry
  %cmp2 = icmp eq i32 %access_size, 0
  %or.cond = and i1 %cmp2, %zero_size_allowed
  br i1 %or.cond, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %if.then
  %call4 = call fastcc zeroext i1 @register_is_null(%struct.bpf_reg_state* noundef %call) #22
  br i1 %call4, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true3, %if.then
  %i103 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom = zext i32 %i to i64
  %arrayidx = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom
  %i104 = load i8*, i8** %arrayidx, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i103, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.238, i64 0, i64 0), i32 noundef %regno, i8* noundef %i104, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.200, i64 0, i64 0)) #22
  br label %return

if.end7:                                          ; preds = %entry
  %i105 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 5, i32 0
  %i106 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 5, i32 1
  %i107 = load i64, i64* %i106, align 8
  %call8 = call fastcc zeroext i1 @tnum_is_const(i64 %i107) #22
  br i1 %call8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end7
  %i108 = load i64, i64* %i105, align 8
  %off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 2
  %i109 = load i32, i32* %off, align 8
  %i110 = trunc i64 %i108 to i32
  %conv11 = add i32 %i109, %i110
  %call13 = call fastcc i32 @__check_stack_boundary(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %conv11, i32 noundef %access_size, i1 noundef zeroext %zero_size_allowed) #22
  %tobool14.not = icmp eq i32 %call13, 0
  br i1 %tobool14.not, label %if.end55, label %return

if.else:                                          ; preds = %if.end7
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i111 = load i8, i8* %allow_ptr_leaks, align 8
  %i112 = and i8 %i111, 1
  %tobool17.not = icmp eq i8 %i112, 0
  br i1 %tobool17.not, label %if.then18, label %if.end22

if.then18:                                        ; preds = %if.else
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  %i113 = load i64, i64* %i105, align 8
  %call20 = call i32 @tnum_strn(i8* noundef %arraydecay, i64 noundef 48, i64 %i113, i64 %i107) #22
  %i114 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i114, i8* noundef getelementptr inbounds ([76 x i8], [76 x i8]* @.str.249, i64 0, i64 0), i32 noundef %regno, i8* noundef %arraydecay) #22
  br label %return

if.end22:                                         ; preds = %if.else
  %tobool23.not = icmp eq %struct.bpf_call_arg_meta* %meta, null
  br i1 %tobool23.not, label %if.end28, label %land.lhs.true24

land.lhs.true24:                                  ; preds = %if.end22
  %raw_mode = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta, i64 0, i32 1
  %i115 = load i8, i8* %raw_mode, align 8
  %i116 = and i8 %i115, 1
  %tobool25.not = icmp eq i8 %i116, 0
  %spec.store.select = select i1 %tobool25.not, %struct.bpf_call_arg_meta* %meta, %struct.bpf_call_arg_meta* null
  br label %if.end28

if.end28:                                         ; preds = %land.lhs.true24, %if.end22
  %meta.addr.0 = phi %struct.bpf_call_arg_meta* [ %spec.store.select, %land.lhs.true24 ], [ null, %if.end22 ]
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 7
  %i117 = load i64, i64* %smax_value, align 8
  %i118 = add i64 %i117, -536870912
  %i119 = icmp ult i64 %i118, -1073741823
  br i1 %i119, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.end28
  %i120 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i120, i8* noundef getelementptr inbounds ([53 x i8], [53 x i8]* @.str.250, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end35:                                         ; preds = %if.end28
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 6
  %i121 = load i64, i64* %smin_value, align 8
  %off36 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 2
  %i122 = load i32, i32* %off36, align 8
  %i123 = trunc i64 %i121 to i32
  %conv39 = add i32 %i122, %i123
  %i124 = trunc i64 %i117 to i32
  %conv44 = add i32 %i122, %i124
  %call46 = call fastcc i32 @__check_stack_boundary(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %conv39, i32 noundef %access_size, i1 noundef zeroext %zero_size_allowed) #22
  %tobool47.not = icmp eq i32 %call46, 0
  br i1 %tobool47.not, label %if.end49, label %if.then48

if.then48:                                        ; preds = %if.end35
  %i125 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i125, i8* noundef getelementptr inbounds ([41 x i8], [41 x i8]* @.str.251, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end49:                                         ; preds = %if.end35
  %call51 = call fastcc i32 @__check_stack_boundary(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %conv44, i32 noundef %access_size, i1 noundef zeroext %zero_size_allowed) #22
  %tobool52.not = icmp eq i32 %call51, 0
  br i1 %tobool52.not, label %if.end55, label %if.then53

if.then53:                                        ; preds = %if.end49
  %i126 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i126, i8* noundef getelementptr inbounds ([41 x i8], [41 x i8]* @.str.252, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end55:                                         ; preds = %if.end49, %if.then9
  %min_off.0 = phi i32 [ %conv11, %if.then9 ], [ %conv39, %if.end49 ]
  %max_off.0 = phi i32 [ %conv11, %if.then9 ], [ %conv44, %if.end49 ]
  %meta.addr.1 = phi %struct.bpf_call_arg_meta* [ %meta, %if.then9 ], [ %meta.addr.0, %if.end49 ]
  %tobool56.not = icmp eq %struct.bpf_call_arg_meta* %meta.addr.1, null
  br i1 %tobool56.not, label %if.end64, label %land.lhs.true57

land.lhs.true57:                                  ; preds = %if.end55
  %raw_mode58 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta.addr.1, i64 0, i32 1
  %i127 = load i8, i8* %raw_mode58, align 8
  %i128 = and i8 %i127, 1
  %tobool59.not = icmp eq i8 %i128, 0
  br i1 %tobool59.not, label %if.end64, label %if.then61

if.then61:                                        ; preds = %land.lhs.true57
  %access_size62 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta.addr.1, i64 0, i32 4
  store i32 %access_size, i32* %access_size62, align 8
  %regno63 = getelementptr inbounds %struct.bpf_call_arg_meta, %struct.bpf_call_arg_meta* %meta.addr.1, i64 0, i32 3
  store i32 %regno, i32* %regno63, align 4
  br label %return

if.end64:                                         ; preds = %land.lhs.true57, %if.end55
  %add65 = add i32 %max_off.0, %access_size
  %cmp6695 = icmp slt i32 %min_off.0, %add65
  br i1 %cmp6695, label %for.body.lr.ph, label %for.end142

for.body.lr.ph:                                   ; preds = %if.end64
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %call1, i64 0, i32 6
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %call1, i64 0, i32 7
  br label %for.body

for.body:                                         ; preds = %mark, %for.body.lr.ph
  %i.096 = phi i32 [ %min_off.0, %for.body.lr.ph ], [ %inc141, %mark ]
  %sub68 = xor i32 %i.096, -1
  %i129 = load i32, i32* %allocated_stack, align 8
  %cmp69.not = icmp sgt i32 %i129, %sub68
  br i1 %cmp69.not, label %if.end72, label %err118

if.end72:                                         ; preds = %for.body
  %div = sdiv i32 %sub68, 8
  %i130 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %idxprom73 = sext i32 %div to i64
  %rem = srem i32 %sub68, 8
  %idxprom75 = sext i32 %rem to i64
  %arrayidx76 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i130, i64 %idxprom73, i32 1, i64 %idxprom75
  %i131 = load i8, i8* %arrayidx76, align 1
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end72
  %Pivot = icmp slt i8 %i131, 3
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %i131, 3
  br i1 %SwitchLeaf2, label %mark.sink.split, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %i131, 2
  br i1 %SwitchLeaf, label %mark, label %NewDefault

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end86

if.end86:                                         ; preds = %NewDefault
  %arrayidx91 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i130, i64 %idxprom73, i32 1, i64 0
  %i132 = load i8, i8* %arrayidx91, align 8
  %cmp93 = icmp eq i8 %i132, 1
  br i1 %cmp93, label %land.lhs.true95, label %err118

land.lhs.true95:                                  ; preds = %if.end86
  %spilled_ptr = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i130, i64 %idxprom73, i32 0
  %type99 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %spilled_ptr, i64 0, i32 0
  %i133 = load i32, i32* %type99, align 8
  %cmp100 = icmp eq i32 %i133, 1
  br i1 %cmp100, label %if.then102, label %err118

if.then102:                                       ; preds = %land.lhs.true95
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %spilled_ptr) #22
  %i134 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx116 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i134, i64 %idxprom73, i32 1, i64 0
  store i8 2, i8* %arrayidx116, align 1
  %i135 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx116.1 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i135, i64 %idxprom73, i32 1, i64 1
  store i8 2, i8* %arrayidx116.1, align 1
  %i136 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx116.2 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i136, i64 %idxprom73, i32 1, i64 2
  store i8 2, i8* %arrayidx116.2, align 1
  %i137 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx116.3 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i137, i64 %idxprom73, i32 1, i64 3
  store i8 2, i8* %arrayidx116.3, align 1
  %i138 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx116.4 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i138, i64 %idxprom73, i32 1, i64 4
  store i8 2, i8* %arrayidx116.4, align 1
  %i139 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx116.5 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i139, i64 %idxprom73, i32 1, i64 5
  store i8 2, i8* %arrayidx116.5, align 1
  %i140 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx116.6 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i140, i64 %idxprom73, i32 1, i64 6
  store i8 2, i8* %arrayidx116.6, align 1
  %i141 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx116.7 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i141, i64 %idxprom73, i32 1, i64 7
  br label %mark.sink.split

err118:                                           ; preds = %land.lhs.true95, %if.end86, %for.body
  %i142 = load i64, i64* %i106, align 8
  %call120 = call fastcc zeroext i1 @tnum_is_const(i64 %i142) #22
  br i1 %call120, label %if.then121, label %if.else123

if.then121:                                       ; preds = %err118
  %i143 = bitcast %struct.bpf_verifier_env* %env to i8*
  %sub122 = sub i32 %i.096, %min_off.0
  call void (i8*, i8*, ...) @verbose(i8* noundef %i143, i8* noundef getelementptr inbounds ([52 x i8], [52 x i8]* @.str.253, i64 0, i64 0), i32 noundef %min_off.0, i32 noundef %sub122, i32 noundef %access_size) #22
  br label %return

if.else123:                                       ; preds = %err118
  %arraydecay125 = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf124, i64 0, i64 0
  %i144 = load i64, i64* %i105, align 8
  %call127 = call i32 @tnum_strn(i8* noundef %arraydecay125, i64 noundef 48, i64 %i144, i64 %i142) #22
  %i145 = bitcast %struct.bpf_verifier_env* %env to i8*
  %sub129 = sub i32 %i.096, %min_off.0
  call void (i8*, i8*, ...) @verbose(i8* noundef %i145, i8* noundef getelementptr inbounds ([56 x i8], [56 x i8]* @.str.254, i64 0, i64 0), i8* noundef %arraydecay125, i32 noundef %sub129, i32 noundef %access_size) #22
  br label %return

mark.sink.split:                                  ; preds = %if.then102, %LeafBlock1
  %arrayidx116.7.sink = phi i8* [ %arrayidx116.7, %if.then102 ], [ %arrayidx76, %LeafBlock1 ]
  store i8 2, i8* %arrayidx116.7.sink, align 1
  br label %mark

mark:                                             ; preds = %mark.sink.split, %LeafBlock
  %i146 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %spilled_ptr134 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i146, i64 %idxprom73, i32 0
  %parent = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i146, i64 %idxprom73, i32 0, i32 10
  %i147 = load %struct.bpf_reg_state*, %struct.bpf_reg_state** %parent, align 8
  %call139 = call fastcc i32 @mark_reg_read(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %spilled_ptr134, %struct.bpf_reg_state* noundef %i147, i8 noundef zeroext 2) #22
  %inc141 = add nsw i32 %i.096, 1
  %exitcond.not = icmp eq i32 %inc141, %add65
  br i1 %exitcond.not, label %for.end142, label %for.body

for.end142:                                       ; preds = %mark, %if.end64
  %call1.idx = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %call1, i64 0, i32 3
  %call1.idx.val = load i32, i32* %call1.idx, align 8
  call fastcc void @update_stack_depth(%struct.bpf_verifier_env* noundef %env, i32 %call1.idx.val, i32 noundef %min_off.0) #22
  br label %return

return:                                           ; preds = %for.end142, %if.else123, %if.then121, %if.then61, %if.then53, %if.then48, %if.then34, %if.then18, %if.then9, %if.end, %land.lhs.true3
  %retval.0 = phi i32 [ -13, %if.end ], [ 0, %if.then61 ], [ 0, %for.end142 ], [ -13, %if.then34 ], [ %call46, %if.then48 ], [ %call51, %if.then53 ], [ -13, %if.then18 ], [ 0, %land.lhs.true3 ], [ %call13, %if.then9 ], [ -13, %if.else123 ], [ -13, %if.then121 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc %struct.bpf_func_state* @func(%struct.bpf_verifier_state* %env.0.8.val, i32 %reg.0.11.val) unnamed_addr #7 {
entry:
  %idxprom = zext i32 %reg.0.11.val to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %env.0.8.val, i64 0, i32 0, i64 %idxprom
  %i2 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  ret %struct.bpf_func_state* %i2
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @__check_stack_boundary(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %off, i32 noundef %access_size, i1 noundef zeroext %zero_size_allowed) unnamed_addr #6 {
entry:
  %tn_buf = alloca [48 x i8], align 16
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @reg_state(%struct.bpf_verifier_state* %env.idx.val, i32 noundef %regno) #22
  %i = icmp ult i32 %off, -512
  br i1 %i, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %entry
  %add = add i32 %access_size, %off
  %cmp3 = icmp slt i32 %add, 1
  %cmp5 = icmp sgt i32 %access_size, -1
  %or.cond1.not = and i1 %cmp5, %cmp3
  %cmp7 = icmp ne i32 %access_size, 0
  %brmerge = or i1 %cmp7, %zero_size_allowed
  %or.cond = and i1 %brmerge, %or.cond1.not
  br i1 %or.cond, label %return, label %if.then

if.then:                                          ; preds = %lor.lhs.false2, %entry
  %i14 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 5, i32 1
  %i15 = load i64, i64* %i14, align 8
  %call8 = call fastcc zeroext i1 @tnum_is_const(i64 %i15) #22
  br i1 %call8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then
  %i16 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i16, i8* noundef getelementptr inbounds ([46 x i8], [46 x i8]* @.str.255, i64 0, i64 0), i32 noundef %regno, i32 noundef %off, i32 noundef %access_size) #22
  br label %return

if.else:                                          ; preds = %if.then
  %i17 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 5, i32 0
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  %i18 = load i64, i64* %i17, align 8
  %call11 = call i32 @tnum_strn(i8* noundef %arraydecay, i64 noundef 48, i64 %i18, i64 %i15) #22
  %i19 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i19, i8* noundef getelementptr inbounds ([50 x i8], [50 x i8]* @.str.256, i64 0, i64 0), i32 noundef %regno, i8* noundef %arraydecay, i32 noundef %access_size) #22
  br label %return

return:                                           ; preds = %if.else, %if.then9, %lor.lhs.false2
  %retval.0 = phi i32 [ -13, %if.else ], [ -13, %if.then9 ], [ 0, %lor.lhs.false2 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @mark_reg_read(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef readonly %state, %struct.bpf_reg_state* noundef %parent, i8 noundef zeroext %flag) unnamed_addr #6 {
entry:
  %tobool.not21 = icmp eq %struct.bpf_reg_state* %parent, null
  br i1 %tobool.not21, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %parent1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %state, i64 0, i32 10
  %i = load %struct.bpf_reg_state*, %struct.bpf_reg_state** %parent1, align 8
  %cmp = icmp eq %struct.bpf_reg_state* %i, %parent
  %conv = zext i8 %flag to i32
  %cmp21 = icmp eq i8 %flag, 2
  br label %while.body

while.body:                                       ; preds = %if.end17, %while.body.lr.ph
  %cnt.025 = phi i32 [ 0, %while.body.lr.ph ], [ %inc, %if.end17 ]
  %writes.024 = phi i1 [ %cmp, %while.body.lr.ph ], [ true, %if.end17 ]
  %parent.addr.023 = phi %struct.bpf_reg_state* [ %parent, %while.body.lr.ph ], [ %i40, %if.end17 ]
  %state.addr.022 = phi %struct.bpf_reg_state* [ %state, %while.body.lr.ph ], [ %parent.addr.023, %if.end17 ]
  br i1 %writes.024, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %live = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %state.addr.022, i64 0, i32 13
  %i33 = load i32, i32* %live, align 8
  %and = and i32 %i33, 4
  %tobool3.not = icmp eq i32 %and, 0
  br i1 %tobool3.not, label %if.end, label %while.end

if.end:                                           ; preds = %land.lhs.true, %while.body
  %live4 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %parent.addr.023, i64 0, i32 13
  %i34 = load i32, i32* %live4, align 8
  %and5 = and i32 %i34, 8
  %tobool6.not = icmp eq i32 %and5, 0
  br i1 %tobool6.not, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end
  %i35 = bitcast %struct.bpf_verifier_env* %env to i8*
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %parent.addr.023, i64 0, i32 0
  %i36 = load i32, i32* %type, align 8
  %idxprom = zext i32 %i36 to i64
  %arrayidx = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom
  %i37 = load i8*, i8** %arrayidx, align 8
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %parent.addr.023, i64 0, i32 5, i32 0
  %i38 = load i64, i64* %value, align 8
  %off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %parent.addr.023, i64 0, i32 2
  %i39 = load i32, i32* %off, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i35, i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.73, i64 0, i64 0), i8* noundef %i37, i64 noundef %i38, i32 noundef %i39) #22
  br label %return

if.end8:                                          ; preds = %if.end
  %and10 = and i32 %i34, 3
  %cmp11 = icmp ne i32 %and10, %conv
  %and14 = and i32 %i34, 2
  %tobool15.not = icmp eq i32 %and14, 0
  %or.cond = and i1 %cmp11, %tobool15.not
  br i1 %or.cond, label %if.end17, label %while.end

if.end17:                                         ; preds = %if.end8
  %or = or i32 %i34, %conv
  %and25 = and i32 %or, -2
  %spec.select = select i1 %cmp21, i32 %and25, i32 %or
  store i32 %spec.select, i32* %live4, align 8
  %parent27 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %parent.addr.023, i64 0, i32 10
  %i40 = load %struct.bpf_reg_state*, %struct.bpf_reg_state** %parent27, align 8
  %inc = add i32 %cnt.025, 1
  %tobool.not = icmp eq %struct.bpf_reg_state* %i40, null
  br i1 %tobool.not, label %while.end, label %while.body

while.end:                                        ; preds = %if.end17, %if.end8, %land.lhs.true, %entry
  %cnt.0.lcssa = phi i32 [ 0, %entry ], [ %inc, %if.end17 ], [ %cnt.025, %land.lhs.true ], [ %cnt.025, %if.end8 ]
  %longest_mark_read_walk = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 30
  %i41 = load i32, i32* %longest_mark_read_walk, align 4
  %cmp28 = icmp ult i32 %i41, %cnt.0.lcssa
  br i1 %cmp28, label %if.then30, label %return

if.then30:                                        ; preds = %while.end
  store i32 %cnt.0.lcssa, i32* %longest_mark_read_walk, align 4
  br label %return

return:                                           ; preds = %if.then30, %while.end, %if.then7
  %retval.0 = phi i32 [ -14, %if.then7 ], [ 0, %if.then30 ], [ 0, %while.end ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @update_stack_depth(%struct.bpf_verifier_env* nocapture noundef %env, i32 %func.0.3.val, i32 noundef %off) unnamed_addr #10 {
entry:
  %idxprom = zext i32 %func.0.3.val to i64
  %stack_depth = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom, i32 2
  %i1 = load i16, i16* %stack_depth, align 4
  %conv = zext i16 %i1 to i32
  %sub = sub i32 0, %off
  %cmp.not = icmp slt i32 %conv, %sub
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %conv3 = trunc i32 %sub to i16
  store i16 %conv3, i16* %stack_depth, align 4
  br label %return

return:                                           ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @__check_map_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %zero_size_allowed) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %idxprom = zext i32 %regno to i64
  %map_ptr = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 1, i32 0
  %i = load %struct.bpf_map*, %struct.bpf_map** %map_ptr, align 8
  %i8 = or i32 %size, %off
  %.not = icmp sgt i32 %i8, -1
  %cmp3 = icmp ne i32 %size, 0
  %brmerge = or i1 %cmp3, %zero_size_allowed
  %or.cond = and i1 %.not, %brmerge
  br i1 %or.cond, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %entry
  %add = add i32 %size, %off
  %value_size = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i, i64 0, i32 5
  %i9 = load i32, i32* %value_size, align 32
  %cmp5 = icmp ugt i32 %add, %i9
  br i1 %cmp5, label %if.then, label %return

if.then:                                          ; preds = %lor.lhs.false4, %entry
  %i10 = bitcast %struct.bpf_verifier_env* %env to i8*
  %value_size6 = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %i, i64 0, i32 5
  %i11 = load i32, i32* %value_size6, align 32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i10, i8* noundef getelementptr inbounds ([59 x i8], [59 x i8]* @.str.149, i64 0, i64 0), i32 noundef %i11, i32 noundef %off, i32 noundef %size) #22
  br label %return

return:                                           ; preds = %if.then, %lor.lhs.false4
  %retval.0 = phi i32 [ -13, %if.then ], [ 0, %lor.lhs.false4 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc i32 @bpf_map_flags_to_cap(i32 %map.0.7.val) unnamed_addr #7 {
entry:
  %and1 = and i32 %map.0.7.val, 128
  %tobool.not = icmp eq i32 %and1, 0
  %and2 = and i32 %map.0.7.val, 256
  %tobool3.not = icmp eq i32 %and2, 0
  %. = select i1 %tobool3.not, i32 3, i32 2
  %retval.0 = select i1 %tobool.not, i32 %., i32 1
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @__check_packet_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %regno, i32 noundef %off, i32 noundef %size, i1 noundef zeroext %zero_size_allowed) unnamed_addr #6 {
entry:
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %idxprom = zext i32 %regno to i64
  %i = or i32 %size, %off
  %.not = icmp sgt i32 %i, -1
  %cmp3 = icmp ne i32 %size, 0
  %brmerge = or i1 %cmp3, %zero_size_allowed
  %or.cond = and i1 %.not, %brmerge
  br i1 %or.cond, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %entry
  %conv = sext i32 %off to i64
  %conv5 = sext i32 %size to i64
  %add = add nsw i64 %conv5, %conv
  %i11 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 1
  %range = bitcast %union.anon.147* %i11 to i16*
  %i12 = load i16, i16* %range, align 8
  %conv6 = zext i16 %i12 to i64
  %cmp7 = icmp ugt i64 %add, %conv6
  br i1 %cmp7, label %if.then, label %return

if.then:                                          ; preds = %lor.lhs.false4, %entry
  %i13 = bitcast %struct.bpf_verifier_env* %env to i8*
  %id = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 3
  %i14 = load i32, i32* %id, align 4
  %off9 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 2
  %i15 = load i32, i32* %off9, align 8
  %i16 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 1
  %range10 = bitcast %union.anon.147* %i16 to i16*
  %i17 = load i16, i16* %range10, align 8
  %conv11 = zext i16 %i17 to i32
  call void (i8*, i8*, ...) @verbose(i8* noundef %i13, i8* noundef getelementptr inbounds ([66 x i8], [66 x i8]* @.str.186, i64 0, i64 0), i32 noundef %off, i32 noundef %size, i32 noundef %regno, i32 noundef %i14, i32 noundef %i15, i32 noundef %conv11) #22
  br label %return

return:                                           ; preds = %if.then, %lor.lhs.false4
  %retval.0 = phi i32 [ -13, %if.then ], [ 0, %lor.lhs.false4 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @check_raw_mode_ok(%struct.bpf_func_proto* nocapture noundef readonly %fn) unnamed_addr #7 {
entry:
  %arg1_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 4
  %i = load i32, i32* %arg1_type, align 8
  %cmp = icmp eq i32 %i, 8
  %spec.select = zext i1 %cmp to i32
  %arg2_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 5
  %i10 = load i32, i32* %arg2_type, align 4
  %cmp1 = icmp eq i32 %i10, 8
  %inc3 = select i1 %cmp, i32 2, i32 1
  %count.1 = select i1 %cmp1, i32 %inc3, i32 %spec.select
  %arg3_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 6
  %i11 = load i32, i32* %arg3_type, align 8
  %cmp5 = icmp eq i32 %i11, 8
  %inc7 = zext i1 %cmp5 to i32
  %count.2 = add nuw nsw i32 %count.1, %inc7
  %arg4_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 7
  %i12 = load i32, i32* %arg4_type, align 4
  %cmp9 = icmp eq i32 %i12, 8
  %inc11 = zext i1 %cmp9 to i32
  %count.3 = add nuw nsw i32 %count.2, %inc11
  %arg5_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 8
  %i13 = load i32, i32* %arg5_type, align 8
  %cmp13 = icmp eq i32 %i13, 8
  %inc15 = zext i1 %cmp13 to i32
  %count.4 = add nuw nsw i32 %count.3, %inc15
  %cmp17 = icmp ult i32 %count.4, 2
  ret i1 %cmp17
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @check_arg_pair_ok(%struct.bpf_func_proto* nocapture noundef readonly %fn) unnamed_addr #7 {
entry:
  %arg1_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 4
  %i = load i32, i32* %arg1_type, align 8
  %call = call fastcc zeroext i1 @arg_type_is_mem_size(i32 noundef %i) #22
  br i1 %call, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %arg5_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 8
  %i10 = load i32, i32* %arg5_type, align 8
  %call1 = call fastcc zeroext i1 @arg_type_is_mem_ptr(i32 noundef %i10) #22
  br i1 %call1, label %return, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %arg2_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 5
  %i11 = load i32, i32* %arg2_type, align 4
  %call4 = call fastcc zeroext i1 @check_args_pair_invalid(i32 noundef %i, i32 noundef %i11) #22
  br i1 %call4, label %return, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false2
  %arg3_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 6
  %i12 = load i32, i32* %arg3_type, align 8
  %call7 = call fastcc zeroext i1 @check_args_pair_invalid(i32 noundef %i11, i32 noundef %i12) #22
  br i1 %call7, label %return, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false5
  %arg4_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 7
  %i13 = load i32, i32* %arg4_type, align 4
  %call10 = call fastcc zeroext i1 @check_args_pair_invalid(i32 noundef %i12, i32 noundef %i13) #22
  br i1 %call10, label %return, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false8
  %call14 = call fastcc zeroext i1 @check_args_pair_invalid(i32 noundef %i13, i32 noundef %i10) #22
  %not.call14 = xor i1 %call14, true
  br label %return

return:                                           ; preds = %lor.lhs.false11, %lor.lhs.false8, %lor.lhs.false5, %lor.lhs.false2, %lor.lhs.false, %entry
  %retval.0 = phi i1 [ false, %lor.lhs.false8 ], [ false, %lor.lhs.false5 ], [ false, %lor.lhs.false2 ], [ false, %lor.lhs.false ], [ false, %entry ], [ %not.call14, %lor.lhs.false11 ]
  ret i1 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @check_refcount_ok(%struct.bpf_func_proto* nocapture noundef readonly %fn, i32 noundef %func_id) unnamed_addr #7 {
entry:
  %arg1_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 4
  %i = load i32, i32* %arg1_type, align 8
  %call = call fastcc zeroext i1 @arg_type_may_be_refcounted(i32 noundef %i) #22
  %spec.select = zext i1 %call to i32
  %arg2_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 5
  %i12 = load i32, i32* %arg2_type, align 4
  %call1 = call fastcc zeroext i1 @arg_type_may_be_refcounted(i32 noundef %i12) #22
  %inc3 = select i1 %call, i32 2, i32 1
  %count.1 = select i1 %call1, i32 %inc3, i32 %spec.select
  %arg3_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 6
  %i13 = load i32, i32* %arg3_type, align 8
  %call5 = call fastcc zeroext i1 @arg_type_may_be_refcounted(i32 noundef %i13) #22
  %inc7 = zext i1 %call5 to i32
  %count.2 = add nuw nsw i32 %count.1, %inc7
  %arg4_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 7
  %i14 = load i32, i32* %arg4_type, align 4
  %call9 = call fastcc zeroext i1 @arg_type_may_be_refcounted(i32 noundef %i14) #22
  %inc11 = zext i1 %call9 to i32
  %count.3 = add nuw nsw i32 %count.2, %inc11
  %arg5_type = getelementptr inbounds %struct.bpf_func_proto, %struct.bpf_func_proto* %fn, i64 0, i32 8
  %i15 = load i32, i32* %arg5_type, align 8
  %call13 = call fastcc zeroext i1 @arg_type_may_be_refcounted(i32 noundef %i15) #22
  %inc15 = zext i1 %call13 to i32
  %count.4 = add nuw nsw i32 %count.3, %inc15
  %call17 = call fastcc zeroext i1 @is_acquire_function(i32 noundef %func_id) #22
  %tobool = icmp eq i32 %count.4, 0
  %not.call17 = xor i1 %call17, true
  %or.cond = select i1 %not.call17, i1 true, i1 %tobool
  %cmp = icmp ult i32 %count.4, 2
  %spec.select11 = select i1 %or.cond, i1 %cmp, i1 false
  ret i1 %spec.select11
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @arg_type_may_be_refcounted(i32 noundef %type) unnamed_addr #2 {
entry:
  %cmp = icmp eq i32 %type, 14
  ret i1 %cmp
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @check_args_pair_invalid(i32 noundef %arg_curr, i32 noundef %arg_next) unnamed_addr #2 {
entry:
  %call = call fastcc zeroext i1 @arg_type_is_mem_ptr(i32 noundef %arg_curr) #22
  %call1 = call fastcc zeroext i1 @arg_type_is_mem_size(i32 noundef %arg_next) #22
  %spec.select = xor i1 %call, %call1
  ret i1 %spec.select
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @is_pkt_reg(%struct.bpf_verifier_state* %env.0.8.val, i32 noundef %regno) unnamed_addr #7 {
entry:
  %call = call fastcc %struct.bpf_reg_state* @reg_state(%struct.bpf_verifier_state* %env.0.8.val, i32 noundef %regno) #22
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %call1 = call fastcc zeroext i1 @type_is_pkt_pointer(i32 noundef %i) #22
  ret i1 %call1
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @is_flow_key_reg(%struct.bpf_verifier_state* %env.0.8.val, i32 noundef %regno) unnamed_addr #7 {
entry:
  %call = call fastcc %struct.bpf_reg_state* @reg_state(%struct.bpf_verifier_state* %env.0.8.val, i32 noundef %regno) #22
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 10
  ret i1 %cmp
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @is_sk_reg(%struct.bpf_verifier_state* %env.0.8.val, i32 noundef %regno) unnamed_addr #7 {
entry:
  %call = call fastcc %struct.bpf_reg_state* @reg_state(%struct.bpf_verifier_state* %env.0.8.val, i32 noundef %regno) #22
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %call1 = call fastcc zeroext i1 @type_is_sk_pointer(i32 noundef %i) #22
  ret i1 %call1
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @reg_type_mismatch_ok(i32 noundef %type) unnamed_addr #2 {
entry:
  %switch.tableidx = add i32 %type, -2
  %i = icmp ugt i32 %switch.tableidx, 16
  %switch.cast = trunc i32 %switch.tableidx to i17
  %switch.downshift = lshr i17 33278, %switch.cast
  %i1 = and i17 %switch.downshift, 1
  %switch.masked = icmp ne i17 %i1, 0
  %retval.0 = select i1 %i, i1 true, i1 %switch.masked
  ret i1 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_ctx_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i32 noundef %off, i32 noundef %size, i32 noundef %t, i32* nocapture noundef %reg_type) unnamed_addr #6 {
entry:
  %info = alloca %struct.util_est, align 4
  %reg_type1 = getelementptr inbounds %struct.util_est, %struct.util_est* %info, i64 0, i32 0
  %i = load i32, i32* %reg_type, align 4
  store i32 %i, i32* %reg_type1, align 4
  %ctx_field_size = getelementptr inbounds %struct.util_est, %struct.util_est* %info, i64 0, i32 1
  store i32 0, i32* %ctx_field_size, align 4
  %ops = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 3
  %i14 = load %struct.bpf_verifier_ops*, %struct.bpf_verifier_ops** %ops, align 8
  %is_valid_access = getelementptr inbounds %struct.bpf_verifier_ops, %struct.bpf_verifier_ops* %i14, i64 0, i32 1
  %i15 = load i1 (i32, i32, i32, %struct.bpf_prog*, %struct.util_est*)*, i1 (i32, i32, i32, %struct.bpf_prog*, %struct.util_est*)** %is_valid_access, align 8
  %tobool.not = icmp eq i1 (i32, i32, i32, %struct.bpf_prog*, %struct.util_est*)* %i15, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i16 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %call = call zeroext i1 %i15(i32 noundef %off, i32 noundef %size, i32 noundef %t, %struct.bpf_prog* noundef %i16, %struct.util_est* noundef nonnull %info) #23
  br i1 %call, label %if.then, label %if.end13

if.then:                                          ; preds = %land.lhs.true
  %i17 = load i32, i32* %reg_type1, align 4
  store i32 %i17, i32* %reg_type, align 4
  %i18 = load i32, i32* %ctx_field_size, align 4
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i19 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %idxprom = sext i32 %insn_idx to i64
  %ctx_field_size6 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i19, i64 %idxprom, i32 1
  store i32 %i18, i32* %ctx_field_size6, align 8
  %i20 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i20, i64 0, i32 7
  %i21 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %max_ctx_offset = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i21, i64 0, i32 2
  %i22 = load i32, i32* %max_ctx_offset, align 8
  %add = add i32 %size, %off
  %cmp = icmp ult i32 %i22, %add
  br i1 %cmp, label %if.then8, label %return

if.then8:                                         ; preds = %if.then
  store i32 %add, i32* %max_ctx_offset, align 8
  br label %return

if.end13:                                         ; preds = %land.lhs.true, %entry
  %i23 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i23, i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @.str.176, i64 0, i64 0), i32 noundef %off, i32 noundef %size) #22
  br label %return

return:                                           ; preds = %if.end13, %if.then8, %if.then
  %retval.0 = phi i32 [ -13, %if.end13 ], [ 0, %if.then8 ], [ 0, %if.then ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_stack_access(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef readonly %reg, i32 noundef %off, i32 noundef %size) unnamed_addr #6 {
entry:
  %tn_buf = alloca [48 x i8], align 16
  %i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i7 = load i64, i64* %i, align 8
  %call = call fastcc zeroext i1 @tnum_is_const(i64 %i7) #22
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i8 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  %i9 = load i64, i64* %i8, align 8
  %call2 = call i32 @tnum_strn(i8* noundef %arraydecay, i64 noundef 48, i64 %i9, i64 %i7) #22
  %i10 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i10, i8* noundef getelementptr inbounds ([49 x i8], [49 x i8]* @.str.150, i64 0, i64 0), i8* noundef %arraydecay, i32 noundef %off, i32 noundef %size) #22
  br label %return

if.end:                                           ; preds = %entry
  %i11 = icmp ult i32 %off, -512
  br i1 %i11, label %if.then5, label %return

if.then5:                                         ; preds = %if.end
  %i12 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i12, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.151, i64 0, i64 0), i32 noundef %off, i32 noundef %size) #22
  br label %return

return:                                           ; preds = %if.then5, %if.end, %if.then
  %retval.0 = phi i32 [ -13, %if.then5 ], [ -13, %if.then ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_stack_write(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %state, i32 noundef %off, i32 noundef %size, i32 noundef %value_regno, i32 noundef %insn_idx) unnamed_addr #6 {
entry:
  %sub1 = xor i32 %off, -1
  %div = sdiv i32 %sub1, 8
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %i88 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 10
  %insnsi = bitcast %union.anon.146* %i88 to [0 x %struct.bpf_insn]*
  %idxprom = sext i32 %insn_idx to i64
  %dst_reg2 = getelementptr [0 x %struct.bpf_insn], [0 x %struct.bpf_insn]* %insnsi, i64 0, i64 %idxprom, i32 1
  %bf.load = load i8, i8* %dst_reg2, align 1
  %bf.clear = and i8 %bf.load, 15
  %or = or i32 %sub1, 7
  %add4 = add i32 %or, 1
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 4
  %i89 = load i32, i32* %acquired_refs, align 4
  %call = call fastcc i32 @realloc_func_state(%struct.bpf_func_state* noundef %state, i32 noundef %add4, i32 noundef %i89, i1 noundef zeroext true) #22
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i90 = load i8, i8* %allow_ptr_leaks, align 8
  %i91 = and i8 %i90, 1
  %tobool5.not = icmp eq i8 %i91, 0
  br i1 %tobool5.not, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %if.end
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i92 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %idxprom6 = sext i32 %div to i64
  %arrayidx8 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i92, i64 %idxprom6, i32 1, i64 0
  %i93 = load i8, i8* %arrayidx8, align 8
  %cmp = icmp eq i8 %i93, 1
  %cmp12 = icmp ne i32 %size, 8
  %or.cond = and i1 %cmp12, %cmp
  br i1 %or.cond, label %if.then14, label %if.end15

if.then14:                                        ; preds = %land.lhs.true
  %i94 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i94, i8* noundef getelementptr inbounds ([45 x i8], [45 x i8]* @.str.177, i64 0, i64 0)) #22
  br label %return

if.end15:                                         ; preds = %land.lhs.true, %if.end
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i95 = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i95, i64 0, i32 4
  %i96 = load i32, i32* %curframe, align 8
  %idxprom17 = zext i32 %i96 to i64
  %arrayidx18 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i95, i64 0, i32 0, i64 %idxprom17
  %i97 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx18, align 8
  %cmp19 = icmp sgt i32 %value_regno, -1
  %idxprom22 = sext i32 %value_regno to i64
  %arrayidx23 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i97, i64 0, i32 0, i64 %idxprom22
  %reg.0 = select i1 %cmp19, %struct.bpf_reg_state* %arrayidx23, %struct.bpf_reg_state* null
  %tobool25 = icmp ne %struct.bpf_reg_state* %reg.0, null
  %cmp27 = icmp eq i32 %size, 8
  %or.cond1 = and i1 %cmp27, %tobool25
  br i1 %or.cond1, label %land.lhs.true29, label %if.else

land.lhs.true29:                                  ; preds = %if.end15
  %call30 = call fastcc zeroext i1 @register_is_const(%struct.bpf_reg_state* noundef nonnull %reg.0) #22
  br i1 %call30, label %land.lhs.true32, label %if.else

land.lhs.true32:                                  ; preds = %land.lhs.true29
  %call33 = call fastcc zeroext i1 @register_is_null(%struct.bpf_reg_state* noundef nonnull %reg.0) #22
  %brmerge = select i1 %call33, i1 true, i1 %tobool5.not
  br i1 %brmerge, label %if.else, label %if.then38

if.then38:                                        ; preds = %land.lhs.true32
  %cmp39.not = icmp eq i8 %bf.clear, 10
  br i1 %cmp39.not, label %if.end46, label %if.then41

if.then41:                                        ; preds = %if.then38
  %call42 = call fastcc i32 @mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %value_regno) #22
  %tobool43.not = icmp eq i32 %call42, 0
  br i1 %tobool43.not, label %if.end46, label %return

if.end46:                                         ; preds = %if.then41, %if.then38
  call fastcc void @save_register_state(%struct.bpf_func_state* noundef %state, i32 noundef %div, %struct.bpf_reg_state* noundef nonnull %reg.0) #22
  br label %return

if.else:                                          ; preds = %land.lhs.true32, %land.lhs.true29, %if.end15
  br i1 %tobool25, label %land.lhs.true48, label %if.else110

land.lhs.true48:                                  ; preds = %if.else
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg.0, i64 0, i32 0
  %i98 = load i32, i32* %type, align 8
  %call49 = call fastcc zeroext i1 @is_spillable_regtype(i32 noundef %i98) #22
  br i1 %call49, label %if.then51, label %if.else110

if.then51:                                        ; preds = %land.lhs.true48
  br i1 %cmp27, label %if.end55, label %if.then54

if.then54:                                        ; preds = %if.then51
  call void (%struct.bpf_verifier_env*, i32, i8*, ...) @verbose_linfo(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i64 0, i64 0)) #22
  %i99 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i99, i8* noundef getelementptr inbounds ([32 x i8], [32 x i8]* @.str.178, i64 0, i64 0)) #22
  br label %return

if.end55:                                         ; preds = %if.then51
  %cmp56.not = icmp ne %struct.bpf_func_state* %i97, %state
  %cmp60 = icmp eq i32 %i98, 6
  %or.cond80 = and i1 %cmp56.not, %cmp60
  br i1 %or.cond80, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.end55
  %i100 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i100, i8* noundef getelementptr inbounds ([63 x i8], [63 x i8]* @.str.179, i64 0, i64 0)) #22
  br label %return

if.end63:                                         ; preds = %if.end55
  br i1 %tobool5.not, label %if.then66, label %if.end109

if.then66:                                        ; preds = %if.end63
  %stack67 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i101 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack67, align 8
  %idxprom68 = sext i32 %div to i64
  %arrayidx71 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i101, i64 %idxprom68, i32 1, i64 0
  %i102 = load i8, i8* %arrayidx71, align 8
  %cmp73 = icmp eq i8 %i102, 1
  br i1 %cmp73, label %land.lhs.true75, label %for.body

land.lhs.true75:                                  ; preds = %if.then66
  %spilled_ptr = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i101, i64 %idxprom68, i32 0
  %call79 = call fastcc zeroext i1 @register_is_const(%struct.bpf_reg_state* noundef %spilled_ptr) #22
  br label %for.body

for.cond:                                         ; preds = %for.body
  %arrayidx90.1 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i101, i64 %idxprom68, i32 1, i64 1
  %i103 = load i8, i8* %arrayidx90.1, align 1
  %cmp92.1 = icmp eq i8 %i103, 2
  br i1 %cmp92.1, label %if.then97, label %for.cond.1

for.cond.1:                                       ; preds = %for.cond
  %arrayidx90.2 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i101, i64 %idxprom68, i32 1, i64 2
  %i104 = load i8, i8* %arrayidx90.2, align 1
  %cmp92.2 = icmp eq i8 %i104, 2
  br i1 %cmp92.2, label %if.then97, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %arrayidx90.3 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i101, i64 %idxprom68, i32 1, i64 3
  %i105 = load i8, i8* %arrayidx90.3, align 1
  %cmp92.3 = icmp eq i8 %i105, 2
  br i1 %cmp92.3, label %if.then97, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %arrayidx90.4 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i101, i64 %idxprom68, i32 1, i64 4
  %i106 = load i8, i8* %arrayidx90.4, align 1
  %cmp92.4 = icmp eq i8 %i106, 2
  br i1 %cmp92.4, label %if.then97, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %arrayidx90.5 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i101, i64 %idxprom68, i32 1, i64 5
  %i107 = load i8, i8* %arrayidx90.5, align 1
  %cmp92.5 = icmp eq i8 %i107, 2
  br i1 %cmp92.5, label %if.then97, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %arrayidx90.6 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i101, i64 %idxprom68, i32 1, i64 6
  %i108 = load i8, i8* %arrayidx90.6, align 1
  %cmp92.6 = icmp eq i8 %i108, 2
  br i1 %cmp92.6, label %if.then97, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx90.7 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i101, i64 %idxprom68, i32 1, i64 7
  %i109 = load i8, i8* %arrayidx90.7, align 1
  %cmp92.7 = icmp eq i8 %i109, 2
  %brmerge87 = select i1 %cmp92.7, i1 true, i1 %sanitize.0
  br i1 %brmerge87, label %if.then97, label %if.end109

for.body:                                         ; preds = %land.lhs.true75, %if.then66
  %sanitize.0 = phi i1 [ false, %if.then66 ], [ %call79, %land.lhs.true75 ]
  %cmp92 = icmp eq i8 %i102, 2
  br i1 %cmp92, label %if.then97, label %for.cond

if.then97:                                        ; preds = %for.body, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i111 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %sanitize_stack_off = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i111, i64 %idxprom, i32 2
  %sub101 = xor i32 %div, -1
  %mul = shl nsw i32 %sub101, 3
  %i112 = load i32, i32* %sanitize_stack_off, align 4
  %tobool102.not = icmp eq i32 %i112, 0
  %cmp104.not = icmp eq i32 %i112, %mul
  %or.cond79 = select i1 %tobool102.not, i1 true, i1 %cmp104.not
  br i1 %or.cond79, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.then97
  %i113 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i113, i8* noundef getelementptr inbounds ([52 x i8], [52 x i8]* @.str.180, i64 0, i64 0), i32 noundef %insn_idx, i32 noundef %i112, i32 noundef %mul) #22
  br label %return

if.end107:                                        ; preds = %if.then97
  store i32 %mul, i32* %sanitize_stack_off, align 4
  br label %if.end109

if.end109:                                        ; preds = %if.end107, %for.cond.6, %if.end63
  call fastcc void @save_register_state(%struct.bpf_func_state* noundef %state, i32 noundef %div, %struct.bpf_reg_state* noundef nonnull %reg.0) #22
  br label %return

if.else110:                                       ; preds = %land.lhs.true48, %if.else
  %stack112 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i114 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %idxprom113 = sext i32 %div to i64
  %type116 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i114, i64 %idxprom113, i32 0, i32 0
  store i32 0, i32* %type116, align 8
  %i115 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %arrayidx121 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i115, i64 %idxprom113, i32 1, i64 0
  %i116 = load i8, i8* %arrayidx121, align 8
  %cmp123 = icmp eq i8 %i116, 1
  br i1 %cmp123, label %for.body129, label %if.end139

for.body129:                                      ; preds = %if.else110
  store i8 2, i8* %arrayidx121, align 1
  %i118 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %arrayidx135.1 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i118, i64 %idxprom113, i32 1, i64 1
  store i8 2, i8* %arrayidx135.1, align 1
  %i119 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %arrayidx135.2 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i119, i64 %idxprom113, i32 1, i64 2
  store i8 2, i8* %arrayidx135.2, align 1
  %i120 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %arrayidx135.3 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i120, i64 %idxprom113, i32 1, i64 3
  store i8 2, i8* %arrayidx135.3, align 1
  %i121 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %arrayidx135.4 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i121, i64 %idxprom113, i32 1, i64 4
  store i8 2, i8* %arrayidx135.4, align 1
  %i122 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %arrayidx135.5 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i122, i64 %idxprom113, i32 1, i64 5
  store i8 2, i8* %arrayidx135.5, align 1
  %i123 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %arrayidx135.6 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i123, i64 %idxprom113, i32 1, i64 6
  store i8 2, i8* %arrayidx135.6, align 1
  %i124 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %arrayidx135.7 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i124, i64 %idxprom113, i32 1, i64 7
  store i8 2, i8* %arrayidx135.7, align 1
  br label %if.end139

if.end139:                                        ; preds = %for.body129, %if.else110
  br i1 %cmp27, label %if.then142, label %if.end148

if.then142:                                       ; preds = %if.end139
  %i125 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %live = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i125, i64 %idxprom113, i32 0, i32 13
  %i126 = load i32, i32* %live, align 8
  %or147 = or i32 %i126, 4
  store i32 %or147, i32* %live, align 8
  br label %if.end148

if.end148:                                        ; preds = %if.then142, %if.end139
  br i1 %tobool25, label %land.lhs.true150, label %if.end158

land.lhs.true150:                                 ; preds = %if.end148
  %call151 = call fastcc zeroext i1 @register_is_null(%struct.bpf_reg_state* noundef nonnull %reg.0) #22
  br i1 %call151, label %if.then153, label %if.end158

if.then153:                                       ; preds = %land.lhs.true150
  %call154 = call fastcc i32 @mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %value_regno) #22
  %tobool155.not = icmp eq i32 %call154, 0
  br i1 %tobool155.not, label %if.end158, label %return

if.end158:                                        ; preds = %if.then153, %land.lhs.true150, %if.end148
  %type111.0 = phi i8 [ 2, %land.lhs.true150 ], [ 2, %if.end148 ], [ 3, %if.then153 ]
  %cmp16082 = icmp sgt i32 %size, 0
  br i1 %cmp16082, label %for.body162.preheader, label %return

for.body162.preheader:                            ; preds = %if.end158
  %xtraiter = and i32 %size, 1
  %i127 = icmp eq i32 %size, 1
  br i1 %i127, label %return.loopexit.unr-lcssa, label %for.body162.preheader.new

for.body162.preheader.new:                        ; preds = %for.body162.preheader
  %unroll_iter = and i32 %size, -2
  br label %for.body162

for.body162:                                      ; preds = %for.body162, %for.body162.preheader.new
  %i.283 = phi i32 [ 0, %for.body162.preheader.new ], [ %inc171.1, %for.body162 ]
  %i128 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %sub167 = sub i32 %sub1, %i.283
  %rem = srem i32 %sub167, 8
  %idxprom168 = sext i32 %rem to i64
  %arrayidx169 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i128, i64 %idxprom113, i32 1, i64 %idxprom168
  store i8 %type111.0, i8* %arrayidx169, align 1
  %inc171.neg = xor i32 %i.283, -1
  %i129 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %sub167.1 = add i32 %inc171.neg, %sub1
  %rem.1 = srem i32 %sub167.1, 8
  %idxprom168.1 = sext i32 %rem.1 to i64
  %arrayidx169.1 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i129, i64 %idxprom113, i32 1, i64 %idxprom168.1
  store i8 %type111.0, i8* %arrayidx169.1, align 1
  %inc171.1 = add nuw nsw i32 %i.283, 2
  %niter.ncmp.1 = icmp eq i32 %inc171.1, %unroll_iter
  br i1 %niter.ncmp.1, label %return.loopexit.unr-lcssa, label %for.body162

return.loopexit.unr-lcssa:                        ; preds = %for.body162, %for.body162.preheader
  %i.283.unr = phi i32 [ 0, %for.body162.preheader ], [ %inc171.1, %for.body162 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %return, label %for.body162.epil

for.body162.epil:                                 ; preds = %return.loopexit.unr-lcssa
  %i130 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack112, align 8
  %sub167.epil = sub i32 %sub1, %i.283.unr
  %rem.epil = srem i32 %sub167.epil, 8
  %idxprom168.epil = sext i32 %rem.epil to i64
  %arrayidx169.epil = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i130, i64 %idxprom113, i32 1, i64 %idxprom168.epil
  store i8 %type111.0, i8* %arrayidx169.epil, align 1
  br label %return

return:                                           ; preds = %for.body162.epil, %return.loopexit.unr-lcssa, %if.end158, %if.then153, %if.end109, %if.then106, %if.then62, %if.then54, %if.end46, %if.then41, %if.then14, %entry
  %retval.0 = phi i32 [ -13, %if.then54 ], [ -22, %if.then62 ], [ -22, %if.then106 ], [ -13, %if.then14 ], [ %call, %entry ], [ %call42, %if.then41 ], [ %call154, %if.then153 ], [ 0, %if.end109 ], [ 0, %if.end46 ], [ 0, %if.end158 ], [ 0, %return.loopexit.unr-lcssa ], [ 0, %for.body162.epil ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_stack_read(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* nocapture noundef readonly %reg_state, i32 noundef %off, i32 noundef %size, i32 noundef %value_regno) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %i72 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i72 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i73 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %sub1 = xor i32 %off, -1
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %reg_state, i64 0, i32 6
  %i74 = load i32, i32* %allocated_stack, align 8
  %cmp.not = icmp sgt i32 %i74, %sub1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i75 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i75, i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.181, i64 0, i64 0), i32 noundef %off, i32 noundef %size) #22
  br label %return

if.end:                                           ; preds = %entry
  %div = sdiv i32 %sub1, 8
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %reg_state, i64 0, i32 7
  %i76 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %idxprom2 = sext i32 %div to i64
  %arraydecay = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 1, i64 0
  %spilled_ptr = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 0
  %i77 = load i8, i8* %arraydecay, align 1
  %cmp8 = icmp eq i8 %i77, 1
  br i1 %cmp8, label %if.then10, label %for.cond51.preheader

for.cond51.preheader:                             ; preds = %if.end
  %cmp5263 = icmp sgt i32 %size, 0
  br i1 %cmp5263, label %for.body54, label %for.end76

if.then10:                                        ; preds = %if.end
  %cmp11.not = icmp eq i32 %size, 8
  br i1 %cmp11.not, label %for.body, label %if.then13

if.then13:                                        ; preds = %if.then10
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %spilled_ptr, i64 0, i32 0
  %i78 = load i32, i32* %type, align 8
  %cmp14.not = icmp eq i32 %i78, 1
  br i1 %cmp14.not, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.then13
  %insn_idx = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 0
  %i79 = load i32, i32* %insn_idx, align 8
  call void (%struct.bpf_verifier_env*, i32, i8*, ...) @verbose_linfo(%struct.bpf_verifier_env* noundef %env, i32 noundef %i79, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i64 0, i64 0)) #22
  %i80 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i80, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.182, i64 0, i64 0)) #22
  br label %return

if.end17:                                         ; preds = %if.then13
  %cmp18 = icmp sgt i32 %value_regno, -1
  br i1 %cmp18, label %if.then20, label %if.end25

if.then20:                                        ; preds = %if.end17
  %arraydecay21 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i73, i64 0, i32 0, i64 0
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay21, i32 noundef %value_regno) #22
  %idxprom23 = sext i32 %value_regno to i64
  %live = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i73, i64 0, i32 0, i64 %idxprom23, i32 13
  %i81 = load i32, i32* %live, align 8
  %or = or i32 %i81, 4
  store i32 %or, i32* %live, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.then20, %if.end17
  %parent = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 0, i32 10
  %i82 = load %struct.bpf_reg_state*, %struct.bpf_reg_state** %parent, align 8
  %call = call fastcc i32 @mark_reg_read(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %spilled_ptr, %struct.bpf_reg_state* noundef %i82, i8 noundef zeroext 2) #22
  br label %return

for.cond:                                         ; preds = %for.body
  %sub29.1 = sub i32 -3, %off
  %rem.1 = srem i32 %sub29.1, 8
  %idxprom30.1 = sext i32 %rem.1 to i64
  %arrayidx31.1 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 1, i64 %idxprom30.1
  %i83 = load i8, i8* %arrayidx31.1, align 1
  %cmp33.not.1 = icmp eq i8 %i83, 1
  br i1 %cmp33.not.1, label %for.cond.1, label %if.then35

for.cond.1:                                       ; preds = %for.cond
  %sub29.2 = sub i32 -4, %off
  %rem.2 = srem i32 %sub29.2, 8
  %idxprom30.2 = sext i32 %rem.2 to i64
  %arrayidx31.2 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 1, i64 %idxprom30.2
  %i84 = load i8, i8* %arrayidx31.2, align 1
  %cmp33.not.2 = icmp eq i8 %i84, 1
  br i1 %cmp33.not.2, label %for.cond.2, label %if.then35

for.cond.2:                                       ; preds = %for.cond.1
  %sub29.3 = sub i32 -5, %off
  %rem.3 = srem i32 %sub29.3, 8
  %idxprom30.3 = sext i32 %rem.3 to i64
  %arrayidx31.3 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 1, i64 %idxprom30.3
  %i85 = load i8, i8* %arrayidx31.3, align 1
  %cmp33.not.3 = icmp eq i8 %i85, 1
  br i1 %cmp33.not.3, label %for.cond.3, label %if.then35

for.cond.3:                                       ; preds = %for.cond.2
  %sub29.4 = sub i32 -6, %off
  %rem.4 = srem i32 %sub29.4, 8
  %idxprom30.4 = sext i32 %rem.4 to i64
  %arrayidx31.4 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 1, i64 %idxprom30.4
  %i86 = load i8, i8* %arrayidx31.4, align 1
  %cmp33.not.4 = icmp eq i8 %i86, 1
  br i1 %cmp33.not.4, label %for.cond.4, label %if.then35

for.cond.4:                                       ; preds = %for.cond.3
  %sub29.5 = sub i32 -7, %off
  %rem.5 = srem i32 %sub29.5, 8
  %idxprom30.5 = sext i32 %rem.5 to i64
  %arrayidx31.5 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 1, i64 %idxprom30.5
  %i87 = load i8, i8* %arrayidx31.5, align 1
  %cmp33.not.5 = icmp eq i8 %i87, 1
  br i1 %cmp33.not.5, label %for.cond.5, label %if.then35

for.cond.5:                                       ; preds = %for.cond.4
  %sub29.6 = sub i32 -8, %off
  %rem.6 = srem i32 %sub29.6, 8
  %idxprom30.6 = sext i32 %rem.6 to i64
  %arrayidx31.6 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 1, i64 %idxprom30.6
  %i88 = load i8, i8* %arrayidx31.6, align 1
  %cmp33.not.6 = icmp eq i8 %i88, 1
  br i1 %cmp33.not.6, label %for.cond.6, label %if.then35

for.cond.6:                                       ; preds = %for.cond.5
  %cmp37 = icmp sgt i32 %value_regno, -1
  br i1 %cmp37, label %if.then39, label %if.end48

for.body:                                         ; preds = %if.then10
  %sub29 = sub i32 -2, %off
  %rem = srem i32 %sub29, 8
  %idxprom30 = sext i32 %rem to i64
  %arrayidx31 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 1, i64 %idxprom30
  %i89 = load i8, i8* %arrayidx31, align 1
  %cmp33.not = icmp eq i8 %i89, 1
  br i1 %cmp33.not, label %for.cond, label %if.then35

if.then35:                                        ; preds = %for.body, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond
  %i90 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i90, i8* noundef getelementptr inbounds ([24 x i8], [24 x i8]* @.str.183, i64 0, i64 0)) #22
  br label %return

if.then39:                                        ; preds = %for.cond.6
  %idxprom41 = sext i32 %value_regno to i64
  %arrayidx42 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i73, i64 0, i32 0, i64 %idxprom41
  %i91 = bitcast %struct.bpf_reg_state* %arrayidx42 to i8*
  %i92 = bitcast %struct.bpf_reg_state* %spilled_ptr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %i91, i8* noundef align 8 dereferenceable(104) %i92, i64 104, i1 false)
  %live46 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i73, i64 0, i32 0, i64 %idxprom41, i32 13
  %i93 = load i32, i32* %live46, align 8
  %or47 = or i32 %i93, 4
  store i32 %or47, i32* %live46, align 8
  br label %if.end48

if.end48:                                         ; preds = %if.then39, %for.cond.6
  %parent49 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 0, i32 10
  %i94 = load %struct.bpf_reg_state*, %struct.bpf_reg_state** %parent49, align 8
  %call50 = call fastcc i32 @mark_reg_read(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %spilled_ptr, %struct.bpf_reg_state* noundef %i94, i8 noundef zeroext 2) #22
  br label %return

for.body54:                                       ; preds = %for.inc74, %for.cond51.preheader
  %zeros.065 = phi i32 [ %zeros.1, %for.inc74 ], [ 0, %for.cond51.preheader ]
  %i.164 = phi i32 [ %inc75, %for.inc74 ], [ 0, %for.cond51.preheader ]
  %sub55 = sub i32 %sub1, %i.164
  %rem56 = srem i32 %sub55, 8
  %idxprom57 = sext i32 %rem56 to i64
  %arrayidx58 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 1, i64 %idxprom57
  %i95 = load i8, i8* %arrayidx58, align 1
  br label %NodeBlock

NodeBlock:                                        ; preds = %for.body54
  %Pivot = icmp slt i8 %i95, 3
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i8 %i95, 3
  br i1 %SwitchLeaf2, label %if.then71, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i8 %i95, 2
  br i1 %SwitchLeaf, label %for.inc74, label %NewDefault

if.then71:                                        ; preds = %LeafBlock1
  %inc72 = add i32 %zeros.065, 1
  br label %for.inc74

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %if.end73

if.end73:                                         ; preds = %NewDefault
  %i96 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i96, i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @.str.184, i64 0, i64 0), i32 noundef %off, i32 noundef %i.164, i32 noundef %size) #22
  br label %return

for.inc74:                                        ; preds = %if.then71, %LeafBlock
  %zeros.1 = phi i32 [ %zeros.065, %LeafBlock ], [ %inc72, %if.then71 ]
  %inc75 = add nuw nsw i32 %i.164, 1
  %exitcond.not = icmp eq i32 %inc75, %size
  br i1 %exitcond.not, label %for.end76, label %for.body54

for.end76:                                        ; preds = %for.inc74, %for.cond51.preheader
  %zeros.0.lcssa = phi i32 [ 0, %for.cond51.preheader ], [ %zeros.1, %for.inc74 ]
  %parent77 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i76, i64 %idxprom2, i32 0, i32 10
  %i97 = load %struct.bpf_reg_state*, %struct.bpf_reg_state** %parent77, align 8
  %call78 = call fastcc i32 @mark_reg_read(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %spilled_ptr, %struct.bpf_reg_state* noundef %i97, i8 noundef zeroext 2) #22
  %cmp79 = icmp sgt i32 %value_regno, -1
  br i1 %cmp79, label %if.then81, label %return

if.then81:                                        ; preds = %for.end76
  %cmp82 = icmp eq i32 %zeros.0.lcssa, %size
  br i1 %cmp82, label %if.then84, label %if.else91

if.then84:                                        ; preds = %if.then81
  %idxprom86 = sext i32 %value_regno to i64
  %arrayidx87 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i73, i64 0, i32 0, i64 %idxprom86
  call fastcc void @__mark_reg_const_zero(%struct.bpf_reg_state* noundef %arrayidx87) #22
  %precise = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i73, i64 0, i32 0, i64 %idxprom86, i32 14
  store i8 1, i8* %precise, align 4
  br label %if.end94

if.else91:                                        ; preds = %if.then81
  %arraydecay93 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i73, i64 0, i32 0, i64 0
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay93, i32 noundef %value_regno) #22
  br label %if.end94

if.end94:                                         ; preds = %if.else91, %if.then84
  %idxprom96 = sext i32 %value_regno to i64
  %live98 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i73, i64 0, i32 0, i64 %idxprom96, i32 13
  %i98 = load i32, i32* %live98, align 8
  %or99 = or i32 %i98, 4
  store i32 %or99, i32* %live98, align 8
  br label %return

return:                                           ; preds = %if.end94, %for.end76, %if.end73, %if.end48, %if.then35, %if.end25, %if.then16, %if.then
  %retval.0 = phi i32 [ -13, %if.then ], [ -13, %if.then16 ], [ 0, %if.end25 ], [ -13, %if.then35 ], [ -13, %if.end73 ], [ 0, %for.end76 ], [ 0, %if.end94 ], [ 0, %if.end48 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_flow_keys_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %off, i32 noundef %size) unnamed_addr #6 {
entry:
  %cmp1 = icmp slt i32 %off, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %entry
  %conv = sext i32 %off to i64
  %conv3 = sext i32 %size to i64
  %add = add nsw i64 %conv3, %conv
  %cmp4 = icmp ugt i64 %add, 56
  br i1 %cmp4, label %if.then, label %return

if.then:                                          ; preds = %lor.lhs.false2, %entry
  %i = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.187, i64 0, i64 0), i32 noundef %off, i32 noundef %size) #22
  br label %return

return:                                           ; preds = %if.then, %lor.lhs.false2
  %retval.0 = phi i32 [ -13, %if.then ], [ 0, %lor.lhs.false2 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_sock_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %insn_idx, i32 noundef %regno, i32 noundef %off, i32 noundef %size) unnamed_addr #6 {
entry:
  %info = alloca i64, align 8
  %tmpcast = bitcast i64* %info to %struct.util_est*
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %env.idx.val = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %env.idx, align 8
  %call = call fastcc %struct.bpf_reg_state* @cur_regs(%struct.bpf_verifier_state* %env.idx.val) #22
  %idxprom = zext i32 %regno to i64
  store i64 0, i64* %info, align 8
  %smin_value = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 6
  %i = load i64, i64* %smin_value, align 8
  %cmp = icmp slt i64 %i, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i1 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i1, i8* noundef getelementptr inbounds ([84 x i8], [84 x i8]* @.str.144, i64 0, i64 0), i32 noundef %regno) #22
  br label %return

if.end:                                           ; preds = %entry
  %type = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %call, i64 %idxprom, i32 0
  %i2 = load i32, i32* %type, align 8
  br label %NodeBlock9

NodeBlock9:                                       ; preds = %if.end
  %Pivot10 = icmp slt i32 %i2, 15
  br i1 %Pivot10, label %NodeBlock, label %NodeBlock7

NodeBlock7:                                       ; preds = %NodeBlock9
  %Pivot8 = icmp slt i32 %i2, 18
  br i1 %Pivot8, label %LeafBlock3, label %LeafBlock5

LeafBlock5:                                       ; preds = %NodeBlock7
  %SwitchLeaf6 = icmp eq i32 %i2, 18
  br i1 %SwitchLeaf6, label %sw.bb8, label %NewDefault

LeafBlock3:                                       ; preds = %NodeBlock7
  %SwitchLeaf4 = icmp eq i32 %i2, 15
  br i1 %SwitchLeaf4, label %sw.bb5, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock9
  %Pivot = icmp slt i32 %i2, 13
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i2, 13
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i2, 11
  br i1 %SwitchLeaf, label %sw.bb2, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock1
  %call1 = call zeroext i1 @bpf_sock_common_is_valid_access(i32 noundef %off, i32 noundef %size, i32 noundef 1, %struct.util_est* noundef nonnull %tmpcast) #23
  br label %sw.epilog

sw.bb2:                                           ; preds = %LeafBlock
  %call3 = call zeroext i1 @bpf_sock_is_valid_access(i32 noundef %off, i32 noundef %size, i32 noundef 1, %struct.util_est* noundef nonnull %tmpcast) #23
  br label %sw.epilog

sw.bb5:                                           ; preds = %LeafBlock3
  %call6 = call zeroext i1 @bpf_tcp_sock_is_valid_access(i32 noundef %off, i32 noundef %size, i32 noundef 1, %struct.util_est* noundef nonnull %tmpcast) #23
  br label %sw.epilog

sw.bb8:                                           ; preds = %LeafBlock5
  %call9 = call zeroext i1 @bpf_xdp_sock_is_valid_access(i32 noundef %off, i32 noundef %size, i32 noundef 1, %struct.util_est* noundef nonnull %tmpcast) #23
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb8, %sw.bb5, %sw.bb2, %sw.bb
  %valid.0.shrunk = phi i1 [ %call9, %sw.bb8 ], [ %call6, %sw.bb5 ], [ %call3, %sw.bb2 ], [ %call1, %sw.bb ]
  br i1 %valid.0.shrunk, label %if.then11, label %if.end15

if.then11:                                        ; preds = %sw.epilog
  %ctx_field_size = getelementptr inbounds %struct.util_est, %struct.util_est* %tmpcast, i64 0, i32 1
  %i3 = load i32, i32* %ctx_field_size, align 4
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i4 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %idxprom12 = sext i32 %insn_idx to i64
  %ctx_field_size14 = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i4, i64 %idxprom12, i32 1
  store i32 %i3, i32* %ctx_field_size14, align 8
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3, %LeafBlock5
  br label %if.end15

if.end15:                                         ; preds = %NewDefault, %sw.epilog
  %i5 = bitcast %struct.bpf_verifier_env* %env to i8*
  %i6 = load i32, i32* %type, align 8
  %idxprom17 = zext i32 %i6 to i64
  %arrayidx18 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom17
  %i7 = load i8*, i8** %arrayidx18, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i5, i8* noundef getelementptr inbounds ([38 x i8], [38 x i8]* @.str.188, i64 0, i64 0), i32 noundef %regno, i8* noundef %i7, i32 noundef %off, i32 noundef %size) #22
  br label %return

return:                                           ; preds = %if.end15, %if.then11, %if.then
  %retval.0 = phi i32 [ -13, %if.then ], [ 0, %if.then11 ], [ -13, %if.end15 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_tp_buffer_access(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef readonly %reg, i32 noundef %regno, i32 noundef %off, i32 noundef %size) unnamed_addr #6 {
entry:
  %tn_buf = alloca [48 x i8], align 16
  %cmp = icmp slt i32 %off, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([54 x i8], [54 x i8]* @.str.189, i64 0, i64 0), i32 noundef %regno, i32 noundef %off, i32 noundef %size) #22
  br label %return

if.end:                                           ; preds = %entry
  %i13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i14 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i15 = load i64, i64* %i14, align 8
  %call = call fastcc zeroext i1 @tnum_is_const(i64 %i15) #22
  br i1 %call, label %lor.lhs.false, label %if.then2

lor.lhs.false:                                    ; preds = %if.end
  %i16 = load i64, i64* %i13, align 8
  %tobool.not = icmp eq i64 %i16, 0
  br i1 %tobool.not, label %if.end6, label %if.then2

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  %arraydecay = getelementptr inbounds [48 x i8], [48 x i8]* %tn_buf, i64 0, i64 0
  %i17 = load i64, i64* %i13, align 8
  %call4 = call i32 @tnum_strn(i8* noundef %arraydecay, i64 noundef 48, i64 %i17, i64 %i15) #22
  %i18 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i18, i8* noundef getelementptr inbounds ([55 x i8], [55 x i8]* @.str.190, i64 0, i64 0), i32 noundef %regno, i32 noundef %off, i8* noundef %arraydecay) #22
  br label %return

if.end6:                                          ; preds = %lor.lhs.false
  %add = add i32 %size, %off
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i19 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i19, i64 0, i32 7
  %i20 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %max_tp_access = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i20, i64 0, i32 4
  %i21 = load i32, i32* %max_tp_access, align 8
  %cmp7 = icmp ugt i32 %add, %i21
  br i1 %cmp7, label %if.then8, label %return

if.then8:                                         ; preds = %if.end6
  store i32 %add, i32* %max_tp_access, align 8
  br label %return

return:                                           ; preds = %if.then8, %if.end6, %if.then2, %if.then
  %retval.0 = phi i32 [ -13, %if.then ], [ -13, %if.then2 ], [ 0, %if.then8 ], [ 0, %if.end6 ]
  ret i32 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local zeroext i1 @bpf_sock_common_is_valid_access(i32 noundef, i32 noundef, i32 noundef, %struct.util_est* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local zeroext i1 @bpf_sock_is_valid_access(i32 noundef, i32 noundef, i32 noundef, %struct.util_est* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local zeroext i1 @bpf_tcp_sock_is_valid_access(i32 noundef, i32 noundef, i32 noundef, %struct.util_est* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local zeroext i1 @bpf_xdp_sock_is_valid_access(i32 noundef, i32 noundef, i32 noundef, %struct.util_est* noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn writeonly
define internal fastcc void @__mark_reg_const_zero(%struct.bpf_reg_state* nocapture noundef writeonly %reg) unnamed_addr #13 {
entry:
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %reg, i64 noundef 0) #22
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  store i32 1, i32* %type, align 8
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @register_is_const(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %i2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i3 = load i64, i64* %i2, align 8
  %call = call fastcc zeroext i1 @tnum_is_const(i64 %i3) #22
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %i4 = phi i1 [ false, %entry ], [ %call, %land.rhs ]
  ret i1 %i4
}

; Function Attrs: mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @save_register_state(%struct.bpf_func_state* nocapture noundef readonly %state, i32 noundef %spi, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #12 {
entry:
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 7
  %i = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %idxprom = sext i32 %spi to i64
  %spilled_ptr = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i, i64 %idxprom, i32 0
  %i9 = bitcast %struct.bpf_reg_state* %spilled_ptr to i8*
  %i10 = bitcast %struct.bpf_reg_state* %reg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(104) %i9, i8* noundef align 8 dereferenceable(104) %i10, i64 104, i1 false)
  %i11 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %live = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i11, i64 %idxprom, i32 0, i32 13
  %i12 = load i32, i32* %live, align 8
  %or = or i32 %i12, 4
  store i32 %or, i32* %live, align 8
  %i13 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx9 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i13, i64 %idxprom, i32 1, i64 0
  store i8 1, i8* %arrayidx9, align 1
  %i14 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx9.1 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i14, i64 %idxprom, i32 1, i64 1
  store i8 1, i8* %arrayidx9.1, align 1
  %i15 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx9.2 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i15, i64 %idxprom, i32 1, i64 2
  store i8 1, i8* %arrayidx9.2, align 1
  %i16 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx9.3 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i16, i64 %idxprom, i32 1, i64 3
  store i8 1, i8* %arrayidx9.3, align 1
  %i17 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx9.4 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i17, i64 %idxprom, i32 1, i64 4
  store i8 1, i8* %arrayidx9.4, align 1
  %i18 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx9.5 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i18, i64 %idxprom, i32 1, i64 5
  store i8 1, i8* %arrayidx9.5, align 1
  %i19 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx9.6 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i19, i64 %idxprom, i32 1, i64 6
  store i8 1, i8* %arrayidx9.6, align 1
  %i20 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx9.7 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i20, i64 %idxprom, i32 1, i64 7
  store i8 1, i8* %arrayidx9.7, align 1
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @is_spillable_regtype(i32 noundef %type) unnamed_addr #2 {
entry:
  %switch.tableidx = add i32 %type, -2
  %i = icmp ult i32 %switch.tableidx, 17
  %switch.cast = trunc i32 %switch.tableidx to i17
  %switch.downshift = lshr i17 -32769, %switch.cast
  %i1 = and i17 %switch.downshift, 1
  %switch.masked = icmp ne i17 %i1, 0
  %retval.0 = select i1 %i, i1 %switch.masked, i1 false
  ret i1 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @mark_insn_zext(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_reg_state* nocapture noundef %reg) unnamed_addr #10 {
entry:
  %subreg_def = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 12
  %i = load i32, i32* %subreg_def, align 4
  %cmp = icmp eq i32 %i, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %insn_aux_data = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %i3 = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %insn_aux_data, align 8
  %sub = add i32 %i, -1
  %idxprom = sext i32 %sub to i64
  %zext_dst = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %i3, i64 %idxprom, i32 4
  store i8 1, i8* %zext_dst, align 1
  store i32 0, i32* %subreg_def, align 4
  br label %return

return:                                           ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @adjust_reg_min_max_vals(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #6 {
entry:
  %off_reg = alloca %struct.bpf_reg_state, align 8
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %i50 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i50 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i51 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %arraydecay = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i51, i64 0, i32 0, i64 0
  %i52 = bitcast %struct.bpf_reg_state* %off_reg to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(104) %i52, i8 0, i64 104, i1 false)
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i53 = load i8, i8* %code, align 4
  %i54 = and i8 %i53, -16
  %dst_reg3 = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %bf.load = load i8, i8* %dst_reg3, align 1
  %bf.clear = and i8 %bf.load, 15
  %idxprom4 = zext i8 %bf.clear to i64
  %arrayidx5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i51, i64 0, i32 0, i64 %idxprom4
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx5, i64 0, i32 0
  %i55 = load i32, i32* %type, align 8
  %cmp.not = icmp eq i32 %i55, 1
  %spec.select = select i1 %cmp.not, %struct.bpf_reg_state* null, %struct.bpf_reg_state* %arrayidx5
  %i56 = and i8 %i53, 8
  %cmp10.not = icmp eq i8 %i56, 0
  br i1 %cmp10.not, label %if.else64, label %if.then12

if.then12:                                        ; preds = %entry
  %bf.lshr = lshr i8 %bf.load, 4
  %idxprom15 = zext i8 %bf.lshr to i64
  %arrayidx16 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i51, i64 0, i32 0, i64 %idxprom15
  %type17 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx16, i64 0, i32 0
  %i57 = load i32, i32* %type17, align 8
  %cmp18.not = icmp eq i32 %i57, 1
  br i1 %cmp18.not, label %if.else50, label %if.then20

if.then20:                                        ; preds = %if.then12
  br i1 %cmp.not, label %if.else, label %if.then24

if.then24:                                        ; preds = %if.then20
  %cmp26 = icmp eq i8 %i54, 16
  br i1 %cmp26, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %if.then24
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i58 = load i8, i8* %allow_ptr_leaks, align 8
  %i59 = and i8 %i58, 1
  %tobool.not = icmp eq i8 %i59, 0
  br i1 %tobool.not, label %if.end34, label %if.then29

if.then29:                                        ; preds = %land.lhs.true
  %conv33 = zext i8 %bf.clear to i32
  call fastcc void @mark_reg_unknown(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef %conv33) #22
  br label %return

if.end34:                                         ; preds = %land.lhs.true, %if.then24
  %i60 = bitcast %struct.bpf_verifier_env* %env to i8*
  %conv38 = zext i8 %bf.clear to i32
  %i61 = lshr i8 %i53, 4
  %i62 = zext i8 %i61 to i64
  %arrayidx41 = getelementptr [16 x i8*], [16 x i8*]* @bpf_alu_string, i64 0, i64 %i62
  %i63 = load i8*, i8** %arrayidx41, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i60, i8* noundef getelementptr inbounds ([35 x i8], [35 x i8]* @.str.124, i64 0, i64 0), i32 noundef %conv38, i8* noundef %i63) #22
  br label %return

if.else:                                          ; preds = %if.then20
  %conv45 = zext i8 %bf.clear to i32
  %call = call fastcc i32 @mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv45) #22
  %tobool46.not = icmp eq i32 %call, 0
  br i1 %tobool46.not, label %if.end48, label %return

if.end48:                                         ; preds = %if.else
  %insn.idx = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %insn.idx.val = load i8, i8* %insn.idx, align 4
  %insn.idx1 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %insn.idx1.val = load i8, i8* %insn.idx1, align 1
  %call49 = call fastcc i32 @adjust_ptr_min_max_vals(%struct.bpf_verifier_env* noundef %env, i8 %insn.idx.val, i8 %insn.idx1.val, %struct.bpf_reg_state* noundef %arrayidx16, %struct.bpf_reg_state* noundef %arrayidx5) #22
  br label %return

if.else50:                                        ; preds = %if.then12
  %tobool51.not = icmp eq %struct.bpf_reg_state* %spec.select, null
  br i1 %tobool51.not, label %if.end71, label %if.then52

if.then52:                                        ; preds = %if.else50
  %conv56 = zext i8 %bf.lshr to i32
  %call57 = call fastcc i32 @mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv56) #22
  %tobool58.not = icmp eq i32 %call57, 0
  br i1 %tobool58.not, label %if.end60, label %return

if.end60:                                         ; preds = %if.then52
  %insn.idx2 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %insn.idx2.val = load i8, i8* %insn.idx2, align 4
  %insn.idx3 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %insn.idx3.val = load i8, i8* %insn.idx3, align 1
  %call61 = call fastcc i32 @adjust_ptr_min_max_vals(%struct.bpf_verifier_env* noundef %env, i8 %insn.idx2.val, i8 %insn.idx3.val, %struct.bpf_reg_state* noundef %arrayidx5, %struct.bpf_reg_state* noundef %arrayidx16) #22
  br label %return

if.else64:                                        ; preds = %entry
  %type65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %off_reg, i64 0, i32 0
  store i32 1, i32* %type65, align 8
  %imm = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 3
  %i64 = load i32, i32* %imm, align 4
  %conv66 = sext i32 %i64 to i64
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef nonnull %off_reg, i64 noundef %conv66) #22
  %tobool67.not = icmp eq %struct.bpf_reg_state* %spec.select, null
  br i1 %tobool67.not, label %if.end71, label %if.then68

if.then68:                                        ; preds = %if.else64
  %insn.idx4 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %insn.idx4.val = load i8, i8* %insn.idx4, align 4
  %insn.idx5 = getelementptr %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 1
  %insn.idx5.val = load i8, i8* %insn.idx5, align 1
  %call69 = call fastcc i32 @adjust_ptr_min_max_vals(%struct.bpf_verifier_env* noundef %env, i8 %insn.idx4.val, i8 %insn.idx5.val, %struct.bpf_reg_state* noundef nonnull %spec.select, %struct.bpf_reg_state* noundef nonnull %off_reg) #22
  br label %return

if.end71:                                         ; preds = %if.else64, %if.else50
  %src_reg.0 = phi %struct.bpf_reg_state* [ %arrayidx16, %if.else50 ], [ %off_reg, %if.else64 ]
  %tobool72.not = icmp eq %struct.bpf_reg_state* %spec.select, null
  br i1 %tobool72.not, label %if.end93, label %do.body82

do.body82:                                        ; preds = %if.end71
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 5214, i32 2307, i64 12) #24, !srcloc !51
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 163) #24, !srcloc !52
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i51) #22
  %i65 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i65, i8* noundef getelementptr inbounds ([45 x i8], [45 x i8]* @.str.125, i64 0, i64 0)) #22
  br label %return

if.end93:                                         ; preds = %if.end71
  %tobool95.not = icmp eq %struct.bpf_reg_state* %src_reg.0, null
  br i1 %tobool95.not, label %do.body111, label %if.end124

do.body111:                                       ; preds = %if.end93
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 5219, i32 2305, i64 12) #24, !srcloc !53
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 164) #24, !srcloc !54
  call fastcc void @print_verifier_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* noundef %i51) #22
  %i66 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i66, i8* noundef getelementptr inbounds ([37 x i8], [37 x i8]* @.str.126, i64 0, i64 0)) #22
  br label %return

if.end124:                                        ; preds = %if.end93
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef %insn, %struct.bpf_reg_state* noundef %arrayidx5, %struct.bpf_reg_state* noundef nonnull byval(%struct.bpf_reg_state) align 8 %src_reg.0) #22
  br label %return

return:                                           ; preds = %if.end124, %do.body111, %do.body82, %if.then68, %if.end60, %if.then52, %if.end48, %if.else, %if.end34, %if.then29
  %retval.0 = phi i32 [ 0, %if.then29 ], [ -13, %if.end34 ], [ %call49, %if.end48 ], [ %call61, %if.end60 ], [ -22, %do.body82 ], [ -22, %do.body111 ], [ 0, %if.end124 ], [ %call69, %if.then68 ], [ %call, %if.else ], [ %call57, %if.then52 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @adjust_ptr_min_max_vals(%struct.bpf_verifier_env* noundef %env, i8 %insn.0.0.val, i8 %insn.0.1.val, %struct.bpf_reg_state* noundef readonly %ptr_reg, %struct.bpf_reg_state* noundef readonly %off_reg) unnamed_addr #6 {
entry:
  %cur_state = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 8
  %i = load %struct.bpf_verifier_state*, %struct.bpf_verifier_state** %cur_state, align 8
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 4
  %i217 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i217 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %i, i64 0, i32 0, i64 %idxprom
  %i218 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %i219 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %off_reg, i64 0, i32 5, i32 0
  %i220 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %off_reg, i64 0, i32 5, i32 1
  %i221 = load i64, i64* %i220, align 8
  %call = call fastcc zeroext i1 @tnum_is_const(i64 %i221) #22
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %off_reg, i64 0, i32 6
  %i222 = load i64, i64* %smin_value, align 8
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %off_reg, i64 0, i32 7
  %i223 = load i64, i64* %smax_value, align 8
  %smin_value2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 6
  %i224 = load i64, i64* %smin_value2, align 8
  %smax_value3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 7
  %i225 = load i64, i64* %smax_value3, align 8
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %off_reg, i64 0, i32 8
  %i226 = load i64, i64* %umin_value, align 8
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %off_reg, i64 0, i32 9
  %i227 = load i64, i64* %umax_value, align 8
  %umin_value4 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 8
  %i228 = load i64, i64* %umin_value4, align 8
  %umax_value5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 9
  %i229 = load i64, i64* %umax_value5, align 8
  %bf.clear = and i8 %insn.0.1.val, 15
  %conv = zext i8 %bf.clear to i32
  %bf.lshr = lshr i8 %insn.0.1.val, 4
  %conv8 = zext i8 %bf.lshr to i32
  %idxprom11 = zext i8 %bf.clear to i64
  %arrayidx12 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11
  br i1 %call, label %land.lhs.true, label %lor.lhs.false17

land.lhs.true:                                    ; preds = %entry
  %cmp.not = icmp ne i64 %i222, %i223
  %cmp15.not = icmp ne i64 %i226, %i227
  %or.cond = select i1 %cmp.not, i1 true, i1 %cmp15.not
  %cmp18 = icmp sgt i64 %i222, %i223
  %or.cond213 = or i1 %cmp18, %or.cond
  %cmp21 = icmp ugt i64 %i226, %i227
  %or.cond214 = select i1 %or.cond213, i1 true, i1 %cmp21
  br i1 %or.cond214, label %if.then, label %if.end

lor.lhs.false17:                                  ; preds = %entry
  %cmp18.old = icmp sgt i64 %i222, %i223
  %cmp21.old = icmp ugt i64 %i226, %i227
  %or.cond215 = select i1 %cmp18.old, i1 true, i1 %cmp21.old
  br i1 %or.cond215, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false17, %land.lhs.true
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %arrayidx12) #22
  br label %return

if.end:                                           ; preds = %lor.lhs.false17, %land.lhs.true
  %i231 = and i8 %insn.0.0.val, 7
  %cmp26.not = icmp eq i8 %i231, 7
  br i1 %cmp26.not, label %if.end29, label %if.then28

if.then28:                                        ; preds = %if.end
  %i232 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i232, i8* noundef getelementptr inbounds ([42 x i8], [42 x i8]* @.str.127, i64 0, i64 0), i32 noundef %conv) #22
  br label %return

if.end29:                                         ; preds = %if.end
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 0
  %i233 = load i32, i32* %type, align 8
  br label %NodeBlock15

NodeBlock15:                                      ; preds = %if.end29
  %Pivot16 = icmp slt i32 %i233, 9
  br i1 %Pivot16, label %NodeBlock3, label %NodeBlock13

NodeBlock13:                                      ; preds = %NodeBlock15
  %Pivot14 = icmp slt i32 %i233, 11
  br i1 %Pivot14, label %LeafBlock5, label %NodeBlock11

NodeBlock11:                                      ; preds = %NodeBlock13
  %Pivot12 = icmp slt i32 %i233, 18
  br i1 %Pivot12, label %LeafBlock7, label %LeafBlock9

LeafBlock9:                                       ; preds = %NodeBlock11
  %SwitchLeaf10 = icmp eq i32 %i233, 18
  br i1 %SwitchLeaf10, label %sw.bb33, label %NewDefault

LeafBlock7:                                       ; preds = %NodeBlock11
  %SwitchLeaf8.not = icmp eq i32 %i233, 17
  br i1 %SwitchLeaf8.not, label %NewDefault, label %sw.bb33

LeafBlock5:                                       ; preds = %NodeBlock13
  %SwitchLeaf6 = icmp eq i32 %i233, 9
  br i1 %SwitchLeaf6, label %sw.bb33, label %NewDefault

NodeBlock3:                                       ; preds = %NodeBlock15
  %Pivot4 = icmp slt i32 %i233, 4
  br i1 %Pivot4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock3
  %Pivot = icmp eq i32 %i233, 4
  br i1 %Pivot, label %sw.bb37, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i233, 5
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock3
  %SwitchLeaf = icmp eq i32 %i233, 3
  br i1 %SwitchLeaf, label %sw.bb33, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock1
  %i234 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i234, i8* noundef getelementptr inbounds ([62 x i8], [62 x i8]* @.str.128, i64 0, i64 0), i32 noundef %conv, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.199, i64 0, i64 0)) #22
  br label %return

sw.bb33:                                          ; preds = %LeafBlock, %LeafBlock5, %LeafBlock7, %LeafBlock9
  %i235 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom35 = zext i32 %i233 to i64
  %arrayidx36 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom35
  %i236 = load i8*, i8** %arrayidx36, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i235, i8* noundef getelementptr inbounds ([41 x i8], [41 x i8]* @.str.129, i64 0, i64 0), i32 noundef %conv, i8* noundef %i236) #22
  br label %return

sw.bb37:                                          ; preds = %NodeBlock
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i237 = load i8, i8* %allow_ptr_leaks, align 8
  %i238 = and i8 %i237, 1
  %tobool38.not = icmp ne i8 %i238, 0
  %brmerge = select i1 %tobool38.not, i1 true, i1 %call
  br i1 %brmerge, label %sw.epilog, label %land.lhs.true41

land.lhs.true41:                                  ; preds = %sw.bb37
  %.lobit = lshr i64 %i222, 63
  %i239 = trunc i64 %.lobit to i32
  %.lobit209 = lshr i64 %i223, 63
  %i240 = trunc i64 %.lobit209 to i32
  %cmp46.not = icmp eq i32 %i239, %i240
  br i1 %cmp46.not, label %sw.epilog, label %if.then48

if.then48:                                        ; preds = %land.lhs.true41
  %i241 = bitcast %struct.bpf_verifier_env* %env to i8*
  %cmp49 = icmp eq %struct.bpf_reg_state* %arrayidx12, %off_reg
  %cond = select i1 %cmp49, i32 %conv, i32 %conv8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i241, i8* noundef getelementptr inbounds ([98 x i8], [98 x i8]* @.str.130, i64 0, i64 0), i32 noundef %cond) #22
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock5, %LeafBlock7, %LeafBlock9
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %land.lhs.true41, %sw.bb37
  %type53 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %arrayidx12, i64 0, i32 0
  store i32 %i233, i32* %type53, align 8
  %id = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 3
  %i242 = load i32, i32* %id, align 4
  %id54 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 3
  store i32 %i242, i32* %id54, align 4
  %i243 = load i32, i32* %type, align 8
  %call56 = call fastcc zeroext i1 @check_reg_sane_offset(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %off_reg, i32 noundef %i243) #22
  br i1 %call56, label %lor.lhs.false57, label %return

lor.lhs.false57:                                  ; preds = %sw.epilog
  %i244 = load i32, i32* %type, align 8
  %call59 = call fastcc zeroext i1 @check_reg_sane_offset(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %ptr_reg, i32 noundef %i244) #22
  br i1 %call59, label %if.end61, label %return

if.end61:                                         ; preds = %lor.lhs.false57
  %i245 = lshr i8 %insn.0.0.val, 4
  br label %NodeBlock28

NodeBlock28:                                      ; preds = %if.end61
  %Pivot29 = icmp ult i8 %insn.0.0.val, 64
  br i1 %Pivot29, label %NodeBlock20, label %NodeBlock26

NodeBlock26:                                      ; preds = %NodeBlock28
  %Pivot27 = icmp ult i8 %insn.0.0.val, -96
  br i1 %Pivot27, label %LeafBlock22, label %LeafBlock24

LeafBlock24:                                      ; preds = %NodeBlock26
  %SwitchLeaf25 = icmp eq i8 %i245, 10
  br i1 %SwitchLeaf25, label %sw.bb229, label %NewDefault17

LeafBlock22:                                      ; preds = %NodeBlock26
  %SwitchLeaf23 = icmp ult i8 %insn.0.0.val, 96
  br i1 %SwitchLeaf23, label %sw.bb229, label %NewDefault17

NodeBlock20:                                      ; preds = %NodeBlock28
  %Pivot21 = icmp ult i8 %insn.0.0.val, 16
  br i1 %Pivot21, label %sw.bb63, label %LeafBlock18

LeafBlock18:                                      ; preds = %NodeBlock20
  %SwitchLeaf19 = icmp eq i8 %i245, 1
  br i1 %SwitchLeaf19, label %sw.bb138, label %NewDefault17

sw.bb63:                                          ; preds = %NodeBlock20
  br i1 %call, label %land.lhs.true73, label %if.end95

land.lhs.true73:                                  ; preds = %sw.bb63
  %off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 2
  %i248 = load i32, i32* %off, align 8
  %conv74 = sext i32 %i248 to i64
  %add = add i64 %i222, 2147483648
  %i249 = add i64 %add, %conv74
  %i250 = icmp ult i64 %i249, 4294967296
  br i1 %i250, label %if.then82, label %if.end95

if.then82:                                        ; preds = %land.lhs.true73
  %smin_value83 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 6
  store i64 %i224, i64* %smin_value83, align 8
  %smax_value84 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 7
  store i64 %i225, i64* %smax_value84, align 8
  %umin_value85 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 8
  store i64 %i228, i64* %umin_value85, align 8
  %umax_value86 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 9
  store i64 %i229, i64* %umax_value86, align 8
  %var_off87 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 5
  %var_off88 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 5
  %i251 = bitcast %struct.tnum* %var_off87 to i8*
  %i252 = bitcast %struct.tnum* %var_off88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i251, i8* noundef align 8 dereferenceable(16) %i252, i64 16, i1 false)
  %i253 = load i32, i32* %off, align 8
  %i254 = trunc i64 %i222 to i32
  %conv92 = add i32 %i253, %i254
  %off93 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 2
  store i32 %conv92, i32* %off93, align 8
  %i255 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 1
  %raw = bitcast %union.anon.147* %i255 to i64*
  %i256 = load i64, i64* %raw, align 8
  %i257 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 1
  %raw94 = bitcast %union.anon.147* %i257 to i64*
  store i64 %i256, i64* %raw94, align 8
  br label %sw.epilog238

if.end95:                                         ; preds = %land.lhs.true73, %sw.bb63
  %call96 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i224, i64 noundef %i222) #22
  br i1 %call96, label %if.then101, label %lor.lhs.false98

lor.lhs.false98:                                  ; preds = %if.end95
  %call99 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i225, i64 noundef %i223) #22
  br i1 %call99, label %if.then101, label %if.else

if.then101:                                       ; preds = %lor.lhs.false98, %if.end95
  %smin_value102 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 6
  store i64 -9223372036854775808, i64* %smin_value102, align 8
  br label %if.end108

if.else:                                          ; preds = %lor.lhs.false98
  %add104 = add i64 %i224, %i222
  %smin_value105 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 6
  store i64 %add104, i64* %smin_value105, align 8
  %add106 = add i64 %i225, %i223
  br label %if.end108

if.end108:                                        ; preds = %if.else, %if.then101
  %add106.sink = phi i64 [ %add106, %if.else ], [ 9223372036854775807, %if.then101 ]
  %smax_value107 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 7
  store i64 %add106.sink, i64* %smax_value107, align 8
  %add109 = add i64 %i228, %i226
  %cmp110 = icmp ult i64 %add109, %i228
  %add113 = add i64 %i229, %i227
  %cmp114 = icmp ult i64 %add113, %i229
  %i258 = select i1 %cmp110, i1 true, i1 %cmp114
  %add109.sink = select i1 %i258, i64 0, i64 %add109
  %add113.sink = select i1 %i258, i64 -1, i64 %add113
  %umin_value121 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 8
  store i64 %add109.sink, i64* %umin_value121, align 8
  %umax_value123 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 9
  store i64 %add113.sink, i64* %umax_value123, align 8
  %i260 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 5, i32 0
  %i261 = load i64, i64* %i260, align 8
  %i262 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 5, i32 1
  %i263 = load i64, i64* %i262, align 8
  %i264 = load i64, i64* %i219, align 8
  %i265 = load i64, i64* %i220, align 8
  %call128 = call { i64, i64 } @tnum_add(i64 %i261, i64 %i263, i64 %i264, i64 %i265) #22
  %i266 = extractvalue { i64, i64 } %call128, 0
  %i267 = extractvalue { i64, i64 } %call128, 1
  %tmp.sroa.0.0..sroa_idx = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 5, i32 0
  store i64 %i266, i64* %tmp.sroa.0.0..sroa_idx, align 8
  %tmp.sroa.2.0..sroa_idx2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 5, i32 1
  store i64 %i267, i64* %tmp.sroa.2.0..sroa_idx2, align 8
  %off129 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 2
  %i268 = load i32, i32* %off129, align 8
  %off130 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 2
  store i32 %i268, i32* %off130, align 8
  %i269 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 1
  %raw131 = bitcast %union.anon.147* %i269 to i64*
  %i270 = load i64, i64* %raw131, align 8
  %i271 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 1
  %raw132 = bitcast %union.anon.147* %i271 to i64*
  store i64 %i270, i64* %raw132, align 8
  %ptr_reg.idx30 = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 0
  %ptr_reg.idx30.val = load i32, i32* %ptr_reg.idx30, align 8
  %call133 = call fastcc zeroext i1 @reg_is_pkt_pointer(i32 %ptr_reg.idx30.val) #22
  br i1 %call133, label %if.then134, label %sw.epilog238

if.then134:                                       ; preds = %if.end108
  %id_gen = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i272 = load i32, i32* %id_gen, align 4
  %inc = add i32 %i272, 1
  store i32 %inc, i32* %id_gen, align 4
  store i32 %inc, i32* %id54, align 4
  store i64 0, i64* %raw132, align 8
  br label %sw.epilog238

sw.bb138:                                         ; preds = %LeafBlock18
  %cmp139 = icmp slt i64 %i222, 0
  %cmp146 = icmp eq %struct.bpf_reg_state* %arrayidx12, %off_reg
  br i1 %cmp146, label %if.then148, label %if.end149

if.then148:                                       ; preds = %sw.bb138
  %i274 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i274, i8* noundef getelementptr inbounds ([43 x i8], [43 x i8]* @.str.133, i64 0, i64 0), i32 noundef %conv) #22
  br label %return

if.end149:                                        ; preds = %sw.bb138
  %i275 = load i32, i32* %type, align 8
  %cmp151 = icmp eq i32 %i275, 6
  br i1 %cmp151, label %if.then153, label %if.end154

if.then153:                                       ; preds = %if.end149
  %i276 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i276, i8* noundef getelementptr inbounds ([47 x i8], [47 x i8]* @.str.134, i64 0, i64 0), i32 noundef %conv) #22
  br label %return

if.end154:                                        ; preds = %if.end149
  br i1 %call, label %land.lhs.true157, label %if.end183

land.lhs.true157:                                 ; preds = %if.end154
  %off158 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 2
  %i277 = load i32, i32* %off158, align 8
  %conv159 = sext i32 %i277 to i64
  %sub = sub i64 2147483648, %i222
  %i278 = add i64 %sub, %conv159
  %i279 = icmp ult i64 %i278, 4294967296
  br i1 %i279, label %if.then167, label %if.end183

if.then167:                                       ; preds = %land.lhs.true157
  %smin_value168 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 6
  store i64 %i224, i64* %smin_value168, align 8
  %smax_value169 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 7
  store i64 %i225, i64* %smax_value169, align 8
  %umin_value170 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 8
  store i64 %i228, i64* %umin_value170, align 8
  %umax_value171 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 9
  store i64 %i229, i64* %umax_value171, align 8
  %var_off172 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 5
  %var_off173 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 5
  %i280 = bitcast %struct.tnum* %var_off172 to i8*
  %i281 = bitcast %struct.tnum* %var_off173 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i280, i8* noundef align 8 dereferenceable(16) %i281, i64 16, i1 false)
  %i282 = load i32, i32* %id, align 4
  store i32 %i282, i32* %id54, align 4
  %i283 = load i32, i32* %off158, align 8
  %i284 = trunc i64 %i222 to i32
  %conv179 = sub i32 %i283, %i284
  %off180 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 2
  store i32 %conv179, i32* %off180, align 8
  %i285 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 1
  %raw181 = bitcast %union.anon.147* %i285 to i64*
  %i286 = load i64, i64* %raw181, align 8
  %i287 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 1
  %raw182 = bitcast %union.anon.147* %i287 to i64*
  store i64 %i286, i64* %raw182, align 8
  br label %sw.epilog238

if.end183:                                        ; preds = %land.lhs.true157, %if.end154
  %call184 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i224, i64 noundef %i223) #22
  br i1 %call184, label %if.then189, label %lor.lhs.false186

lor.lhs.false186:                                 ; preds = %if.end183
  %call187 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i225, i64 noundef %i222) #22
  br i1 %call187, label %if.then189, label %if.else192

if.then189:                                       ; preds = %lor.lhs.false186, %if.end183
  %smin_value190 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 6
  store i64 -9223372036854775808, i64* %smin_value190, align 8
  br label %if.end197

if.else192:                                       ; preds = %lor.lhs.false186
  %sub193 = sub i64 %i224, %i223
  %smin_value194 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 6
  store i64 %sub193, i64* %smin_value194, align 8
  %sub195 = sub i64 %i225, %i222
  br label %if.end197

if.end197:                                        ; preds = %if.else192, %if.then189
  %sub195.sink = phi i64 [ %sub195, %if.else192 ], [ 9223372036854775807, %if.then189 ]
  %smax_value196 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 7
  store i64 %sub195.sink, i64* %smax_value196, align 8
  %cmp198 = icmp ult i64 %i228, %i227
  br i1 %cmp198, label %if.then200, label %if.else203

if.then200:                                       ; preds = %if.end197
  %umin_value201 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 8
  store i64 0, i64* %umin_value201, align 8
  br label %if.end208

if.else203:                                       ; preds = %if.end197
  %sub204 = sub i64 %i228, %i227
  %umin_value205 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 8
  store i64 %sub204, i64* %umin_value205, align 8
  %sub206 = sub i64 %i229, %i226
  br label %if.end208

if.end208:                                        ; preds = %if.else203, %if.then200
  %sub206.sink = phi i64 [ %sub206, %if.else203 ], [ -1, %if.then200 ]
  %umax_value207 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 9
  store i64 %sub206.sink, i64* %umax_value207, align 8
  %i288 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 5, i32 0
  %i289 = load i64, i64* %i288, align 8
  %i290 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 5, i32 1
  %i291 = load i64, i64* %i290, align 8
  %i292 = load i64, i64* %i219, align 8
  %i293 = load i64, i64* %i220, align 8
  %call213 = call { i64, i64 } @tnum_sub(i64 %i289, i64 %i291, i64 %i292, i64 %i293) #22
  %i294 = extractvalue { i64, i64 } %call213, 0
  %i295 = extractvalue { i64, i64 } %call213, 1
  %tmp210.sroa.0.0..sroa_idx = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 5, i32 0
  store i64 %i294, i64* %tmp210.sroa.0.0..sroa_idx, align 8
  %tmp210.sroa.2.0..sroa_idx1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 5, i32 1
  store i64 %i295, i64* %tmp210.sroa.2.0..sroa_idx1, align 8
  %off214 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 2
  %i296 = load i32, i32* %off214, align 8
  %off215 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 2
  store i32 %i296, i32* %off215, align 8
  %i297 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 1
  %raw216 = bitcast %union.anon.147* %i297 to i64*
  %i298 = load i64, i64* %raw216, align 8
  %i299 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 1
  %raw217 = bitcast %union.anon.147* %i299 to i64*
  store i64 %i298, i64* %raw217, align 8
  %ptr_reg.idx = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %ptr_reg, i64 0, i32 0
  %ptr_reg.idx.val = load i32, i32* %ptr_reg.idx, align 8
  %call218 = call fastcc zeroext i1 @reg_is_pkt_pointer(i32 %ptr_reg.idx.val) #22
  br i1 %call218, label %if.then219, label %sw.epilog238

if.then219:                                       ; preds = %if.end208
  %id_gen220 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 13
  %i300 = load i32, i32* %id_gen220, align 4
  %inc221 = add i32 %i300, 1
  store i32 %inc221, i32* %id_gen220, align 4
  store i32 %inc221, i32* %id54, align 4
  br i1 %cmp139, label %if.then225, label %sw.epilog238

if.then225:                                       ; preds = %if.then219
  store i64 0, i64* %raw217, align 8
  br label %sw.epilog238

sw.bb229:                                         ; preds = %LeafBlock22, %LeafBlock24
  %i301 = bitcast %struct.bpf_verifier_env* %env to i8*
  %i302 = zext i8 %i245 to i64
  %arrayidx232 = getelementptr [16 x i8*], [16 x i8*]* @bpf_alu_string, i64 0, i64 %i302
  %i303 = load i8*, i8** %arrayidx232, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i301, i8* noundef getelementptr inbounds ([47 x i8], [47 x i8]* @.str.135, i64 0, i64 0), i32 noundef %conv, i8* noundef %i303) #22
  br label %return

NewDefault17:                                     ; preds = %LeafBlock18, %LeafBlock22, %LeafBlock24
  br label %sw.default233

sw.default233:                                    ; preds = %NewDefault17
  %i304 = bitcast %struct.bpf_verifier_env* %env to i8*
  %i305 = zext i8 %i245 to i64
  %arrayidx237 = getelementptr [16 x i8*], [16 x i8*]* @bpf_alu_string, i64 0, i64 %i305
  %i306 = load i8*, i8** %arrayidx237, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i304, i8* noundef getelementptr inbounds ([52 x i8], [52 x i8]* @.str.136, i64 0, i64 0), i32 noundef %conv, i8* noundef %i306) #22
  br label %return

sw.epilog238:                                     ; preds = %if.then225, %if.then219, %if.end208, %if.then167, %if.then134, %if.end108, %if.then82
  %i307 = load i32, i32* %type, align 8
  %call240 = call fastcc zeroext i1 @check_reg_sane_offset(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arrayidx12, i32 noundef %i307) #22
  br i1 %call240, label %if.end242, label %return

if.end242:                                        ; preds = %sw.epilog238
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %arrayidx12) #22
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %arrayidx12) #22
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %arrayidx12) #22
  %allow_ptr_leaks243 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i308 = load i8, i8* %allow_ptr_leaks243, align 8
  %i309 = and i8 %i308, 1
  %tobool244.not = icmp eq i8 %i309, 0
  br i1 %tobool244.not, label %if.then245, label %return

if.then245:                                       ; preds = %if.end242
  %i310 = load i32, i32* %type53, align 8
  %cmp247 = icmp eq i32 %i310, 4
  br i1 %cmp247, label %land.lhs.true249, label %if.else254

land.lhs.true249:                                 ; preds = %if.then245
  %off250 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 2
  %i311 = load i32, i32* %off250, align 8
  %call251 = call fastcc i32 @check_map_access(%struct.bpf_verifier_env* noundef %env, i32 noundef %conv, i32 noundef %i311, i32 noundef 1, i1 noundef zeroext false) #22
  %tobool252.not = icmp eq i32 %call251, 0
  br i1 %tobool252.not, label %if.else254, label %if.then253

if.then253:                                       ; preds = %land.lhs.true249
  %i312 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i312, i8* noundef getelementptr inbounds ([77 x i8], [77 x i8]* @.str.137, i64 0, i64 0), i32 noundef %conv) #22
  br label %return

if.else254:                                       ; preds = %land.lhs.true249, %if.then245
  %i313 = load i32, i32* %type53, align 8
  %cmp256 = icmp eq i32 %i313, 6
  br i1 %cmp256, label %land.lhs.true258, label %return

land.lhs.true258:                                 ; preds = %if.else254
  %off259 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 2
  %i314 = load i32, i32* %off259, align 8
  %value = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i218, i64 0, i32 0, i64 %idxprom11, i32 5, i32 0
  %i315 = load i64, i64* %value, align 8
  %i316 = trunc i64 %i315 to i32
  %conv263 = add i32 %i314, %i316
  %call264 = call fastcc i32 @check_stack_access(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arrayidx12, i32 noundef %conv263, i32 noundef 1) #22
  %tobool265.not = icmp eq i32 %call264, 0
  br i1 %tobool265.not, label %return, label %if.then266

if.then266:                                       ; preds = %land.lhs.true258
  %i317 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i317, i8* noundef getelementptr inbounds ([70 x i8], [70 x i8]* @.str.138, i64 0, i64 0), i32 noundef %conv) #22
  br label %return

return:                                           ; preds = %if.then266, %land.lhs.true258, %if.else254, %if.then253, %if.end242, %sw.epilog238, %sw.default233, %sw.bb229, %if.then153, %if.then148, %lor.lhs.false57, %sw.epilog, %if.then48, %sw.bb33, %sw.bb, %if.then28, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ -13, %if.then28 ], [ -13, %sw.default233 ], [ -13, %sw.bb229 ], [ -13, %if.then148 ], [ -13, %if.then153 ], [ -13, %if.then253 ], [ -13, %if.then266 ], [ -13, %if.then48 ], [ -13, %sw.bb33 ], [ -13, %sw.bb ], [ -22, %lor.lhs.false57 ], [ -22, %sw.epilog ], [ -22, %sw.epilog238 ], [ 0, %land.lhs.true258 ], [ 0, %if.else254 ], [ 0, %if.end242 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc zeroext i1 @check_reg_sane_offset(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef readonly %reg, i32 noundef %type) unnamed_addr #6 {
entry:
  %i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 1
  %i21 = load i64, i64* %i, align 8
  %call = call fastcc zeroext i1 @tnum_is_const(i64 %i21) #22
  %value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 5, i32 0
  %i22 = load i64, i64* %value, align 8
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 6
  %i23 = load i64, i64* %smin_value, align 8
  %i24 = add i64 %i22, -536870912
  %i25 = icmp ult i64 %i24, -1073741823
  %or.cond = select i1 %call, i1 %i25, i1 false
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i26 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom = zext i32 %type to i64
  %arrayidx = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom
  %i27 = load i8*, i8** %arrayidx, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i26, i8* noundef getelementptr inbounds ([49 x i8], [49 x i8]* @.str.139, i64 0, i64 0), i8* noundef %i27, i64 noundef %i22) #22
  br label %return

if.end:                                           ; preds = %entry
  %off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 2
  %i28 = load i32, i32* %off, align 8
  %i29 = add i32 %i28, -536870912
  %i30 = icmp ult i32 %i29, -1073741823
  br i1 %i30, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.end
  %i31 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom8 = zext i32 %type to i64
  %arrayidx9 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom8
  %i32 = load i8*, i8** %arrayidx9, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i31, i8* noundef getelementptr inbounds ([37 x i8], [37 x i8]* @.str.140, i64 0, i64 0), i8* noundef %i32, i32 noundef %i28) #22
  br label %return

if.end11:                                         ; preds = %if.end
  %cmp12 = icmp eq i64 %i23, -9223372036854775808
  br i1 %cmp12, label %if.then13, label %if.end16

if.then13:                                        ; preds = %if.end11
  %i33 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom14 = zext i32 %type to i64
  %arrayidx15 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom14
  %i34 = load i8*, i8** %arrayidx15, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i33, i8* noundef getelementptr inbounds ([78 x i8], [78 x i8]* @.str.141, i64 0, i64 0), i8* noundef %i34) #22
  br label %return

if.end16:                                         ; preds = %if.end11
  %i35 = add i64 %i23, -536870912
  %i36 = icmp ult i64 %i35, -1073741823
  br i1 %i36, label %if.then20, label %return

if.then20:                                        ; preds = %if.end16
  %i37 = bitcast %struct.bpf_verifier_env* %env to i8*
  %idxprom21 = zext i32 %type to i64
  %arrayidx22 = getelementptr [19 x i8*], [19 x i8*]* @reg_type_str, i64 0, i64 %idxprom21
  %i38 = load i8*, i8** %arrayidx22, align 8
  call void (i8*, i8*, ...) @verbose(i8* noundef %i37, i8* noundef getelementptr inbounds ([46 x i8], [46 x i8]* @.str.142, i64 0, i64 0), i64 noundef %i23, i8* noundef %i38) #22
  br label %return

return:                                           ; preds = %if.then20, %if.end16, %if.then13, %if.then7, %if.then
  %retval.0 = phi i1 [ false, %if.then ], [ false, %if.then7 ], [ false, %if.then13 ], [ false, %if.then20 ], [ true, %if.end16 ]
  ret i1 %retval.0
}

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong
define internal fastcc %struct.ethtool_pauseparam* @find_linfo(%struct.bpf_prog* %env.0.2.val, i32 noundef %insn_off) unnamed_addr #18 {
entry:
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %env.0.2.val, i64 0, i32 7
  %i12 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %nr_linfo2 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i12, i64 0, i32 29
  %i13 = load i32, i32* %nr_linfo2, align 4
  %tobool.not = icmp eq i32 %i13, 0
  br i1 %tobool.not, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %env.0.2.val, i64 0, i32 4
  %i14 = load i32, i32* %len, align 4
  %cmp.not = icmp ugt i32 %i14, %insn_off
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false
  %linfo4 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i12, i64 0, i32 26
  %i15 = load %struct.ethtool_pauseparam*, %struct.ethtool_pauseparam** %linfo4, align 8
  %cmp59 = icmp ugt i32 %i13, 1
  br i1 %cmp59, label %for.body, label %for.end

for.body:                                         ; preds = %for.inc, %if.end
  %i.010 = phi i32 [ %inc, %for.inc ], [ 1, %if.end ]
  %idxprom = zext i32 %i.010 to i64
  %insn_off6 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i15, i64 %idxprom, i32 0
  %i16 = load i32, i32* %insn_off6, align 4
  %cmp7 = icmp ugt i32 %i16, %insn_off
  br i1 %cmp7, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.010, 1
  %exitcond.not = icmp eq i32 %inc, %i13
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %for.body, %if.end
  %i.0.lcssa = phi i32 [ 1, %if.end ], [ %i13, %for.inc ], [ %i.010, %for.body ]
  %sub = add i32 %i.0.lcssa, -1
  %idxprom10 = zext i32 %sub to i64
  %arrayidx11 = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i15, i64 %idxprom10
  br label %return

return:                                           ; preds = %for.end, %lor.lhs.false, %entry
  %retval.0 = phi %struct.ethtool_pauseparam* [ %arrayidx11, %for.end ], [ null, %lor.lhs.false ], [ null, %entry ]
  ret %struct.ethtool_pauseparam* %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i8* @btf_name_by_offset(%struct.btf* noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong
define internal fastcc i8* @ltrim(i8* noundef readonly %s) unnamed_addr #18 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %s.addr.0 = phi i8* [ %s, %entry ], [ %incdec.ptr, %while.cond ]
  %i = load i8, i8* %s.addr.0, align 1
  %i3 = zext i8 %i to i64
  %arrayidx = getelementptr [0 x i8], [0 x i8]* @_ctype, i64 0, i64 %i3
  %i4 = load i8, i8* %arrayidx, align 1
  %i5 = and i8 %i4, 32
  %cmp.not = icmp eq i8 %i5, 0
  %incdec.ptr = getelementptr i8, i8* %s.addr.0, i64 1
  br i1 %cmp.not, label %while.end, label %while.cond

while.end:                                        ; preds = %while.cond
  ret i8* %s.addr.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @print_liveness(%struct.bpf_verifier_env* noundef %env, i32 noundef %live) unnamed_addr #6 {
entry:
  %and = and i32 %live, 15
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i64 0, i64 0)) #22
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %and1 = and i32 %live, 3
  %tobool2.not = icmp eq i32 %and1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  %i7 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i7, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i64 0, i64 0)) #22
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %and5 = and i32 %live, 4
  %tobool6.not = icmp eq i32 %and5, 0
  br i1 %tobool6.not, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end4
  %i8 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i8, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.112, i64 0, i64 0)) #22
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end4
  %and9 = and i32 %live, 8
  %tobool10.not = icmp eq i32 %and9, 0
  br i1 %tobool10.not, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end8
  %i9 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i9, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.113, i64 0, i64 0)) #22
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end8
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @reg_type_may_be_refcounted_or_null(i32 noundef %type) unnamed_addr #2 {
entry:
  %switch.tableidx = add i32 %type, -11
  %i = icmp ult i32 %switch.tableidx, 6
  %switch.cast = trunc i32 %switch.tableidx to i6
  %switch.downshift = lshr i6 -13, %switch.cast
  %i5 = and i6 %switch.downshift, 1
  %switch.masked = icmp ne i6 %i5, 0
  %i6 = select i1 %i, i1 %switch.masked, i1 false
  ret i1 %i6
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc zeroext i1 @test_bit(i64 noundef %nr, i64* noundef %addr) unnamed_addr #6 {
entry:
  %i = call i8 asm sideeffect " btq  $2,$1\0A\09/* output condition code c*/\0A", "={@ccc},*m,Ir,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* elementtype(i64) %addr, i64 %nr) #24, !srcloc !55
  %i7 = and i8 %i, 1
  %tobool = icmp ne i8 %i7, 0
  ret i1 %tobool
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @test_tsk_thread_flag(%struct.task_struct* noundef %tsk) unnamed_addr #6 {
entry:
  %call = call fastcc %struct.thread_info* @task_thread_info(%struct.task_struct* noundef %tsk) #22
  %call1 = call fastcc i32 @test_ti_thread_flag(%struct.thread_info* noundef %call, i32 noundef 2) #22
  ret i32 %call1
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc %struct.thread_info* @task_thread_info(%struct.task_struct* noundef readnone %task) unnamed_addr #2 {
entry:
  %thread_info = getelementptr inbounds %struct.task_struct, %struct.task_struct* %task, i64 0, i32 0
  ret %struct.thread_info* %thread_info
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc %struct.bpf_verifier_state_list** @explored_state(i32 %env.0.2.val.0.4.val, %struct.bpf_verifier_state* %env.0.8.val, %struct.bpf_verifier_state_list** %env.0.9.val, i32 noundef %idx) unnamed_addr #7 {
entry:
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %env.0.8.val, i64 0, i32 4
  %i4 = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i4 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %env.0.8.val, i64 0, i32 0, i64 %idxprom
  %i5 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %callsite = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i5, i64 0, i32 1
  %i7 = load i32, i32* %callsite, align 8
  %xor = xor i32 %i7, %idx
  %call = call fastcc i32 @state_htab_size(i32 %env.0.2.val.0.4.val) #22
  %rem = urem i32 %xor, %call
  %idxprom1 = zext i32 %rem to i64
  %arrayidx2 = getelementptr %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %env.0.9.val, i64 %idxprom1
  ret %struct.bpf_verifier_state_list** %arrayidx2
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @clean_live_states(i32 %env.0.2.val.0.4.val, %struct.bpf_verifier_state* %env.0.8.val, %struct.bpf_verifier_state_list** %env.0.9.val, i32 noundef %insn, %struct.bpf_verifier_state* nocapture noundef readonly %cur) unnamed_addr #11 {
entry:
  %call = call fastcc %struct.bpf_verifier_state_list** @explored_state(i32 %env.0.2.val.0.4.val, %struct.bpf_verifier_state* %env.0.8.val, %struct.bpf_verifier_state_list** %env.0.9.val, i32 noundef %insn) #22
  %sl.015 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %call, align 8
  %tobool.not16 = icmp eq %struct.bpf_verifier_state_list* %sl.015, null
  br i1 %tobool.not16, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %curframe4 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 4
  br label %while.body

while.body:                                       ; preds = %next, %while.body.lr.ph
  %sl.017 = phi %struct.bpf_verifier_state_list* [ %sl.015, %while.body.lr.ph ], [ %sl.0, %next ]
  %state = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.017, i64 0, i32 0
  %branches = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.017, i64 0, i32 0, i32 2
  %i = load i32, i32* %branches, align 8
  %tobool1.not = icmp eq i32 %i, 0
  br i1 %tobool1.not, label %if.end, label %next

if.end:                                           ; preds = %while.body
  %insn_idx = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.017, i64 0, i32 0, i32 3
  %i19 = load i32, i32* %insn_idx, align 4
  %cmp.not = icmp eq i32 %i19, %insn
  br i1 %cmp.not, label %lor.lhs.false, label %next

lor.lhs.false:                                    ; preds = %if.end
  %curframe = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.017, i64 0, i32 0, i32 4
  %i20 = load i32, i32* %curframe, align 8
  %i21 = load i32, i32* %curframe4, align 8
  %cmp5.not = icmp eq i32 %i20, %i21
  br i1 %cmp5.not, label %for.body, label %next

for.cond:                                         ; preds = %for.body
  %cmp9.not = icmp ugt i32 %inc, %i21
  br i1 %cmp9.not, label %for.end, label %for.body

for.body:                                         ; preds = %for.cond, %lor.lhs.false
  %i.014 = phi i32 [ %inc, %for.cond ], [ 0, %lor.lhs.false ]
  %idxprom = sext i32 %i.014 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.017, i64 0, i32 0, i32 0, i64 %idxprom
  %i22 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %callsite = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i22, i64 0, i32 1
  %i23 = load i32, i32* %callsite, align 8
  %arrayidx13 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 0, i64 %idxprom
  %i24 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx13, align 8
  %callsite14 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i24, i64 0, i32 1
  %i25 = load i32, i32* %callsite14, align 8
  %cmp15.not = icmp eq i32 %i23, %i25
  %inc = add i32 %i.014, 1
  br i1 %cmp15.not, label %for.cond, label %next

for.end:                                          ; preds = %for.cond
  call fastcc void @clean_verifier_state(%struct.bpf_verifier_state* noundef %state) #22
  br label %next

next:                                             ; preds = %for.end, %for.body, %lor.lhs.false, %if.end, %while.body
  %next19 = getelementptr inbounds %struct.bpf_verifier_state_list, %struct.bpf_verifier_state_list* %sl.017, i64 0, i32 1
  %sl.0 = load %struct.bpf_verifier_state_list*, %struct.bpf_verifier_state_list** %next19, align 8
  %tobool.not = icmp eq %struct.bpf_verifier_state_list* %sl.0, null
  br i1 %tobool.not, label %while.end, label %while.body

while.end:                                        ; preds = %next, %entry
  ret void
}

; Function Attrs: mustprogress nofree noinline noredzone nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @states_maybe_looping(%struct.bpf_verifier_state* nocapture noundef readonly %old, %struct.bpf_verifier_state* nocapture noundef readonly %cur) unnamed_addr #19 {
entry:
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 4
  %i = load i32, i32* %curframe, align 8
  %curframe1 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %old, i64 0, i32 4
  %i10 = load i32, i32* %curframe1, align 8
  %cmp.not = icmp eq i32 %i10, %i
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %idxprom = sext i32 %i to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %old, i64 0, i32 0, i64 %idxprom
  %i11 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %arrayidx4 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 0, i64 %idxprom
  %i12 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx4, align 8
  %i13 = bitcast %struct.bpf_func_state* %i11 to i8*
  %i14 = bitcast %struct.bpf_func_state* %i12 to i8*
  %bcmp = call i32 @bcmp(i8* noundef dereferenceable(80) %i13, i8* noundef dereferenceable(80) %i14, i64 80)
  %tobool.not = icmp eq i32 %bcmp, 0
  br i1 %tobool.not, label %for.cond, label %return

for.cond:                                         ; preds = %if.end
  %arrayidx7.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 1
  %i15 = bitcast %struct.bpf_reg_state* %arrayidx7.1 to i8*
  %arrayidx10.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 1
  %i16 = bitcast %struct.bpf_reg_state* %arrayidx10.1 to i8*
  %bcmp.1 = call i32 @bcmp(i8* noundef dereferenceable(80) %i15, i8* noundef dereferenceable(80) %i16, i64 80)
  %tobool.not.1 = icmp eq i32 %bcmp.1, 0
  br i1 %tobool.not.1, label %for.cond.1, label %return

for.cond.1:                                       ; preds = %for.cond
  %arrayidx7.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 2
  %i17 = bitcast %struct.bpf_reg_state* %arrayidx7.2 to i8*
  %arrayidx10.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 2
  %i18 = bitcast %struct.bpf_reg_state* %arrayidx10.2 to i8*
  %bcmp.2 = call i32 @bcmp(i8* noundef dereferenceable(80) %i17, i8* noundef dereferenceable(80) %i18, i64 80)
  %tobool.not.2 = icmp eq i32 %bcmp.2, 0
  br i1 %tobool.not.2, label %for.cond.2, label %return

for.cond.2:                                       ; preds = %for.cond.1
  %arrayidx7.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 3
  %i19 = bitcast %struct.bpf_reg_state* %arrayidx7.3 to i8*
  %arrayidx10.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 3
  %i20 = bitcast %struct.bpf_reg_state* %arrayidx10.3 to i8*
  %bcmp.3 = call i32 @bcmp(i8* noundef dereferenceable(80) %i19, i8* noundef dereferenceable(80) %i20, i64 80)
  %tobool.not.3 = icmp eq i32 %bcmp.3, 0
  br i1 %tobool.not.3, label %for.cond.3, label %return

for.cond.3:                                       ; preds = %for.cond.2
  %arrayidx7.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 4
  %i21 = bitcast %struct.bpf_reg_state* %arrayidx7.4 to i8*
  %arrayidx10.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 4
  %i22 = bitcast %struct.bpf_reg_state* %arrayidx10.4 to i8*
  %bcmp.4 = call i32 @bcmp(i8* noundef dereferenceable(80) %i21, i8* noundef dereferenceable(80) %i22, i64 80)
  %tobool.not.4 = icmp eq i32 %bcmp.4, 0
  br i1 %tobool.not.4, label %for.cond.4, label %return

for.cond.4:                                       ; preds = %for.cond.3
  %arrayidx7.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 5
  %i23 = bitcast %struct.bpf_reg_state* %arrayidx7.5 to i8*
  %arrayidx10.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 5
  %i24 = bitcast %struct.bpf_reg_state* %arrayidx10.5 to i8*
  %bcmp.5 = call i32 @bcmp(i8* noundef dereferenceable(80) %i23, i8* noundef dereferenceable(80) %i24, i64 80)
  %tobool.not.5 = icmp eq i32 %bcmp.5, 0
  br i1 %tobool.not.5, label %for.cond.5, label %return

for.cond.5:                                       ; preds = %for.cond.4
  %arrayidx7.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 6
  %i25 = bitcast %struct.bpf_reg_state* %arrayidx7.6 to i8*
  %arrayidx10.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 6
  %i26 = bitcast %struct.bpf_reg_state* %arrayidx10.6 to i8*
  %bcmp.6 = call i32 @bcmp(i8* noundef dereferenceable(80) %i25, i8* noundef dereferenceable(80) %i26, i64 80)
  %tobool.not.6 = icmp eq i32 %bcmp.6, 0
  br i1 %tobool.not.6, label %for.cond.6, label %return

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx7.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 7
  %i27 = bitcast %struct.bpf_reg_state* %arrayidx7.7 to i8*
  %arrayidx10.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 7
  %i28 = bitcast %struct.bpf_reg_state* %arrayidx10.7 to i8*
  %bcmp.7 = call i32 @bcmp(i8* noundef dereferenceable(80) %i27, i8* noundef dereferenceable(80) %i28, i64 80)
  %tobool.not.7 = icmp eq i32 %bcmp.7, 0
  br i1 %tobool.not.7, label %for.cond.7, label %return

for.cond.7:                                       ; preds = %for.cond.6
  %arrayidx7.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 8
  %i29 = bitcast %struct.bpf_reg_state* %arrayidx7.8 to i8*
  %arrayidx10.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 8
  %i30 = bitcast %struct.bpf_reg_state* %arrayidx10.8 to i8*
  %bcmp.8 = call i32 @bcmp(i8* noundef dereferenceable(80) %i29, i8* noundef dereferenceable(80) %i30, i64 80)
  %tobool.not.8 = icmp eq i32 %bcmp.8, 0
  br i1 %tobool.not.8, label %for.cond.8, label %return

for.cond.8:                                       ; preds = %for.cond.7
  %arrayidx7.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 9
  %i31 = bitcast %struct.bpf_reg_state* %arrayidx7.9 to i8*
  %arrayidx10.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 9
  %i32 = bitcast %struct.bpf_reg_state* %arrayidx10.9 to i8*
  %bcmp.9 = call i32 @bcmp(i8* noundef dereferenceable(80) %i31, i8* noundef dereferenceable(80) %i32, i64 80)
  %tobool.not.9 = icmp eq i32 %bcmp.9, 0
  br i1 %tobool.not.9, label %for.cond.9, label %return

for.cond.9:                                       ; preds = %for.cond.8
  %arrayidx7.10 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i11, i64 0, i32 0, i64 10
  %i33 = bitcast %struct.bpf_reg_state* %arrayidx7.10 to i8*
  %arrayidx10.10 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 0, i64 10
  %i34 = bitcast %struct.bpf_reg_state* %arrayidx10.10 to i8*
  %bcmp.10 = call i32 @bcmp(i8* noundef dereferenceable(80) %i33, i8* noundef dereferenceable(80) %i34, i64 80)
  %tobool.not.10 = icmp eq i32 %bcmp.10, 0
  br label %return

return:                                           ; preds = %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %if.end, %entry
  %retval.0 = phi i1 [ false, %entry ], [ false, %if.end ], [ false, %for.cond ], [ false, %for.cond.1 ], [ false, %for.cond.2 ], [ false, %for.cond.3 ], [ false, %for.cond.4 ], [ false, %for.cond.5 ], [ false, %for.cond.6 ], [ false, %for.cond.7 ], [ false, %for.cond.8 ], [ %tobool.not.10, %for.cond.9 ]
  ret i1 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc zeroext i1 @states_equal(%struct.bpf_verifier_state* nocapture noundef readonly %old, %struct.bpf_verifier_state* nocapture noundef readonly %cur) unnamed_addr #6 {
entry:
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %old, i64 0, i32 4
  %i = load i32, i32* %curframe, align 8
  %curframe1 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 4
  %i2 = load i32, i32* %curframe1, align 8
  %cmp.not = icmp eq i32 %i, %i2
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %speculative = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %old, i64 0, i32 6
  %i3 = load i8, i8* %speculative, align 8
  %i4 = and i8 %i3, 1
  %tobool.not = icmp eq i8 %i4, 0
  br i1 %tobool.not, label %if.end5, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %speculative2 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 6
  %i5 = load i8, i8* %speculative2, align 8
  %i6 = and i8 %i5, 1
  %tobool3.not = icmp eq i8 %i6, 0
  br i1 %tobool3.not, label %return, label %if.end5

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %active_spin_lock = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %old, i64 0, i32 5
  %i7 = load i32, i32* %active_spin_lock, align 4
  %active_spin_lock6 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 5
  %i8 = load i32, i32* %active_spin_lock6, align 4
  %cmp7.not = icmp eq i32 %i7, %i8
  br i1 %cmp7.not, label %for.body, label %return

for.cond:                                         ; preds = %if.end18
  %i9 = load i32, i32* %curframe, align 8
  %cmp11.not = icmp ugt i32 %inc, %i9
  br i1 %cmp11.not, label %return, label %for.body

for.body:                                         ; preds = %for.cond, %if.end5
  %i.01 = phi i32 [ %inc, %for.cond ], [ 0, %if.end5 ]
  %idxprom = sext i32 %i.01 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %old, i64 0, i32 0, i64 %idxprom
  %i10 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %callsite = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i10, i64 0, i32 1
  %i11 = load i32, i32* %callsite, align 8
  %arrayidx14 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 0, i64 %idxprom
  %i12 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx14, align 8
  %callsite15 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i12, i64 0, i32 1
  %i13 = load i32, i32* %callsite15, align 8
  %cmp16.not = icmp eq i32 %i11, %i13
  br i1 %cmp16.not, label %if.end18, label %return

if.end18:                                         ; preds = %for.body
  %call = call fastcc zeroext i1 @func_states_equal(%struct.bpf_func_state* noundef %i10, %struct.bpf_func_state* noundef %i12) #22
  %inc = add i32 %i.01, 1
  br i1 %call, label %for.cond, label %return

return:                                           ; preds = %if.end18, %for.body, %for.cond, %if.end5, %land.lhs.true, %entry
  %retval.0 = phi i1 [ false, %entry ], [ false, %land.lhs.true ], [ false, %if.end5 ], [ false, %for.body ], [ false, %if.end18 ], [ true, %for.cond ]
  ret i1 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @propagate_liveness(%struct.bpf_verifier_env* noundef %env, %struct.bpf_verifier_state* nocapture noundef readonly %vstate, %struct.bpf_verifier_state* nocapture noundef readonly %vparent) unnamed_addr #6 {
entry:
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %vparent, i64 0, i32 4
  %i = load i32, i32* %curframe, align 8
  %curframe1 = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %vstate, i64 0, i32 4
  %i57 = load i32, i32* %curframe1, align 8
  %cmp.not = icmp eq i32 %i, %i57
  br i1 %cmp.not, label %for.body, label %do.body

do.body:                                          ; preds = %entry
  call void (i8*, ...) @__warn_printk(i8* noundef getelementptr inbounds ([50 x i8], [50 x i8]* @.str.72, i64 0, i64 0), i32 noundef %i, i32 noundef %i57) #23
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 9072, i32 2313, i64 12) #24, !srcloc !56
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 217) #24, !srcloc !57
  br label %return

for.body:                                         ; preds = %for.inc72, %entry
  %i59 = phi i32 [ %i69, %for.inc72 ], [ %i57, %entry ]
  %frame.042 = phi i32 [ %inc73, %for.inc72 ], [ 0, %entry ]
  %idxprom = sext i32 %frame.042 to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %vparent, i64 0, i32 0, i64 %idxprom
  %i60 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %arrayidx26 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %vstate, i64 0, i32 0, i64 %idxprom
  %i61 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx26, align 8
  %cmp30 = icmp ult i32 %frame.042, %i59
  %cond = select i1 %cmp30, i64 6, i64 0
  br label %for.body35

for.cond50.preheader:                             ; preds = %for.inc
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i61, i64 0, i32 6
  %i62 = load i32, i32* %allocated_stack, align 8
  %cmp5140 = icmp sgt i32 %i62, 7
  br i1 %cmp5140, label %land.rhs.lr.ph, label %for.inc72

land.rhs.lr.ph:                                   ; preds = %for.cond50.preheader
  %allocated_stack53 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i60, i64 0, i32 6
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i60, i64 0, i32 7
  %stack60 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i61, i64 0, i32 7
  br label %land.rhs

for.body35:                                       ; preds = %for.inc, %for.body
  %indvars.iv = phi i64 [ %cond, %for.body ], [ %indvars.iv.next, %for.inc ]
  %arrayidx37 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i61, i64 0, i32 0, i64 %indvars.iv
  %arrayidx39 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %i60, i64 0, i32 0, i64 %indvars.iv
  %call = call fastcc i32 @propagate_liveness_reg(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arrayidx37, %struct.bpf_reg_state* noundef %arrayidx39) #22
  %cmp40 = icmp slt i32 %call, 0
  br i1 %cmp40, label %return, label %if.end43

if.end43:                                         ; preds = %for.body35
  %cmp44 = icmp eq i32 %call, 2
  br i1 %cmp44, label %if.then46, label %for.inc

if.then46:                                        ; preds = %if.end43
  call fastcc void @mark_insn_zext(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arrayidx39) #22
  br label %for.inc

for.inc:                                          ; preds = %if.then46, %if.end43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 10
  br i1 %exitcond.not, label %for.cond50.preheader, label %for.body35

for.cond50:                                       ; preds = %for.body57
  %i63 = load i32, i32* %allocated_stack, align 8
  %div = sdiv i32 %i63, 8
  %i64 = sext i32 %div to i64
  %cmp51 = icmp slt i64 %indvars.iv.next48, %i64
  br i1 %cmp51, label %land.rhs, label %for.inc72

land.rhs:                                         ; preds = %for.cond50, %land.rhs.lr.ph
  %indvars.iv47 = phi i64 [ 0, %land.rhs.lr.ph ], [ %indvars.iv.next48, %for.cond50 ]
  %i65 = load i32, i32* %allocated_stack53, align 8
  %div54 = sdiv i32 %i65, 8
  %i66 = sext i32 %div54 to i64
  %cmp55 = icmp slt i64 %indvars.iv47, %i66
  br i1 %cmp55, label %for.body57, label %for.inc72

for.body57:                                       ; preds = %land.rhs
  %i67 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %spilled_ptr = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i67, i64 %indvars.iv47, i32 0
  %i68 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack60, align 8
  %spilled_ptr63 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i68, i64 %indvars.iv47, i32 0
  %call64 = call fastcc i32 @propagate_liveness_reg(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %spilled_ptr63, %struct.bpf_reg_state* noundef %spilled_ptr) #22
  %cmp65 = icmp slt i32 %call64, 0
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 1
  br i1 %cmp65, label %return, label %for.cond50

for.inc72:                                        ; preds = %land.rhs, %for.cond50, %for.cond50.preheader
  %inc73 = add i32 %frame.042, 1
  %i69 = load i32, i32* %curframe1, align 8
  %cmp21.not = icmp ugt i32 %inc73, %i69
  br i1 %cmp21.not, label %return, label %for.body

return:                                           ; preds = %for.inc72, %for.body57, %for.body35, %do.body
  %retval.0 = phi i32 [ -14, %do.body ], [ %call64, %for.body57 ], [ %call, %for.body35 ], [ 0, %for.inc72 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @push_jmp_history(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_verifier_state* nocapture noundef %cur) unnamed_addr #6 {
entry:
  %jmp_history_cnt = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 10
  %i = load i32, i32* %jmp_history_cnt, align 8
  %inc = add i32 %i, 1
  %jmp_history = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %cur, i64 0, i32 9
  %i12 = bitcast %struct.util_est** %jmp_history to i8**
  %i13 = load i8*, i8** %i12, align 8
  %conv = zext i32 %inc to i64
  %mul = shl nuw nsw i64 %conv, 3
  %call = call i8* @krealloc(i8* noundef %i13, i64 noundef %mul, i32 noundef 1051840) #23
  %i14 = bitcast i8* %call to %struct.util_est*
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %insn_idx = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 0
  %i15 = load i32, i32* %insn_idx, align 8
  %idxprom = zext i32 %i to i64
  %idx = getelementptr %struct.util_est, %struct.util_est* %i14, i64 %idxprom, i32 1
  store i32 %i15, i32* %idx, align 4
  %prev_insn_idx = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 1
  %i16 = load i32, i32* %prev_insn_idx, align 4
  %prev_idx = getelementptr %struct.util_est, %struct.util_est* %i14, i64 %idxprom, i32 0
  store i32 %i16, i32* %prev_idx, align 4
  store i8* %call, i8** %i12, align 8
  store i32 %inc, i32* %jmp_history_cnt, align 8
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -12, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @propagate_precision(%struct.bpf_verifier_env* noundef %env, %struct.bpf_verifier_state* nocapture noundef readonly %old) unnamed_addr #6 {
entry:
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %old, i64 0, i32 4
  %i = load i32, i32* %curframe, align 8
  %idxprom = zext i32 %i to i64
  %arrayidx = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %old, i64 0, i32 0, i64 %idxprom
  %i42 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %arraydecay = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i42, i64 0, i32 0, i64 0
  %level = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 18, i32 0
  %i43 = bitcast %struct.bpf_verifier_env* %env to i8*
  br label %for.body

for.cond8.preheader:                              ; preds = %for.inc
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i42, i64 0, i32 6
  %i44 = load i32, i32* %allocated_stack, align 8
  %cmp931 = icmp sgt i32 %i44, 7
  br i1 %cmp931, label %for.body10.lr.ph, label %return

for.body10.lr.ph:                                 ; preds = %for.cond8.preheader
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i42, i64 0, i32 7
  br label %for.body10

for.body:                                         ; preds = %for.inc, %entry
  %i.029 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %state_reg.027 = phi %struct.bpf_reg_state* [ %arraydecay, %entry ], [ %incdec.ptr, %for.inc ]
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %state_reg.027, i64 0, i32 0
  %i46 = load i32, i32* %type, align 8
  %cmp1.not = icmp eq i32 %i46, 1
  br i1 %cmp1.not, label %lor.lhs.false, label %for.inc

lor.lhs.false:                                    ; preds = %for.body
  %precise = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %state_reg.027, i64 0, i32 14
  %i47 = load i8, i8* %precise, align 4
  %i48 = and i8 %i47, 1
  %tobool.not = icmp eq i8 %i48, 0
  br i1 %tobool.not, label %for.inc, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %i49 = load i32, i32* %level, align 8
  %and = and i32 %i49, 2
  %tobool2.not = icmp eq i32 %and, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  call void (i8*, i8*, ...) @verbose(i8* noundef %i43, i8* noundef getelementptr inbounds ([17 x i8], [17 x i8]* @.str.74, i64 0, i64 0), i32 noundef %i.029) #22
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %call = call fastcc i32 @mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef %i.029) #22
  %cmp5 = icmp slt i32 %call, 0
  br i1 %cmp5, label %return, label %for.inc

for.inc:                                          ; preds = %if.end4, %lor.lhs.false, %for.body
  %inc = add nuw nsw i32 %i.029, 1
  %incdec.ptr = getelementptr %struct.bpf_reg_state, %struct.bpf_reg_state* %state_reg.027, i64 1
  %exitcond.not = icmp eq i32 %inc, 10
  br i1 %exitcond.not, label %for.cond8.preheader, label %for.body

for.body10:                                       ; preds = %for.inc41, %for.body10.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body10.lr.ph ], [ %indvars.iv.next, %for.inc41 ]
  %i50 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx13 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i50, i64 %indvars.iv, i32 1, i64 0
  %i51 = load i8, i8* %arrayidx13, align 8
  %cmp14.not = icmp eq i8 %i51, 1
  br i1 %cmp14.not, label %if.end17, label %for.inc41

if.end17:                                         ; preds = %for.body10
  %type21 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i50, i64 %indvars.iv, i32 0, i32 0
  %i52 = load i32, i32* %type21, align 8
  %cmp22.not = icmp eq i32 %i52, 1
  br i1 %cmp22.not, label %lor.lhs.false24, label %for.inc41

lor.lhs.false24:                                  ; preds = %if.end17
  %precise25 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i50, i64 %indvars.iv, i32 0, i32 14
  %i53 = load i8, i8* %precise25, align 4
  %i54 = and i8 %i53, 1
  %tobool26.not = icmp eq i8 %i54, 0
  br i1 %tobool26.not, label %for.inc41, label %if.end28

if.end28:                                         ; preds = %lor.lhs.false24
  %i55 = load i32, i32* %level, align 8
  %and31 = and i32 %i55, 2
  %tobool32.not = icmp eq i32 %and31, 0
  br i1 %tobool32.not, label %if.end35, label %if.then33

if.then33:                                        ; preds = %if.end28
  %i56 = trunc i64 %indvars.iv to i32
  %.tr = xor i32 %i56, -1
  %i57 = shl i32 %.tr, 3
  call void (i8*, i8*, ...) @verbose(i8* noundef %i43, i8* noundef getelementptr inbounds ([18 x i8], [18 x i8]* @.str.75, i64 0, i64 0), i32 noundef %i57) #22
  br label %if.end35

if.end35:                                         ; preds = %if.then33, %if.end28
  %i58 = trunc i64 %indvars.iv to i32
  %call36 = call fastcc i32 @mark_chain_precision_stack(%struct.bpf_verifier_env* noundef %env, i32 noundef %i58) #22
  %cmp37 = icmp slt i32 %call36, 0
  br i1 %cmp37, label %return, label %for.inc41

for.inc41:                                        ; preds = %if.end35, %lor.lhs.false24, %if.end17, %for.body10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %i59 = load i32, i32* %allocated_stack, align 8
  %div = sdiv i32 %i59, 8
  %i60 = sext i32 %div to i64
  %cmp9 = icmp slt i64 %indvars.iv.next, %i60
  br i1 %cmp9, label %for.body10, label %return

return:                                           ; preds = %for.inc41, %if.end35, %if.end4, %for.cond8.preheader
  %retval.0 = phi i32 [ 0, %for.cond8.preheader ], [ 0, %for.inc41 ], [ %call36, %if.end35 ], [ %call, %if.end4 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @mark_chain_precision_stack(%struct.bpf_verifier_env* noundef %env, i32 noundef %spi) unnamed_addr #6 {
entry:
  %call = call fastcc i32 @__mark_chain_precision(%struct.bpf_verifier_env* noundef %env, i32 noundef -1, i32 noundef %spi) #22
  ret i32 %call
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i8* @krealloc(i8* noundef, i64 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @propagate_liveness_reg(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* nocapture noundef readonly %reg, %struct.bpf_reg_state* noundef %parent_reg) unnamed_addr #6 {
entry:
  %live = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %parent_reg, i64 0, i32 13
  %i = load i32, i32* %live, align 8
  %conv = and i32 %i, 3
  %live1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 13
  %i8 = load i32, i32* %live1, align 8
  %i9 = trunc i32 %i8 to i8
  %conv3 = and i8 %i9, 3
  %cmp = icmp ne i32 %conv, 2
  %tobool = icmp ne i8 %conv3, 0
  %or.cond = select i1 %cmp, i1 %tobool, i1 false
  br i1 %or.cond, label %lor.lhs.false6, label %return

lor.lhs.false6:                                   ; preds = %entry
  %conv8 = zext i8 %conv3 to i32
  %cmp9 = icmp eq i32 %conv, %conv8
  br i1 %cmp9, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false6
  %call = call fastcc i32 @mark_reg_read(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %reg, %struct.bpf_reg_state* noundef %parent_reg, i8 noundef zeroext %conv3) #22
  %tobool11.not = icmp eq i32 %call, 0
  %conv8.call = select i1 %tobool11.not, i32 %conv8, i32 %call
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false6, %entry
  %retval.0 = phi i32 [ 0, %lor.lhs.false6 ], [ 0, %entry ], [ %conv8.call, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc zeroext i1 @func_states_equal(%struct.bpf_func_state* nocapture noundef readonly %old, %struct.bpf_func_state* nocapture noundef readonly %cur) unnamed_addr #6 {
entry:
  %call = call fastcc i8* @kcalloc(i64 noundef 75) #22
  %i = bitcast i8* %call to %struct.util_est*
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %return, label %for.body

for.cond:                                         ; preds = %for.body
  %arrayidx.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 1
  %arrayidx3.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 1
  %call4.1 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.1, %struct.bpf_reg_state* noundef %arrayidx3.1, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.1, label %for.cond.1, label %out_free

for.cond.1:                                       ; preds = %for.cond
  %arrayidx.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 2
  %arrayidx3.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 2
  %call4.2 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.2, %struct.bpf_reg_state* noundef %arrayidx3.2, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.2, label %for.cond.2, label %out_free

for.cond.2:                                       ; preds = %for.cond.1
  %arrayidx.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 3
  %arrayidx3.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 3
  %call4.3 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.3, %struct.bpf_reg_state* noundef %arrayidx3.3, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.3, label %for.cond.3, label %out_free

for.cond.3:                                       ; preds = %for.cond.2
  %arrayidx.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 4
  %arrayidx3.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 4
  %call4.4 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.4, %struct.bpf_reg_state* noundef %arrayidx3.4, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.4, label %for.cond.4, label %out_free

for.cond.4:                                       ; preds = %for.cond.3
  %arrayidx.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 5
  %arrayidx3.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 5
  %call4.5 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.5, %struct.bpf_reg_state* noundef %arrayidx3.5, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.5, label %for.cond.5, label %out_free

for.cond.5:                                       ; preds = %for.cond.4
  %arrayidx.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 6
  %arrayidx3.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 6
  %call4.6 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.6, %struct.bpf_reg_state* noundef %arrayidx3.6, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.6, label %for.cond.6, label %out_free

for.cond.6:                                       ; preds = %for.cond.5
  %arrayidx.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 7
  %arrayidx3.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 7
  %call4.7 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.7, %struct.bpf_reg_state* noundef %arrayidx3.7, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.7, label %for.cond.7, label %out_free

for.cond.7:                                       ; preds = %for.cond.6
  %arrayidx.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 8
  %arrayidx3.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 8
  %call4.8 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.8, %struct.bpf_reg_state* noundef %arrayidx3.8, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.8, label %for.cond.8, label %out_free

for.cond.8:                                       ; preds = %for.cond.7
  %arrayidx.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 9
  %arrayidx3.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 9
  %call4.9 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.9, %struct.bpf_reg_state* noundef %arrayidx3.9, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.9, label %for.cond.9, label %out_free

for.cond.9:                                       ; preds = %for.cond.8
  %arrayidx.10 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 10
  %arrayidx3.10 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 10
  %call4.10 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx.10, %struct.bpf_reg_state* noundef %arrayidx3.10, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4.10, label %for.cond.10, label %out_free

for.cond.10:                                      ; preds = %for.cond.9
  %call7 = call fastcc zeroext i1 @stacksafe(%struct.bpf_func_state* noundef %old, %struct.bpf_func_state* noundef %cur, %struct.util_est* noundef nonnull %i) #22
  br i1 %call7, label %if.end9, label %out_free

for.body:                                         ; preds = %entry
  %arrayidx = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 0, i64 0
  %arrayidx3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 0, i64 0
  %call4 = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %arrayidx, %struct.bpf_reg_state* noundef %arrayidx3, %struct.util_est* noundef nonnull %i) #22
  br i1 %call4, label %for.cond, label %out_free

if.end9:                                          ; preds = %for.cond.10
  %call10 = call fastcc zeroext i1 @refsafe(%struct.bpf_func_state* noundef %old, %struct.bpf_func_state* noundef %cur) #22
  br label %out_free

out_free:                                         ; preds = %if.end9, %for.body, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond
  %ret.0 = phi i1 [ false, %for.cond.10 ], [ %call10, %if.end9 ], [ false, %for.cond.9 ], [ false, %for.cond.8 ], [ false, %for.cond.7 ], [ false, %for.cond.6 ], [ false, %for.cond.5 ], [ false, %for.cond.4 ], [ false, %for.cond.3 ], [ false, %for.cond.2 ], [ false, %for.cond.1 ], [ false, %for.cond ], [ false, %for.body ]
  call void @kfree(i8* noundef nonnull %call) #23
  br label %return

return:                                           ; preds = %out_free, %entry
  %retval.0 = phi i1 [ %ret.0, %out_free ], [ false, %entry ]
  ret i1 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* nocapture noundef readonly %rold, %struct.bpf_reg_state* nocapture noundef readonly %rcur, %struct.util_est* nocapture noundef %idmap) unnamed_addr #6 {
entry:
  %live = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 13
  %i = load i32, i32* %live, align 8
  %and = and i32 %i, 3
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %i45 = bitcast %struct.bpf_reg_state* %rold to i8*
  %i46 = bitcast %struct.bpf_reg_state* %rcur to i8*
  %bcmp = call i32 @bcmp(i8* noundef dereferenceable(80) %i45, i8* noundef dereferenceable(80) %i46, i64 80)
  %cmp = icmp eq i32 %bcmp, 0
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 0
  %i47 = load i32, i32* %type, align 8
  %cmp1 = icmp eq i32 %i47, 6
  br i1 %cmp1, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.end
  br i1 %cmp, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.then2
  %frameno = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 11
  %i48 = load i32, i32* %frameno, align 8
  %frameno4 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 11
  %i49 = load i32, i32* %frameno4, align 8
  %cmp5 = icmp eq i32 %i48, %i49
  br label %return

if.end6:                                          ; preds = %if.end
  %cmp11 = icmp eq i32 %i47, 0
  %or.cond = select i1 %cmp, i1 true, i1 %cmp11
  br i1 %or.cond, label %return, label %if.end13

if.end13:                                         ; preds = %if.end6
  %type14 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 0
  %i50 = load i32, i32* %type14, align 8
  %cmp15 = icmp eq i32 %i50, 0
  br i1 %cmp15, label %return, label %if.end17

if.end17:                                         ; preds = %if.end13
  br label %NodeBlock7

NodeBlock7:                                       ; preds = %if.end17
  %Pivot8 = icmp slt i32 %i47, 5
  br i1 %Pivot8, label %NodeBlock, label %NodeBlock5

NodeBlock5:                                       ; preds = %NodeBlock7
  %Pivot6 = icmp slt i32 %i47, 7
  br i1 %Pivot6, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock5
  %SwitchLeaf4 = icmp slt i32 %i47, 9
  br i1 %SwitchLeaf4, label %sw.bb53, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock5
  %SwitchLeaf2 = icmp eq i32 %i47, 5
  br i1 %SwitchLeaf2, label %sw.bb42, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock7
  %Pivot.not = icmp eq i32 %i47, 4
  br i1 %Pivot.not, label %sw.bb32, label %LeafBlock

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %i47, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %cmp20 = icmp eq i32 %i50, 1
  br i1 %cmp20, label %if.then21, label %return

if.then21:                                        ; preds = %sw.bb
  %precise = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 14
  %i51 = load i8, i8* %precise, align 4
  %i52 = and i8 %i51, 1
  %tobool22.not = icmp eq i8 %i52, 0
  br i1 %tobool22.not, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %if.then21
  %precise23 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 14
  %i53 = load i8, i8* %precise23, align 4
  %i54 = and i8 %i53, 1
  %tobool24.not = icmp eq i8 %i54, 0
  br i1 %tobool24.not, label %return, label %if.end26

if.end26:                                         ; preds = %land.lhs.true, %if.then21
  %call27 = call fastcc zeroext i1 @range_within(%struct.bpf_reg_state* noundef %rold, %struct.bpf_reg_state* noundef %rcur) #22
  br i1 %call27, label %land.rhs28, label %return

land.rhs28:                                       ; preds = %if.end26
  %i55 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 5, i32 0
  %i56 = load i64, i64* %i55, align 8
  %i57 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 5, i32 1
  %i58 = load i64, i64* %i57, align 8
  %i59 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 5, i32 0
  %i60 = load i64, i64* %i59, align 8
  %i61 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 5, i32 1
  %i62 = load i64, i64* %i61, align 8
  %call30 = call zeroext i1 @tnum_in(i64 %i56, i64 %i58, i64 %i60, i64 %i62) #22
  br label %return

sw.bb32:                                          ; preds = %NodeBlock
  %bcmp44 = call i32 @bcmp(i8* noundef dereferenceable(20) %i45, i8* noundef dereferenceable(20) %i46, i64 20)
  %cmp34 = icmp eq i32 %bcmp44, 0
  br i1 %cmp34, label %land.lhs.true35, label %return

land.lhs.true35:                                  ; preds = %sw.bb32
  %call36 = call fastcc zeroext i1 @range_within(%struct.bpf_reg_state* noundef %rold, %struct.bpf_reg_state* noundef %rcur) #22
  br i1 %call36, label %land.rhs37, label %return

land.rhs37:                                       ; preds = %land.lhs.true35
  %i63 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 5, i32 0
  %i64 = load i64, i64* %i63, align 8
  %i65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 5, i32 1
  %i66 = load i64, i64* %i65, align 8
  %i67 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 5, i32 0
  %i68 = load i64, i64* %i67, align 8
  %i69 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 5, i32 1
  %i70 = load i64, i64* %i69, align 8
  %call40 = call zeroext i1 @tnum_in(i64 %i64, i64 %i66, i64 %i68, i64 %i70) #22
  br label %return

sw.bb42:                                          ; preds = %LeafBlock1
  %cmp44.not = icmp eq i32 %i50, 5
  br i1 %cmp44.not, label %if.end46, label %return

if.end46:                                         ; preds = %sw.bb42
  %bcmp43 = call i32 @bcmp(i8* noundef dereferenceable(20) %i45, i8* noundef dereferenceable(20) %i46, i64 20)
  %tobool48.not = icmp eq i32 %bcmp43, 0
  br i1 %tobool48.not, label %if.end50, label %return

if.end50:                                         ; preds = %if.end46
  %id = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 3
  %i71 = load i32, i32* %id, align 4
  %id51 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 3
  %i72 = load i32, i32* %id51, align 4
  %call52 = call fastcc zeroext i1 @check_ids(i32 noundef %i71, i32 noundef %i72, %struct.util_est* noundef %idmap) #22
  br label %return

sw.bb53:                                          ; preds = %LeafBlock3
  %cmp56.not = icmp eq i32 %i50, %i47
  br i1 %cmp56.not, label %if.end58, label %return

if.end58:                                         ; preds = %sw.bb53
  %i73 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 1
  %range = bitcast %union.anon.147* %i73 to i16*
  %i74 = load i16, i16* %range, align 8
  %i75 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 1
  %range59 = bitcast %union.anon.147* %i75 to i16*
  %i76 = load i16, i16* %range59, align 8
  %cmp61 = icmp ugt i16 %i74, %i76
  br i1 %cmp61, label %return, label %if.end64

if.end64:                                         ; preds = %if.end58
  %off = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 2
  %i77 = load i32, i32* %off, align 8
  %off65 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 2
  %i78 = load i32, i32* %off65, align 8
  %cmp66.not = icmp eq i32 %i77, %i78
  br i1 %cmp66.not, label %if.end69, label %return

if.end69:                                         ; preds = %if.end64
  %id70 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 3
  %i79 = load i32, i32* %id70, align 4
  %tobool71.not = icmp eq i32 %i79, 0
  br i1 %tobool71.not, label %if.end77, label %land.lhs.true72

land.lhs.true72:                                  ; preds = %if.end69
  %id74 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 3
  %i80 = load i32, i32* %id74, align 4
  %call75 = call fastcc zeroext i1 @check_ids(i32 noundef %i79, i32 noundef %i80, %struct.util_est* noundef %idmap) #22
  br i1 %call75, label %if.end77, label %return

if.end77:                                         ; preds = %land.lhs.true72, %if.end69
  %call78 = call fastcc zeroext i1 @range_within(%struct.bpf_reg_state* noundef %rold, %struct.bpf_reg_state* noundef %rcur) #22
  br i1 %call78, label %land.rhs80, label %return

land.rhs80:                                       ; preds = %if.end77
  %i81 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 5, i32 0
  %i82 = load i64, i64* %i81, align 8
  %i83 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rold, i64 0, i32 5, i32 1
  %i84 = load i64, i64* %i83, align 8
  %i85 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 5, i32 0
  %i86 = load i64, i64* %i85, align 8
  %i87 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %rcur, i64 0, i32 5, i32 1
  %i88 = load i64, i64* %i87, align 8
  %call83 = call zeroext i1 @tnum_in(i64 %i82, i64 %i84, i64 %i86, i64 %i88) #22
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3
  br label %return

return:                                           ; preds = %NewDefault, %land.rhs80, %if.end77, %land.lhs.true72, %if.end64, %if.end58, %sw.bb53, %if.end50, %if.end46, %sw.bb42, %land.rhs37, %land.lhs.true35, %sw.bb32, %land.rhs28, %if.end26, %land.lhs.true, %sw.bb, %if.end13, %if.end6, %land.rhs, %if.then2, %entry
  %retval.0 = phi i1 [ %call52, %if.end50 ], [ true, %entry ], [ false, %if.then2 ], [ %cmp5, %land.rhs ], [ true, %if.end6 ], [ false, %if.end13 ], [ true, %land.lhs.true ], [ false, %if.end26 ], [ %call30, %land.rhs28 ], [ false, %sw.bb ], [ false, %land.lhs.true35 ], [ false, %sw.bb32 ], [ %call40, %land.rhs37 ], [ false, %sw.bb42 ], [ false, %if.end46 ], [ false, %sw.bb53 ], [ false, %if.end58 ], [ false, %if.end64 ], [ false, %land.lhs.true72 ], [ false, %if.end77 ], [ %call83, %land.rhs80 ], [ false, %NewDefault ]
  ret i1 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc zeroext i1 @stacksafe(%struct.bpf_func_state* nocapture noundef readonly %old, %struct.bpf_func_state* nocapture noundef readonly %cur, %struct.util_est* nocapture noundef %idmap) unnamed_addr #6 {
entry:
  %allocated_stack10 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 6
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 6
  %i = load i32, i32* %allocated_stack, align 8
  %cmp28 = icmp sgt i32 %i, 0
  br i1 %cmp28, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 7
  %stack25 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 7
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %i.029 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %div = sdiv i32 %i.029, 8
  %rem = srem i32 %i.029, 8
  %i34 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %idxprom = sext i32 %div to i64
  %live = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i34, i64 %idxprom, i32 0, i32 13
  %i35 = load i32, i32* %live, align 8
  %and = and i32 %i35, 3
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %add = add i32 %i.029, 7
  br label %for.inc

if.end:                                           ; preds = %for.body
  %idxprom4 = sext i32 %rem to i64
  %arrayidx5 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i34, i64 %idxprom, i32 1, i64 %idxprom4
  %i36 = load i8, i8* %arrayidx5, align 1
  %cmp6 = icmp eq i8 %i36, 0
  br i1 %cmp6, label %for.inc, label %if.end9

if.end9:                                          ; preds = %if.end
  %i37 = load i32, i32* %allocated_stack10, align 8
  %cmp11.not = icmp slt i32 %i.029, %i37
  br i1 %cmp11.not, label %if.end14, label %return

if.end14:                                         ; preds = %if.end9
  %cmp23 = icmp eq i8 %i36, 2
  br i1 %cmp23, label %land.lhs.true, label %if.end36

land.lhs.true:                                    ; preds = %if.end14
  %i38 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack25, align 8
  %arrayidx31 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i38, i64 %idxprom, i32 1, i64 %idxprom4
  %i39 = load i8, i8* %arrayidx31, align 1
  %cmp33 = icmp eq i8 %i39, 3
  br i1 %cmp33, label %for.inc, label %if.end36

if.end36:                                         ; preds = %land.lhs.true, %if.end14
  %i40 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack25, align 8
  %arrayidx51 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i40, i64 %idxprom, i32 1, i64 %idxprom4
  %i41 = load i8, i8* %arrayidx51, align 1
  %cmp53.not = icmp eq i8 %i36, %i41
  br i1 %cmp53.not, label %if.end56, label %return

if.end56:                                         ; preds = %if.end36
  %tobool58.not = icmp eq i32 %rem, 0
  br i1 %tobool58.not, label %if.end60, label %for.inc

if.end60:                                         ; preds = %if.end56
  %arrayidx65 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i34, i64 %idxprom, i32 1, i64 0
  %i42 = load i8, i8* %arrayidx65, align 8
  %cmp67.not = icmp eq i8 %i42, 1
  br i1 %cmp67.not, label %if.end70, label %for.inc

if.end70:                                         ; preds = %if.end60
  %spilled_ptr74 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i34, i64 %idxprom, i32 0
  %spilled_ptr78 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i40, i64 %idxprom, i32 0
  %call = call fastcc zeroext i1 @regsafe(%struct.bpf_reg_state* noundef %spilled_ptr74, %struct.bpf_reg_state* noundef %spilled_ptr78, %struct.util_est* noundef %idmap) #22
  br i1 %call, label %for.inc, label %return

for.inc:                                          ; preds = %if.end70, %if.end60, %if.end56, %land.lhs.true, %if.end, %if.then
  %i.1 = phi i32 [ %i.029, %if.end ], [ %i.029, %land.lhs.true ], [ %i.029, %if.end56 ], [ %i.029, %if.end60 ], [ %i.029, %if.end70 ], [ %add, %if.then ]
  %inc = add i32 %i.1, 1
  %i43 = load i32, i32* %allocated_stack, align 8
  %cmp = icmp slt i32 %inc, %i43
  br i1 %cmp, label %for.body, label %return

return:                                           ; preds = %for.inc, %if.end70, %if.end36, %if.end9, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end9 ], [ false, %if.end36 ], [ false, %if.end70 ], [ true, %for.inc ]
  ret i1 %retval.0
}

; Function Attrs: mustprogress nofree noinline noredzone nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @refsafe(%struct.bpf_func_state* nocapture noundef readonly %old, %struct.bpf_func_state* nocapture noundef readonly %cur) unnamed_addr #19 {
entry:
  %acquired_refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 4
  %i = load i32, i32* %acquired_refs, align 4
  %acquired_refs1 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 4
  %i4 = load i32, i32* %acquired_refs1, align 4
  %cmp.not = icmp eq i32 %i, %i4
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %refs = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %old, i64 0, i32 5
  %i5 = bitcast %struct.util_est** %refs to i8**
  %i6 = load i8*, i8** %i5, align 8
  %refs2 = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %cur, i64 0, i32 5
  %i7 = bitcast %struct.util_est** %refs2 to i8**
  %i8 = load i8*, i8** %i7, align 8
  %conv = sext i32 %i to i64
  %mul = shl nsw i64 %conv, 3
  %bcmp = call i32 @bcmp(i8* %i6, i8* %i8, i64 %mul)
  %tobool.not = icmp eq i32 %bcmp, 0
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %tobool.not, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @range_within(%struct.bpf_reg_state* nocapture noundef readonly %old, %struct.bpf_reg_state* nocapture noundef readonly %cur) unnamed_addr #7 {
entry:
  %umin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %old, i64 0, i32 8
  %i = load i64, i64* %umin_value, align 8
  %umin_value1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %cur, i64 0, i32 8
  %i7 = load i64, i64* %umin_value1, align 8
  %cmp.not = icmp ugt i64 %i, %i7
  br i1 %cmp.not, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %umax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %old, i64 0, i32 9
  %i8 = load i64, i64* %umax_value, align 8
  %umax_value2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %cur, i64 0, i32 9
  %i9 = load i64, i64* %umax_value2, align 8
  %cmp3.not = icmp ult i64 %i8, %i9
  br i1 %cmp3.not, label %land.end, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %land.lhs.true
  %smin_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %old, i64 0, i32 6
  %i10 = load i64, i64* %smin_value, align 8
  %smin_value5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %cur, i64 0, i32 6
  %i11 = load i64, i64* %smin_value5, align 8
  %cmp6.not = icmp sgt i64 %i10, %i11
  br i1 %cmp6.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true4
  %smax_value = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %old, i64 0, i32 7
  %i12 = load i64, i64* %smax_value, align 8
  %smax_value7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %cur, i64 0, i32 7
  %i13 = load i64, i64* %smax_value7, align 8
  %cmp8 = icmp sge i64 %i12, %i13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true4, %land.lhs.true, %entry
  %i14 = phi i1 [ false, %land.lhs.true4 ], [ false, %land.lhs.true ], [ false, %entry ], [ %cmp8, %land.rhs ]
  ret i1 %i14
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc zeroext i1 @check_ids(i32 noundef %old_id, i32 noundef %cur_id, %struct.util_est* nocapture noundef %idmap) unnamed_addr #6 {
entry:
  br label %for.body

for.body:                                         ; preds = %for.inc.2, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.2 ], [ 0, %entry ]
  %old = getelementptr %struct.util_est, %struct.util_est* %idmap, i64 %indvars.iv, i32 0
  %i = load i32, i32* %old, align 4
  %tobool.not = icmp eq i32 %i, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %for.inc.1, %for.inc, %for.body
  %i.019.lcssa = phi i64 [ %indvars.iv, %for.body ], [ %i31, %for.inc.1 ], [ %i30, %for.inc ]
  %idxprom.le = and i64 %i.019.lcssa, 4294967295
  %old.le = getelementptr %struct.util_est, %struct.util_est* %idmap, i64 %idxprom.le, i32 0
  store i32 %old_id, i32* %old.le, align 4
  %cur = getelementptr %struct.util_est, %struct.util_est* %idmap, i64 %idxprom.le, i32 1
  store i32 %cur_id, i32* %cur, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %cmp9 = icmp eq i32 %i, %old_id
  br i1 %cmp9, label %if.then10, label %for.inc

if.then10:                                        ; preds = %if.end.2, %if.end.1, %if.end
  %i.019.lcssa24 = phi i64 [ %indvars.iv, %if.end ], [ %i31, %if.end.2 ], [ %i30, %if.end.1 ]
  %idxprom.le17 = and i64 %i.019.lcssa24, 4294967295
  %cur13 = getelementptr %struct.util_est, %struct.util_est* %idmap, i64 %idxprom.le17, i32 1
  %i26 = load i32, i32* %cur13, align 4
  %cmp14 = icmp eq i32 %i26, %cur_id
  br label %return

for.inc:                                          ; preds = %if.end
  %i30 = add nuw nsw i64 %indvars.iv, 1
  %old.1 = getelementptr %struct.util_est, %struct.util_est* %idmap, i64 %i30, i32 0
  %i27 = load i32, i32* %old.1, align 4
  %tobool.not.1 = icmp eq i32 %i27, 0
  br i1 %tobool.not.1, label %if.then, label %if.end.1

if.end.1:                                         ; preds = %for.inc
  %cmp9.1 = icmp eq i32 %i27, %old_id
  br i1 %cmp9.1, label %if.then10, label %for.inc.1

for.inc.1:                                        ; preds = %if.end.1
  %i31 = add nuw nsw i64 %indvars.iv, 2
  %old.2 = getelementptr %struct.util_est, %struct.util_est* %idmap, i64 %i31, i32 0
  %i28 = load i32, i32* %old.2, align 4
  %tobool.not.2 = icmp eq i32 %i28, 0
  br i1 %tobool.not.2, label %if.then, label %if.end.2

if.end.2:                                         ; preds = %for.inc.1
  %cmp9.2 = icmp eq i32 %i28, %old_id
  br i1 %cmp9.2, label %if.then10, label %for.inc.2

for.inc.2:                                        ; preds = %if.end.2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 3
  %exitcond.not.2 = icmp eq i64 %indvars.iv.next, 75
  br i1 %exitcond.not.2, label %do.body20, label %for.body

do.body20:                                        ; preds = %for.inc.2
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 8652, i32 2307, i64 12) #24, !srcloc !58
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 215) #24, !srcloc !59
  br label %return

return:                                           ; preds = %do.body20, %if.then10, %if.then
  %retval.0 = phi i1 [ %cmp14, %if.then10 ], [ true, %if.then ], [ false, %do.body20 ]
  ret i1 %retval.0
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @clean_verifier_state(%struct.bpf_verifier_state* nocapture noundef readonly %st) unnamed_addr #11 {
entry:
  %arrayidx = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st, i64 0, i32 0, i64 0
  %i = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx, align 8
  %live = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %i, i64 0, i32 0, i64 0, i32 13
  %i2 = load i32, i32* %live, align 8
  %and = and i32 %i2, 8
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %for.cond.preheader, label %for.end

for.cond.preheader:                               ; preds = %entry
  %curframe = getelementptr inbounds %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st, i64 0, i32 4
  br label %for.body

for.body:                                         ; preds = %for.body, %for.cond.preheader
  %i.01 = phi i32 [ 0, %for.cond.preheader ], [ %inc, %for.body ]
  %idxprom = sext i32 %i.01 to i64
  %arrayidx3 = getelementptr %struct.bpf_verifier_state, %struct.bpf_verifier_state* %st, i64 0, i32 0, i64 %idxprom
  %i3 = load %struct.bpf_func_state*, %struct.bpf_func_state** %arrayidx3, align 8
  call fastcc void @clean_func_state(%struct.bpf_func_state* noundef %i3) #22
  %inc = add i32 %i.01, 1
  %i4 = load i32, i32* %curframe, align 8
  %cmp.not = icmp ugt i32 %inc, %i4
  br i1 %cmp.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong
define internal fastcc void @clean_func_state(%struct.bpf_func_state* nocapture noundef %st) unnamed_addr #11 {
entry:
  %live1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 0, i32 13
  %i = load i32, i32* %live1, align 8
  %or = or i32 %i, 8
  store i32 %or, i32* %live1, align 8
  %and = and i32 %i, 3
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.then, label %for.inc

for.body11.lr.ph:                                 ; preds = %for.inc.9
  %stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 7
  br label %for.body11

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 0
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx) #22
  br label %for.inc

for.inc:                                          ; preds = %if.then, %entry
  %live1.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 1, i32 13
  %i9 = load i32, i32* %live1.1, align 8
  %or.1 = or i32 %i9, 8
  store i32 %or.1, i32* %live1.1, align 8
  %and.1 = and i32 %i9, 3
  %tobool.not.1 = icmp eq i32 %and.1, 0
  br i1 %tobool.not.1, label %if.then.1, label %for.inc.1

if.then.1:                                        ; preds = %for.inc
  %arrayidx.1 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 1
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx.1) #22
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc
  %live1.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 2, i32 13
  %i10 = load i32, i32* %live1.2, align 8
  %or.2 = or i32 %i10, 8
  store i32 %or.2, i32* %live1.2, align 8
  %and.2 = and i32 %i10, 3
  %tobool.not.2 = icmp eq i32 %and.2, 0
  br i1 %tobool.not.2, label %if.then.2, label %for.inc.2

if.then.2:                                        ; preds = %for.inc.1
  %arrayidx.2 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 2
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx.2) #22
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1
  %live1.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 3, i32 13
  %i11 = load i32, i32* %live1.3, align 8
  %or.3 = or i32 %i11, 8
  store i32 %or.3, i32* %live1.3, align 8
  %and.3 = and i32 %i11, 3
  %tobool.not.3 = icmp eq i32 %and.3, 0
  br i1 %tobool.not.3, label %if.then.3, label %for.inc.3

if.then.3:                                        ; preds = %for.inc.2
  %arrayidx.3 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 3
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx.3) #22
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.3, %for.inc.2
  %live1.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 4, i32 13
  %i12 = load i32, i32* %live1.4, align 8
  %or.4 = or i32 %i12, 8
  store i32 %or.4, i32* %live1.4, align 8
  %and.4 = and i32 %i12, 3
  %tobool.not.4 = icmp eq i32 %and.4, 0
  br i1 %tobool.not.4, label %if.then.4, label %for.inc.4

if.then.4:                                        ; preds = %for.inc.3
  %arrayidx.4 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 4
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx.4) #22
  br label %for.inc.4

for.inc.4:                                        ; preds = %if.then.4, %for.inc.3
  %live1.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 5, i32 13
  %i13 = load i32, i32* %live1.5, align 8
  %or.5 = or i32 %i13, 8
  store i32 %or.5, i32* %live1.5, align 8
  %and.5 = and i32 %i13, 3
  %tobool.not.5 = icmp eq i32 %and.5, 0
  br i1 %tobool.not.5, label %if.then.5, label %for.inc.5

if.then.5:                                        ; preds = %for.inc.4
  %arrayidx.5 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 5
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx.5) #22
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.then.5, %for.inc.4
  %live1.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 6, i32 13
  %i14 = load i32, i32* %live1.6, align 8
  %or.6 = or i32 %i14, 8
  store i32 %or.6, i32* %live1.6, align 8
  %and.6 = and i32 %i14, 3
  %tobool.not.6 = icmp eq i32 %and.6, 0
  br i1 %tobool.not.6, label %if.then.6, label %for.inc.6

if.then.6:                                        ; preds = %for.inc.5
  %arrayidx.6 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 6
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx.6) #22
  br label %for.inc.6

for.inc.6:                                        ; preds = %if.then.6, %for.inc.5
  %live1.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 7, i32 13
  %i15 = load i32, i32* %live1.7, align 8
  %or.7 = or i32 %i15, 8
  store i32 %or.7, i32* %live1.7, align 8
  %and.7 = and i32 %i15, 3
  %tobool.not.7 = icmp eq i32 %and.7, 0
  br i1 %tobool.not.7, label %if.then.7, label %for.inc.7

if.then.7:                                        ; preds = %for.inc.6
  %arrayidx.7 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 7
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx.7) #22
  br label %for.inc.7

for.inc.7:                                        ; preds = %if.then.7, %for.inc.6
  %live1.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 8, i32 13
  %i16 = load i32, i32* %live1.8, align 8
  %or.8 = or i32 %i16, 8
  store i32 %or.8, i32* %live1.8, align 8
  %and.8 = and i32 %i16, 3
  %tobool.not.8 = icmp eq i32 %and.8, 0
  br i1 %tobool.not.8, label %if.then.8, label %for.inc.8

if.then.8:                                        ; preds = %for.inc.7
  %arrayidx.8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 8
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx.8) #22
  br label %for.inc.8

for.inc.8:                                        ; preds = %if.then.8, %for.inc.7
  %live1.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 9, i32 13
  %i17 = load i32, i32* %live1.9, align 8
  %or.9 = or i32 %i17, 8
  store i32 %or.9, i32* %live1.9, align 8
  %and.9 = and i32 %i17, 3
  %tobool.not.9 = icmp eq i32 %and.9, 0
  br i1 %tobool.not.9, label %if.then.9, label %for.inc.9

if.then.9:                                        ; preds = %for.inc.8
  %arrayidx.9 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 0, i64 9
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %arrayidx.9) #22
  br label %for.inc.9

for.inc.9:                                        ; preds = %if.then.9, %for.inc.8
  %allocated_stack = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %st, i64 0, i32 6
  %i18 = load i32, i32* %allocated_stack, align 8
  %cmp104 = icmp sgt i32 %i18, 7
  br i1 %cmp104, label %for.body11.lr.ph, label %for.end42

for.body11:                                       ; preds = %for.inc40, %for.body11.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body11.lr.ph ], [ %indvars.iv.next, %for.inc40 ]
  %i19 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %live14 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i19, i64 %indvars.iv, i32 0, i32 13
  %i20 = load i32, i32* %live14, align 8
  %or20 = or i32 %i20, 8
  store i32 %or20, i32* %live14, align 8
  %and21 = and i32 %i20, 3
  %tobool22.not = icmp eq i32 %and21, 0
  br i1 %tobool22.not, label %if.then23, label %for.inc40

if.then23:                                        ; preds = %for.body11
  %i21 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %spilled_ptr27 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i21, i64 %indvars.iv, i32 0
  call fastcc void @__mark_reg_not_init(%struct.bpf_reg_state* noundef %spilled_ptr27) #22
  %i22 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx35 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i22, i64 %indvars.iv, i32 1, i64 0
  store i8 0, i8* %arrayidx35, align 1
  %i23 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx35.1 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i23, i64 %indvars.iv, i32 1, i64 1
  store i8 0, i8* %arrayidx35.1, align 1
  %i24 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx35.2 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i24, i64 %indvars.iv, i32 1, i64 2
  store i8 0, i8* %arrayidx35.2, align 1
  %i25 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx35.3 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i25, i64 %indvars.iv, i32 1, i64 3
  store i8 0, i8* %arrayidx35.3, align 1
  %i26 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx35.4 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i26, i64 %indvars.iv, i32 1, i64 4
  store i8 0, i8* %arrayidx35.4, align 1
  %i27 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx35.5 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i27, i64 %indvars.iv, i32 1, i64 5
  store i8 0, i8* %arrayidx35.5, align 1
  %i28 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx35.6 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i28, i64 %indvars.iv, i32 1, i64 6
  store i8 0, i8* %arrayidx35.6, align 1
  %i29 = load %struct.bpf_stack_state*, %struct.bpf_stack_state** %stack, align 8
  %arrayidx35.7 = getelementptr %struct.bpf_stack_state, %struct.bpf_stack_state* %i29, i64 %indvars.iv, i32 1, i64 7
  store i8 0, i8* %arrayidx35.7, align 1
  br label %for.inc40

for.inc40:                                        ; preds = %if.then23, %for.body11
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %i30 = load i32, i32* %allocated_stack, align 8
  %div = sdiv i32 %i30, 8
  %i31 = sext i32 %div to i64
  %cmp10 = icmp slt i64 %indvars.iv.next, %i31
  br i1 %cmp10, label %for.body11, label %for.end42

for.end42:                                        ; preds = %for.inc40, %for.inc.9
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @init_reg_state(%struct.bpf_verifier_env* noundef %env, %struct.bpf_func_state* nocapture noundef %state) unnamed_addr #6 {
entry:
  %arraydecay = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 0
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %i = trunc i64 %indvars.iv to i32
  call fastcc void @mark_reg_not_init(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef %i) #22
  %live = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 13
  store i32 0, i32* %live, align 8
  %parent = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 10
  store %struct.bpf_reg_state* null, %struct.bpf_reg_state** %parent, align 8
  %subreg_def = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 %indvars.iv, i32 12
  store i32 0, i32* %subreg_def, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 11
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %type = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 10, i32 0
  store i32 6, i32* %type, align 8
  call fastcc void @mark_reg_known_zero(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 10) #22
  %frameno = getelementptr inbounds %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 2
  %i19 = load i32, i32* %frameno, align 4
  %frameno8 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 10, i32 11
  store i32 %i19, i32* %frameno8, align 8
  %type10 = getelementptr %struct.bpf_func_state, %struct.bpf_func_state* %state, i64 0, i32 0, i64 1, i32 0
  store i32 2, i32* %type10, align 8
  call fastcc void @mark_reg_known_zero(%struct.bpf_verifier_env* noundef %env, %struct.bpf_reg_state* noundef %arraydecay, i32 noundef 1) #22
  ret void
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @push_insn(i32 noundef %t, i32 noundef %w, i32 noundef %e, %struct.bpf_verifier_env* noundef %env, i1 noundef zeroext %loop_ok) unnamed_addr #6 {
entry:
  %insn_stack1 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 20, i32 1
  %i = load i32*, i32** %insn_stack1, align 8
  %insn_state3 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 20, i32 0
  %i46 = load i32*, i32** %insn_state3, align 8
  %cmp = icmp eq i32 %e, 1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %idxprom = sext i32 %t to i64
  %arrayidx = getelementptr i32, i32* %i46, i64 %idxprom
  %i47 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp sgt i32 %i47, 16
  br i1 %cmp4, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true, %entry
  %cmp5 = icmp eq i32 %e, 2
  br i1 %cmp5, label %land.lhs.true6, label %if.end11

land.lhs.true6:                                   ; preds = %if.end
  %idxprom7 = sext i32 %t to i64
  %arrayidx8 = getelementptr i32, i32* %i46, i64 %idxprom7
  %i48 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp sgt i32 %i48, 17
  br i1 %cmp9, label %return, label %if.end11

if.end11:                                         ; preds = %land.lhs.true6, %if.end
  %cmp12 = icmp slt i32 %w, 0
  br i1 %cmp12, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end11
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i49 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i49, i64 0, i32 4
  %i50 = load i32, i32* %len, align 4
  %cmp13.not = icmp ugt i32 %i50, %w
  br i1 %cmp13.not, label %if.end15, label %if.then14

if.then14:                                        ; preds = %lor.lhs.false, %if.end11
  call void (%struct.bpf_verifier_env*, i32, i8*, ...) @verbose_linfo(%struct.bpf_verifier_env* noundef %env, i32 noundef %t, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i64 0, i64 0), i32 noundef %t) #22
  %i51 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i51, i8* noundef getelementptr inbounds ([38 x i8], [38 x i8]* @.str.23, i64 0, i64 0), i32 noundef %t, i32 noundef %w) #22
  br label %return

if.end15:                                         ; preds = %lor.lhs.false
  br i1 %cmp5, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end15
  %env.idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 16
  %env.idx.val = load %struct.bpf_insn_aux_data*, %struct.bpf_insn_aux_data** %env.idx, align 8
  call fastcc void @init_explored_state(%struct.bpf_insn_aux_data* %env.idx.val, i32 noundef %w) #22
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end15
  %idxprom19 = sext i32 %w to i64
  %arrayidx20 = getelementptr i32, i32* %i46, i64 %idxprom19
  %i52 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp eq i32 %i52, 0
  br i1 %cmp21, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.end18
  %or = or i32 %e, 16
  %idxprom23 = sext i32 %t to i64
  %arrayidx24 = getelementptr i32, i32* %i46, i64 %idxprom23
  store i32 %or, i32* %arrayidx24, align 4
  store i32 16, i32* %arrayidx20, align 4
  %cur_stack = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 20, i32 2
  %i53 = load i32, i32* %cur_stack, align 8
  %i54 = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len29 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i54, i64 0, i32 4
  %i55 = load i32, i32* %len29, align 4
  %cmp30.not = icmp ult i32 %i53, %i55
  br i1 %cmp30.not, label %if.end32, label %return

if.end32:                                         ; preds = %if.then22
  %inc = add i32 %i53, 1
  store i32 %inc, i32* %cur_stack, align 8
  %idxprom35 = sext i32 %i53 to i64
  %arrayidx36 = getelementptr i32, i32* %i, i64 %idxprom35
  store i32 %w, i32* %arrayidx36, align 4
  br label %return

if.else:                                          ; preds = %if.end18
  %and = and i32 %i52, 240
  %cmp39 = icmp eq i32 %and, 16
  br i1 %cmp39, label %if.then40, label %if.else45

if.then40:                                        ; preds = %if.else
  br i1 %loop_ok, label %land.lhs.true41, label %if.end44

land.lhs.true41:                                  ; preds = %if.then40
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i56 = load i8, i8* %allow_ptr_leaks, align 8
  %i57 = and i8 %i56, 1
  %tobool42.not = icmp eq i8 %i57, 0
  br i1 %tobool42.not, label %if.end44, label %return

if.end44:                                         ; preds = %land.lhs.true41, %if.then40
  call void (%struct.bpf_verifier_env*, i32, i8*, ...) @verbose_linfo(%struct.bpf_verifier_env* noundef %env, i32 noundef %t, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i64 0, i64 0), i32 noundef %t) #22
  call void (%struct.bpf_verifier_env*, i32, i8*, ...) @verbose_linfo(%struct.bpf_verifier_env* noundef %env, i32 noundef %w, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i64 0, i64 0), i32 noundef %w) #22
  %i58 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i58, i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.43, i64 0, i64 0), i32 noundef %t, i32 noundef %w) #22
  br label %return

if.else45:                                        ; preds = %if.else
  %cmp48 = icmp eq i32 %i52, 32
  br i1 %cmp48, label %if.then49, label %if.else53

if.then49:                                        ; preds = %if.else45
  %or50 = or i32 %e, 16
  %idxprom51 = sext i32 %t to i64
  %arrayidx52 = getelementptr i32, i32* %i46, i64 %idxprom51
  store i32 %or50, i32* %arrayidx52, align 4
  br label %return

if.else53:                                        ; preds = %if.else45
  %i59 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i59, i8* noundef getelementptr inbounds ([25 x i8], [25 x i8]* @.str.44, i64 0, i64 0)) #22
  br label %return

return:                                           ; preds = %if.else53, %if.then49, %if.end44, %land.lhs.true41, %if.end32, %if.then22, %if.then14, %land.lhs.true6, %land.lhs.true
  %retval.0 = phi i32 [ -22, %if.then14 ], [ 1, %if.end32 ], [ -22, %if.end44 ], [ 0, %if.then49 ], [ -14, %if.else53 ], [ 0, %land.lhs.true ], [ 0, %land.lhs.true6 ], [ -7, %if.then22 ], [ 0, %land.lhs.true41 ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc void @init_explored_state(%struct.bpf_insn_aux_data* %env.0.16.val, i32 noundef %idx) unnamed_addr #10 {
entry:
  %idxprom = sext i32 %idx to i64
  %prune_point = getelementptr %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %env.0.16.val, i64 %idxprom, i32 6
  store i8 1, i8* %prune_point, align 1
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local %struct.btf* @btf_get_by_fd(i32 noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_btf_func(%struct.bpf_verifier_env* noundef %env, %union.bpf_attr* nocapture noundef readonly %attr, %union.bpf_attr* noundef %uattr) unnamed_addr #6 {
entry:
  %func_info_cnt = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 15
  %i = load i32, i32* %func_info_cnt, align 8
  %tobool.not = icmp eq i32 %i, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i140 = load i32, i32* %subprog_cnt, align 8
  %cmp.not = icmp eq i32 %i, %i140
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  %i141 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i141, i8* noundef getelementptr inbounds ([63 x i8], [63 x i8]* @.str.27, i64 0, i64 0)) #22
  br label %return

if.end2:                                          ; preds = %if.end
  %func_info_rec_size = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 13
  %i142 = load i32, i32* %func_info_rec_size, align 4
  %i143 = add i32 %i142, -253
  %i144 = icmp ult i32 %i143, -245
  br i1 %i144, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end2
  %conv = zext i32 %i142 to i64
  %rem = and i64 %conv, 3
  %tobool6.not = icmp eq i64 %rem, 0
  br i1 %tobool6.not, label %if.end8, label %if.then7

if.then7:                                         ; preds = %lor.lhs.false5, %if.end2
  %i145 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i145, i8* noundef getelementptr inbounds ([31 x i8], [31 x i8]* @.str.28, i64 0, i64 0), i32 noundef %i142) #22
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  %prog9 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i146 = load %struct.bpf_prog*, %struct.bpf_prog** %prog9, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i146, i64 0, i32 7
  %i147 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %btf10 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i147, i64 0, i32 24
  %i148 = load %struct.btf*, %struct.btf** %btf10, align 8
  %func_info = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 14
  %i149 = load i64, i64* %func_info, align 8
  %i150 = icmp ult i32 %i142, 8
  %cond = select i1 %i150, i32 %i142, i32 8
  %conv17 = zext i32 %i to i64
  %call = call fastcc i8* @kvcalloc(i64 noundef %conv17, i64 noundef 8, i32 noundef 11456) #22
  %i151 = bitcast i8* %call to %struct.util_est*
  %tobool19.not = icmp eq i8* %call, null
  br i1 %tobool19.not, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end8
  %i152 = inttoptr i64 %i149 to i8*
  %conv40 = zext i32 %cond to i64
  br label %for.body

for.body:                                         ; preds = %if.end87, %for.body.lr.ph
  %i.081 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %if.end87 ]
  %urecord.080 = phi i8* [ %i152, %for.body.lr.ph ], [ %add.ptr, %if.end87 ]
  %prev_offset.079 = phi i32 [ 0, %for.body.lr.ph ], [ %i167, %if.end87 ]
  %call26 = call i32 @bpf_check_uarg_tail_zero(i8* noundef %urecord.080, i64 noundef 8, i64 noundef %conv) #23
  br label %NodeBlock

NodeBlock:                                        ; preds = %for.body
  %Pivot = icmp slt i32 %call26, 0
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %call26, 0
  br i1 %SwitchLeaf2, label %if.end39, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %call26, -7
  br i1 %SwitchLeaf, label %if.then31, label %NewDefault

if.then31:                                        ; preds = %LeafBlock
  %i153 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i153, i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.29, i64 0, i64 0)) #22
  %func_info_rec_size32 = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %uattr, i64 0, i32 0, i32 13
  %i154 = call i32 asm sideeffect "call __put_user_4", "={ax},0,{cx},~{ebx},~{dirflag},~{fpsr},~{flags}"(i32 %cond, i32* %func_info_rec_size32) #24, !srcloc !60
  %tobool35.not = icmp eq i32 %i154, 0
  %spec.select = select i1 %tobool35.not, i32 -7, i32 -14
  br label %err_free

if.end39:                                         ; preds = %LeafBlock1
  %idxprom = zext i32 %i.081 to i64
  %arrayidx = getelementptr %struct.util_est, %struct.util_est* %i151, i64 %idxprom
  %i155 = bitcast %struct.util_est* %arrayidx to i8*
  %call2.i = call i64 @_copy_from_user(i8* noundef %i155, i8* noundef %urecord.080, i64 noundef %conv40) #23
  %tobool42.not = icmp eq i64 %call2.i, 0
  br i1 %tobool42.not, label %if.end44, label %err_free

if.end44:                                         ; preds = %if.end39
  %cmp45 = icmp eq i32 %i.081, 0
  %insn_off = getelementptr inbounds %struct.util_est, %struct.util_est* %arrayidx, i64 0, i32 0
  %i156 = load i32, i32* %insn_off, align 4
  br i1 %cmp45, label %if.then47, label %if.else

if.then47:                                        ; preds = %if.end44
  %tobool50.not = icmp eq i32 %i156, 0
  br i1 %tobool50.not, label %if.end66, label %if.then51

if.then51:                                        ; preds = %if.then47
  %i157 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i157, i8* noundef getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0), i32 noundef %i156) #22
  br label %err_free

if.else:                                          ; preds = %if.end44
  %cmp59.not = icmp ugt i32 %i156, %prev_offset.079
  br i1 %cmp59.not, label %if.end66, label %if.then61

if.then61:                                        ; preds = %if.else
  %i158 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i158, i8* noundef getelementptr inbounds ([69 x i8], [69 x i8]* @.str.31, i64 0, i64 0), i32 noundef %i156, i32 noundef %prev_offset.079) #22
  br label %err_free

if.end66:                                         ; preds = %if.else, %if.then47
  %start = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom, i32 0
  %i159 = load i32, i32* %start, align 4
  %cmp72.not = icmp eq i32 %i159, %i156
  br i1 %cmp72.not, label %if.end75, label %if.then74

if.then74:                                        ; preds = %if.end66
  %i161 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i161, i8* noundef getelementptr inbounds ([67 x i8], [67 x i8]* @.str.32, i64 0, i64 0)) #22
  br label %err_free

if.end75:                                         ; preds = %if.end66
  %type_id = getelementptr %struct.util_est, %struct.util_est* %i151, i64 %idxprom, i32 1
  %i162 = load i32, i32* %type_id, align 4
  %call78 = call %struct.btf_type* @btf_type_by_id(%struct.btf* noundef %i148, i32 noundef %i162) #23
  %tobool79.not = icmp eq %struct.btf_type* %call78, null
  br i1 %tobool79.not, label %if.then83, label %lor.lhs.false80

lor.lhs.false80:                                  ; preds = %if.end75
  %info = getelementptr inbounds %struct.btf_type, %struct.btf_type* %call78, i64 0, i32 1
  %i163 = load i32, i32* %info, align 4
  %i164 = and i32 %i163, 251658240
  %cmp81.not = icmp eq i32 %i164, 201326592
  br i1 %cmp81.not, label %if.end87, label %if.then83

if.then83:                                        ; preds = %lor.lhs.false80, %if.end75
  %idxprom.le = zext i32 %i.081 to i64
  %type_id.le = getelementptr %struct.util_est, %struct.util_est* %i151, i64 %idxprom.le, i32 1
  %i165 = bitcast %struct.bpf_verifier_env* %env to i8*
  %i166 = load i32, i32* %type_id.le, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i165, i8* noundef getelementptr inbounds ([32 x i8], [32 x i8]* @.str.33, i64 0, i64 0), i32 noundef %i166) #22
  br label %err_free

if.end87:                                         ; preds = %lor.lhs.false80
  %i167 = load i32, i32* %insn_off, align 4
  %add.ptr = getelementptr i8, i8* %urecord.080, i64 %conv
  %inc = add i32 %i.081, 1
  %exitcond.not = icmp eq i32 %inc, %i
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %if.end87
  %i168 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %func_info92 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i168, i64 0, i32 25
  %i169 = bitcast %struct.util_est** %func_info92 to i8**
  store i8* %call, i8** %i169, align 8
  %i170 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %func_info_cnt94 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i170, i64 0, i32 28
  store i32 %i, i32* %func_info_cnt94, align 8
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %err_free

err_free:                                         ; preds = %NewDefault, %if.then83, %if.then74, %if.then61, %if.then51, %if.end39, %if.then31
  %ret.0 = phi i32 [ -22, %if.then51 ], [ -22, %if.then74 ], [ -22, %if.then83 ], [ -22, %if.then61 ], [ %spec.select, %if.then31 ], [ %call26, %NewDefault ], [ -14, %if.end39 ]
  call void @kvfree(i8* noundef nonnull %call) #23
  br label %return

return:                                           ; preds = %err_free, %for.end, %if.end8, %if.then7, %if.then1, %entry
  %retval.0 = phi i32 [ -22, %if.then1 ], [ -22, %if.then7 ], [ %ret.0, %err_free ], [ 0, %for.end ], [ 0, %entry ], [ -12, %if.end8 ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_btf_line(%struct.bpf_verifier_env* noundef %env, %union.bpf_attr* nocapture noundef readonly %attr, %union.bpf_attr* noundef %uattr) unnamed_addr #6 {
entry:
  %line_info_cnt = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 18
  %i = load i32, i32* %line_info_cnt, align 8
  %tobool.not = icmp eq i32 %i, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %line_info_rec_size = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 16
  %i205 = load i32, i32* %line_info_rec_size, align 4
  %conv = zext i32 %i205 to i64
  %i206 = add i32 %i205, -16
  %i207 = icmp ult i32 %i206, 237
  %and = and i64 %conv, 3
  %tobool6.not = icmp eq i64 %and, 0
  %or.cond = select i1 %i207, i1 %tobool6.not, i1 false
  br i1 %or.cond, label %if.end8, label %return

if.end8:                                          ; preds = %if.end
  %conv9 = zext i32 %i to i64
  %call = call fastcc i8* @kvcalloc(i64 noundef %conv9, i64 noundef 16, i32 noundef 11456) #22
  %i208 = bitcast i8* %call to %struct.ethtool_pauseparam*
  %tobool10.not = icmp eq i8* %call, null
  br i1 %tobool10.not, label %return, label %if.end12

if.end12:                                         ; preds = %if.end8
  %prog13 = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i209 = load %struct.bpf_prog*, %struct.bpf_prog** %prog13, align 8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i209, i64 0, i32 7
  %i210 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %btf14 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i210, i64 0, i32 24
  %i211 = load %struct.btf*, %struct.btf** %btf14, align 8
  %i212 = icmp ult i32 %i205, 16
  %cond = select i1 %i212, i32 %i205, i32 16
  %line_info = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %attr, i64 0, i32 0, i32 17
  %i213 = load i64, i64* %line_info, align 8
  %i214 = inttoptr i64 %i213 to i8*
  %conv39 = zext i32 %cond to i64
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i209, i64 0, i32 4
  %i215 = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i209, i64 0, i32 10
  %insnsi = bitcast %union.anon.146* %i215 to [0 x %struct.bpf_insn]*
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  br label %for.body

for.body:                                         ; preds = %if.end104, %if.end12
  %i.0115 = phi i32 [ 0, %if.end12 ], [ %inc108, %if.end104 ]
  %s.0114 = phi i32 [ 0, %if.end12 ], [ %s.1, %if.end104 ]
  %prev_offset.0112 = phi i32 [ 0, %if.end12 ], [ %i234, %if.end104 ]
  %ulinfo.0111 = phi i8* [ %i214, %if.end12 ], [ %add.ptr, %if.end104 ]
  %call25 = call i32 @bpf_check_uarg_tail_zero(i8* noundef %ulinfo.0111, i64 noundef 16, i64 noundef %conv) #23
  br label %NodeBlock

NodeBlock:                                        ; preds = %for.body
  %Pivot = icmp slt i32 %call25, 0
  br i1 %Pivot, label %LeafBlock, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %call25, 0
  br i1 %SwitchLeaf2, label %if.end38, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %call25, -7
  br i1 %SwitchLeaf, label %if.then30, label %NewDefault

if.then30:                                        ; preds = %LeafBlock
  %i216 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i216, i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.34, i64 0, i64 0)) #22
  %line_info_rec_size31 = getelementptr inbounds %union.bpf_attr, %union.bpf_attr* %uattr, i64 0, i32 0, i32 16
  %i217 = call i32 asm sideeffect "call __put_user_4", "={ax},0,{cx},~{ebx},~{dirflag},~{fpsr},~{flags}"(i32 16, i32* %line_info_rec_size31) #24, !srcloc !61
  %tobool34.not = icmp eq i32 %i217, 0
  %spec.select = select i1 %tobool34.not, i32 -7, i32 -14
  br label %err_free

if.end38:                                         ; preds = %LeafBlock1
  %idxprom = zext i32 %i.0115 to i64
  %arrayidx = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i208, i64 %idxprom
  %i218 = bitcast %struct.ethtool_pauseparam* %arrayidx to i8*
  %call2.i = call i64 @_copy_from_user(i8* noundef %i218, i8* noundef %ulinfo.0111, i64 noundef %conv39) #23
  %tobool41.not = icmp eq i64 %call2.i, 0
  br i1 %tobool41.not, label %if.end43, label %err_free

if.end43:                                         ; preds = %if.end38
  %tobool44.not = icmp eq i32 %i.0115, 0
  br i1 %tobool44.not, label %lor.lhs.false49, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end43
  %insn_off = getelementptr inbounds %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %arrayidx, i64 0, i32 0
  %i219 = load i32, i32* %insn_off, align 4
  %cmp47.not = icmp ugt i32 %i219, %prev_offset.0112
  br i1 %cmp47.not, label %lor.lhs.false49, label %if.then55

lor.lhs.false49:                                  ; preds = %land.lhs.true, %if.end43
  %insn_off52 = getelementptr inbounds %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %arrayidx, i64 0, i32 0
  %i220 = load i32, i32* %insn_off52, align 4
  %i221 = load i32, i32* %len, align 4
  %cmp53.not = icmp ult i32 %i220, %i221
  br i1 %cmp53.not, label %if.end60, label %if.then55

if.then55:                                        ; preds = %lor.lhs.false49, %land.lhs.true
  %i222 = bitcast %struct.bpf_verifier_env* %env to i8*
  %insn_off58 = getelementptr inbounds %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %arrayidx, i64 0, i32 0
  %i223 = load i32, i32* %insn_off58, align 4
  %i224 = load i32, i32* %len, align 4
  call void (i8*, i8*, ...) @verbose(i8* noundef %i222, i8* noundef getelementptr inbounds ([65 x i8], [65 x i8]* @.str.35, i64 0, i64 0), i32 noundef %i.0115, i32 noundef %i223, i32 noundef %prev_offset.0112, i32 noundef %i224) #22
  br label %err_free

if.end60:                                         ; preds = %lor.lhs.false49
  %idxprom64 = zext i32 %i220 to i64
  %code = getelementptr [0 x %struct.bpf_insn], [0 x %struct.bpf_insn]* %insnsi, i64 0, i64 %idxprom64, i32 0
  %i225 = load i8, i8* %code, align 8
  %tobool66.not = icmp eq i8 %i225, 0
  br i1 %tobool66.not, label %if.then67, label %if.end68

if.then67:                                        ; preds = %if.end60
  %i226 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i226, i8* noundef getelementptr inbounds ([45 x i8], [45 x i8]* @.str.36, i64 0, i64 0), i32 noundef %i.0115) #22
  br label %err_free

if.end68:                                         ; preds = %if.end60
  %line_off = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i208, i64 %idxprom, i32 2
  %i227 = load i32, i32* %line_off, align 4
  %call71 = call i8* @btf_name_by_offset(%struct.btf* noundef %i211, i32 noundef %i227) #23
  %tobool72.not = icmp eq i8* %call71, null
  br i1 %tobool72.not, label %if.then78, label %lor.lhs.false73

lor.lhs.false73:                                  ; preds = %if.end68
  %file_name_off = getelementptr %struct.ethtool_pauseparam, %struct.ethtool_pauseparam* %i208, i64 %idxprom, i32 1
  %i228 = load i32, i32* %file_name_off, align 4
  %call76 = call i8* @btf_name_by_offset(%struct.btf* noundef %i211, i32 noundef %i228) #23
  %tobool77.not = icmp eq i8* %call76, null
  br i1 %tobool77.not, label %if.then78, label %if.end79

if.then78:                                        ; preds = %lor.lhs.false73, %if.end68
  %i229 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i229, i8* noundef getelementptr inbounds ([50 x i8], [50 x i8]* @.str.37, i64 0, i64 0), i32 noundef %i.0115) #22
  br label %err_free

if.end79:                                         ; preds = %lor.lhs.false73
  %i230 = load i32, i32* %subprog_cnt, align 8
  %cmp80.not = icmp eq i32 %s.0114, %i230
  br i1 %cmp80.not, label %if.end104, label %if.then82

if.then82:                                        ; preds = %if.end79
  %i231 = load i32, i32* %insn_off52, align 4
  %idxprom86 = zext i32 %s.0114 to i64
  %start = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom86, i32 0
  %i232 = load i32, i32* %start, align 4
  %cmp88 = icmp eq i32 %i231, %i232
  br i1 %cmp88, label %if.then90, label %if.else

if.then90:                                        ; preds = %if.then82
  %linfo_idx = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom86, i32 1
  store i32 %i.0115, i32* %linfo_idx, align 4
  %inc = add i32 %s.0114, 1
  br label %if.end104

if.else:                                          ; preds = %if.then82
  %cmp99 = icmp ult i32 %i232, %i231
  br i1 %cmp99, label %if.then101, label %if.end104

if.then101:                                       ; preds = %if.else
  %i233 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i233, i8* noundef getelementptr inbounds ([35 x i8], [35 x i8]* @.str.38, i64 0, i64 0), i32 noundef %s.0114) #22
  br label %err_free

if.end104:                                        ; preds = %if.else, %if.then90, %if.end79
  %s.1 = phi i32 [ %inc, %if.then90 ], [ %s.0114, %if.else ], [ %s.0114, %if.end79 ]
  %i234 = load i32, i32* %insn_off52, align 4
  %add.ptr = getelementptr i8, i8* %ulinfo.0111, i64 %conv
  %inc108 = add i32 %i.0115, 1
  %exitcond.not = icmp eq i32 %inc108, %i
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %if.end104
  %i235 = load i32, i32* %subprog_cnt, align 8
  %cmp110.not = icmp eq i32 %i235, %s.1
  br i1 %cmp110.not, label %if.end115, label %if.then112

if.then112:                                       ; preds = %for.end
  %i236 = bitcast %struct.bpf_verifier_env* %env to i8*
  %sub114 = sub i32 %i235, %s.1
  call void (i8*, i8*, ...) @verbose(i8* noundef %i236, i8* noundef getelementptr inbounds ([58 x i8], [58 x i8]* @.str.39, i64 0, i64 0), i32 noundef %sub114, i32 noundef %s.1) #22
  br label %err_free

if.end115:                                        ; preds = %for.end
  %i237 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %linfo117 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i237, i64 0, i32 26
  %i238 = bitcast %struct.ethtool_pauseparam** %linfo117 to i8**
  store i8* %call, i8** %i238, align 8
  %i239 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %nr_linfo119 = getelementptr inbounds %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i239, i64 0, i32 29
  store i32 %i, i32* %nr_linfo119, align 4
  br label %return

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1
  br label %err_free

err_free:                                         ; preds = %NewDefault, %if.then112, %if.then101, %if.then78, %if.then67, %if.then55, %if.end38, %if.then30
  %err.0 = phi i32 [ -22, %if.then55 ], [ -22, %if.then101 ], [ -22, %if.then78 ], [ -22, %if.then67 ], [ -22, %if.then112 ], [ %spec.select, %if.then30 ], [ %call25, %NewDefault ], [ -14, %if.end38 ]
  call void @kvfree(i8* noundef nonnull %call) #23
  br label %return

return:                                           ; preds = %err_free, %if.end115, %if.end8, %if.end, %entry
  %retval.0 = phi i32 [ %err.0, %err_free ], [ 0, %if.end115 ], [ 0, %entry ], [ -22, %if.end ], [ -12, %if.end8 ]
  ret i32 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i32 @bpf_check_uarg_tail_zero(i8* noundef, i64 noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i64 @_copy_from_user(i8* noundef, i8* noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local %struct.btf_type* @btf_type_by_id(%struct.btf* noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @add_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef %off) unnamed_addr #6 {
entry:
  %prog = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 2
  %i = load %struct.bpf_prog*, %struct.bpf_prog** %prog, align 8
  %len = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %i, i64 0, i32 4
  %i12 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %i12, %off
  %cmp1 = icmp slt i32 %off, 0
  %or.cond = or i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i13 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i13, i8* noundef getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25, i64 0, i64 0)) #22
  br label %return

if.end:                                           ; preds = %entry
  %call = call fastcc i32 @find_subprog(%struct.bpf_verifier_env* noundef %env, i32 noundef %off) #22
  %cmp2 = icmp sgt i32 %call, -1
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %subprog_cnt = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 21
  %i14 = load i32, i32* %subprog_cnt, align 8
  %cmp5 = icmp ugt i32 %i14, 255
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  %i15 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i15, i8* noundef getelementptr inbounds ([22 x i8], [22 x i8]* @.str.26, i64 0, i64 0)) #22
  br label %return

if.end7:                                          ; preds = %if.end4
  %inc = add i32 %i14, 1
  store i32 %inc, i32* %subprog_cnt, align 8
  %idxprom = zext i32 %i14 to i64
  %start = getelementptr %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 %idxprom, i32 0
  store i32 %off, i32* %start, align 4
  %arraydecay = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 19, i64 0
  %i16 = bitcast %struct.bpf_subprog_info* %arraydecay to i8*
  %i17 = load i32, i32* %subprog_cnt, align 8
  %conv = zext i32 %i17 to i64
  call void @sort(i8* noundef %i16, i64 noundef %conv, i64 noundef 12, i32 (i8*, i8*)* noundef nonnull @cmp_subprogs, void (i8*, i8*, i32)* noundef null) #23
  br label %return

return:                                           ; preds = %if.end7, %if.then6, %if.end, %if.then
  %retval.0 = phi i32 [ -22, %if.then ], [ -7, %if.then6 ], [ 0, %if.end7 ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @sort(i8* noundef, i64 noundef, i64 noundef, i32 (i8*, i8*)* noundef, void (i8*, i8*, i32)* noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i8* @kvmalloc_array(i64 noundef %n, i64 noundef %size, i32 noundef %flags) unnamed_addr #6 {
entry:
  %i = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %n, i64 %size)
  %i2 = extractvalue { i64, i1 } %i, 1
  br i1 %i2, label %return, label %if.end

if.end:                                           ; preds = %entry
  %i3 = extractvalue { i64, i1 } %i, 0
  %call = call fastcc i8* @kvmalloc(i64 noundef %i3, i32 noundef %flags) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %call, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i8* @kvmalloc(i64 noundef %size, i32 noundef %flags) unnamed_addr #6 {
entry:
  %call = call i8* @kvmalloc_node(i64 noundef %size, i32 noundef %flags, i32 noundef -1) #23
  ret i8* %call
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i8* @kvmalloc_node(i64 noundef, i32 noundef, i32 noundef) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc { %struct.file*, i32 } @fdget(i32 noundef %fd) unnamed_addr #6 {
entry:
  %call = call i64 @__fdget(i32 noundef %fd) #23
  %call1 = call fastcc { %struct.file*, i32 } @__to_fd(i64 noundef %call) #22
  ret { %struct.file*, i32 } %call1
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local %struct.bpf_map* @__bpf_map_get(%struct.file*, i32) local_unnamed_addr #9

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc i32 @check_map_prog_compatibility(%struct.bpf_verifier_env* noundef %env, %struct.bpf_map* noundef %map, %struct.bpf_prog* noundef %prog) unnamed_addr #6 {
entry:
  %type = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %prog, i64 0, i32 2
  %i = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %i, 7
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %call = call fastcc i32 @check_map_prealloc(%struct.bpf_map* noundef %map) #22
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %return.sink.split, label %if.end

if.end:                                           ; preds = %if.then
  %inner_map_meta = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %map, i64 0, i32 1
  %i14 = load %struct.bpf_map*, %struct.bpf_map** %inner_map_meta, align 8
  %tobool2.not = icmp eq %struct.bpf_map* %i14, null
  br i1 %tobool2.not, label %if.end8, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %call4 = call fastcc i32 @check_map_prealloc(%struct.bpf_map* noundef nonnull %i14) #22
  %tobool5.not = icmp eq i32 %call4, 0
  br i1 %tobool5.not, label %return.sink.split, label %if.end8

if.end8:                                          ; preds = %land.lhs.true, %if.end, %entry
  %call10 = call fastcc zeroext i1 @is_tracing_prog_type(i32 noundef %i) #22
  %cmp12 = icmp eq i32 %i, 1
  %or.cond = select i1 %call10, i1 true, i1 %cmp12
  br i1 %or.cond, label %land.lhs.true13, label %if.end16

land.lhs.true13:                                  ; preds = %if.end8
  %map.idx = getelementptr %struct.bpf_map, %struct.bpf_map* %map, i64 0, i32 8
  %map.idx.val = load i32, i32* %map.idx, align 4
  %call14 = call fastcc zeroext i1 @map_value_has_spin_lock(i32 %map.idx.val) #22
  br i1 %call14, label %return.sink.split, label %if.end16

if.end16:                                         ; preds = %land.lhs.true13, %if.end8
  %aux = getelementptr inbounds %struct.bpf_prog, %struct.bpf_prog* %prog, i64 0, i32 7
  %i15 = load %struct.bpf_prog_aux*, %struct.bpf_prog_aux** %aux, align 8
  %i15.idx = getelementptr %struct.bpf_prog_aux, %struct.bpf_prog_aux* %i15, i64 0, i32 10
  %i15.idx.val = load i8, i8* %i15.idx, align 1
  %call17 = call fastcc zeroext i1 @bpf_prog_is_dev_bound(i8 %i15.idx.val) #22
  br i1 %call17, label %land.lhs.true20, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %if.end16
  %map.idx1 = getelementptr %struct.bpf_map, %struct.bpf_map* %map, i64 0, i32 0
  %map.idx1.val = load %struct.bpf_map_ops*, %struct.bpf_map_ops** %map.idx1, align 64
  %call19 = call fastcc zeroext i1 @bpf_map_is_dev_bound(%struct.bpf_map_ops* %map.idx1.val) #22
  br i1 %call19, label %land.lhs.true20, label %return

land.lhs.true20:                                  ; preds = %lor.lhs.false18, %if.end16
  %call21 = call zeroext i1 @bpf_offload_prog_map_match(%struct.bpf_prog* noundef %prog, %struct.bpf_map* noundef %map) #23
  br i1 %call21, label %return, label %return.sink.split

return.sink.split:                                ; preds = %land.lhs.true20, %land.lhs.true13, %land.lhs.true, %if.then
  %.sink13 = phi i8* [ getelementptr inbounds ([56 x i8], [56 x i8]* @.str.17, i64 0, i64 0), %if.then ], [ getelementptr inbounds ([62 x i8], [62 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ], [ getelementptr inbounds ([44 x i8], [44 x i8]* @.str.19, i64 0, i64 0), %land.lhs.true13 ], [ getelementptr inbounds ([46 x i8], [46 x i8]* @.str.20, i64 0, i64 0), %land.lhs.true20 ]
  %i16 = bitcast %struct.bpf_verifier_env* %env to i8*
  call void (i8*, i8*, ...) @verbose(i8* noundef %i16, i8* noundef %.sink13) #22
  br label %return

return:                                           ; preds = %return.sink.split, %land.lhs.true20, %lor.lhs.false18
  %retval.0 = phi i32 [ 0, %land.lhs.true20 ], [ 0, %lor.lhs.false18 ], [ -22, %return.sink.split ]
  ret i32 %retval.0
}

; Function Attrs: noinline noredzone nounwind null_pointer_is_valid sspstrong
define internal fastcc void @fdput(%struct.file* %fd.coerce0, i32 %fd.coerce1) unnamed_addr #6 {
entry:
  %and = and i32 %fd.coerce1, 1
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fput(%struct.file* noundef %fd.coerce0) #23
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local %struct.bpf_map* @bpf_map_inc(%struct.bpf_map* noundef, i1 noundef zeroext) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local zeroext i1 @bpf_opcode_in_insntable(i8 noundef zeroext) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local void @fput(%struct.file* noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc i32 @check_map_prealloc(%struct.bpf_map* nocapture noundef readonly %map) unnamed_addr #7 {
entry:
  %map_type = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %map, i64 0, i32 3
  %i = load i32, i32* %map_type, align 8
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %entry
  %Pivot6 = icmp slt i32 %i, 5
  br i1 %Pivot6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %i, 13
  br i1 %Pivot, label %LeafBlock1, label %LeafBlock3

LeafBlock3:                                       ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %i, 13
  br i1 %SwitchLeaf4, label %lor.rhs, label %NewDefault

LeafBlock1:                                       ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %i, 5
  br i1 %SwitchLeaf2, label %lor.rhs, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock5
  %SwitchLeaf = icmp eq i32 %i, 1
  br i1 %SwitchLeaf, label %lor.rhs, label %NewDefault

lor.rhs:                                          ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3
  %map_flags = getelementptr inbounds %struct.bpf_map, %struct.bpf_map* %map, i64 0, i32 7
  %i4 = load i32, i32* %map_flags, align 8
  %and = and i32 %i4, 1
  %i5 = xor i32 %and, 1
  br label %lor.end

NewDefault:                                       ; preds = %LeafBlock, %LeafBlock1, %LeafBlock3
  br label %lor.end

lor.end:                                          ; preds = %NewDefault, %lor.rhs
  %i6 = phi i32 [ %i5, %lor.rhs ], [ 1, %NewDefault ]
  ret i32 %i6
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc zeroext i1 @is_tracing_prog_type(i32 noundef %type) unnamed_addr #2 {
entry:
  %switch.tableidx = add i32 %type, -2
  %i = icmp ult i32 %switch.tableidx, 16
  %switch.cast = trunc i32 %switch.tableidx to i16
  %switch.downshift = lshr i16 -32727, %switch.cast
  %i1 = and i16 %switch.downshift, 1
  %switch.masked = icmp ne i16 %i1, 0
  %retval.0 = select i1 %i, i1 %switch.masked, i1 false
  ret i1 %retval.0
}

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @bpf_map_is_dev_bound(%struct.bpf_map_ops* %map.0.0.val) unnamed_addr #7 {
entry:
  %cmp = icmp eq %struct.bpf_map_ops* %map.0.0.val, @bpf_map_offload_ops
  ret i1 %cmp
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local zeroext i1 @bpf_offload_prog_map_match(%struct.bpf_prog* noundef, %struct.bpf_map* noundef) local_unnamed_addr #9

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i64 @__fdget(i32 noundef) local_unnamed_addr #9

; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn
define internal fastcc { %struct.file*, i32 } @__to_fd(i64 noundef %v) unnamed_addr #2 {
entry:
  %and = and i64 %v, -4
  %i = inttoptr i64 %and to %struct.file*
  %i2 = trunc i64 %v to i32
  %conv = and i32 %i2, 3
  %.fca.0.insert = insertvalue { %struct.file*, i32 } poison, %struct.file* %i, 0
  %.fca.1.insert = insertvalue { %struct.file*, i32 } %.fca.0.insert, i32 %conv, 1
  ret { %struct.file*, i32 } %.fca.1.insert
}

; Function Attrs: noredzone null_pointer_is_valid
declare dso_local i64 @ktime_get() local_unnamed_addr #9

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #16

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctpop.i64(i64) #16

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #20

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i8 @llvm.fshl.i8(i8, i8, i8) #16

define i32 @spirv.llvm_fshl_i32(i32 %0, i32 %1, i32 %2) #21 {
rotate:
  %3 = urem i32 %2, 32
  %4 = shl i32 %0, %3
  %5 = sub i32 32, %3
  %6 = lshr i32 %1, %5
  %7 = or i32 %4, %6
  ret i32 %7
}

define i8 @spirv.llvm_fshl_i8(i8 %0, i8 %1, i8 %2) #21 {
rotate:
  %3 = urem i8 %2, 8
  %4 = shl i8 %0, %3
  %5 = sub i8 8, %3
  %6 = lshr i8 %1, %5
  %7 = or i8 %4, %6
  ret i8 %7
}

attributes #0 = { nofree noinline noredzone nounwind null_pointer_is_valid sspstrong "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #1 = { nofree noredzone nounwind null_pointer_is_valid "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" }
attributes #2 = { mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #3 = { argmemonly nofree nounwind willreturn }
attributes #4 = { nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readnone sspstrong "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #5 = { nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong writeonly "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #6 = { noinline noredzone nounwind null_pointer_is_valid sspstrong "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #7 = { mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #8 = { nofree nosync nounwind willreturn }
attributes #9 = { noredzone null_pointer_is_valid "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" }
attributes #10 = { mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #11 = { nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #12 = { mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #13 = { mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn writeonly "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #14 = { mustprogress nofree noinline noredzone nosync nounwind null_pointer_is_valid readnone sspstrong willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #15 = { nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #16 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #17 = { argmemonly nofree nounwind willreturn writeonly }
attributes #18 = { nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #19 = { mustprogress nofree noinline noredzone nounwind null_pointer_is_valid readonly sspstrong willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+retpoline-external-thunk,+retpoline-indirect-branches,+retpoline-indirect-calls,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512fp16,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-avxvnni,-f16c,-fma,-fma4,-gfni,-kl,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-widekl,-x87,-xop" "tune-cpu"="generic" "warn-stack-size"="2048" }
attributes #20 = { argmemonly mustprogress nofree nounwind readonly willreturn }
attributes #21 = { "optnone" }
attributes #22 = { noredzone }
attributes #23 = { noredzone nounwind }
attributes #24 = { nounwind }
attributes #25 = { noredzone nounwind readnone willreturn }
attributes #26 = { nounwind readnone }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2, !3, !4}

!0 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!1 = !{i32 1, !"wchar_size", i32 2}
!2 = !{i32 1, !"Code Model", i32 2}
!3 = !{i32 1, !"override-stack-alignment", i32 8}
!4 = !{i32 4, !"SkipRaxSetup", i32 1}
!5 = !{i64 2155315937, i64 2155315966, i64 2155316012, i64 2155316070, i64 2155316124, i64 2155316178, i64 2155316233, i64 2155316264}
!6 = !{i64 2155316687, i64 2155316694, i64 2155316746, i64 2155316777, i64 2155316807}
!7 = !{i64 0, i64 65}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = !{i64 2148494839}
!11 = !{i64 2155374490, i64 2155374519, i64 2155374565, i64 2155374623, i64 2155374677, i64 2155374731, i64 2155374786, i64 2155374817}
!12 = !{i64 2155375241, i64 2155375248, i64 2155375300, i64 2155375331, i64 2155375361}
!13 = !{i64 0, i64 18446744073709552}
!14 = !{i64 2155469919, i64 2155469948, i64 2155469994, i64 2155470052, i64 2155470106, i64 2155470160, i64 2155470215, i64 2155470246}
!15 = !{i64 2155470671, i64 2155470678, i64 2155470730, i64 2155470761, i64 2155470791}
!16 = !{i32 56, i32 49}
!17 = !{i64 2155380605, i64 2155380634, i64 2155380680, i64 2155380738, i64 2155380792, i64 2155380846, i64 2155380901, i64 2155380932}
!18 = !{i64 2155381356, i64 2155381363, i64 2155381415, i64 2155381446, i64 2155381476}
!19 = distinct !{!19, !9}
!20 = !{i64 2155321545, i64 2155321574, i64 2155321620, i64 2155321678, i64 2155321732, i64 2155321786, i64 2155321841, i64 2155321872}
!21 = !{i64 2155322295, i64 2155322302, i64 2155322354, i64 2155322385, i64 2155322415}
!22 = !{i64 2155323538, i64 2155323567, i64 2155323613, i64 2155323671, i64 2155323725, i64 2155323779, i64 2155323834, i64 2155323865}
!23 = !{i64 2155324288, i64 2155324295, i64 2155324347, i64 2155324378, i64 2155324408}
!24 = !{i64 2155458111, i64 2155458140, i64 2155458186, i64 2155458244, i64 2155458298, i64 2155458352, i64 2155458407, i64 2155458438}
!25 = !{i64 2155458862, i64 2155458869, i64 2155458921, i64 2155458952, i64 2155458982}
!26 = !{i64 2155460426, i64 2155460455, i64 2155460501, i64 2155460559, i64 2155460613, i64 2155460667, i64 2155460722, i64 2155460753}
!27 = !{i64 2155461177, i64 2155461184, i64 2155461236, i64 2155461267, i64 2155461297}
!28 = !{i64 2155329178, i64 2155329207, i64 2155329253, i64 2155329311, i64 2155329365, i64 2155329419, i64 2155329474, i64 2155329505}
!29 = !{i64 2155329928, i64 2155329935, i64 2155329987, i64 2155330018, i64 2155330048}
!30 = !{i64 2155330856, i64 2155330885, i64 2155330931, i64 2155330989, i64 2155331043, i64 2155331097, i64 2155331152, i64 2155331183}
!31 = !{i64 2155331595, i64 2155331602, i64 2155331654, i64 2155331685, i64 2155331715}
!32 = !{i64 2155354133, i64 2155354162, i64 2155354208, i64 2155354266, i64 2155354320, i64 2155354374, i64 2155354429, i64 2155354460}
!33 = !{i64 2155354873, i64 2155354880, i64 2155354932, i64 2155354963, i64 2155354993}
!34 = !{i64 2155352747, i64 2155352776, i64 2155352822, i64 2155352880, i64 2155352934, i64 2155352988, i64 2155353043, i64 2155353074}
!35 = !{i64 2155353487, i64 2155353494, i64 2155353546, i64 2155353577, i64 2155353607}
!36 = !{i64 2155433665, i64 2155433694, i64 2155433740, i64 2155433798, i64 2155433852, i64 2155433906, i64 2155433961, i64 2155433992}
!37 = !{i64 2155434416, i64 2155434423, i64 2155434475, i64 2155434506, i64 2155434536}
!38 = !{i64 2155431648, i64 2155431677, i64 2155431723, i64 2155431781, i64 2155431835, i64 2155431889, i64 2155431944, i64 2155431975}
!39 = !{i64 2155432399, i64 2155432406, i64 2155432458, i64 2155432489, i64 2155432519}
!40 = !{i64 2155363030, i64 2155363059, i64 2155363105, i64 2155363163, i64 2155363217, i64 2155363271, i64 2155363326, i64 2155363357}
!41 = !{i64 2155363781, i64 2155363788, i64 2155363840, i64 2155363871, i64 2155363901}
!42 = !{i64 2155365244, i64 2155365273, i64 2155365319, i64 2155365377, i64 2155365431, i64 2155365485, i64 2155365540, i64 2155365571}
!43 = !{i64 2155365995, i64 2155366002, i64 2155366054, i64 2155366085, i64 2155366115}
!44 = !{i64 2155357069, i64 2155357098, i64 2155357144, i64 2155357202, i64 2155357256, i64 2155357310, i64 2155357365, i64 2155357396}
!45 = !{i64 2155357820, i64 2155357827, i64 2155357879, i64 2155357910, i64 2155357940}
!46 = !{i64 2155359080, i64 2155359109, i64 2155359155, i64 2155359213, i64 2155359267, i64 2155359321, i64 2155359376, i64 2155359407}
!47 = !{i64 2155359831, i64 2155359838, i64 2155359890, i64 2155359921, i64 2155359951}
!48 = !{i64 2155361058, i64 2155361087, i64 2155361133, i64 2155361191, i64 2155361245, i64 2155361299, i64 2155361354, i64 2155361385}
!49 = !{i64 2155361809, i64 2155361816, i64 2155361868, i64 2155361899, i64 2155361929}
!50 = !{i32 -22, i32 9}
!51 = !{i64 2155392751, i64 2155392780, i64 2155392826, i64 2155392884, i64 2155392938, i64 2155392992, i64 2155393047, i64 2155393078}
!52 = !{i64 2155393502, i64 2155393509, i64 2155393561, i64 2155393592, i64 2155393622}
!53 = !{i64 2155394112, i64 2155394141, i64 2155394187, i64 2155394245, i64 2155394299, i64 2155394353, i64 2155394408, i64 2155394439}
!54 = !{i64 2155394852, i64 2155394859, i64 2155394911, i64 2155394942, i64 2155394972}
!55 = !{i64 2148055220, i64 2148055240}
!56 = !{i64 2155455320, i64 2155455349, i64 2155455395, i64 2155455453, i64 2155455507, i64 2155455561, i64 2155455616, i64 2155455647}
!57 = !{i64 2155456071, i64 2155456078, i64 2155456130, i64 2155456161, i64 2155456191}
!58 = !{i64 2155451659, i64 2155451688, i64 2155451734, i64 2155451792, i64 2155451846, i64 2155451900, i64 2155451955, i64 2155451986}
!59 = !{i64 2155452410, i64 2155452417, i64 2155452469, i64 2155452500, i64 2155452530}
!60 = !{i64 2155446140}
!61 = !{i64 2155450511}
