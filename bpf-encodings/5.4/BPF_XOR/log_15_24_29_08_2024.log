Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR BPF_XOR.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_XOR
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_XOR
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0xc2fdb0
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_XOR'<<0xc2fdb0>>  #uses=1
  CS<0x8e2b80> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR BPF_XOR.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_XOR
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_XOR'<<0x260ab70>>  #uses=1
  CS<0x232ebd0> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_XOR
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_XOR
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR BPF_XOR.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_XOR
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i291.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i291.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy1 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy1, %struct.tnum* %var_off.i291.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_XOR:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i292.i = bitcast %struct.tnum* %var_off.i291.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_XOR
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_XOR
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_XOR'<<0x23804c0>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_XOR
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_XOR
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_XOR -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_XOR
GLOBAL_BITVECTOR_SUFFIX: 10
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_0
[lookInsideStruct] singleValueType:dst_reg_10_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_1
[lookInsideStruct] singleValueType:dst_reg_10_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_2
[lookInsideStruct] singleValueType:dst_reg_10_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_3
[lookInsideStruct] singleValueType:dst_reg_10_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_4
[lookInsideStruct] singleValueType:dst_reg_10_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_5
[lookInsideStruct] singleValueType:dst_reg_10_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_6
[lookInsideStruct] singleValueType:dst_reg_10_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_7
[lookInsideStruct] singleValueType:dst_reg_10_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_8
[lookInsideStruct] singleValueType:dst_reg_10_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_9
[lookInsideStruct] singleValueType:dst_reg_10_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_10
[lookInsideStruct] singleValueType:dst_reg_10_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_11
[lookInsideStruct] singleValueType:dst_reg_10_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_12
[lookInsideStruct] singleValueType:dst_reg_10_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_13
[lookInsideStruct] singleValueType:dst_reg_10_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_14
[lookInsideStruct] singleValueType:src_reg_10_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_15
[lookInsideStruct] singleValueType:src_reg_10_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_16
[lookInsideStruct] singleValueType:src_reg_10_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_17
[lookInsideStruct] singleValueType:src_reg_10_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_18
[lookInsideStruct] singleValueType:src_reg_10_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_19
[lookInsideStruct] singleValueType:src_reg_10_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_20
[lookInsideStruct] singleValueType:src_reg_10_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_21
[lookInsideStruct] singleValueType:src_reg_10_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_22
[lookInsideStruct] singleValueType:src_reg_10_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_23
[lookInsideStruct] singleValueType:src_reg_10_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_24
[lookInsideStruct] singleValueType:src_reg_10_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_25
[lookInsideStruct] singleValueType:src_reg_10_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_26
[lookInsideStruct] singleValueType:src_reg_10_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_27
[lookInsideStruct] singleValueType:src_reg_10_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_10_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.13.0.copyload_10_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_10_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleLoadInst] (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)

-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.15.0.copyload_10_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_10_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleLoadInst] (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_10_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_10_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleLoadInst] (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_10_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_10_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleLoadInst] (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_10_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_10_34
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleLoadInst] (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)

-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_10_34
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_10_36
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_10_36
[handleICmpInst] (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_10_30
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_10_31
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.not.i_10_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.not.i_10_37
[handleICmpInst] (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_10_32
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_10_33
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i_10_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i_10_38
[handleICmpInst] (ite (distinct src_reg1.sroa.17.0.copyload_10_32
               src_reg1.sroa.22.0.copyload_10_33)
     (= cmp18.not.i_10_38 #b1)
     (= cmp18.not.i_10_38 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:2
  (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_10_32
               src_reg1.sroa.22.0.copyload_10_33)
     (= cmp18.not.i_10_38 #b1)
     (= cmp18.not.i_10_38 #b0))
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 

[handleSelectInst]SelectMap:
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.not.i_10_37
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i_10_38
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond197.i_10_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond197.i_10_40
[handleSelectInst] z3ExprSelectOp1: cmp16.not.i_10_37
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp18.not.i_10_38
[handleSelectInst] z3ExprRes: or.cond197.i_10_40
[handleSelectInst](ite (= cmp16.not.i_10_37 #b1)
     (= or.cond197.i_10_40 #b1)
     (= or.cond197.i_10_40 cmp18.not.i_10_38))
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_10_30
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_10_31
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.i_10_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.i_10_41
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.i_10_41 #b1)
     (= cmp21.i_10_41 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:4
  (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_10_32
               src_reg1.sroa.22.0.copyload_10_33)
     (= cmp18.not.i_10_38 #b1)
     (= cmp18.not.i_10_38 #b0))
  (ite (= cmp16.not.i_10_37 #b1)
     (= or.cond197.i_10_40 #b1)
     (= or.cond197.i_10_40 cmp18.not.i_10_38))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.i_10_41 #b1)
     (= cmp21.i_10_41 #b0))
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[handleBinaryOperatorInst] op1Val:   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[handleBinaryOperatorInst] opResVal:   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.i_10_41
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond197.i_10_40
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond198.i_10_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond198.i_10_42
[handleBinaryOperatorInst] OR instruction
(= or.cond198.i_10_42 (bvor cmp21.i_10_41 or.cond197.i_10_40))
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_10_32
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_10_33
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.i_10_43
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.i_10_43
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.i_10_43 #b1)
     (= cmp24.i_10_43 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:6
  (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_10_32
               src_reg1.sroa.22.0.copyload_10_33)
     (= cmp18.not.i_10_38 #b1)
     (= cmp18.not.i_10_38 #b0))
  (ite (= cmp16.not.i_10_37 #b1)
     (= or.cond197.i_10_40 #b1)
     (= or.cond197.i_10_40 cmp18.not.i_10_38))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.i_10_41 #b1)
     (= cmp21.i_10_41 #b0))
  (= or.cond198.i_10_42 (bvor cmp21.i_10_41 or.cond197.i_10_40))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.i_10_43 #b1)
     (= cmp24.i_10_43 #b0))
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 

[handleSelectInst]SelectMap:
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond198.i_10_42
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.i_10_43
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond199.i_10_45
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond199.i_10_45
[handleSelectInst] z3ExprSelectOp1: or.cond198.i_10_42
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.i_10_43
[handleSelectInst] z3ExprRes: or.cond199.i_10_45
[handleSelectInst](ite (= or.cond198.i_10_42 #b1)
     (= or.cond199.i_10_45 #b1)
     (= or.cond199.i_10_45 cmp24.i_10_43))
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_10_30
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_10_31
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.old.i_10_46
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.old.i_10_46
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.old.i_10_46 #b1)
     (= cmp21.old.i_10_46 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.old.i_10_46 #b1)
     (= cmp21.old.i_10_46 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_10_32
               src_reg1.sroa.22.0.copyload_10_33)
     (= cmp18.not.i_10_38 #b1)
     (= cmp18.not.i_10_38 #b0))
  (ite (= cmp16.not.i_10_37 #b1)
     (= or.cond197.i_10_40 #b1)
     (= or.cond197.i_10_40 cmp18.not.i_10_38))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.i_10_41 #b1)
     (= cmp21.i_10_41 #b0))
  (= or.cond198.i_10_42 (bvor cmp21.i_10_41 or.cond197.i_10_40))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.i_10_43 #b1)
     (= cmp24.i_10_43 #b0))
  (ite (= or.cond198.i_10_42 #b1)
     (= or.cond199.i_10_45 #b1)
     (= or.cond199.i_10_45 cmp24.i_10_43))
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_10_32
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_10_33
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_10_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_10_47
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.old.i_10_47 #b1)
     (= cmp24.old.i_10_47 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:2
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.old.i_10_46 #b1)
     (= cmp21.old.i_10_46 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.old.i_10_47 #b1)
     (= cmp24.old.i_10_47 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_10_32
               src_reg1.sroa.22.0.copyload_10_33)
     (= cmp18.not.i_10_38 #b1)
     (= cmp18.not.i_10_38 #b0))
  (ite (= cmp16.not.i_10_37 #b1)
     (= or.cond197.i_10_40 #b1)
     (= or.cond197.i_10_40 cmp18.not.i_10_38))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.i_10_41 #b1)
     (= cmp21.i_10_41 #b0))
  (= or.cond198.i_10_42 (bvor cmp21.i_10_41 or.cond197.i_10_40))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.i_10_43 #b1)
     (= cmp24.i_10_43 #b0))
  (ite (= or.cond198.i_10_42 #b1)
     (= or.cond199.i_10_45 #b1)
     (= or.cond199.i_10_45 cmp24.i_10_43))
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 

[handleSelectInst]SelectMap:
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.old.i_10_46
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_10_47
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond200.i_10_49
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond200.i_10_49
[handleSelectInst] z3ExprSelectOp1: cmp21.old.i_10_46
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.old.i_10_47
[handleSelectInst] z3ExprRes: or.cond200.i_10_49
[handleSelectInst](ite (= cmp21.old.i_10_46 #b1)
     (= or.cond200.i_10_49 #b1)
     (= or.cond200.i_10_49 cmp24.old.i_10_47))
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i.i.repack2, dst_reg, [5, 1]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
var_off.i.i.repack2, dst_reg, [5, 1]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
frameno.i.i, dst_reg, [11]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] definingMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
var_off.i.i.repack2, dst_reg, [5, 1]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i.i, dst_reg, [6]
var_off.i.i.repack, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
frameno.i.i, dst_reg, [11]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] definingMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 0, i64* %var_off.i291.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}

-------------------
  %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 -1, i64* %var_off.i291.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  br i1 %tobool.not.i.i, label %sw.default.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then41.i
=========================
-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] definingMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umax_value.i.i34.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(17)
[handleStoreInst] definingMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
sw.default.i
=========================
-------------------
  %smin_value.i.i293.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i293.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i.i293.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umax_value.i.i34.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i293.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i293.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i293.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  %smax_value.i.i294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i294.i, dst_reg, [7]
smin_value.i.i293.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umax_value.i.i34.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i294.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
20 = MemoryDef(19) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  %umin_value.i.i295.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i295.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value.i.i294.i, dst_reg, [7]
smin_value.i.i293.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umax_value.i.i34.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i295.i, dst_reg, [8]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 0, i64* %umin_value.i.i295.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i295.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i295.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
19 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
20 = MemoryDef(19) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  %umax_value.i.i296.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i296.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
smax_value.i.i294.i, dst_reg, [7]
smin_value.i.i293.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i296.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umax_value.i.i34.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i295.i, dst_reg, [8]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
-------------------
  store i64 -1, i64* %umax_value.i.i296.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i296.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i296.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_10_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
21 = MemoryDef(20) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
19 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
20 = MemoryDef(19) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 12 = MemoryDef(11)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i.i294.i, dst_reg, [7]
smin_value.i.i293.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i296.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umax_value.i.i34.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i295.i, dst_reg, [8]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i9.i.i_10_70
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i9.i.i_10_70
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleLoadInst] (= #x0000000000000000 i9.i.i_10_70)
[printBBAssertionsMap] 
BasicBlock: sw.default.i, Size:1
  (= #x0000000000000000 i9.i.i_10_70)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.old.i_10_46 #b1)
     (= cmp21.old.i_10_46 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.old.i_10_47 #b1)
     (= cmp24.old.i_10_47 #b0))
  (ite (= cmp21.old.i_10_46 #b1)
     (= or.cond200.i_10_49 #b1)
     (= or.cond200.i_10_49 cmp24.old.i_10_47))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_10_32
               src_reg1.sroa.22.0.copyload_10_33)
     (= cmp18.not.i_10_38 #b1)
     (= cmp18.not.i_10_38 #b0))
  (ite (= cmp16.not.i_10_37 #b1)
     (= or.cond197.i_10_40 #b1)
     (= or.cond197.i_10_40 cmp18.not.i_10_38))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.i_10_41 #b1)
     (= cmp21.i_10_41 #b0))
  (= or.cond198.i_10_42 (bvor cmp21.i_10_41 or.cond197.i_10_40))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.i_10_43 #b1)
     (= cmp24.i_10_43 #b0))
  (ite (= or.cond198.i_10_42 #b1)
     (= or.cond199.i_10_45 #b1)
     (= or.cond199.i_10_45 cmp24.i_10_43))
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 13 = MemoryDef(12)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i.i294.i, dst_reg, [7]
smin_value.i.i293.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i291.i.repack1, dst_reg, [5, 1]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i296.i, dst_reg, [9]
smax_value.i.i.i, dst_reg, [7]
smin_value.i.i31.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
type, dst_reg, [0]
var_off.i291.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
frameno.i.i, dst_reg, [11]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umax_value.i.i34.i, dst_reg, [9]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
umin_value.i.i295.i, dst_reg, [8]
i214.i, dst_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
var_off.i.i.repack, dst_reg, [5, 0]
i213.i, dst_reg, [5, 0]
var_off.i.i.repack2, dst_reg, [5, 1]
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i11.i.i_10_71
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i11.i.i_10_71
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleLoadInst] (= #xffffffffffffffff i11.i.i_10_71)
[printBBAssertionsMap] 
BasicBlock: sw.default.i, Size:2
  (= #x0000000000000000 i9.i.i_10_70)
  (= #xffffffffffffffff i11.i.i_10_71)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.old.i_10_46 #b1)
     (= cmp21.old.i_10_46 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.old.i_10_47 #b1)
     (= cmp24.old.i_10_47 #b0))
  (ite (= cmp21.old.i_10_46 #b1)
     (= or.cond200.i_10_49 #b1)
     (= or.cond200.i_10_49 cmp24.old.i_10_47))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_10_32
               src_reg1.sroa.22.0.copyload_10_33)
     (= cmp18.not.i_10_38 #b1)
     (= cmp18.not.i_10_38 #b0))
  (ite (= cmp16.not.i_10_37 #b1)
     (= or.cond197.i_10_40 #b1)
     (= or.cond197.i_10_40 cmp18.not.i_10_38))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.i_10_41 #b1)
     (= cmp21.i_10_41 #b0))
  (= or.cond198.i_10_42 (bvor cmp21.i_10_41 or.cond197.i_10_40))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.i_10_43 #b1)
     (= cmp24.i_10_43 #b0))
  (ite (= or.cond198.i_10_42 #b1)
     (= or.cond199.i_10_45 #b1)
     (= or.cond199.i_10_45 cmp24.i_10_43))
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

-------------------
  %neg.i.i.i = xor i64 %i11.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %i11.i.i, -1
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i11.i.i_10_71
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %i11.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_10_73
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_10_73
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_10_73 (bvxor i11.i.i_10_71 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %i9.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %i11.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %i9.i.i, %neg.i.i.i
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i9.i.i_10_70
[getBitVecSingValType]   %neg.i.i.i = xor i64 %i11.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_10_73
[getBitVecSingValType]   %and4.i.i.i = and i64 %i9.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_10_74
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_10_74
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_10_74 (bvand i9.i.i_10_70 neg.i.i.i_10_73))
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %i9.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_10_74
[handleStoreInst] BVToStore: and4.i.i.i_10_74
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_10_74 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
23 = MemoryDef(22) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
22 = MemoryDef(21) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
21 = MemoryDef(20) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
19 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
20 = MemoryDef(19) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  store i64 %i11.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i11.i.i_10_71
[handleStoreInst] BVToStore: i11.i.i_10_71
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i11.i.i_10_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
23 = MemoryDef(22) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
22 = MemoryDef(21) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
21 = MemoryDef(20) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
19 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
20 = MemoryDef(19) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ i11.i.i_10_71 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_75
[lookInsideStruct] singleValueType:dst_reg_10_75
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_76
[lookInsideStruct] singleValueType:dst_reg_10_76
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_77
[lookInsideStruct] singleValueType:dst_reg_10_77
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_78
[lookInsideStruct] singleValueType:dst_reg_10_78
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_79
[lookInsideStruct] singleValueType:dst_reg_10_79
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_80
[lookInsideStruct] singleValueType:dst_reg_10_80
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_81
[lookInsideStruct] singleValueType:dst_reg_10_81
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_82
[lookInsideStruct] singleValueType:dst_reg_10_82
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_83
[lookInsideStruct] singleValueType:dst_reg_10_83
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_84
[lookInsideStruct] singleValueType:dst_reg_10_84
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_85
[lookInsideStruct] singleValueType:dst_reg_10_85
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_86
[lookInsideStruct] singleValueType:dst_reg_10_86
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_87
[lookInsideStruct] singleValueType:dst_reg_10_87
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_88
[lookInsideStruct] singleValueType:dst_reg_10_88
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_10_75 ] [ ] [ dst_reg_10_76 ] [ dst_reg_10_77 ] [ dst_reg_10_78 ] [ [ dst_reg_10_79 ] [ dst_reg_10_80 ] ] [ dst_reg_10_81 ] [ dst_reg_10_82 ] [ dst_reg_10_83 ] [ dst_reg_10_84 ] [ ] [ dst_reg_10_85 ] [ dst_reg_10_86 ] [ dst_reg_10_87 ] [ dst_reg_10_88 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_89
[lookInsideStruct] singleValueType:src_reg_10_89
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_90
[lookInsideStruct] singleValueType:src_reg_10_90
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_91
[lookInsideStruct] singleValueType:src_reg_10_91
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_92
[lookInsideStruct] singleValueType:src_reg_10_92
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_93
[lookInsideStruct] singleValueType:src_reg_10_93
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_94
[lookInsideStruct] singleValueType:src_reg_10_94
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_95
[lookInsideStruct] singleValueType:src_reg_10_95
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_96
[lookInsideStruct] singleValueType:src_reg_10_96
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_97
[lookInsideStruct] singleValueType:src_reg_10_97
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_98
[lookInsideStruct] singleValueType:src_reg_10_98
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_99
[lookInsideStruct] singleValueType:src_reg_10_99
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_100
[lookInsideStruct] singleValueType:src_reg_10_100
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_101
[lookInsideStruct] singleValueType:src_reg_10_101
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_102
[lookInsideStruct] singleValueType:src_reg_10_102
[setupBVTreeForArg] returning BVTree: [ [ src_reg_10_89 ] [ ] [ src_reg_10_90 ] [ src_reg_10_91 ] [ src_reg_10_92 ] [ [ src_reg_10_93 ] [ src_reg_10_94 ] ] [ src_reg_10_95 ] [ src_reg_10_96 ] [ src_reg_10_97 ] [ src_reg_10_98 ] [ ] [ src_reg_10_99 ] [ src_reg_10_100 ] [ src_reg_10_101 ] [ src_reg_10_102 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_10_89 ] [ ] [ src_reg_10_90 ] [ src_reg_10_91 ] [ src_reg_10_92 ] [ [ src_reg_10_93 ] [ src_reg_10_94 ] ] [ src_reg_10_95 ] [ src_reg_10_96 ] [ src_reg_10_97 ] [ src_reg_10_98 ] [ ] [ src_reg_10_99 ] [ src_reg_10_100 ] [ src_reg_10_101 ] [ src_reg_10_102 ] ] 
- dst_reg: [ [ dst_reg_10_75 ] [ ] [ dst_reg_10_76 ] [ dst_reg_10_77 ] [ dst_reg_10_78 ] [ [ dst_reg_10_79 ] [ dst_reg_10_80 ] ] [ dst_reg_10_81 ] [ dst_reg_10_82 ] [ dst_reg_10_83 ] [ dst_reg_10_84 ] [ ] [ dst_reg_10_85 ] [ dst_reg_10_86 ] [ dst_reg_10_87 ] [ dst_reg_10_88 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 10 = MemoryDef(9)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_10_89 ] [ ] [ src_reg_10_90 ] [ src_reg_10_91 ] [ src_reg_10_92 ] [ [ src_reg_10_93 ] [ src_reg_10_94 ] ] [ src_reg_10_95 ] [ src_reg_10_96 ] [ src_reg_10_97 ] [ src_reg_10_98 ] [ ] [ src_reg_10_99 ] [ src_reg_10_100 ] [ src_reg_10_101 ] [ src_reg_10_102 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_10_75 ] [ ] [ dst_reg_10_76 ] [ dst_reg_10_77 ] [ dst_reg_10_78 ] [ [ dst_reg_10_79 ] [ dst_reg_10_80 ] ] [ dst_reg_10_81 ] [ dst_reg_10_82 ] [ dst_reg_10_83 ] [ dst_reg_10_84 ] [ ] [ dst_reg_10_85 ] [ dst_reg_10_86 ] [ dst_reg_10_87 ] [ dst_reg_10_88 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_10_89)
(= src_reg_10_15 src_reg_10_90)
(= src_reg_10_16 src_reg_10_91)
(= src_reg_10_17 src_reg_10_92)
(= src_reg_10_18 src_reg_10_93)
(= src_reg_10_19 src_reg_10_94)
(= src_reg_10_20 src_reg_10_95)
(= src_reg_10_21 src_reg_10_96)
(= src_reg_10_22 src_reg_10_97)
(= src_reg_10_23 src_reg_10_98)
(= src_reg_10_24 src_reg_10_99)
(= src_reg_10_25 src_reg_10_100)
(= src_reg_10_26 src_reg_10_101)
(= src_reg_10_27 src_reg_10_102)
(= #x00000001 dst_reg_10_75)
(= dst_reg_10_1 dst_reg_10_76)
(= dst_reg_10_2 dst_reg_10_77)
(= dst_reg_10_3 dst_reg_10_78)
(= #x0000000000000000 dst_reg_10_79)
(= #xffffffffffffffff dst_reg_10_80)
(= #x8000000000000000 dst_reg_10_81)
(= #x7fffffffffffffff dst_reg_10_82)
(= #x0000000000000000 dst_reg_10_83)
(= #xffffffffffffffff dst_reg_10_84)
(= #x00000000 dst_reg_10_85)
(= dst_reg_10_11 dst_reg_10_86)
(= dst_reg_10_12 dst_reg_10_87)
(= dst_reg_10_13 dst_reg_10_88)
]
[handleMemoryPhiNode] incomingBBI: sw.default.i
[handleMemoryPhiNode] incomingAccessI: 24 = MemoryDef(23)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ i11.i.i_10_71 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_10_89 ] [ ] [ src_reg_10_90 ] [ src_reg_10_91 ] [ src_reg_10_92 ] [ [ src_reg_10_93 ] [ src_reg_10_94 ] ] [ src_reg_10_95 ] [ src_reg_10_96 ] [ src_reg_10_97 ] [ src_reg_10_98 ] [ ] [ src_reg_10_99 ] [ src_reg_10_100 ] [ src_reg_10_101 ] [ src_reg_10_102 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ i11.i.i_10_71 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_10_75 ] [ ] [ dst_reg_10_76 ] [ dst_reg_10_77 ] [ dst_reg_10_78 ] [ [ dst_reg_10_79 ] [ dst_reg_10_80 ] ] [ dst_reg_10_81 ] [ dst_reg_10_82 ] [ dst_reg_10_83 ] [ dst_reg_10_84 ] [ ] [ dst_reg_10_85 ] [ dst_reg_10_86 ] [ dst_reg_10_87 ] [ dst_reg_10_88 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_10_89)
(= src_reg_10_15 src_reg_10_90)
(= src_reg_10_16 src_reg_10_91)
(= src_reg_10_17 src_reg_10_92)
(= src_reg_10_18 src_reg_10_93)
(= src_reg_10_19 src_reg_10_94)
(= src_reg_10_20 src_reg_10_95)
(= src_reg_10_21 src_reg_10_96)
(= src_reg_10_22 src_reg_10_97)
(= src_reg_10_23 src_reg_10_98)
(= src_reg_10_24 src_reg_10_99)
(= src_reg_10_25 src_reg_10_100)
(= src_reg_10_26 src_reg_10_101)
(= src_reg_10_27 src_reg_10_102)
(= #x00000001 dst_reg_10_75)
(= dst_reg_10_1 dst_reg_10_76)
(= dst_reg_10_2 dst_reg_10_77)
(= dst_reg_10_3 dst_reg_10_78)
(= and4.i.i.i_10_74 dst_reg_10_79)
(= i11.i.i_10_71 dst_reg_10_80)
(= #x8000000000000000 dst_reg_10_81)
(= #x7fffffffffffffff dst_reg_10_82)
(= #x0000000000000000 dst_reg_10_83)
(= #xffffffffffffffff dst_reg_10_84)
(= dst_reg_10_10 dst_reg_10_85)
(= dst_reg_10_11 dst_reg_10_86)
(= dst_reg_10_12 dst_reg_10_87)
(= dst_reg_10_13 dst_reg_10_88)
]
[handleMemoryPhiNode] incomingBBI: if.then41.i
[handleMemoryPhiNode] incomingAccessI: 18 = MemoryDef(17)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_10_89 ] [ ] [ src_reg_10_90 ] [ src_reg_10_91 ] [ src_reg_10_92 ] [ [ src_reg_10_93 ] [ src_reg_10_94 ] ] [ src_reg_10_95 ] [ src_reg_10_96 ] [ src_reg_10_97 ] [ src_reg_10_98 ] [ ] [ src_reg_10_99 ] [ src_reg_10_100 ] [ src_reg_10_101 ] [ src_reg_10_102 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_10_75 ] [ ] [ dst_reg_10_76 ] [ dst_reg_10_77 ] [ dst_reg_10_78 ] [ [ dst_reg_10_79 ] [ dst_reg_10_80 ] ] [ dst_reg_10_81 ] [ dst_reg_10_82 ] [ dst_reg_10_83 ] [ dst_reg_10_84 ] [ ] [ dst_reg_10_85 ] [ dst_reg_10_86 ] [ dst_reg_10_87 ] [ dst_reg_10_88 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_10_89)
(= src_reg_10_15 src_reg_10_90)
(= src_reg_10_16 src_reg_10_91)
(= src_reg_10_17 src_reg_10_92)
(= src_reg_10_18 src_reg_10_93)
(= src_reg_10_19 src_reg_10_94)
(= src_reg_10_20 src_reg_10_95)
(= src_reg_10_21 src_reg_10_96)
(= src_reg_10_22 src_reg_10_97)
(= src_reg_10_23 src_reg_10_98)
(= src_reg_10_24 src_reg_10_99)
(= src_reg_10_25 src_reg_10_100)
(= src_reg_10_26 src_reg_10_101)
(= src_reg_10_27 src_reg_10_102)
(= #x00000001 dst_reg_10_75)
(= dst_reg_10_1 dst_reg_10_76)
(= dst_reg_10_2 dst_reg_10_77)
(= dst_reg_10_3 dst_reg_10_78)
(= #x0000000000000000 dst_reg_10_79)
(= #xffffffffffffffff dst_reg_10_80)
(= #x8000000000000000 dst_reg_10_81)
(= #x7fffffffffffffff dst_reg_10_82)
(= #x0000000000000000 dst_reg_10_83)
(= #xffffffffffffffff dst_reg_10_84)
(= #x00000000 dst_reg_10_85)
(= dst_reg_10_11 dst_reg_10_86)
(= dst_reg_10_12 dst_reg_10_87)
(= dst_reg_10_13 dst_reg_10_88)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then41.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_10_89)
  (= src_reg_10_15 src_reg_10_90)
  (= src_reg_10_16 src_reg_10_91)
  (= src_reg_10_17 src_reg_10_92)
  (= src_reg_10_18 src_reg_10_93)
  (= src_reg_10_19 src_reg_10_94)
  (= src_reg_10_20 src_reg_10_95)
  (= src_reg_10_21 src_reg_10_96)
  (= src_reg_10_22 src_reg_10_97)
  (= src_reg_10_23 src_reg_10_98)
  (= src_reg_10_24 src_reg_10_99)
  (= src_reg_10_25 src_reg_10_100)
  (= src_reg_10_26 src_reg_10_101)
  (= src_reg_10_27 src_reg_10_102)
  (= #x00000001 dst_reg_10_75)
  (= dst_reg_10_1 dst_reg_10_76)
  (= dst_reg_10_2 dst_reg_10_77)
  (= dst_reg_10_3 dst_reg_10_78)
  (= #x0000000000000000 dst_reg_10_79)
  (= #xffffffffffffffff dst_reg_10_80)
  (= #x8000000000000000 dst_reg_10_81)
  (= #x7fffffffffffffff dst_reg_10_82)
  (= #x0000000000000000 dst_reg_10_83)
  (= #xffffffffffffffff dst_reg_10_84)
  (= #x00000000 dst_reg_10_85)
  (= dst_reg_10_11 dst_reg_10_86)
  (= dst_reg_10_12 dst_reg_10_87)
  (= dst_reg_10_13 dst_reg_10_88)
<sw.default.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_10_89)
  (= src_reg_10_15 src_reg_10_90)
  (= src_reg_10_16 src_reg_10_91)
  (= src_reg_10_17 src_reg_10_92)
  (= src_reg_10_18 src_reg_10_93)
  (= src_reg_10_19 src_reg_10_94)
  (= src_reg_10_20 src_reg_10_95)
  (= src_reg_10_21 src_reg_10_96)
  (= src_reg_10_22 src_reg_10_97)
  (= src_reg_10_23 src_reg_10_98)
  (= src_reg_10_24 src_reg_10_99)
  (= src_reg_10_25 src_reg_10_100)
  (= src_reg_10_26 src_reg_10_101)
  (= src_reg_10_27 src_reg_10_102)
  (= #x00000001 dst_reg_10_75)
  (= dst_reg_10_1 dst_reg_10_76)
  (= dst_reg_10_2 dst_reg_10_77)
  (= dst_reg_10_3 dst_reg_10_78)
  (= and4.i.i.i_10_74 dst_reg_10_79)
  (= i11.i.i_10_71 dst_reg_10_80)
  (= #x8000000000000000 dst_reg_10_81)
  (= #x7fffffffffffffff dst_reg_10_82)
  (= #x0000000000000000 dst_reg_10_83)
  (= #xffffffffffffffff dst_reg_10_84)
  (= dst_reg_10_10 dst_reg_10_85)
  (= dst_reg_10_11 dst_reg_10_86)
  (= dst_reg_10_12 dst_reg_10_87)
  (= dst_reg_10_13 dst_reg_10_88)
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_10_89)
  (= src_reg_10_15 src_reg_10_90)
  (= src_reg_10_16 src_reg_10_91)
  (= src_reg_10_17 src_reg_10_92)
  (= src_reg_10_18 src_reg_10_93)
  (= src_reg_10_19 src_reg_10_94)
  (= src_reg_10_20 src_reg_10_95)
  (= src_reg_10_21 src_reg_10_96)
  (= src_reg_10_22 src_reg_10_97)
  (= src_reg_10_23 src_reg_10_98)
  (= src_reg_10_24 src_reg_10_99)
  (= src_reg_10_25 src_reg_10_100)
  (= src_reg_10_26 src_reg_10_101)
  (= src_reg_10_27 src_reg_10_102)
  (= #x00000001 dst_reg_10_75)
  (= dst_reg_10_1 dst_reg_10_76)
  (= dst_reg_10_2 dst_reg_10_77)
  (= dst_reg_10_3 dst_reg_10_78)
  (= #x0000000000000000 dst_reg_10_79)
  (= #xffffffffffffffff dst_reg_10_80)
  (= #x8000000000000000 dst_reg_10_81)
  (= #x7fffffffffffffff dst_reg_10_82)
  (= #x0000000000000000 dst_reg_10_83)
  (= #xffffffffffffffff dst_reg_10_84)
  (= #x00000000 dst_reg_10_85)
  (= dst_reg_10_11 dst_reg_10_86)
  (= dst_reg_10_12 dst_reg_10_87)
  (= dst_reg_10_13 dst_reg_10_88)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_10_36
[handleBranchInst] Edge Assertions:
<entry, land.lhs.true.i>: (= tobool.not.i.i_10_36 #b1)
<entry, lor.lhs.false20.i>: (= tobool.not.i.i_10_36 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (= tobool.not.i.i_10_36 #b1)
[handleBranchInst] lor.lhs.false20.i: (= tobool.not.i.i_10_36 #b0)
[handleBranchInst] <entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] <entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond199.i_10_45
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.then26.i>: (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<land.lhs.true.i, if.end27.i>: (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
[handleBranchInst] if.end27.i: (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
if.then26.i
  (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
if.then26.i
  (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond200.i_10_49
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<lor.lhs.false20.i, if.end27.i>: (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
[handleBranchInst] if.end27.i: (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
=========================
if.end27.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i291.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i291.i.repack, align 8
-------------------
-------------------
  %var_off.i291.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i291.i.repack1, align 8
-------------------
-------------------
  br i1 %tobool.not.i.i, label %sw.default.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_10_36
[handleBranchInst] Edge Assertions:
<if.end27.i, sw.default.i>: (and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, if.then41.i>: (and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] sw.default.i: (and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] if.then41.i: (and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] <if.end27.i, sw.default.i> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] <if.end27.i, if.then41.i> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, sw.default.i> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
sw.default.i
  (and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
=========================
if.then41.i
=========================
-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
-------------------
  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
-------------------
  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
-------------------
  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, sw.default.i> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
sw.default.i
  (and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_10_36 #b0)
                (or (and (= or.cond200.i_10_49 #b0)
                         (= tobool.not.i.i_10_36 #b0))
                    (and (= or.cond199.i_10_45 #b0)
                         (= tobool.not.i.i_10_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
      (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] <if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, sw.default.i> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
sw.default.i
  (and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_10_36 #b0)
                (or (and (= or.cond200.i_10_49 #b0)
                         (= tobool.not.i.i_10_36 #b0))
                    (and (= or.cond199.i_10_45 #b0)
                         (= tobool.not.i.i_10_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
      (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
=========================
sw.default.i
=========================
-------------------
  %smin_value.i.i293.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i293.i, align 8
-------------------
-------------------
  %smax_value.i.i294.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i294.i, align 8
-------------------
-------------------
  %umin_value.i.i295.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i295.i, align 8
-------------------
-------------------
  %umax_value.i.i296.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i296.i, align 8
-------------------
-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  %neg.i.i.i = xor i64 %i11.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %i9.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %i11.i.i, i64* %i214.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, sw.default.i> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
sw.default.i
  (and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_10_36 #b0)
                (or (and (= or.cond200.i_10_49 #b0)
                         (= tobool.not.i.i_10_36 #b0))
                    (and (= or.cond199.i_10_45 #b0)
                         (= tobool.not.i.i_10_36 #b1))))))
  (or a!1
      (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
      (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
               (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))))
  (or (and (= tobool.not.i.i_10_36 #b1) a!1)
      (and (= tobool.not.i.i_10_36 #b0) a!1)
      (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
      (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] <sw.default.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<sw.default.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, sw.default.i> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
sw.default.i
  (and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
               (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))))
  (or (and (= tobool.not.i.i_10_36 #b1) a!1)
      (and (= tobool.not.i.i_10_36 #b0) a!1)
      (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
      (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
=========================
sw.default.i
=========================
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
        (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
    (and (= #x00000001 src_reg_10_89)
         (= src_reg_10_15 src_reg_10_90)
         (= src_reg_10_16 src_reg_10_91)
         (= src_reg_10_17 src_reg_10_92)
         (= src_reg_10_18 src_reg_10_93)
         (= src_reg_10_19 src_reg_10_94)
         (= src_reg_10_20 src_reg_10_95)
         (= src_reg_10_21 src_reg_10_96)
         (= src_reg_10_22 src_reg_10_97)
         (= src_reg_10_23 src_reg_10_98)
         (= src_reg_10_24 src_reg_10_99)
         (= src_reg_10_25 src_reg_10_100)
         (= src_reg_10_26 src_reg_10_101)
         (= src_reg_10_27 src_reg_10_102)
         (= #x00000001 dst_reg_10_75)
         (= dst_reg_10_1 dst_reg_10_76)
         (= dst_reg_10_2 dst_reg_10_77)
         (= dst_reg_10_3 dst_reg_10_78)
         (= #x0000000000000000 dst_reg_10_79)
         (= #xffffffffffffffff dst_reg_10_80)
         (= #x8000000000000000 dst_reg_10_81)
         (= #x7fffffffffffffff dst_reg_10_82)
         (= #x0000000000000000 dst_reg_10_83)
         (= #xffffffffffffffff dst_reg_10_84)
         (= #x00000000 dst_reg_10_85)
         (= dst_reg_10_11 dst_reg_10_86)
         (= dst_reg_10_12 dst_reg_10_87)
         (= dst_reg_10_13 dst_reg_10_88)))
phiResolveI (i=1) (let ((a!1 (and (= tobool.not.i.i_10_36 #b1)
                (or (and (= or.cond200.i_10_49 #b0)
                         (= tobool.not.i.i_10_36 #b0))
                    (and (= or.cond199.i_10_45 #b0)
                         (= tobool.not.i.i_10_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_10_89)
           (= src_reg_10_15 src_reg_10_90)
           (= src_reg_10_16 src_reg_10_91)
           (= src_reg_10_17 src_reg_10_92)
           (= src_reg_10_18 src_reg_10_93)
           (= src_reg_10_19 src_reg_10_94)
           (= src_reg_10_20 src_reg_10_95)
           (= src_reg_10_21 src_reg_10_96)
           (= src_reg_10_22 src_reg_10_97)
           (= src_reg_10_23 src_reg_10_98)
           (= src_reg_10_24 src_reg_10_99)
           (= src_reg_10_25 src_reg_10_100)
           (= src_reg_10_26 src_reg_10_101)
           (= src_reg_10_27 src_reg_10_102)
           (= #x00000001 dst_reg_10_75)
           (= dst_reg_10_1 dst_reg_10_76)
           (= dst_reg_10_2 dst_reg_10_77)
           (= dst_reg_10_3 dst_reg_10_78)
           (= and4.i.i.i_10_74 dst_reg_10_79)
           (= i11.i.i_10_71 dst_reg_10_80)
           (= #x8000000000000000 dst_reg_10_81)
           (= #x7fffffffffffffff dst_reg_10_82)
           (= #x0000000000000000 dst_reg_10_83)
           (= #xffffffffffffffff dst_reg_10_84)
           (= dst_reg_10_10 dst_reg_10_85)
           (= dst_reg_10_11 dst_reg_10_86)
           (= dst_reg_10_12 dst_reg_10_87)
           (= dst_reg_10_13 dst_reg_10_88))))
phiResolveI (i=2) (let ((a!1 (and (= tobool.not.i.i_10_36 #b0)
                (or (and (= or.cond200.i_10_49 #b0)
                         (= tobool.not.i.i_10_36 #b0))
                    (and (= or.cond199.i_10_45 #b0)
                         (= tobool.not.i.i_10_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_10_89)
           (= src_reg_10_15 src_reg_10_90)
           (= src_reg_10_16 src_reg_10_91)
           (= src_reg_10_17 src_reg_10_92)
           (= src_reg_10_18 src_reg_10_93)
           (= src_reg_10_19 src_reg_10_94)
           (= src_reg_10_20 src_reg_10_95)
           (= src_reg_10_21 src_reg_10_96)
           (= src_reg_10_22 src_reg_10_97)
           (= src_reg_10_23 src_reg_10_98)
           (= src_reg_10_24 src_reg_10_99)
           (= src_reg_10_25 src_reg_10_100)
           (= src_reg_10_26 src_reg_10_101)
           (= src_reg_10_27 src_reg_10_102)
           (= #x00000001 dst_reg_10_75)
           (= dst_reg_10_1 dst_reg_10_76)
           (= dst_reg_10_2 dst_reg_10_77)
           (= dst_reg_10_3 dst_reg_10_78)
           (= #x0000000000000000 dst_reg_10_79)
           (= #xffffffffffffffff dst_reg_10_80)
           (= #x8000000000000000 dst_reg_10_81)
           (= #x7fffffffffffffff dst_reg_10_82)
           (= #x0000000000000000 dst_reg_10_83)
           (= #xffffffffffffffff dst_reg_10_84)
           (= #x00000000 dst_reg_10_85)
           (= dst_reg_10_11 dst_reg_10_86)
           (= dst_reg_10_12 dst_reg_10_87)
           (= dst_reg_10_13 dst_reg_10_88))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
=========================
if.end27.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i291.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i291.i.repack1, align 8
-------------------
=========================
if.then41.i
=========================
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
=========================
sw.default.i
=========================
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i293.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i294.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i295.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i296.i, align 8
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %i11.i.i, i64* %i214.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 25 = MemoryPhi({if.then26.i,10},{sw.default.i,24},{if.then41.i,18})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
23 = MemoryDef(22) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
22 = MemoryDef(21) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
21 = MemoryDef(20) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
19 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
25 = MemoryPhi({if.then26.i,10},{sw.default.i,24},{if.then41.i,18}) : {
- src_reg: [ [ src_reg_10_89 ] [ ] [ src_reg_10_90 ] [ src_reg_10_91 ] [ src_reg_10_92 ] [ [ src_reg_10_93 ] [ src_reg_10_94 ] ] [ src_reg_10_95 ] [ src_reg_10_96 ] [ src_reg_10_97 ] [ src_reg_10_98 ] [ ] [ src_reg_10_99 ] [ src_reg_10_100 ] [ src_reg_10_101 ] [ src_reg_10_102 ] ] 
- dst_reg: [ [ dst_reg_10_75 ] [ ] [ dst_reg_10_76 ] [ dst_reg_10_77 ] [ dst_reg_10_78 ] [ [ dst_reg_10_79 ] [ dst_reg_10_80 ] ] [ dst_reg_10_81 ] [ dst_reg_10_82 ] [ dst_reg_10_83 ] [ dst_reg_10_84 ] [ ] [ dst_reg_10_85 ] [ dst_reg_10_86 ] [ dst_reg_10_87 ] [ dst_reg_10_88 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
20 = MemoryDef(19) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ i11.i.i_10_71 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 25 = MemoryPhi({if.then26.i,10},{sw.default.i,24},{if.then41.i,18})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_103
[lookInsideStruct] singleValueType:dst_reg_10_103
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_104
[lookInsideStruct] singleValueType:dst_reg_10_104
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_105
[lookInsideStruct] singleValueType:dst_reg_10_105
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_106
[lookInsideStruct] singleValueType:dst_reg_10_106
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_107
[lookInsideStruct] singleValueType:dst_reg_10_107
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_108
[lookInsideStruct] singleValueType:dst_reg_10_108
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_109
[lookInsideStruct] singleValueType:dst_reg_10_109
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_110
[lookInsideStruct] singleValueType:dst_reg_10_110
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_111
[lookInsideStruct] singleValueType:dst_reg_10_111
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_112
[lookInsideStruct] singleValueType:dst_reg_10_112
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_113
[lookInsideStruct] singleValueType:dst_reg_10_113
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_114
[lookInsideStruct] singleValueType:dst_reg_10_114
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_115
[lookInsideStruct] singleValueType:dst_reg_10_115
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_10_116
[lookInsideStruct] singleValueType:dst_reg_10_116
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_10_103 ] [ ] [ dst_reg_10_104 ] [ dst_reg_10_105 ] [ dst_reg_10_106 ] [ [ dst_reg_10_107 ] [ dst_reg_10_108 ] ] [ dst_reg_10_109 ] [ dst_reg_10_110 ] [ dst_reg_10_111 ] [ dst_reg_10_112 ] [ ] [ dst_reg_10_113 ] [ dst_reg_10_114 ] [ dst_reg_10_115 ] [ dst_reg_10_116 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_10_75 ] [ ] [ dst_reg_10_76 ] [ dst_reg_10_77 ] [ dst_reg_10_78 ] [ [ dst_reg_10_79 ] [ dst_reg_10_80 ] ] [ dst_reg_10_81 ] [ dst_reg_10_82 ] [ dst_reg_10_83 ] [ dst_reg_10_84 ] [ ] [ dst_reg_10_85 ] [ dst_reg_10_86 ] [ dst_reg_10_87 ] [ dst_reg_10_88 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_10_75 dst_reg_10_103)
(= dst_reg_10_76 dst_reg_10_104)
(= dst_reg_10_77 dst_reg_10_105)
(= dst_reg_10_78 dst_reg_10_106)
(= dst_reg_10_79 dst_reg_10_107)
(= dst_reg_10_80 dst_reg_10_108)
(= dst_reg_10_81 dst_reg_10_109)
(= dst_reg_10_82 dst_reg_10_110)
(= dst_reg_10_83 dst_reg_10_111)
(= dst_reg_10_84 dst_reg_10_112)
(= dst_reg_10_85 dst_reg_10_113)
(= dst_reg_10_86 dst_reg_10_114)
(= dst_reg_10_87 dst_reg_10_115)
(= dst_reg_10_88 dst_reg_10_116)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_117
[lookInsideStruct] singleValueType:src_reg_10_117
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_118
[lookInsideStruct] singleValueType:src_reg_10_118
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_119
[lookInsideStruct] singleValueType:src_reg_10_119
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_120
[lookInsideStruct] singleValueType:src_reg_10_120
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_121
[lookInsideStruct] singleValueType:src_reg_10_121
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_122
[lookInsideStruct] singleValueType:src_reg_10_122
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_123
[lookInsideStruct] singleValueType:src_reg_10_123
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_124
[lookInsideStruct] singleValueType:src_reg_10_124
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_125
[lookInsideStruct] singleValueType:src_reg_10_125
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_126
[lookInsideStruct] singleValueType:src_reg_10_126
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_127
[lookInsideStruct] singleValueType:src_reg_10_127
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_128
[lookInsideStruct] singleValueType:src_reg_10_128
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_129
[lookInsideStruct] singleValueType:src_reg_10_129
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_10_130
[lookInsideStruct] singleValueType:src_reg_10_130
[setupBVTreeForArg] returning BVTree: [ [ src_reg_10_117 ] [ ] [ src_reg_10_118 ] [ src_reg_10_119 ] [ src_reg_10_120 ] [ [ src_reg_10_121 ] [ src_reg_10_122 ] ] [ src_reg_10_123 ] [ src_reg_10_124 ] [ src_reg_10_125 ] [ src_reg_10_126 ] [ ] [ src_reg_10_127 ] [ src_reg_10_128 ] [ src_reg_10_129 ] [ src_reg_10_130 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_10_89 ] [ ] [ src_reg_10_90 ] [ src_reg_10_91 ] [ src_reg_10_92 ] [ [ src_reg_10_93 ] [ src_reg_10_94 ] ] [ src_reg_10_95 ] [ src_reg_10_96 ] [ src_reg_10_97 ] [ src_reg_10_98 ] [ ] [ src_reg_10_99 ] [ src_reg_10_100 ] [ src_reg_10_101 ] [ src_reg_10_102 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_10_89 src_reg_10_117)
(= src_reg_10_90 src_reg_10_118)
(= src_reg_10_91 src_reg_10_119)
(= src_reg_10_92 src_reg_10_120)
(= src_reg_10_93 src_reg_10_121)
(= src_reg_10_94 src_reg_10_122)
(= src_reg_10_95 src_reg_10_123)
(= src_reg_10_96 src_reg_10_124)
(= src_reg_10_97 src_reg_10_125)
(= src_reg_10_98 src_reg_10_126)
(= src_reg_10_99 src_reg_10_127)
(= src_reg_10_100 src_reg_10_128)
(= src_reg_10_101 src_reg_10_129)
(= src_reg_10_102 src_reg_10_130)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_10_117 ] [ ] [ src_reg_10_118 ] [ src_reg_10_119 ] [ src_reg_10_120 ] [ [ src_reg_10_121 ] [ src_reg_10_122 ] ] [ src_reg_10_123 ] [ src_reg_10_124 ] [ src_reg_10_125 ] [ src_reg_10_126 ] [ ] [ src_reg_10_127 ] [ src_reg_10_128 ] [ src_reg_10_129 ] [ src_reg_10_130 ] ] 
- dst_reg: [ [ dst_reg_10_103 ] [ ] [ dst_reg_10_104 ] [ dst_reg_10_105 ] [ dst_reg_10_106 ] [ [ dst_reg_10_107 ] [ dst_reg_10_108 ] ] [ dst_reg_10_109 ] [ dst_reg_10_110 ] [ dst_reg_10_111 ] [ dst_reg_10_112 ] [ ] [ dst_reg_10_113 ] [ dst_reg_10_114 ] [ dst_reg_10_115 ] [ dst_reg_10_116 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (=> (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
        (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
    (and (= #x00000001 src_reg_10_89)
         (= src_reg_10_15 src_reg_10_90)
         (= src_reg_10_16 src_reg_10_91)
         (= src_reg_10_17 src_reg_10_92)
         (= src_reg_10_18 src_reg_10_93)
         (= src_reg_10_19 src_reg_10_94)
         (= src_reg_10_20 src_reg_10_95)
         (= src_reg_10_21 src_reg_10_96)
         (= src_reg_10_22 src_reg_10_97)
         (= src_reg_10_23 src_reg_10_98)
         (= src_reg_10_24 src_reg_10_99)
         (= src_reg_10_25 src_reg_10_100)
         (= src_reg_10_26 src_reg_10_101)
         (= src_reg_10_27 src_reg_10_102)
         (= #x00000001 dst_reg_10_75)
         (= dst_reg_10_1 dst_reg_10_76)
         (= dst_reg_10_2 dst_reg_10_77)
         (= dst_reg_10_3 dst_reg_10_78)
         (= #x0000000000000000 dst_reg_10_79)
         (= #xffffffffffffffff dst_reg_10_80)
         (= #x8000000000000000 dst_reg_10_81)
         (= #x7fffffffffffffff dst_reg_10_82)
         (= #x0000000000000000 dst_reg_10_83)
         (= #xffffffffffffffff dst_reg_10_84)
         (= #x00000000 dst_reg_10_85)
         (= dst_reg_10_11 dst_reg_10_86)
         (= dst_reg_10_12 dst_reg_10_87)
         (= dst_reg_10_13 dst_reg_10_88)))
  (let ((a!1 (and (= tobool.not.i.i_10_36 #b1)
                (or (and (= or.cond200.i_10_49 #b0)
                         (= tobool.not.i.i_10_36 #b0))
                    (and (= or.cond199.i_10_45 #b0)
                         (= tobool.not.i.i_10_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_10_89)
           (= src_reg_10_15 src_reg_10_90)
           (= src_reg_10_16 src_reg_10_91)
           (= src_reg_10_17 src_reg_10_92)
           (= src_reg_10_18 src_reg_10_93)
           (= src_reg_10_19 src_reg_10_94)
           (= src_reg_10_20 src_reg_10_95)
           (= src_reg_10_21 src_reg_10_96)
           (= src_reg_10_22 src_reg_10_97)
           (= src_reg_10_23 src_reg_10_98)
           (= src_reg_10_24 src_reg_10_99)
           (= src_reg_10_25 src_reg_10_100)
           (= src_reg_10_26 src_reg_10_101)
           (= src_reg_10_27 src_reg_10_102)
           (= #x00000001 dst_reg_10_75)
           (= dst_reg_10_1 dst_reg_10_76)
           (= dst_reg_10_2 dst_reg_10_77)
           (= dst_reg_10_3 dst_reg_10_78)
           (= and4.i.i.i_10_74 dst_reg_10_79)
           (= i11.i.i_10_71 dst_reg_10_80)
           (= #x8000000000000000 dst_reg_10_81)
           (= #x7fffffffffffffff dst_reg_10_82)
           (= #x0000000000000000 dst_reg_10_83)
           (= #xffffffffffffffff dst_reg_10_84)
           (= dst_reg_10_10 dst_reg_10_85)
           (= dst_reg_10_11 dst_reg_10_86)
           (= dst_reg_10_12 dst_reg_10_87)
           (= dst_reg_10_13 dst_reg_10_88))))
  (let ((a!1 (and (= tobool.not.i.i_10_36 #b0)
                (or (and (= or.cond200.i_10_49 #b0)
                         (= tobool.not.i.i_10_36 #b0))
                    (and (= or.cond199.i_10_45 #b0)
                         (= tobool.not.i.i_10_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_10_89)
           (= src_reg_10_15 src_reg_10_90)
           (= src_reg_10_16 src_reg_10_91)
           (= src_reg_10_17 src_reg_10_92)
           (= src_reg_10_18 src_reg_10_93)
           (= src_reg_10_19 src_reg_10_94)
           (= src_reg_10_20 src_reg_10_95)
           (= src_reg_10_21 src_reg_10_96)
           (= src_reg_10_22 src_reg_10_97)
           (= src_reg_10_23 src_reg_10_98)
           (= src_reg_10_24 src_reg_10_99)
           (= src_reg_10_25 src_reg_10_100)
           (= src_reg_10_26 src_reg_10_101)
           (= src_reg_10_27 src_reg_10_102)
           (= #x00000001 dst_reg_10_75)
           (= dst_reg_10_1 dst_reg_10_76)
           (= dst_reg_10_2 dst_reg_10_77)
           (= dst_reg_10_3 dst_reg_10_78)
           (= #x0000000000000000 dst_reg_10_79)
           (= #xffffffffffffffff dst_reg_10_80)
           (= #x8000000000000000 dst_reg_10_81)
           (= #x7fffffffffffffff dst_reg_10_82)
           (= #x0000000000000000 dst_reg_10_83)
           (= #xffffffffffffffff dst_reg_10_84)
           (= #x00000000 dst_reg_10_85)
           (= dst_reg_10_11 dst_reg_10_86)
           (= dst_reg_10_12 dst_reg_10_87)
           (= dst_reg_10_13 dst_reg_10_88))))
  (= dst_reg_10_75 dst_reg_10_103)
  (= dst_reg_10_76 dst_reg_10_104)
  (= dst_reg_10_77 dst_reg_10_105)
  (= dst_reg_10_78 dst_reg_10_106)
  (= dst_reg_10_79 dst_reg_10_107)
  (= dst_reg_10_80 dst_reg_10_108)
  (= dst_reg_10_81 dst_reg_10_109)
  (= dst_reg_10_82 dst_reg_10_110)
  (= dst_reg_10_83 dst_reg_10_111)
  (= dst_reg_10_84 dst_reg_10_112)
  (= dst_reg_10_85 dst_reg_10_113)
  (= dst_reg_10_86 dst_reg_10_114)
  (= dst_reg_10_87 dst_reg_10_115)
  (= dst_reg_10_88 dst_reg_10_116)
  (= src_reg_10_89 src_reg_10_117)
  (= src_reg_10_90 src_reg_10_118)
  (= src_reg_10_91 src_reg_10_119)
  (= src_reg_10_92 src_reg_10_120)
  (= src_reg_10_93 src_reg_10_121)
  (= src_reg_10_94 src_reg_10_122)
  (= src_reg_10_95 src_reg_10_123)
  (= src_reg_10_96 src_reg_10_124)
  (= src_reg_10_97 src_reg_10_125)
  (= src_reg_10_98 src_reg_10_126)
  (= src_reg_10_99 src_reg_10_127)
  (= src_reg_10_100 src_reg_10_128)
  (= src_reg_10_101 src_reg_10_129)
  (= src_reg_10_102 src_reg_10_130)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: adjust_scalar_min_max_vals.exit, Size:31
  (=> (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
        (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
    (and (= #x00000001 src_reg_10_89)
         (= src_reg_10_15 src_reg_10_90)
         (= src_reg_10_16 src_reg_10_91)
         (= src_reg_10_17 src_reg_10_92)
         (= src_reg_10_18 src_reg_10_93)
         (= src_reg_10_19 src_reg_10_94)
         (= src_reg_10_20 src_reg_10_95)
         (= src_reg_10_21 src_reg_10_96)
         (= src_reg_10_22 src_reg_10_97)
         (= src_reg_10_23 src_reg_10_98)
         (= src_reg_10_24 src_reg_10_99)
         (= src_reg_10_25 src_reg_10_100)
         (= src_reg_10_26 src_reg_10_101)
         (= src_reg_10_27 src_reg_10_102)
         (= #x00000001 dst_reg_10_75)
         (= dst_reg_10_1 dst_reg_10_76)
         (= dst_reg_10_2 dst_reg_10_77)
         (= dst_reg_10_3 dst_reg_10_78)
         (= #x0000000000000000 dst_reg_10_79)
         (= #xffffffffffffffff dst_reg_10_80)
         (= #x8000000000000000 dst_reg_10_81)
         (= #x7fffffffffffffff dst_reg_10_82)
         (= #x0000000000000000 dst_reg_10_83)
         (= #xffffffffffffffff dst_reg_10_84)
         (= #x00000000 dst_reg_10_85)
         (= dst_reg_10_11 dst_reg_10_86)
         (= dst_reg_10_12 dst_reg_10_87)
         (= dst_reg_10_13 dst_reg_10_88)))
  (let ((a!1 (and (= tobool.not.i.i_10_36 #b1)
                (or (and (= or.cond200.i_10_49 #b0)
                         (= tobool.not.i.i_10_36 #b0))
                    (and (= or.cond199.i_10_45 #b0)
                         (= tobool.not.i.i_10_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_10_89)
           (= src_reg_10_15 src_reg_10_90)
           (= src_reg_10_16 src_reg_10_91)
           (= src_reg_10_17 src_reg_10_92)
           (= src_reg_10_18 src_reg_10_93)
           (= src_reg_10_19 src_reg_10_94)
           (= src_reg_10_20 src_reg_10_95)
           (= src_reg_10_21 src_reg_10_96)
           (= src_reg_10_22 src_reg_10_97)
           (= src_reg_10_23 src_reg_10_98)
           (= src_reg_10_24 src_reg_10_99)
           (= src_reg_10_25 src_reg_10_100)
           (= src_reg_10_26 src_reg_10_101)
           (= src_reg_10_27 src_reg_10_102)
           (= #x00000001 dst_reg_10_75)
           (= dst_reg_10_1 dst_reg_10_76)
           (= dst_reg_10_2 dst_reg_10_77)
           (= dst_reg_10_3 dst_reg_10_78)
           (= and4.i.i.i_10_74 dst_reg_10_79)
           (= i11.i.i_10_71 dst_reg_10_80)
           (= #x8000000000000000 dst_reg_10_81)
           (= #x7fffffffffffffff dst_reg_10_82)
           (= #x0000000000000000 dst_reg_10_83)
           (= #xffffffffffffffff dst_reg_10_84)
           (= dst_reg_10_10 dst_reg_10_85)
           (= dst_reg_10_11 dst_reg_10_86)
           (= dst_reg_10_12 dst_reg_10_87)
           (= dst_reg_10_13 dst_reg_10_88))))
  (let ((a!1 (and (= tobool.not.i.i_10_36 #b0)
                (or (and (= or.cond200.i_10_49 #b0)
                         (= tobool.not.i.i_10_36 #b0))
                    (and (= or.cond199.i_10_45 #b0)
                         (= tobool.not.i.i_10_36 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_10_89)
           (= src_reg_10_15 src_reg_10_90)
           (= src_reg_10_16 src_reg_10_91)
           (= src_reg_10_17 src_reg_10_92)
           (= src_reg_10_18 src_reg_10_93)
           (= src_reg_10_19 src_reg_10_94)
           (= src_reg_10_20 src_reg_10_95)
           (= src_reg_10_21 src_reg_10_96)
           (= src_reg_10_22 src_reg_10_97)
           (= src_reg_10_23 src_reg_10_98)
           (= src_reg_10_24 src_reg_10_99)
           (= src_reg_10_25 src_reg_10_100)
           (= src_reg_10_26 src_reg_10_101)
           (= src_reg_10_27 src_reg_10_102)
           (= #x00000001 dst_reg_10_75)
           (= dst_reg_10_1 dst_reg_10_76)
           (= dst_reg_10_2 dst_reg_10_77)
           (= dst_reg_10_3 dst_reg_10_78)
           (= #x0000000000000000 dst_reg_10_79)
           (= #xffffffffffffffff dst_reg_10_80)
           (= #x8000000000000000 dst_reg_10_81)
           (= #x7fffffffffffffff dst_reg_10_82)
           (= #x0000000000000000 dst_reg_10_83)
           (= #xffffffffffffffff dst_reg_10_84)
           (= #x00000000 dst_reg_10_85)
           (= dst_reg_10_11 dst_reg_10_86)
           (= dst_reg_10_12 dst_reg_10_87)
           (= dst_reg_10_13 dst_reg_10_88))))
  (= dst_reg_10_75 dst_reg_10_103)
  (= dst_reg_10_76 dst_reg_10_104)
  (= dst_reg_10_77 dst_reg_10_105)
  (= dst_reg_10_78 dst_reg_10_106)
  (= dst_reg_10_79 dst_reg_10_107)
  (= dst_reg_10_80 dst_reg_10_108)
  (= dst_reg_10_81 dst_reg_10_109)
  (= dst_reg_10_82 dst_reg_10_110)
  (= dst_reg_10_83 dst_reg_10_111)
  (= dst_reg_10_84 dst_reg_10_112)
  (= dst_reg_10_85 dst_reg_10_113)
  (= dst_reg_10_86 dst_reg_10_114)
  (= dst_reg_10_87 dst_reg_10_115)
  (= dst_reg_10_88 dst_reg_10_116)
  (= src_reg_10_89 src_reg_10_117)
  (= src_reg_10_90 src_reg_10_118)
  (= src_reg_10_91 src_reg_10_119)
  (= src_reg_10_92 src_reg_10_120)
  (= src_reg_10_93 src_reg_10_121)
  (= src_reg_10_94 src_reg_10_122)
  (= src_reg_10_95 src_reg_10_123)
  (= src_reg_10_96 src_reg_10_124)
  (= src_reg_10_97 src_reg_10_125)
  (= src_reg_10_98 src_reg_10_126)
  (= src_reg_10_99 src_reg_10_127)
  (= src_reg_10_100 src_reg_10_128)
  (= src_reg_10_101 src_reg_10_129)
  (= src_reg_10_102 src_reg_10_130)
BasicBlock: sw.default.i, Size:4
  (= #x0000000000000000 i9.i.i_10_70)
  (= #xffffffffffffffff i11.i.i_10_71)
  (= neg.i.i.i_10_73 (bvxor i11.i.i_10_71 #xffffffffffffffff))
  (= and4.i.i.i_10_74 (bvand i9.i.i_10_70 neg.i.i.i_10_73))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.old.i_10_46 #b1)
     (= cmp21.old.i_10_46 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.old.i_10_47 #b1)
     (= cmp24.old.i_10_47 #b0))
  (ite (= cmp21.old.i_10_46 #b1)
     (= or.cond200.i_10_49 #b1)
     (= or.cond200.i_10_49 cmp24.old.i_10_47))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_10_30
               src_reg1.sroa.15.0.copyload_10_31)
     (= cmp16.not.i_10_37 #b1)
     (= cmp16.not.i_10_37 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_10_32
               src_reg1.sroa.22.0.copyload_10_33)
     (= cmp18.not.i_10_38 #b1)
     (= cmp18.not.i_10_38 #b0))
  (ite (= cmp16.not.i_10_37 #b1)
     (= or.cond197.i_10_40 #b1)
     (= or.cond197.i_10_40 cmp18.not.i_10_38))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)
     (= cmp21.i_10_41 #b1)
     (= cmp21.i_10_41 #b0))
  (= or.cond198.i_10_42 (bvor cmp21.i_10_41 or.cond197.i_10_40))
  (ite (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)
     (= cmp24.i_10_43 #b1)
     (= cmp24.i_10_43 #b0))
  (ite (= or.cond198.i_10_42 #b1)
     (= or.cond199.i_10_45 #b1)
     (= or.cond199.i_10_45 cmp24.i_10_43))
BasicBlock: entry, Size:34
  (= dst_reg_10_0 dst_reg_10_0)
  (= dst_reg_10_1 dst_reg_10_1)
  (= dst_reg_10_2 dst_reg_10_2)
  (= dst_reg_10_3 dst_reg_10_3)
  (= dst_reg_10_4 dst_reg_10_4)
  (= dst_reg_10_5 dst_reg_10_5)
  (= dst_reg_10_6 dst_reg_10_6)
  (= dst_reg_10_7 dst_reg_10_7)
  (= dst_reg_10_8 dst_reg_10_8)
  (= dst_reg_10_9 dst_reg_10_9)
  (= dst_reg_10_10 dst_reg_10_10)
  (= dst_reg_10_11 dst_reg_10_11)
  (= dst_reg_10_12 dst_reg_10_12)
  (= dst_reg_10_13 dst_reg_10_13)
  (= src_reg_10_14 src_reg_10_14)
  (= src_reg_10_15 src_reg_10_15)
  (= src_reg_10_16 src_reg_10_16)
  (= src_reg_10_17 src_reg_10_17)
  (= src_reg_10_18 src_reg_10_18)
  (= src_reg_10_19 src_reg_10_19)
  (= src_reg_10_20 src_reg_10_20)
  (= src_reg_10_21 src_reg_10_21)
  (= src_reg_10_22 src_reg_10_22)
  (= src_reg_10_23 src_reg_10_23)
  (= src_reg_10_24 src_reg_10_24)
  (= src_reg_10_25 src_reg_10_25)
  (= src_reg_10_26 src_reg_10_26)
  (= src_reg_10_27 src_reg_10_27)
  (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)
  (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)
  (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)
  (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)
  (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)
  (ite (= src_reg1.sroa.10.0.copyload_10_34 #x0000000000000000)
     (= tobool.not.i.i_10_36 #b1)
     (= tobool.not.i.i_10_36 #b0))

[encodeFunctionBody] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
sw.default.i
  (and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
               (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))))
  (or (and (= tobool.not.i.i_10_36 #b1) a!1)
      (and (= tobool.not.i.i_10_36 #b0) a!1)
      (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
      (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))))
if.end27.i
  (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1)))
if.then26.i
  (or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_10_36 #b0)
land.lhs.true.i
  (= tobool.not.i.i_10_36 #b1)
[encodeFunctionBody] EdgeAssertionsMap:
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<sw.default.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_10_36 #b0)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<if.end27.i, sw.default.i> :(and (= tobool.not.i.i_10_36 #b1)
     (or (and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
         (and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_10_45 #b0) (= tobool.not.i.i_10_36 #b1))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_10_49 #b1) (= tobool.not.i.i_10_36 #b0))
    (and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_10_45 #b1) (= tobool.not.i.i_10_36 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_10_49 #b0) (= tobool.not.i.i_10_36 #b0))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_10_36 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_10_36 #b1)
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
23 = MemoryDef(22) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
22 = MemoryDef(21) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
21 = MemoryDef(20) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
19 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
25 = MemoryPhi({if.then26.i,10},{sw.default.i,24},{if.then41.i,18}) : {
- src_reg: [ [ src_reg_10_89 ] [ ] [ src_reg_10_90 ] [ src_reg_10_91 ] [ src_reg_10_92 ] [ [ src_reg_10_93 ] [ src_reg_10_94 ] ] [ src_reg_10_95 ] [ src_reg_10_96 ] [ src_reg_10_97 ] [ src_reg_10_98 ] [ ] [ src_reg_10_99 ] [ src_reg_10_100 ] [ src_reg_10_101 ] [ src_reg_10_102 ] ] 
- dst_reg: [ [ dst_reg_10_75 ] [ ] [ dst_reg_10_76 ] [ dst_reg_10_77 ] [ dst_reg_10_78 ] [ [ dst_reg_10_79 ] [ dst_reg_10_80 ] ] [ dst_reg_10_81 ] [ dst_reg_10_82 ] [ dst_reg_10_83 ] [ dst_reg_10_84 ] [ ] [ dst_reg_10_85 ] [ dst_reg_10_86 ] [ dst_reg_10_87 ] [ dst_reg_10_88 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
20 = MemoryDef(19) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
24 = MemoryDef(23) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ and4.i.i.i_10_74 ] [ i11.i.i_10_71 ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_10_9 ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ #x0000000000000000 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_10_0 ] [ ] [ dst_reg_10_1 ] [ dst_reg_10_2 ] [ dst_reg_10_3 ] [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] [ dst_reg_10_6 ] [ dst_reg_10_7 ] [ dst_reg_10_8 ] [ dst_reg_10_9 ] [ ] [ dst_reg_10_10 ] [ dst_reg_10_11 ] [ dst_reg_10_12 ] [ dst_reg_10_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_10_4 ] [ dst_reg_10_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_4",
	"dst_reg_10_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3",
	[
		"dst_reg_10_4",
		"dst_reg_10_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3",
	[
		"dst_reg_10_4",
		"dst_reg_10_5"
	],
	"dst_reg_10_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3",
	[
		"dst_reg_10_4",
		"dst_reg_10_5"
	],
	"dst_reg_10_6",
	"dst_reg_10_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3",
	[
		"dst_reg_10_4",
		"dst_reg_10_5"
	],
	"dst_reg_10_6",
	"dst_reg_10_7",
	"dst_reg_10_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3",
	[
		"dst_reg_10_4",
		"dst_reg_10_5"
	],
	"dst_reg_10_6",
	"dst_reg_10_7",
	"dst_reg_10_8",
	"dst_reg_10_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3",
	[
		"dst_reg_10_4",
		"dst_reg_10_5"
	],
	"dst_reg_10_6",
	"dst_reg_10_7",
	"dst_reg_10_8",
	"dst_reg_10_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3",
	[
		"dst_reg_10_4",
		"dst_reg_10_5"
	],
	"dst_reg_10_6",
	"dst_reg_10_7",
	"dst_reg_10_8",
	"dst_reg_10_9",
	"",
	"",
	"dst_reg_10_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3",
	[
		"dst_reg_10_4",
		"dst_reg_10_5"
	],
	"dst_reg_10_6",
	"dst_reg_10_7",
	"dst_reg_10_8",
	"dst_reg_10_9",
	"",
	"",
	"dst_reg_10_10",
	"dst_reg_10_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_10_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_0",
	[
		""
	],
	"dst_reg_10_1",
	"dst_reg_10_2",
	"dst_reg_10_3",
	[
		"dst_reg_10_4",
		"dst_reg_10_5"
	],
	"dst_reg_10_6",
	"dst_reg_10_7",
	"dst_reg_10_8",
	"dst_reg_10_9",
	"",
	"",
	"dst_reg_10_10",
	"dst_reg_10_11",
	"dst_reg_10_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_10_14 ] [ ] [ src_reg_10_15 ] [ src_reg_10_16 ] [ src_reg_10_17 ] [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] [ src_reg_10_20 ] [ src_reg_10_21 ] [ src_reg_10_22 ] [ src_reg_10_23 ] [ ] [ src_reg_10_24 ] [ src_reg_10_25 ] [ src_reg_10_26 ] [ src_reg_10_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_10_18 ] [ src_reg_10_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_10_18 ] [ src_reg_10_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_18",
	"src_reg_10_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17",
	[
		"src_reg_10_18",
		"src_reg_10_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17",
	[
		"src_reg_10_18",
		"src_reg_10_19"
	],
	"src_reg_10_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17",
	[
		"src_reg_10_18",
		"src_reg_10_19"
	],
	"src_reg_10_20",
	"src_reg_10_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17",
	[
		"src_reg_10_18",
		"src_reg_10_19"
	],
	"src_reg_10_20",
	"src_reg_10_21",
	"src_reg_10_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17",
	[
		"src_reg_10_18",
		"src_reg_10_19"
	],
	"src_reg_10_20",
	"src_reg_10_21",
	"src_reg_10_22",
	"src_reg_10_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17",
	[
		"src_reg_10_18",
		"src_reg_10_19"
	],
	"src_reg_10_20",
	"src_reg_10_21",
	"src_reg_10_22",
	"src_reg_10_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17",
	[
		"src_reg_10_18",
		"src_reg_10_19"
	],
	"src_reg_10_20",
	"src_reg_10_21",
	"src_reg_10_22",
	"src_reg_10_23",
	"",
	"",
	"src_reg_10_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17",
	[
		"src_reg_10_18",
		"src_reg_10_19"
	],
	"src_reg_10_20",
	"src_reg_10_21",
	"src_reg_10_22",
	"src_reg_10_23",
	"",
	"",
	"src_reg_10_24",
	"src_reg_10_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_10_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_14",
	[
		""
	],
	"src_reg_10_15",
	"src_reg_10_16",
	"src_reg_10_17",
	[
		"src_reg_10_18",
		"src_reg_10_19"
	],
	"src_reg_10_20",
	"src_reg_10_21",
	"src_reg_10_22",
	"src_reg_10_23",
	"",
	"",
	"src_reg_10_24",
	"src_reg_10_25",
	"src_reg_10_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_10_117 ] [ ] [ src_reg_10_118 ] [ src_reg_10_119 ] [ src_reg_10_120 ] [ [ src_reg_10_121 ] [ src_reg_10_122 ] ] [ src_reg_10_123 ] [ src_reg_10_124 ] [ src_reg_10_125 ] [ src_reg_10_126 ] [ ] [ src_reg_10_127 ] [ src_reg_10_128 ] [ src_reg_10_129 ] [ src_reg_10_130 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_10_117 ] [ ] [ src_reg_10_118 ] [ src_reg_10_119 ] [ src_reg_10_120 ] [ [ src_reg_10_121 ] [ src_reg_10_122 ] ] [ src_reg_10_123 ] [ src_reg_10_124 ] [ src_reg_10_125 ] [ src_reg_10_126 ] [ ] [ src_reg_10_127 ] [ src_reg_10_128 ] [ src_reg_10_129 ] [ src_reg_10_130 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_117 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_118 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_119 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_120 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_10_121 ] [ src_reg_10_122 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_10_121 ] [ src_reg_10_122 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_121 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_121"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_122 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_121",
	"src_reg_10_122"
]

[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120",
	[
		"src_reg_10_121",
		"src_reg_10_122"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_123 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120",
	[
		"src_reg_10_121",
		"src_reg_10_122"
	],
	"src_reg_10_123"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_124 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120",
	[
		"src_reg_10_121",
		"src_reg_10_122"
	],
	"src_reg_10_123",
	"src_reg_10_124"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_125 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120",
	[
		"src_reg_10_121",
		"src_reg_10_122"
	],
	"src_reg_10_123",
	"src_reg_10_124",
	"src_reg_10_125"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_10_126 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120",
	[
		"src_reg_10_121",
		"src_reg_10_122"
	],
	"src_reg_10_123",
	"src_reg_10_124",
	"src_reg_10_125",
	"src_reg_10_126"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120",
	[
		"src_reg_10_121",
		"src_reg_10_122"
	],
	"src_reg_10_123",
	"src_reg_10_124",
	"src_reg_10_125",
	"src_reg_10_126",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_127 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120",
	[
		"src_reg_10_121",
		"src_reg_10_122"
	],
	"src_reg_10_123",
	"src_reg_10_124",
	"src_reg_10_125",
	"src_reg_10_126",
	"",
	"",
	"src_reg_10_127"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_10_128 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120",
	[
		"src_reg_10_121",
		"src_reg_10_122"
	],
	"src_reg_10_123",
	"src_reg_10_124",
	"src_reg_10_125",
	"src_reg_10_126",
	"",
	"",
	"src_reg_10_127",
	"src_reg_10_128"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_10_129 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_10_117",
	[
		""
	],
	"src_reg_10_118",
	"src_reg_10_119",
	"src_reg_10_120",
	[
		"src_reg_10_121",
		"src_reg_10_122"
	],
	"src_reg_10_123",
	"src_reg_10_124",
	"src_reg_10_125",
	"src_reg_10_126",
	"",
	"",
	"src_reg_10_127",
	"src_reg_10_128",
	"src_reg_10_129"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_10_103 ] [ ] [ dst_reg_10_104 ] [ dst_reg_10_105 ] [ dst_reg_10_106 ] [ [ dst_reg_10_107 ] [ dst_reg_10_108 ] ] [ dst_reg_10_109 ] [ dst_reg_10_110 ] [ dst_reg_10_111 ] [ dst_reg_10_112 ] [ ] [ dst_reg_10_113 ] [ dst_reg_10_114 ] [ dst_reg_10_115 ] [ dst_reg_10_116 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_10_103 ] [ ] [ dst_reg_10_104 ] [ dst_reg_10_105 ] [ dst_reg_10_106 ] [ [ dst_reg_10_107 ] [ dst_reg_10_108 ] ] [ dst_reg_10_109 ] [ dst_reg_10_110 ] [ dst_reg_10_111 ] [ dst_reg_10_112 ] [ ] [ dst_reg_10_113 ] [ dst_reg_10_114 ] [ dst_reg_10_115 ] [ dst_reg_10_116 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_103 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_104 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_105 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_106 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_10_107 ] [ dst_reg_10_108 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_10_107 ] [ dst_reg_10_108 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_107 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_107"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_108 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_107",
	"dst_reg_10_108"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106",
	[
		"dst_reg_10_107",
		"dst_reg_10_108"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_109 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106",
	[
		"dst_reg_10_107",
		"dst_reg_10_108"
	],
	"dst_reg_10_109"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_110 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106",
	[
		"dst_reg_10_107",
		"dst_reg_10_108"
	],
	"dst_reg_10_109",
	"dst_reg_10_110"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_111 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106",
	[
		"dst_reg_10_107",
		"dst_reg_10_108"
	],
	"dst_reg_10_109",
	"dst_reg_10_110",
	"dst_reg_10_111"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_10_112 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106",
	[
		"dst_reg_10_107",
		"dst_reg_10_108"
	],
	"dst_reg_10_109",
	"dst_reg_10_110",
	"dst_reg_10_111",
	"dst_reg_10_112"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106",
	[
		"dst_reg_10_107",
		"dst_reg_10_108"
	],
	"dst_reg_10_109",
	"dst_reg_10_110",
	"dst_reg_10_111",
	"dst_reg_10_112",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_113 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106",
	[
		"dst_reg_10_107",
		"dst_reg_10_108"
	],
	"dst_reg_10_109",
	"dst_reg_10_110",
	"dst_reg_10_111",
	"dst_reg_10_112",
	"",
	"",
	"dst_reg_10_113"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_10_114 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106",
	[
		"dst_reg_10_107",
		"dst_reg_10_108"
	],
	"dst_reg_10_109",
	"dst_reg_10_110",
	"dst_reg_10_111",
	"dst_reg_10_112",
	"",
	"",
	"dst_reg_10_113",
	"dst_reg_10_114"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_10_115 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_10_103",
	[
		""
	],
	"dst_reg_10_104",
	"dst_reg_10_105",
	"dst_reg_10_106",
	[
		"dst_reg_10_107",
		"dst_reg_10_108"
	],
	"dst_reg_10_109",
	"dst_reg_10_110",
	"dst_reg_10_111",
	"dst_reg_10_112",
	"",
	"",
	"dst_reg_10_113",
	"dst_reg_10_114",
	"dst_reg_10_115"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_XOR
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_10_0",
      [ "" ],
      "dst_reg_10_1",
      "dst_reg_10_2",
      "dst_reg_10_3",
      [ "dst_reg_10_4", "dst_reg_10_5" ],
      "dst_reg_10_6",
      "dst_reg_10_7",
      "dst_reg_10_8",
      "dst_reg_10_9",
      "",
      "",
      "dst_reg_10_10",
      "dst_reg_10_11",
      "dst_reg_10_12"
   ],
   "src_reg" : [
      "src_reg_10_14",
      [ "" ],
      "src_reg_10_15",
      "src_reg_10_16",
      "src_reg_10_17",
      [ "src_reg_10_18", "src_reg_10_19" ],
      "src_reg_10_20",
      "src_reg_10_21",
      "src_reg_10_22",
      "src_reg_10_23",
      "",
      "",
      "src_reg_10_24",
      "src_reg_10_25",
      "src_reg_10_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_10_103",
      [ "" ],
      "dst_reg_10_104",
      "dst_reg_10_105",
      "dst_reg_10_106",
      [ "dst_reg_10_107", "dst_reg_10_108" ],
      "dst_reg_10_109",
      "dst_reg_10_110",
      "dst_reg_10_111",
      "dst_reg_10_112",
      "",
      "",
      "dst_reg_10_113",
      "dst_reg_10_114",
      "dst_reg_10_115"
   ],
   "src_reg" : [
      "src_reg_10_117",
      [ "" ],
      "src_reg_10_118",
      "src_reg_10_119",
      "src_reg_10_120",
      [ "src_reg_10_121", "src_reg_10_122" ],
      "src_reg_10_123",
      "src_reg_10_124",
      "src_reg_10_125",
      "src_reg_10_126",
      "",
      "",
      "src_reg_10_127",
      "src_reg_10_128",
      "src_reg_10_129"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun tobool.not.i.i_10_36 () (_ BitVec 1))
(declare-fun src_reg1.sroa.10.0.copyload_10_34 () (_ BitVec 64))
(declare-fun src_reg_10_19 () (_ BitVec 64))
(declare-fun src_reg1.sroa.22.0.copyload_10_33 () (_ BitVec 64))
(declare-fun src_reg_10_23 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_10_32 () (_ BitVec 64))
(declare-fun src_reg_10_22 () (_ BitVec 64))
(declare-fun src_reg1.sroa.15.0.copyload_10_31 () (_ BitVec 64))
(declare-fun src_reg_10_21 () (_ BitVec 64))
(declare-fun src_reg1.sroa.13.0.copyload_10_30 () (_ BitVec 64))
(declare-fun src_reg_10_20 () (_ BitVec 64))
(declare-fun src_reg_10_27 () (_ BitVec 8))
(declare-fun src_reg_10_26 () (_ BitVec 32))
(declare-fun src_reg_10_25 () (_ BitVec 32))
(declare-fun src_reg_10_24 () (_ BitVec 32))
(declare-fun src_reg_10_18 () (_ BitVec 64))
(declare-fun src_reg_10_17 () (_ BitVec 32))
(declare-fun src_reg_10_16 () (_ BitVec 32))
(declare-fun src_reg_10_15 () (_ BitVec 32))
(declare-fun src_reg_10_14 () (_ BitVec 32))
(declare-fun dst_reg_10_13 () (_ BitVec 8))
(declare-fun dst_reg_10_12 () (_ BitVec 32))
(declare-fun dst_reg_10_11 () (_ BitVec 32))
(declare-fun dst_reg_10_10 () (_ BitVec 32))
(declare-fun dst_reg_10_9 () (_ BitVec 64))
(declare-fun dst_reg_10_8 () (_ BitVec 64))
(declare-fun dst_reg_10_7 () (_ BitVec 64))
(declare-fun dst_reg_10_6 () (_ BitVec 64))
(declare-fun dst_reg_10_5 () (_ BitVec 64))
(declare-fun dst_reg_10_4 () (_ BitVec 64))
(declare-fun dst_reg_10_3 () (_ BitVec 32))
(declare-fun dst_reg_10_2 () (_ BitVec 32))
(declare-fun dst_reg_10_1 () (_ BitVec 32))
(declare-fun dst_reg_10_0 () (_ BitVec 32))
(declare-fun cmp24.i_10_43 () (_ BitVec 1))
(declare-fun or.cond199.i_10_45 () (_ BitVec 1))
(declare-fun or.cond198.i_10_42 () (_ BitVec 1))
(declare-fun or.cond197.i_10_40 () (_ BitVec 1))
(declare-fun cmp21.i_10_41 () (_ BitVec 1))
(declare-fun cmp18.not.i_10_38 () (_ BitVec 1))
(declare-fun cmp16.not.i_10_37 () (_ BitVec 1))
(declare-fun cmp24.old.i_10_47 () (_ BitVec 1))
(declare-fun or.cond200.i_10_49 () (_ BitVec 1))
(declare-fun cmp21.old.i_10_46 () (_ BitVec 1))
(declare-fun neg.i.i.i_10_73 () (_ BitVec 64))
(declare-fun i9.i.i_10_70 () (_ BitVec 64))
(declare-fun and4.i.i.i_10_74 () (_ BitVec 64))
(declare-fun i11.i.i_10_71 () (_ BitVec 64))
(declare-fun src_reg_10_130 () (_ BitVec 8))
(declare-fun src_reg_10_102 () (_ BitVec 8))
(declare-fun src_reg_10_129 () (_ BitVec 32))
(declare-fun src_reg_10_101 () (_ BitVec 32))
(declare-fun src_reg_10_128 () (_ BitVec 32))
(declare-fun src_reg_10_100 () (_ BitVec 32))
(declare-fun src_reg_10_127 () (_ BitVec 32))
(declare-fun src_reg_10_99 () (_ BitVec 32))
(declare-fun src_reg_10_126 () (_ BitVec 64))
(declare-fun src_reg_10_98 () (_ BitVec 64))
(declare-fun src_reg_10_125 () (_ BitVec 64))
(declare-fun src_reg_10_97 () (_ BitVec 64))
(declare-fun src_reg_10_124 () (_ BitVec 64))
(declare-fun src_reg_10_96 () (_ BitVec 64))
(declare-fun src_reg_10_123 () (_ BitVec 64))
(declare-fun src_reg_10_95 () (_ BitVec 64))
(declare-fun src_reg_10_122 () (_ BitVec 64))
(declare-fun src_reg_10_94 () (_ BitVec 64))
(declare-fun src_reg_10_121 () (_ BitVec 64))
(declare-fun src_reg_10_93 () (_ BitVec 64))
(declare-fun src_reg_10_120 () (_ BitVec 32))
(declare-fun src_reg_10_92 () (_ BitVec 32))
(declare-fun src_reg_10_119 () (_ BitVec 32))
(declare-fun src_reg_10_91 () (_ BitVec 32))
(declare-fun src_reg_10_118 () (_ BitVec 32))
(declare-fun src_reg_10_90 () (_ BitVec 32))
(declare-fun src_reg_10_117 () (_ BitVec 32))
(declare-fun src_reg_10_89 () (_ BitVec 32))
(declare-fun dst_reg_10_116 () (_ BitVec 8))
(declare-fun dst_reg_10_88 () (_ BitVec 8))
(declare-fun dst_reg_10_115 () (_ BitVec 32))
(declare-fun dst_reg_10_87 () (_ BitVec 32))
(declare-fun dst_reg_10_114 () (_ BitVec 32))
(declare-fun dst_reg_10_86 () (_ BitVec 32))
(declare-fun dst_reg_10_113 () (_ BitVec 32))
(declare-fun dst_reg_10_85 () (_ BitVec 32))
(declare-fun dst_reg_10_112 () (_ BitVec 64))
(declare-fun dst_reg_10_84 () (_ BitVec 64))
(declare-fun dst_reg_10_111 () (_ BitVec 64))
(declare-fun dst_reg_10_83 () (_ BitVec 64))
(declare-fun dst_reg_10_110 () (_ BitVec 64))
(declare-fun dst_reg_10_82 () (_ BitVec 64))
(declare-fun dst_reg_10_109 () (_ BitVec 64))
(declare-fun dst_reg_10_81 () (_ BitVec 64))
(declare-fun dst_reg_10_108 () (_ BitVec 64))
(declare-fun dst_reg_10_80 () (_ BitVec 64))
(declare-fun dst_reg_10_107 () (_ BitVec 64))
(declare-fun dst_reg_10_79 () (_ BitVec 64))
(declare-fun dst_reg_10_106 () (_ BitVec 32))
(declare-fun dst_reg_10_78 () (_ BitVec 32))
(declare-fun dst_reg_10_105 () (_ BitVec 32))
(declare-fun dst_reg_10_77 () (_ BitVec 32))
(declare-fun dst_reg_10_104 () (_ BitVec 32))
(declare-fun dst_reg_10_76 () (_ BitVec 32))
(declare-fun dst_reg_10_103 () (_ BitVec 32))
(declare-fun dst_reg_10_75 () (_ BitVec 32))
(assert
 (let (($x76 (= tobool.not.i.i_10_36 (_ bv0 1))))
 (let (($x78 (= tobool.not.i.i_10_36 (_ bv1 1))))
 (let (($x79 (ite (= src_reg1.sroa.10.0.copyload_10_34 (_ bv0 64)) $x78 $x76)))
 (let (($x71 (= src_reg_10_19 src_reg1.sroa.10.0.copyload_10_34)))
 (let (($x69 (= src_reg_10_23 src_reg1.sroa.22.0.copyload_10_33)))
 (let (($x67 (= src_reg_10_22 src_reg1.sroa.17.0.copyload_10_32)))
 (let (($x65 (= src_reg_10_21 src_reg1.sroa.15.0.copyload_10_31)))
 (let (($x63 (= src_reg_10_20 src_reg1.sroa.13.0.copyload_10_30)))
 (let (($x60 (= src_reg_10_27 src_reg_10_27)))
 (let (($x59 (= src_reg_10_26 src_reg_10_26)))
 (let (($x58 (= src_reg_10_25 src_reg_10_25)))
 (let (($x57 (= src_reg_10_24 src_reg_10_24)))
 (let (($x56 (= src_reg_10_23 src_reg_10_23)))
 (let (($x55 (= src_reg_10_22 src_reg_10_22)))
 (let (($x54 (= src_reg_10_21 src_reg_10_21)))
 (let (($x53 (= src_reg_10_20 src_reg_10_20)))
 (let (($x52 (= src_reg_10_19 src_reg_10_19)))
 (let (($x51 (= src_reg_10_18 src_reg_10_18)))
 (let (($x50 (= src_reg_10_17 src_reg_10_17)))
 (let (($x49 (= src_reg_10_16 src_reg_10_16)))
 (let (($x48 (= src_reg_10_15 src_reg_10_15)))
 (let (($x47 (= src_reg_10_14 src_reg_10_14)))
 (let (($x32 (= dst_reg_10_13 dst_reg_10_13)))
 (let (($x31 (= dst_reg_10_12 dst_reg_10_12)))
 (let (($x30 (= dst_reg_10_11 dst_reg_10_11)))
 (let (($x29 (= dst_reg_10_10 dst_reg_10_10)))
 (let (($x28 (= dst_reg_10_9 dst_reg_10_9)))
 (let (($x27 (= dst_reg_10_8 dst_reg_10_8)))
 (let (($x26 (= dst_reg_10_7 dst_reg_10_7)))
 (let (($x25 (= dst_reg_10_6 dst_reg_10_6)))
 (let (($x24 (= dst_reg_10_5 dst_reg_10_5)))
 (let (($x23 (= dst_reg_10_4 dst_reg_10_4)))
 (let (($x22 (= dst_reg_10_3 dst_reg_10_3)))
 (let (($x21 (= dst_reg_10_2 dst_reg_10_2)))
 (let (($x20 (= dst_reg_10_1 dst_reg_10_1)))
 (let (($x19 (= dst_reg_10_0 dst_reg_10_0)))
 (let (($x109 (= or.cond199.i_10_45 (_ bv1 1))))
 (let (($x111 (ite (= or.cond198.i_10_42 (_ bv1 1)) $x109 (= or.cond199.i_10_45 cmp24.i_10_43))))
 (let (($x104 (= cmp24.i_10_43 (_ bv0 1))))
 (let (($x105 (= cmp24.i_10_43 (_ bv1 1))))
 (let (($x103 (bvugt src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33)))
 (let (($x106 (ite $x103 $x105 $x104)))
 (let (($x101 (= or.cond198.i_10_42 (bvor cmp21.i_10_41 or.cond197.i_10_40))))
 (let (($x96 (= cmp21.i_10_41 (_ bv0 1))))
 (let (($x97 (= cmp21.i_10_41 (_ bv1 1))))
 (let (($x95 (bvsgt src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31)))
 (let (($x98 (ite $x95 $x97 $x96)))
 (let (($x83 (= cmp16.not.i_10_37 (_ bv1 1))))
 (let (($x93 (ite $x83 (= or.cond197.i_10_40 (_ bv1 1)) (= or.cond197.i_10_40 cmp18.not.i_10_38))))
 (let (($x87 (= cmp18.not.i_10_38 (_ bv0 1))))
 (let (($x88 (= cmp18.not.i_10_38 (_ bv1 1))))
 (let (($x86 (and (distinct src_reg1.sroa.17.0.copyload_10_32 src_reg1.sroa.22.0.copyload_10_33) true)))
 (let (($x89 (ite $x86 $x88 $x87)))
 (let (($x82 (= cmp16.not.i_10_37 (_ bv0 1))))
 (let (($x81 (and (distinct src_reg1.sroa.13.0.copyload_10_30 src_reg1.sroa.15.0.copyload_10_31) true)))
 (let (($x84 (ite $x81 $x83 $x82)))
 (let (($x277 (=> $x78 (and $x84 $x89 $x93 $x98 $x101 $x106 $x111))))
 (let (($x122 (= or.cond200.i_10_49 (_ bv1 1))))
 (let (($x114 (= cmp21.old.i_10_46 (_ bv1 1))))
 (let (($x123 (ite $x114 $x122 (= or.cond200.i_10_49 cmp24.old.i_10_47))))
 (let (($x117 (= cmp24.old.i_10_47 (_ bv0 1))))
 (let (($x118 (= cmp24.old.i_10_47 (_ bv1 1))))
 (let (($x119 (ite $x103 $x118 $x117)))
 (let (($x113 (= cmp21.old.i_10_46 (_ bv0 1))))
 (let (($x115 (ite $x95 $x114 $x113)))
 (let (($x275 (=> $x76 (and $x115 $x119 $x123))))
 (let (($x137 (= and4.i.i.i_10_74 (bvand i9.i.i_10_70 neg.i.i.i_10_73))))
 (let (($x134 (= neg.i.i.i_10_73 (bvxor i11.i.i_10_71 (_ bv18446744073709551615 64)))))
 (let (($x131 (= (_ bv18446744073709551615 64) i11.i.i_10_71)))
 (let (($x129 (= (_ bv0 64) i9.i.i_10_70)))
 (let (($x197 (= or.cond199.i_10_45 (_ bv0 1))))
 (let (($x199 (and $x197 $x78)))
 (let (($x200 (= or.cond200.i_10_49 (_ bv0 1))))
 (let (($x202 (and $x200 $x76)))
 (let (($x204 (or $x202 $x199)))
 (let (($x205 (and $x78 $x204)))
 (let (($x273 (=> $x205 (and $x129 $x131 $x134 $x137))))
 (let (($x269 (= src_reg_10_102 src_reg_10_130)))
 (let (($x268 (= src_reg_10_101 src_reg_10_129)))
 (let (($x267 (= src_reg_10_100 src_reg_10_128)))
 (let (($x266 (= src_reg_10_99 src_reg_10_127)))
 (let (($x265 (= src_reg_10_98 src_reg_10_126)))
 (let (($x264 (= src_reg_10_97 src_reg_10_125)))
 (let (($x263 (= src_reg_10_96 src_reg_10_124)))
 (let (($x262 (= src_reg_10_95 src_reg_10_123)))
 (let (($x261 (= src_reg_10_94 src_reg_10_122)))
 (let (($x260 (= src_reg_10_93 src_reg_10_121)))
 (let (($x259 (= src_reg_10_92 src_reg_10_120)))
 (let (($x258 (= src_reg_10_91 src_reg_10_119)))
 (let (($x257 (= src_reg_10_90 src_reg_10_118)))
 (let (($x256 (= src_reg_10_89 src_reg_10_117)))
 (let (($x241 (= dst_reg_10_88 dst_reg_10_116)))
 (let (($x240 (= dst_reg_10_87 dst_reg_10_115)))
 (let (($x239 (= dst_reg_10_86 dst_reg_10_114)))
 (let (($x238 (= dst_reg_10_85 dst_reg_10_113)))
 (let (($x237 (= dst_reg_10_84 dst_reg_10_112)))
 (let (($x236 (= dst_reg_10_83 dst_reg_10_111)))
 (let (($x235 (= dst_reg_10_82 dst_reg_10_110)))
 (let (($x234 (= dst_reg_10_81 dst_reg_10_109)))
 (let (($x233 (= dst_reg_10_80 dst_reg_10_108)))
 (let (($x232 (= dst_reg_10_79 dst_reg_10_107)))
 (let (($x231 (= dst_reg_10_78 dst_reg_10_106)))
 (let (($x230 (= dst_reg_10_77 dst_reg_10_105)))
 (let (($x229 (= dst_reg_10_76 dst_reg_10_104)))
 (let (($x228 (= dst_reg_10_75 dst_reg_10_103)))
 (let (($x193 (= dst_reg_10_13 dst_reg_10_88)))
 (let (($x192 (= dst_reg_10_12 dst_reg_10_87)))
 (let (($x191 (= dst_reg_10_11 dst_reg_10_86)))
 (let (($x190 (= (_ bv0 32) dst_reg_10_85)))
 (let (($x189 (= (_ bv18446744073709551615 64) dst_reg_10_84)))
 (let (($x188 (= (_ bv0 64) dst_reg_10_83)))
 (let (($x187 (= (_ bv9223372036854775807 64) dst_reg_10_82)))
 (let (($x186 (= (_ bv9223372036854775808 64) dst_reg_10_81)))
 (let (($x185 (= (_ bv18446744073709551615 64) dst_reg_10_80)))
 (let (($x184 (= (_ bv0 64) dst_reg_10_79)))
 (let (($x183 (= dst_reg_10_3 dst_reg_10_78)))
 (let (($x182 (= dst_reg_10_2 dst_reg_10_77)))
 (let (($x181 (= dst_reg_10_1 dst_reg_10_76)))
 (let (($x180 (= (_ bv1 32) dst_reg_10_75)))
 (let (($x179 (= src_reg_10_27 src_reg_10_102)))
 (let (($x178 (= src_reg_10_26 src_reg_10_101)))
 (let (($x177 (= src_reg_10_25 src_reg_10_100)))
 (let (($x176 (= src_reg_10_24 src_reg_10_99)))
 (let (($x175 (= src_reg_10_23 src_reg_10_98)))
 (let (($x174 (= src_reg_10_22 src_reg_10_97)))
 (let (($x173 (= src_reg_10_21 src_reg_10_96)))
 (let (($x172 (= src_reg_10_20 src_reg_10_95)))
 (let (($x171 (= src_reg_10_19 src_reg_10_94)))
 (let (($x170 (= src_reg_10_18 src_reg_10_93)))
 (let (($x169 (= src_reg_10_17 src_reg_10_92)))
 (let (($x168 (= src_reg_10_16 src_reg_10_91)))
 (let (($x167 (= src_reg_10_15 src_reg_10_90)))
 (let (($x166 (= (_ bv1 32) src_reg_10_89)))
 (let (($x209 (and $x166 $x167 $x168 $x169 $x170 $x171 $x172 $x173 $x174 $x175 $x176 $x177 $x178 $x179 $x180 $x181 $x182 $x183 $x184 $x185 $x186 $x187 $x188 $x189 $x190 $x191 $x192 $x193)))
 (let (($x206 (and $x76 $x204)))
 (let (($x213 (=> $x206 $x209)))
 (let (($x196 (= dst_reg_10_10 dst_reg_10_85)))
 (let (($x195 (= i11.i.i_10_71 dst_reg_10_80)))
 (let (($x194 (= and4.i.i.i_10_74 dst_reg_10_79)))
 (let (($x211 (and $x166 $x167 $x168 $x169 $x170 $x171 $x172 $x173 $x174 $x175 $x176 $x177 $x178 $x179 $x180 $x181 $x182 $x183 $x194 $x195 $x186 $x187 $x188 $x189 $x196 $x191 $x192 $x193)))
 (let (($x212 (=> $x205 $x211)))
 (let (($x198 (and $x109 $x78)))
 (let (($x201 (and $x122 $x76)))
 (let (($x203 (or $x201 $x198)))
 (let (($x210 (=> $x203 $x209)))
 (let (($x270 (and $x210 $x212 $x213 $x228 $x229 $x230 $x231 $x232 $x233 $x234 $x235 $x236 $x237 $x238 $x239 $x240 $x241 $x256 $x257 $x258 $x259 $x260 $x261 $x262 $x263 $x264 $x265 $x266 $x267 $x268 $x269)))
 (let (($x208 (or $x205 (or $x206 $x203))))
 (let (($x271 (=> $x208 $x270)))
 (and $x271 $x273 $x275 $x277 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR/BPF_XOR.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_XOR BPF_XOR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_XOR 10 BPF_XOR.smt2

Finished llvm_to_smt_pass
