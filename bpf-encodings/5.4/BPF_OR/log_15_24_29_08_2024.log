Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR BPF_OR.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_OR
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_OR
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0xd2f230
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_OR'<<0xd2f230>>  #uses=1
  CS<0xbb45c0> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_OR /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR BPF_OR.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_OR
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_OR'<<0x1dc7820>>  #uses=1
  CS<0x1c0f610> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_OR
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_OR
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_OR /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR BPF_OR.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_OR
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy1 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy1, %struct.tnum* %var_off.i28.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_OR:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i29.i = bitcast %struct.tnum* %var_off.i28.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_OR /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_OR
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_OR /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_OR
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_OR'<<0x2595ad0>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_OR
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_OR
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_OR /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_OR -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_OR
GLOBAL_BITVECTOR_SUFFIX: 4
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_0
[lookInsideStruct] singleValueType:dst_reg_4_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_1
[lookInsideStruct] singleValueType:dst_reg_4_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_2
[lookInsideStruct] singleValueType:dst_reg_4_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_3
[lookInsideStruct] singleValueType:dst_reg_4_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_4
[lookInsideStruct] singleValueType:dst_reg_4_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_5
[lookInsideStruct] singleValueType:dst_reg_4_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_6
[lookInsideStruct] singleValueType:dst_reg_4_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_7
[lookInsideStruct] singleValueType:dst_reg_4_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_8
[lookInsideStruct] singleValueType:dst_reg_4_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_9
[lookInsideStruct] singleValueType:dst_reg_4_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_10
[lookInsideStruct] singleValueType:dst_reg_4_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_11
[lookInsideStruct] singleValueType:dst_reg_4_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_12
[lookInsideStruct] singleValueType:dst_reg_4_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_13
[lookInsideStruct] singleValueType:dst_reg_4_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_14
[lookInsideStruct] singleValueType:src_reg_4_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_15
[lookInsideStruct] singleValueType:src_reg_4_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_16
[lookInsideStruct] singleValueType:src_reg_4_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_17
[lookInsideStruct] singleValueType:src_reg_4_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_18
[lookInsideStruct] singleValueType:src_reg_4_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_19
[lookInsideStruct] singleValueType:src_reg_4_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_20
[lookInsideStruct] singleValueType:src_reg_4_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_21
[lookInsideStruct] singleValueType:src_reg_4_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_22
[lookInsideStruct] singleValueType:src_reg_4_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_23
[lookInsideStruct] singleValueType:src_reg_4_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_24
[lookInsideStruct] singleValueType:src_reg_4_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_25
[lookInsideStruct] singleValueType:src_reg_4_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_26
[lookInsideStruct] singleValueType:src_reg_4_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_27
[lookInsideStruct] singleValueType:src_reg_4_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_4_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.3.0.copyload_4_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_4_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleLoadInst] (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_4_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_4_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleLoadInst] (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)

-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.13.0.copyload_4_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_4_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleLoadInst] (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)

-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.15.0.copyload_4_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_4_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleLoadInst] (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_4_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_4_34
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleLoadInst] (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_4_35
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_4_35
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleLoadInst] (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)

-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_4_31
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_4_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_4_37
[handleICmpInst] (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))

-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i215.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i215.i_4_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i215.i_4_38
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleLoadInst] (= dst_reg_4_5 i215.i_4_38)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)

-------------------
  %tobool.not.i25.i = icmp eq i64 %i215.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_4_38
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i25.i = icmp eq i64 %i215.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i25.i_4_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i25.i_4_40
[handleICmpInst] (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_4_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_4_33
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.not.i_4_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.not.i_4_41
[handleICmpInst] (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_4_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_4_35
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i_4_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i_4_42
[handleICmpInst] (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:2
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleSelectInst]SelectMap:
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.not.i_4_41
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i_4_42
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond197.i_4_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond197.i_4_44
[handleSelectInst] z3ExprSelectOp1: cmp16.not.i_4_41
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp18.not.i_4_42
[handleSelectInst] z3ExprRes: or.cond197.i_4_44
[handleSelectInst](ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_4_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_4_33
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.i_4_45
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.i_4_45
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:4
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[handleBinaryOperatorInst] op1Val:   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[handleBinaryOperatorInst] opResVal:   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.i_4_45
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond197.i_4_44
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond198.i_4_46
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond198.i_4_46
[handleBinaryOperatorInst] OR instruction
(= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_4_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_4_35
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.i_4_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.i_4_47
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:6
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleSelectInst]SelectMap:
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond198.i_4_46
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.i_4_47
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond199.i_4_49
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond199.i_4_49
[handleSelectInst] z3ExprSelectOp1: or.cond198.i_4_46
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.i_4_47
[handleSelectInst] z3ExprRes: or.cond199.i_4_49
[handleSelectInst](ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_4_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_4_33
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.old.i_4_50
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.old.i_4_50
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_4_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_4_35
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_4_51
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_4_51
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:2
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleSelectInst]SelectMap:
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.old.i_4_50
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_4_51
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond200.i_4_53
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond200.i_4_53
[handleSelectInst] z3ExprSelectOp1: cmp21.old.i_4_50
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.old.i_4_51
[handleSelectInst] z3ExprRes: or.cond200.i_4_53
[handleSelectInst](ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] definingMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] definingMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb201.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] definingMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(17)
[handleStoreInst] definingMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
sw.bb201.i
=========================
-------------------
  %i254.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i254.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i254.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i254.i_4_70
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i254.i_4_70
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleLoadInst] (= dst_reg_4_4 i254.i_4_70)
[printBBAssertionsMap] 
BasicBlock: sw.bb201.i, Size:1
  (= dst_reg_4_4 i254.i_4_70)
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i254.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] opResVal:   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType]   %i254.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i254.i_4_70
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_4_30
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i_4_71
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i_4_71
[handleBinaryOperatorInst] OR instruction
(= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
-------------------
  br i1 %tobool.not.i25.i, label %if.then207.i, label %if.end212.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then207.i
=========================
-------------------
  store i64 %or.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[handleStoreInst] BVToStore: or.i_4_71
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_4_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  store i64 0, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %smin_value.i149.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i149.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i149.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
umax_value.i.i34.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %or.i, i64* %smin_value.i149.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[handleStoreInst] BVToStore: or.i_4_71
[handleStoreInst] destPointerValue:   %smin_value.i149.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i149.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_4_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %smax_value.i150.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i150.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smin_value.i149.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umax_value.i.i.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i34.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %or.i, i64* %smax_value.i150.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[handleStoreInst] BVToStore: or.i_4_71
[handleStoreInst] destPointerValue:   %smax_value.i150.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i150.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_4_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %umin_value.i151.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i151.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smin_value.i149.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umin_value.i151.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i34.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %or.i, i64* %umin_value.i151.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[handleStoreInst] BVToStore: or.i_4_71
[handleStoreInst] destPointerValue:   %umin_value.i151.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i151.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_4_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %umax_value.i152.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i152.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i152.i, dst_reg, [9]
smin_value.i149.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umin_value.i151.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i34.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %or.i, i64* %umax_value.i152.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[handleStoreInst] BVToStore: or.i_4_71
[handleStoreInst] destPointerValue:   %umax_value.i152.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i152.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_4_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end212.i
=========================
-------------------
  %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i215.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] opResVal:   %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_4_38
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_4_31
[getBitVecSingValType]   %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or3.i154.i_4_73
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or3.i154.i_4_73
[handleBinaryOperatorInst] OR instruction
(= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
-------------------
  %neg.i155.i = xor i64 %or.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i155.i = xor i64 %or.i, -1
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i155.i = xor i64 %or.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i155.i_4_75
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i155.i_4_75
[handleBinaryOperatorInst] XOR instruction
(= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
-------------------
  %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[handleBinaryOperatorInst] op1Val:   %neg.i155.i = xor i64 %or.i, -1
[handleBinaryOperatorInst] opResVal:   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[getBitVecSingValType]   %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or3.i154.i_4_73
[getBitVecSingValType]   %neg.i155.i = xor i64 %or.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i155.i_4_75
[getBitVecSingValType]   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i156.i_4_76
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i156.i_4_76
[handleBinaryOperatorInst] AND instruction
(= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
-------------------
  store i64 %or.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[handleStoreInst] BVToStore: or.i_4_71
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_4_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  store i64 %and.i156.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i156.i_4_76
[handleStoreInst] BVToStore: and.i156.i_4_76
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] definingMemoryAccess: 25 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i156.i_4_76 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %umin_value218.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value218.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value218.i, dst_reg, [8]
umax_value.i152.i, dst_reg, [9]
smin_value.i149.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umin_value.i151.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i34.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  %i258.i = load i64, i64* %umin_value218.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i258.i = load i64, i64* %umin_value218.i, align 8
[handleLoadInst] pointerValue:   %umin_value218.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value218.i, dst_reg, [8]
umax_value.i152.i, dst_reg, [9]
smin_value.i149.i, dst_reg, [6]
smax_value.i.i32.i, dst_reg, [7]
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack1, dst_reg, [5, 1]
var_off.i28.i.repack, dst_reg, [5, 0]
umin_value.i151.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i34.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i.i31.i, dst_reg, [6]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack2, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i258.i = load i64, i64* %umin_value218.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i258.i_4_77
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i258.i_4_77
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleLoadInst] (= dst_reg_4_8 i258.i_4_77)
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:4
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp220.i = icmp ugt i64 %i258.i, %src_reg1.sroa.17.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i258.i = load i64, i64* %umin_value218.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i258.i_4_77
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_4_34
[getBitVecSingValType]   %cmp220.i = icmp ugt i64 %i258.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp220.i_4_78
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp220.i_4_78
[handleICmpInst] (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:5
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cond225.i = select i1 %cmp220.i, i64 %i258.i, i64 %src_reg1.sroa.17.0.copyload
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 26 = MemoryDef(25)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleSelectInst]SelectMap:
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp220.i = icmp ugt i64 %i258.i, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp220.i_4_78
[getBitVecSingValType]   %i258.i = load i64, i64* %umin_value218.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i258.i_4_77
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_4_34
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i258.i, i64 %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond225.i_4_79
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond225.i_4_79
[handleSelectInst] z3ExprSelectOp1: cmp220.i_4_78
[handleSelectInst] z3ExprSelectOp2: i258.i_4_77
[handleSelectInst] z3ExprSelectOp3: src_reg1.sroa.17.0.copyload_4_34
[handleSelectInst] z3ExprRes: cond225.i_4_79
[handleSelectInst](ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
-------------------
  store i64 %cond225.i, i64* %umin_value218.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i258.i, i64 %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond225.i_4_79
[handleStoreInst] BVToStore: cond225.i_4_79
[handleStoreInst] destPointerValue:   %umin_value218.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value218.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond225.i_4_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %or230.i = or i64 %or.i, %or3.i154.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] op1Val:   %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[handleBinaryOperatorInst] opResVal:   %or230.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[getBitVecSingValType]   %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or3.i154.i_4_73
[getBitVecSingValType]   %or230.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or230.i_4_80
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or230.i_4_80
[handleBinaryOperatorInst] OR instruction
(= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
-------------------
  %umax_value231.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value231.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  store i64 %or230.i, i64* %umax_value231.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or230.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or230.i_4_80
[handleStoreInst] BVToStore: or230.i_4_80
[handleStoreInst] destPointerValue:   %umax_value231.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] definingMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value231.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or230.i_4_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}

-------------------
  %smin_value232.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value232.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i260.i = load i64, i64* %smin_value232.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i260.i = load i64, i64* %smin_value232.i, align 8
[handleLoadInst] pointerValue:   %smin_value232.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i260.i = load i64, i64* %smin_value232.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i260.i_4_81
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i260.i_4_81
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleLoadInst] (= dst_reg_4_6 i260.i_4_81)
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:8
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp233.i = icmp slt i64 %i260.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i260.i = load i64, i64* %smin_value232.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i260.i_4_81
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp233.i = icmp slt i64 %i260.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp233.i_4_83
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp233.i_4_83
[handleICmpInst] (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:9
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp236.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_4_32
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp236.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp236.i_4_85
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp236.i_4_85
[handleICmpInst] (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:10
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %or.cond4.i = select i1 %cmp233.i, i1 true, i1 %cmp236.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 28 = MemoryDef(27)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleSelectInst]SelectMap:
or.cond4.i,,cmp236.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp233.i = icmp slt i64 %i260.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp233.i_4_83
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp236.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp236.i_4_85
[getBitVecSingValType]   %or.cond4.i = select i1 %cmp233.i, i1 true, i1 %cmp236.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond4.i_4_87
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond4.i_4_87
[handleSelectInst] z3ExprSelectOp1: cmp233.i_4_83
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp236.i_4_85
[handleSelectInst] z3ExprRes: or.cond4.i_4_87
[handleSelectInst](ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
-------------------
  %.cond225.i = select i1 %or.cond4.i, i64 -9223372036854775808, i64 %cond225.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 28 = MemoryDef(27)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleSelectInst]SelectMap:
.cond225.i,,cond225.i
or.cond4.i,,cmp236.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond4.i = select i1 %cmp233.i, i1 true, i1 %cmp236.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond4.i_4_87
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i258.i, i64 %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond225.i_4_79
[getBitVecSingValType]   %.cond225.i = select i1 %or.cond4.i, i64 -9223372036854775808, i64 %cond225.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: .cond225.i_4_89
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] .cond225.i_4_89
[handleSelectInst] z3ExprSelectOp1: or.cond4.i_4_87
[handleSelectInst] z3ExprSelectOp2: #x8000000000000000
[handleSelectInst] z3ExprSelectOp3: cond225.i_4_79
[handleSelectInst] z3ExprRes: .cond225.i_4_89
[handleSelectInst](ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
-------------------
  %.or230.i = select i1 %or.cond4.i, i64 9223372036854775807, i64 %or230.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 28 = MemoryDef(27)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleSelectInst]SelectMap:
.cond225.i,,cond225.i
or.cond4.i,,cmp236.i
.or230.i,,or230.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond4.i = select i1 %cmp233.i, i1 true, i1 %cmp236.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond4.i_4_87
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %or230.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or230.i_4_80
[getBitVecSingValType]   %.or230.i = select i1 %or.cond4.i, i64 9223372036854775807, i64 %or230.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: .or230.i_4_91
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] .or230.i_4_91
[handleSelectInst] z3ExprSelectOp1: or.cond4.i_4_87
[handleSelectInst] z3ExprSelectOp2: #x7fffffffffffffff
[handleSelectInst] z3ExprSelectOp3: or230.i_4_80
[handleSelectInst] z3ExprRes: .or230.i_4_91
[handleSelectInst](ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
-------------------
  store i64 %.cond225.i, i64* %smin_value232.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %.cond225.i = select i1 %or.cond4.i, i64 -9223372036854775808, i64 %cond225.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond225.i_4_89
[handleStoreInst] BVToStore: .cond225.i_4_89
[handleStoreInst] destPointerValue:   %smin_value232.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] definingMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value232.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ .cond225.i_4_89 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  %smax_value245.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value245.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  store i64 %.or230.i, i64* %smax_value245.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %.or230.i = select i1 %or.cond4.i, i64 9223372036854775807, i64 %or230.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .or230.i_4_91
[handleStoreInst] BVToStore: .or230.i_4_91
[handleStoreInst] destPointerValue:   %smax_value245.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value245.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ .or230.i_4_91 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  %and.i165.i = and i64 %and.i156.i, -9223372036854775808
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[handleBinaryOperatorInst] op1Val: i64 -9223372036854775808
[handleBinaryOperatorInst] opResVal:   %and.i165.i = and i64 %and.i156.i, -9223372036854775808
[getBitVecSingValType]   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i156.i_4_76
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %and.i165.i = and i64 %and.i156.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i165.i_4_93
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i165.i_4_93
[handleBinaryOperatorInst] AND instruction
(= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
-------------------
  %or.i166.i = or i64 %and.i165.i, %or.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i165.i = and i64 %and.i156.i, -9223372036854775808
[handleBinaryOperatorInst] op1Val:   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %or.i166.i = or i64 %and.i165.i, %or.i
[getBitVecSingValType]   %and.i165.i = and i64 %and.i156.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i165.i_4_93
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[getBitVecSingValType]   %or.i166.i = or i64 %and.i165.i, %or.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i166.i_4_94
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i166.i_4_94
[handleBinaryOperatorInst] OR instruction
(= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
-------------------
  %cmp.i167.i = icmp sgt i64 %.cond225.i, %or.i166.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %.cond225.i = select i1 %or.cond4.i, i64 -9223372036854775808, i64 %cond225.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond225.i_4_89
[getBitVecSingValType]   %or.i166.i = or i64 %and.i165.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i166.i_4_94
[getBitVecSingValType]   %cmp.i167.i = icmp sgt i64 %.cond225.i, %or.i166.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i167.i_4_95
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i167.i_4_95
[handleICmpInst] (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:16
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cond.i168.i = select i1 %cmp.i167.i, i64 %.cond225.i, i64 %or.i166.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 30 = MemoryDef(29)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleSelectInst]SelectMap:
.cond225.i,,cond225.i
or.cond4.i,,cmp236.i
.or230.i,,or230.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
or.cond200.i,,cmp24.old.i
cond.i168.i,.cond225.i,or.i166.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i167.i = icmp sgt i64 %.cond225.i, %or.i166.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i167.i_4_95
[getBitVecSingValType]   %.cond225.i = select i1 %or.cond4.i, i64 -9223372036854775808, i64 %cond225.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond225.i_4_89
[getBitVecSingValType]   %or.i166.i = or i64 %and.i165.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i166.i_4_94
[getBitVecSingValType]   %cond.i168.i = select i1 %cmp.i167.i, i64 %.cond225.i, i64 %or.i166.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i168.i_4_96
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i168.i_4_96
[handleSelectInst] z3ExprSelectOp1: cmp.i167.i_4_95
[handleSelectInst] z3ExprSelectOp2: .cond225.i_4_89
[handleSelectInst] z3ExprSelectOp3: or.i166.i_4_94
[handleSelectInst] z3ExprRes: cond.i168.i_4_96
[handleSelectInst](ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
-------------------
  store i64 %cond.i168.i, i64* %smin_value232.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i168.i = select i1 %cmp.i167.i, i64 %.cond225.i, i64 %or.i166.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i168.i_4_96
[handleStoreInst] BVToStore: cond.i168.i_4_96
[handleStoreInst] destPointerValue:   %smin_value232.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] definingMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value232.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ .cond225.i_4_89 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i168.i_4_96 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  %and7.i171.i = and i64 %and.i156.i, 9223372036854775807
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[handleBinaryOperatorInst] op1Val: i64 9223372036854775807
[handleBinaryOperatorInst] opResVal:   %and7.i171.i = and i64 %and.i156.i, 9223372036854775807
[getBitVecSingValType]   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i156.i_4_76
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %and7.i171.i = and i64 %and.i156.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and7.i171.i_4_98
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and7.i171.i_4_98
[handleBinaryOperatorInst] AND instruction
(= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
-------------------
  %or8.i172.i = or i64 %and7.i171.i, %or.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and7.i171.i = and i64 %and.i156.i, 9223372036854775807
[handleBinaryOperatorInst] op1Val:   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %or8.i172.i = or i64 %and7.i171.i, %or.i
[getBitVecSingValType]   %and7.i171.i = and i64 %and.i156.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and7.i171.i_4_98
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[getBitVecSingValType]   %or8.i172.i = or i64 %and7.i171.i, %or.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or8.i172.i_4_99
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or8.i172.i_4_99
[handleBinaryOperatorInst] OR instruction
(= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
-------------------
  %cmp10.i173.i = icmp slt i64 %.or230.i, %or8.i172.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %.or230.i = select i1 %or.cond4.i, i64 9223372036854775807, i64 %or230.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .or230.i_4_91
[getBitVecSingValType]   %or8.i172.i = or i64 %and7.i171.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i172.i_4_99
[getBitVecSingValType]   %cmp10.i173.i = icmp slt i64 %.or230.i, %or8.i172.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp10.i173.i_4_100
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp10.i173.i_4_100
[handleICmpInst] (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:20
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cond14.i174.i = select i1 %cmp10.i173.i, i64 %.or230.i, i64 %or8.i172.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 31 = MemoryDef(30)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 

[handleSelectInst]SelectMap:
cond14.i174.i,.or230.i,or8.i172.i
.cond225.i,,cond225.i
or.cond4.i,,cmp236.i
.or230.i,,or230.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
or.cond200.i,,cmp24.old.i
cond.i168.i,.cond225.i,or.i166.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp10.i173.i = icmp slt i64 %.or230.i, %or8.i172.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp10.i173.i_4_100
[getBitVecSingValType]   %.or230.i = select i1 %or.cond4.i, i64 9223372036854775807, i64 %or230.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .or230.i_4_91
[getBitVecSingValType]   %or8.i172.i = or i64 %and7.i171.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i172.i_4_99
[getBitVecSingValType]   %cond14.i174.i = select i1 %cmp10.i173.i, i64 %.or230.i, i64 %or8.i172.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond14.i174.i_4_101
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond14.i174.i_4_101
[handleSelectInst] z3ExprSelectOp1: cmp10.i173.i_4_100
[handleSelectInst] z3ExprSelectOp2: .or230.i_4_91
[handleSelectInst] z3ExprSelectOp3: or8.i172.i_4_99
[handleSelectInst] z3ExprRes: cond14.i174.i_4_101
[handleSelectInst](ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
-------------------
  store i64 %cond14.i174.i, i64* %smax_value245.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond14.i174.i = select i1 %cmp10.i173.i, i64 %.or230.i, i64 %or8.i172.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond14.i174.i_4_101
[handleStoreInst] BVToStore: cond14.i174.i_4_101
[handleStoreInst] destPointerValue:   %smax_value245.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] definingMemoryAccess: 31 = MemoryDef(30)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value245.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ .or230.i_4_91 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond14.i174.i_4_101 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  %cmp19.i177.i = icmp ugt i64 %cond225.i, %or.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i258.i, i64 %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond225.i_4_79
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[getBitVecSingValType]   %cmp19.i177.i = icmp ugt i64 %cond225.i, %or.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp19.i177.i_4_102
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp19.i177.i_4_102
[handleICmpInst] (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:22
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cond23.i178.i = select i1 %cmp19.i177.i, i64 %cond225.i, i64 %or.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 32 = MemoryDef(31)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleSelectInst]SelectMap:
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
.cond225.i,,cond225.i
or.cond4.i,,cmp236.i
.or230.i,,or230.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
or.cond200.i,,cmp24.old.i
cond.i168.i,.cond225.i,or.i166.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp19.i177.i = icmp ugt i64 %cond225.i, %or.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp19.i177.i_4_102
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i258.i, i64 %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond225.i_4_79
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[getBitVecSingValType]   %cond23.i178.i = select i1 %cmp19.i177.i, i64 %cond225.i, i64 %or.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond23.i178.i_4_103
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond23.i178.i_4_103
[handleSelectInst] z3ExprSelectOp1: cmp19.i177.i_4_102
[handleSelectInst] z3ExprSelectOp2: cond225.i_4_79
[handleSelectInst] z3ExprSelectOp3: or.i_4_71
[handleSelectInst] z3ExprRes: cond23.i178.i_4_103
[handleSelectInst](ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
-------------------
  store i64 %cond23.i178.i, i64* %umin_value218.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond23.i178.i = select i1 %cmp19.i177.i, i64 %cond225.i, i64 %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond23.i178.i_4_103
[handleStoreInst] BVToStore: cond23.i178.i_4_103
[handleStoreInst] destPointerValue:   %umin_value218.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] definingMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value218.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ cond225.i_4_79 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond23.i178.i_4_103 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  %or29.i181.i = or i64 %or.i, %or3.i154.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] op1Val:   %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[handleBinaryOperatorInst] opResVal:   %or29.i181.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType]   %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_4_71
[getBitVecSingValType]   %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or3.i154.i_4_73
[getBitVecSingValType]   %or29.i181.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or29.i181.i_4_104
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or29.i181.i_4_104
[handleBinaryOperatorInst] OR instruction
(= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
-------------------
  %cmp31.i182.i = icmp ult i64 %or230.i, %or29.i181.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %or230.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or230.i_4_80
[getBitVecSingValType]   %or29.i181.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or29.i181.i_4_104
[getBitVecSingValType]   %cmp31.i182.i = icmp ult i64 %or230.i, %or29.i181.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i182.i_4_105
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i182.i_4_105
[handleICmpInst] (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:25
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cond35.i183.i = select i1 %cmp31.i182.i, i64 %or230.i, i64 %or29.i181.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryDef(32)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 

[handleSelectInst]SelectMap:
cond35.i183.i,or230.i,or29.i181.i
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
.cond225.i,,cond225.i
or.cond4.i,,cmp236.i
.or230.i,,or230.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
or.cond200.i,,cmp24.old.i
cond.i168.i,.cond225.i,or.i166.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp31.i182.i = icmp ult i64 %or230.i, %or29.i181.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i182.i_4_105
[getBitVecSingValType]   %or230.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or230.i_4_80
[getBitVecSingValType]   %or29.i181.i = or i64 %or.i, %or3.i154.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or29.i181.i_4_104
[getBitVecSingValType]   %cond35.i183.i = select i1 %cmp31.i182.i, i64 %or230.i, i64 %or29.i181.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond35.i183.i_4_106
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond35.i183.i_4_106
[handleSelectInst] z3ExprSelectOp1: cmp31.i182.i_4_105
[handleSelectInst] z3ExprSelectOp2: or230.i_4_80
[handleSelectInst] z3ExprSelectOp3: or29.i181.i_4_104
[handleSelectInst] z3ExprRes: cond35.i183.i_4_106
[handleSelectInst](ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
-------------------
  store i64 %cond35.i183.i, i64* %umax_value231.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond35.i183.i = select i1 %cmp31.i182.i, i64 %or230.i, i64 %or29.i181.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond35.i183.i_4_106
[handleStoreInst] BVToStore: cond35.i183.i_4_106
[handleStoreInst] destPointerValue:   %umax_value231.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value231.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ or230.i_4_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond35.i183.i_4_106 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end309.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_107
[lookInsideStruct] singleValueType:dst_reg_4_107
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_108
[lookInsideStruct] singleValueType:dst_reg_4_108
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_109
[lookInsideStruct] singleValueType:dst_reg_4_109
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_110
[lookInsideStruct] singleValueType:dst_reg_4_110
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_111
[lookInsideStruct] singleValueType:dst_reg_4_111
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_112
[lookInsideStruct] singleValueType:dst_reg_4_112
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_113
[lookInsideStruct] singleValueType:dst_reg_4_113
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_114
[lookInsideStruct] singleValueType:dst_reg_4_114
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_115
[lookInsideStruct] singleValueType:dst_reg_4_115
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_116
[lookInsideStruct] singleValueType:dst_reg_4_116
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_117
[lookInsideStruct] singleValueType:dst_reg_4_117
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_118
[lookInsideStruct] singleValueType:dst_reg_4_118
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_119
[lookInsideStruct] singleValueType:dst_reg_4_119
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_120
[lookInsideStruct] singleValueType:dst_reg_4_120
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_121
[lookInsideStruct] singleValueType:src_reg_4_121
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_122
[lookInsideStruct] singleValueType:src_reg_4_122
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_123
[lookInsideStruct] singleValueType:src_reg_4_123
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_124
[lookInsideStruct] singleValueType:src_reg_4_124
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_125
[lookInsideStruct] singleValueType:src_reg_4_125
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_126
[lookInsideStruct] singleValueType:src_reg_4_126
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_127
[lookInsideStruct] singleValueType:src_reg_4_127
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_128
[lookInsideStruct] singleValueType:src_reg_4_128
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_129
[lookInsideStruct] singleValueType:src_reg_4_129
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_130
[lookInsideStruct] singleValueType:src_reg_4_130
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_131
[lookInsideStruct] singleValueType:src_reg_4_131
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_132
[lookInsideStruct] singleValueType:src_reg_4_132
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_133
[lookInsideStruct] singleValueType:src_reg_4_133
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_134
[lookInsideStruct] singleValueType:src_reg_4_134
[setupBVTreeForArg] returning BVTree: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then207.i
[handleMemoryPhiNode] incomingAccessI: 24 = MemoryDef(23)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_4_121)
(= src_reg_4_15 src_reg_4_122)
(= src_reg_4_16 src_reg_4_123)
(= src_reg_4_17 src_reg_4_124)
(= src_reg_4_18 src_reg_4_125)
(= src_reg_4_19 src_reg_4_126)
(= src_reg_4_20 src_reg_4_127)
(= src_reg_4_21 src_reg_4_128)
(= src_reg_4_22 src_reg_4_129)
(= src_reg_4_23 src_reg_4_130)
(= src_reg_4_24 src_reg_4_131)
(= src_reg_4_25 src_reg_4_132)
(= src_reg_4_26 src_reg_4_133)
(= src_reg_4_27 src_reg_4_134)
(= #x00000001 dst_reg_4_107)
(= dst_reg_4_1 dst_reg_4_108)
(= dst_reg_4_2 dst_reg_4_109)
(= dst_reg_4_3 dst_reg_4_110)
(= or.i_4_71 dst_reg_4_111)
(= #x0000000000000000 dst_reg_4_112)
(= or.i_4_71 dst_reg_4_113)
(= or.i_4_71 dst_reg_4_114)
(= or.i_4_71 dst_reg_4_115)
(= or.i_4_71 dst_reg_4_116)
(= dst_reg_4_10 dst_reg_4_117)
(= dst_reg_4_11 dst_reg_4_118)
(= dst_reg_4_12 dst_reg_4_119)
(= dst_reg_4_13 dst_reg_4_120)
]
[handleMemoryPhiNode] incomingBBI: if.end212.i
[handleMemoryPhiNode] incomingAccessI: 34 = MemoryDef(33)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_4_121)
(= src_reg_4_15 src_reg_4_122)
(= src_reg_4_16 src_reg_4_123)
(= src_reg_4_17 src_reg_4_124)
(= src_reg_4_18 src_reg_4_125)
(= src_reg_4_19 src_reg_4_126)
(= src_reg_4_20 src_reg_4_127)
(= src_reg_4_21 src_reg_4_128)
(= src_reg_4_22 src_reg_4_129)
(= src_reg_4_23 src_reg_4_130)
(= src_reg_4_24 src_reg_4_131)
(= src_reg_4_25 src_reg_4_132)
(= src_reg_4_26 src_reg_4_133)
(= src_reg_4_27 src_reg_4_134)
(= #x00000001 dst_reg_4_107)
(= dst_reg_4_1 dst_reg_4_108)
(= dst_reg_4_2 dst_reg_4_109)
(= dst_reg_4_3 dst_reg_4_110)
(= or.i_4_71 dst_reg_4_111)
(= and.i156.i_4_76 dst_reg_4_112)
(= cond.i168.i_4_96 dst_reg_4_113)
(= cond14.i174.i_4_101 dst_reg_4_114)
(= cond23.i178.i_4_103 dst_reg_4_115)
(= cond35.i183.i_4_106 dst_reg_4_116)
(= dst_reg_4_10 dst_reg_4_117)
(= dst_reg_4_11 dst_reg_4_118)
(= dst_reg_4_12 dst_reg_4_119)
(= dst_reg_4_13 dst_reg_4_120)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.end212.i, if.end309.i> :
  (= #x00000001 src_reg_4_121)
  (= src_reg_4_15 src_reg_4_122)
  (= src_reg_4_16 src_reg_4_123)
  (= src_reg_4_17 src_reg_4_124)
  (= src_reg_4_18 src_reg_4_125)
  (= src_reg_4_19 src_reg_4_126)
  (= src_reg_4_20 src_reg_4_127)
  (= src_reg_4_21 src_reg_4_128)
  (= src_reg_4_22 src_reg_4_129)
  (= src_reg_4_23 src_reg_4_130)
  (= src_reg_4_24 src_reg_4_131)
  (= src_reg_4_25 src_reg_4_132)
  (= src_reg_4_26 src_reg_4_133)
  (= src_reg_4_27 src_reg_4_134)
  (= #x00000001 dst_reg_4_107)
  (= dst_reg_4_1 dst_reg_4_108)
  (= dst_reg_4_2 dst_reg_4_109)
  (= dst_reg_4_3 dst_reg_4_110)
  (= or.i_4_71 dst_reg_4_111)
  (= and.i156.i_4_76 dst_reg_4_112)
  (= cond.i168.i_4_96 dst_reg_4_113)
  (= cond14.i174.i_4_101 dst_reg_4_114)
  (= cond23.i178.i_4_103 dst_reg_4_115)
  (= cond35.i183.i_4_106 dst_reg_4_116)
  (= dst_reg_4_10 dst_reg_4_117)
  (= dst_reg_4_11 dst_reg_4_118)
  (= dst_reg_4_12 dst_reg_4_119)
  (= dst_reg_4_13 dst_reg_4_120)
<if.then207.i, if.end309.i> :
  (= #x00000001 src_reg_4_121)
  (= src_reg_4_15 src_reg_4_122)
  (= src_reg_4_16 src_reg_4_123)
  (= src_reg_4_17 src_reg_4_124)
  (= src_reg_4_18 src_reg_4_125)
  (= src_reg_4_19 src_reg_4_126)
  (= src_reg_4_20 src_reg_4_127)
  (= src_reg_4_21 src_reg_4_128)
  (= src_reg_4_22 src_reg_4_129)
  (= src_reg_4_23 src_reg_4_130)
  (= src_reg_4_24 src_reg_4_131)
  (= src_reg_4_25 src_reg_4_132)
  (= src_reg_4_26 src_reg_4_133)
  (= src_reg_4_27 src_reg_4_134)
  (= #x00000001 dst_reg_4_107)
  (= dst_reg_4_1 dst_reg_4_108)
  (= dst_reg_4_2 dst_reg_4_109)
  (= dst_reg_4_3 dst_reg_4_110)
  (= or.i_4_71 dst_reg_4_111)
  (= #x0000000000000000 dst_reg_4_112)
  (= or.i_4_71 dst_reg_4_113)
  (= or.i_4_71 dst_reg_4_114)
  (= or.i_4_71 dst_reg_4_115)
  (= or.i_4_71 dst_reg_4_116)
  (= dst_reg_4_10 dst_reg_4_117)
  (= dst_reg_4_11 dst_reg_4_118)
  (= dst_reg_4_12 dst_reg_4_119)
  (= dst_reg_4_13 dst_reg_4_120)
-------------------
  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[handleLoadInst] pointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i322.i_4_135
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i322.i_4_135
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleLoadInst] (= dst_reg_4_113 i.i322.i_4_135)
[printBBAssertionsMap] 
BasicBlock: if.end309.i, Size:1
  (= dst_reg_4_113 i.i322.i_4_135)
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_4_135
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i323.i_4_137
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i323.i_4_137
[handleICmpInst] (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[handleLoadInst] pointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i33.i.i_4_138
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i33.i.i_4_138
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleLoadInst] (= dst_reg_4_114 i33.i.i_4_138)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:1
  (= dst_reg_4_114 i33.i.i_4_138)
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_4_138
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i325.i_4_140
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i325.i_4_140
[handleICmpInst] (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i329.i
=========================
-------------------
  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i34.i.i_4_141
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i34.i.i_4_141
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleLoadInst] (= dst_reg_4_115 i34.i.i_4_141)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.then.i329.i, Size:1
  (= dst_reg_4_115 i34.i.i_4_141)
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_4_135
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_4_141
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp3.i.i_4_142
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp3.i.i_4_142
[handleICmpInst] (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.then.i329.i, Size:2
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleSelectInst]SelectMap:
cond35.i183.i,or230.i,or29.i181.i
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
.cond225.i,,cond225.i
or.cond4.i,,cmp236.i
.or230.i,,or230.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
cond.i327.i,i.i322.i,i34.i.i
or.cond200.i,,cmp24.old.i
cond.i168.i,.cond225.i,or.i166.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp3.i.i_4_142
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_4_135
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_4_141
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i327.i_4_143
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i327.i_4_143
[handleSelectInst] z3ExprSelectOp1: cmp3.i.i_4_142
[handleSelectInst] z3ExprSelectOp2: i.i322.i_4_135
[handleSelectInst] z3ExprSelectOp3: i34.i.i_4_141
[handleSelectInst] z3ExprRes: cond.i327.i_4_143
[handleSelectInst](ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_4_143
[handleStoreInst] BVToStore: cond.i327.i_4_143
[handleStoreInst] destPointerValue:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 35 = MemoryDef(49)
[handleStoreInst] definingMemoryAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_115 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_4_143 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_4_143
[handleStoreInst] BVToStore: cond.i327.i_4_143
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 36 = MemoryDef(35)
[handleStoreInst] definingMemoryAccess: 35 = MemoryDef(49)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_113 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_4_143 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[handleLoadInst] pointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i35.i.i_4_144
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i35.i.i_4_144
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleLoadInst] (= dst_reg_4_114 i35.i.i_4_144)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.then.i329.i, Size:4
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i36.i.i_4_145
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i36.i.i_4_145
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleLoadInst] (= dst_reg_4_116 i36.i.i_4_145)
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.then.i329.i, Size:5
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_4_144
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_4_145
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp8.i.i_4_146
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp8.i.i_4_146
[handleICmpInst] (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.then.i329.i, Size:6
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 36 = MemoryDef(35)
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleSelectInst]SelectMap:
cond35.i183.i,or230.i,or29.i181.i
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
.cond225.i,,cond225.i
or.cond4.i,,cmp236.i
.or230.i,,or230.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
cond.i327.i,i.i322.i,i34.i.i
or.cond200.i,,cmp24.old.i
cond12.i.i,i35.i.i,i36.i.i
cond.i168.i,.cond225.i,or.i166.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp8.i.i_4_146
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_4_144
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_4_145
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond12.i.i_4_147
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond12.i.i_4_147
[handleSelectInst] z3ExprSelectOp1: cmp8.i.i_4_146
[handleSelectInst] z3ExprSelectOp2: i35.i.i_4_144
[handleSelectInst] z3ExprSelectOp3: i36.i.i_4_145
[handleSelectInst] z3ExprRes: cond12.i.i_4_147
[handleSelectInst](ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_4_147
[handleStoreInst] BVToStore: cond12.i.i_4_147
[handleStoreInst] destPointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] definingMemoryAccess: 36 = MemoryDef(35)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_116 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_4_147 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_4_147
[handleStoreInst] BVToStore: cond12.i.i_4_147
[handleStoreInst] destPointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] definingMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_114 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_4_147 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i37.i.i_4_148
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i37.i.i_4_148
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleLoadInst] (= dst_reg_4_116 i37.i.i_4_148)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:1
  (= dst_reg_4_116 i37.i.i_4_148)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_4_148
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.i.i_4_150
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.i.i_4_150
[handleICmpInst] (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:2
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value18.i.i, dst_reg, [8]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value18.i.i, dst_reg, [8]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i38.i.i_4_151
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i38.i.i_4_151
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleLoadInst] (= dst_reg_4_115 i38.i.i_4_151)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then26.i, Size:0
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))

-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_4_151
[handleStoreInst] BVToStore: i38.i.i_4_151
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 39 = MemoryDef(49)
[handleStoreInst] definingMemoryAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_113 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i38.i.i_4_151 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_4_138
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_4_148
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp23.i.i_4_152
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp23.i.i_4_152
[handleICmpInst] (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then17.i.i, Size:1
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryDef(49)
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 

[handleSelectInst]SelectMap:
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp23.i.i_4_152
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_4_138
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_4_148
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond27.i.i_4_153
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond27.i.i_4_153
[handleSelectInst] z3ExprSelectOp1: cmp23.i.i_4_152
[handleSelectInst] z3ExprSelectOp2: i33.i.i_4_138
[handleSelectInst] z3ExprSelectOp3: i37.i.i_4_148
[handleSelectInst] z3ExprRes: cond27.i.i_4_153
[handleSelectInst](ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_4_153
[handleStoreInst] BVToStore: cond27.i.i_4_153
[handleStoreInst] destPointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 40 = MemoryDef(39)
[handleStoreInst] definingMemoryAccess: 39 = MemoryDef(49)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_116 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_4_153 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_4_153
[handleStoreInst] BVToStore: cond27.i.i_4_153
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 41 = MemoryDef(40)
[handleStoreInst] definingMemoryAccess: 40 = MemoryDef(39)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_114 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_4_153 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_4_151
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i330.i_4_155
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i330.i_4_155
[handleICmpInst] (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_4_135
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_4_151
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp36.i.i_4_156
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp36.i.i_4_156
[handleICmpInst] (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:1
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 41 = MemoryDef(40)
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp36.i.i_4_156
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_4_135
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_4_151
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond40.i.i_4_157
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond40.i.i_4_157
[handleSelectInst] z3ExprSelectOp1: cmp36.i.i_4_156
[handleSelectInst] z3ExprSelectOp2: i.i322.i_4_135
[handleSelectInst] z3ExprSelectOp3: i38.i.i_4_151
[handleSelectInst] z3ExprRes: cond40.i.i_4_157
[handleSelectInst](ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_4_157
[handleStoreInst] BVToStore: cond40.i.i_4_157
[handleStoreInst] destPointerValue:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 42 = MemoryDef(49)
[handleStoreInst] definingMemoryAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_115 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_4_157 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
42 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_4_157
[handleStoreInst] BVToStore: cond40.i.i_4_157
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 43 = MemoryDef(42)
[handleStoreInst] definingMemoryAccess: 42 = MemoryDef(49)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_113 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_4_157 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
42 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_4_148
[handleStoreInst] BVToStore: i37.i.i_4_148
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 44 = MemoryDef(43)
[handleStoreInst] definingMemoryAccess: 43 = MemoryDef(42)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_114 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i37.i.i_4_148 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ i37.i.i_4_148 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
42 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_158
[lookInsideStruct] singleValueType:dst_reg_4_158
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_159
[lookInsideStruct] singleValueType:dst_reg_4_159
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_160
[lookInsideStruct] singleValueType:dst_reg_4_160
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_161
[lookInsideStruct] singleValueType:dst_reg_4_161
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_162
[lookInsideStruct] singleValueType:dst_reg_4_162
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_163
[lookInsideStruct] singleValueType:dst_reg_4_163
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_164
[lookInsideStruct] singleValueType:dst_reg_4_164
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_165
[lookInsideStruct] singleValueType:dst_reg_4_165
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_166
[lookInsideStruct] singleValueType:dst_reg_4_166
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_167
[lookInsideStruct] singleValueType:dst_reg_4_167
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_168
[lookInsideStruct] singleValueType:dst_reg_4_168
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_169
[lookInsideStruct] singleValueType:dst_reg_4_169
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_170
[lookInsideStruct] singleValueType:dst_reg_4_170
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_171
[lookInsideStruct] singleValueType:dst_reg_4_171
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_172
[lookInsideStruct] singleValueType:src_reg_4_172
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_173
[lookInsideStruct] singleValueType:src_reg_4_173
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_174
[lookInsideStruct] singleValueType:src_reg_4_174
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_175
[lookInsideStruct] singleValueType:src_reg_4_175
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_176
[lookInsideStruct] singleValueType:src_reg_4_176
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_177
[lookInsideStruct] singleValueType:src_reg_4_177
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_178
[lookInsideStruct] singleValueType:src_reg_4_178
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_179
[lookInsideStruct] singleValueType:src_reg_4_179
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_180
[lookInsideStruct] singleValueType:src_reg_4_180
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_181
[lookInsideStruct] singleValueType:src_reg_4_181
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_182
[lookInsideStruct] singleValueType:src_reg_4_182
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_183
[lookInsideStruct] singleValueType:src_reg_4_183
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_184
[lookInsideStruct] singleValueType:src_reg_4_184
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_185
[lookInsideStruct] singleValueType:src_reg_4_185
[setupBVTreeForArg] returning BVTree: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i329.i
[handleMemoryPhiNode] incomingAccessI: 38 = MemoryDef(37)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_4_121 src_reg_4_172)
(= src_reg_4_122 src_reg_4_173)
(= src_reg_4_123 src_reg_4_174)
(= src_reg_4_124 src_reg_4_175)
(= src_reg_4_125 src_reg_4_176)
(= src_reg_4_126 src_reg_4_177)
(= src_reg_4_127 src_reg_4_178)
(= src_reg_4_128 src_reg_4_179)
(= src_reg_4_129 src_reg_4_180)
(= src_reg_4_130 src_reg_4_181)
(= src_reg_4_131 src_reg_4_182)
(= src_reg_4_132 src_reg_4_183)
(= src_reg_4_133 src_reg_4_184)
(= src_reg_4_134 src_reg_4_185)
(= dst_reg_4_107 dst_reg_4_158)
(= dst_reg_4_108 dst_reg_4_159)
(= dst_reg_4_109 dst_reg_4_160)
(= dst_reg_4_110 dst_reg_4_161)
(= dst_reg_4_111 dst_reg_4_162)
(= dst_reg_4_112 dst_reg_4_163)
(= cond.i327.i_4_143 dst_reg_4_164)
(= cond12.i.i_4_147 dst_reg_4_165)
(= cond.i327.i_4_143 dst_reg_4_166)
(= cond12.i.i_4_147 dst_reg_4_167)
(= dst_reg_4_117 dst_reg_4_168)
(= dst_reg_4_118 dst_reg_4_169)
(= dst_reg_4_119 dst_reg_4_170)
(= dst_reg_4_120 dst_reg_4_171)
]
[handleMemoryPhiNode] incomingBBI: if.then17.i.i
[handleMemoryPhiNode] incomingAccessI: 41 = MemoryDef(40)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_4_121 src_reg_4_172)
(= src_reg_4_122 src_reg_4_173)
(= src_reg_4_123 src_reg_4_174)
(= src_reg_4_124 src_reg_4_175)
(= src_reg_4_125 src_reg_4_176)
(= src_reg_4_126 src_reg_4_177)
(= src_reg_4_127 src_reg_4_178)
(= src_reg_4_128 src_reg_4_179)
(= src_reg_4_129 src_reg_4_180)
(= src_reg_4_130 src_reg_4_181)
(= src_reg_4_131 src_reg_4_182)
(= src_reg_4_132 src_reg_4_183)
(= src_reg_4_133 src_reg_4_184)
(= src_reg_4_134 src_reg_4_185)
(= dst_reg_4_107 dst_reg_4_158)
(= dst_reg_4_108 dst_reg_4_159)
(= dst_reg_4_109 dst_reg_4_160)
(= dst_reg_4_110 dst_reg_4_161)
(= dst_reg_4_111 dst_reg_4_162)
(= dst_reg_4_112 dst_reg_4_163)
(= i38.i.i_4_151 dst_reg_4_164)
(= cond27.i.i_4_153 dst_reg_4_165)
(= dst_reg_4_115 dst_reg_4_166)
(= cond27.i.i_4_153 dst_reg_4_167)
(= dst_reg_4_117 dst_reg_4_168)
(= dst_reg_4_118 dst_reg_4_169)
(= dst_reg_4_119 dst_reg_4_170)
(= dst_reg_4_120 dst_reg_4_171)
]
[handleMemoryPhiNode] incomingBBI: if.else.i331.i
[handleMemoryPhiNode] incomingAccessI: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_4_121 src_reg_4_172)
(= src_reg_4_122 src_reg_4_173)
(= src_reg_4_123 src_reg_4_174)
(= src_reg_4_124 src_reg_4_175)
(= src_reg_4_125 src_reg_4_176)
(= src_reg_4_126 src_reg_4_177)
(= src_reg_4_127 src_reg_4_178)
(= src_reg_4_128 src_reg_4_179)
(= src_reg_4_129 src_reg_4_180)
(= src_reg_4_130 src_reg_4_181)
(= src_reg_4_131 src_reg_4_182)
(= src_reg_4_132 src_reg_4_183)
(= src_reg_4_133 src_reg_4_184)
(= src_reg_4_134 src_reg_4_185)
(= dst_reg_4_107 dst_reg_4_158)
(= dst_reg_4_108 dst_reg_4_159)
(= dst_reg_4_109 dst_reg_4_160)
(= dst_reg_4_110 dst_reg_4_161)
(= dst_reg_4_111 dst_reg_4_162)
(= dst_reg_4_112 dst_reg_4_163)
(= dst_reg_4_113 dst_reg_4_164)
(= dst_reg_4_114 dst_reg_4_165)
(= dst_reg_4_115 dst_reg_4_166)
(= dst_reg_4_116 dst_reg_4_167)
(= dst_reg_4_117 dst_reg_4_168)
(= dst_reg_4_118 dst_reg_4_169)
(= dst_reg_4_119 dst_reg_4_170)
(= dst_reg_4_120 dst_reg_4_171)
]
[handleMemoryPhiNode] incomingBBI: if.then32.i.i
[handleMemoryPhiNode] incomingAccessI: 44 = MemoryDef(43)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ i37.i.i_4_148 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ i37.i.i_4_148 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_4_121 src_reg_4_172)
(= src_reg_4_122 src_reg_4_173)
(= src_reg_4_123 src_reg_4_174)
(= src_reg_4_124 src_reg_4_175)
(= src_reg_4_125 src_reg_4_176)
(= src_reg_4_126 src_reg_4_177)
(= src_reg_4_127 src_reg_4_178)
(= src_reg_4_128 src_reg_4_179)
(= src_reg_4_129 src_reg_4_180)
(= src_reg_4_130 src_reg_4_181)
(= src_reg_4_131 src_reg_4_182)
(= src_reg_4_132 src_reg_4_183)
(= src_reg_4_133 src_reg_4_184)
(= src_reg_4_134 src_reg_4_185)
(= dst_reg_4_107 dst_reg_4_158)
(= dst_reg_4_108 dst_reg_4_159)
(= dst_reg_4_109 dst_reg_4_160)
(= dst_reg_4_110 dst_reg_4_161)
(= dst_reg_4_111 dst_reg_4_162)
(= dst_reg_4_112 dst_reg_4_163)
(= cond40.i.i_4_157 dst_reg_4_164)
(= i37.i.i_4_148 dst_reg_4_165)
(= cond40.i.i_4_157 dst_reg_4_166)
(= dst_reg_4_116 dst_reg_4_167)
(= dst_reg_4_117 dst_reg_4_168)
(= dst_reg_4_118 dst_reg_4_169)
(= dst_reg_4_119 dst_reg_4_170)
(= dst_reg_4_120 dst_reg_4_171)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_4_121 src_reg_4_172)
  (= src_reg_4_122 src_reg_4_173)
  (= src_reg_4_123 src_reg_4_174)
  (= src_reg_4_124 src_reg_4_175)
  (= src_reg_4_125 src_reg_4_176)
  (= src_reg_4_126 src_reg_4_177)
  (= src_reg_4_127 src_reg_4_178)
  (= src_reg_4_128 src_reg_4_179)
  (= src_reg_4_129 src_reg_4_180)
  (= src_reg_4_130 src_reg_4_181)
  (= src_reg_4_131 src_reg_4_182)
  (= src_reg_4_132 src_reg_4_183)
  (= src_reg_4_133 src_reg_4_184)
  (= src_reg_4_134 src_reg_4_185)
  (= dst_reg_4_107 dst_reg_4_158)
  (= dst_reg_4_108 dst_reg_4_159)
  (= dst_reg_4_109 dst_reg_4_160)
  (= dst_reg_4_110 dst_reg_4_161)
  (= dst_reg_4_111 dst_reg_4_162)
  (= dst_reg_4_112 dst_reg_4_163)
  (= cond40.i.i_4_157 dst_reg_4_164)
  (= i37.i.i_4_148 dst_reg_4_165)
  (= cond40.i.i_4_157 dst_reg_4_166)
  (= dst_reg_4_116 dst_reg_4_167)
  (= dst_reg_4_117 dst_reg_4_168)
  (= dst_reg_4_118 dst_reg_4_169)
  (= dst_reg_4_119 dst_reg_4_170)
  (= dst_reg_4_120 dst_reg_4_171)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_4_121 src_reg_4_172)
  (= src_reg_4_122 src_reg_4_173)
  (= src_reg_4_123 src_reg_4_174)
  (= src_reg_4_124 src_reg_4_175)
  (= src_reg_4_125 src_reg_4_176)
  (= src_reg_4_126 src_reg_4_177)
  (= src_reg_4_127 src_reg_4_178)
  (= src_reg_4_128 src_reg_4_179)
  (= src_reg_4_129 src_reg_4_180)
  (= src_reg_4_130 src_reg_4_181)
  (= src_reg_4_131 src_reg_4_182)
  (= src_reg_4_132 src_reg_4_183)
  (= src_reg_4_133 src_reg_4_184)
  (= src_reg_4_134 src_reg_4_185)
  (= dst_reg_4_107 dst_reg_4_158)
  (= dst_reg_4_108 dst_reg_4_159)
  (= dst_reg_4_109 dst_reg_4_160)
  (= dst_reg_4_110 dst_reg_4_161)
  (= dst_reg_4_111 dst_reg_4_162)
  (= dst_reg_4_112 dst_reg_4_163)
  (= dst_reg_4_113 dst_reg_4_164)
  (= dst_reg_4_114 dst_reg_4_165)
  (= dst_reg_4_115 dst_reg_4_166)
  (= dst_reg_4_116 dst_reg_4_167)
  (= dst_reg_4_117 dst_reg_4_168)
  (= dst_reg_4_118 dst_reg_4_169)
  (= dst_reg_4_119 dst_reg_4_170)
  (= dst_reg_4_120 dst_reg_4_171)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_4_121 src_reg_4_172)
  (= src_reg_4_122 src_reg_4_173)
  (= src_reg_4_123 src_reg_4_174)
  (= src_reg_4_124 src_reg_4_175)
  (= src_reg_4_125 src_reg_4_176)
  (= src_reg_4_126 src_reg_4_177)
  (= src_reg_4_127 src_reg_4_178)
  (= src_reg_4_128 src_reg_4_179)
  (= src_reg_4_129 src_reg_4_180)
  (= src_reg_4_130 src_reg_4_181)
  (= src_reg_4_131 src_reg_4_182)
  (= src_reg_4_132 src_reg_4_183)
  (= src_reg_4_133 src_reg_4_184)
  (= src_reg_4_134 src_reg_4_185)
  (= dst_reg_4_107 dst_reg_4_158)
  (= dst_reg_4_108 dst_reg_4_159)
  (= dst_reg_4_109 dst_reg_4_160)
  (= dst_reg_4_110 dst_reg_4_161)
  (= dst_reg_4_111 dst_reg_4_162)
  (= dst_reg_4_112 dst_reg_4_163)
  (= i38.i.i_4_151 dst_reg_4_164)
  (= cond27.i.i_4_153 dst_reg_4_165)
  (= dst_reg_4_115 dst_reg_4_166)
  (= cond27.i.i_4_153 dst_reg_4_167)
  (= dst_reg_4_117 dst_reg_4_168)
  (= dst_reg_4_118 dst_reg_4_169)
  (= dst_reg_4_119 dst_reg_4_170)
  (= dst_reg_4_120 dst_reg_4_171)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_4_121 src_reg_4_172)
  (= src_reg_4_122 src_reg_4_173)
  (= src_reg_4_123 src_reg_4_174)
  (= src_reg_4_124 src_reg_4_175)
  (= src_reg_4_125 src_reg_4_176)
  (= src_reg_4_126 src_reg_4_177)
  (= src_reg_4_127 src_reg_4_178)
  (= src_reg_4_128 src_reg_4_179)
  (= src_reg_4_129 src_reg_4_180)
  (= src_reg_4_130 src_reg_4_181)
  (= src_reg_4_131 src_reg_4_182)
  (= src_reg_4_132 src_reg_4_183)
  (= src_reg_4_133 src_reg_4_184)
  (= src_reg_4_134 src_reg_4_185)
  (= dst_reg_4_107 dst_reg_4_158)
  (= dst_reg_4_108 dst_reg_4_159)
  (= dst_reg_4_109 dst_reg_4_160)
  (= dst_reg_4_110 dst_reg_4_161)
  (= dst_reg_4_111 dst_reg_4_162)
  (= dst_reg_4_112 dst_reg_4_163)
  (= cond.i327.i_4_143 dst_reg_4_164)
  (= cond12.i.i_4_147 dst_reg_4_165)
  (= cond.i327.i_4_143 dst_reg_4_166)
  (= cond12.i.i_4_147 dst_reg_4_167)
  (= dst_reg_4_117 dst_reg_4_168)
  (= dst_reg_4_118 dst_reg_4_169)
  (= dst_reg_4_119 dst_reg_4_170)
  (= dst_reg_4_120 dst_reg_4_171)
<if.end212.i, if.end309.i> :
  (= #x00000001 src_reg_4_121)
  (= src_reg_4_15 src_reg_4_122)
  (= src_reg_4_16 src_reg_4_123)
  (= src_reg_4_17 src_reg_4_124)
  (= src_reg_4_18 src_reg_4_125)
  (= src_reg_4_19 src_reg_4_126)
  (= src_reg_4_20 src_reg_4_127)
  (= src_reg_4_21 src_reg_4_128)
  (= src_reg_4_22 src_reg_4_129)
  (= src_reg_4_23 src_reg_4_130)
  (= src_reg_4_24 src_reg_4_131)
  (= src_reg_4_25 src_reg_4_132)
  (= src_reg_4_26 src_reg_4_133)
  (= src_reg_4_27 src_reg_4_134)
  (= #x00000001 dst_reg_4_107)
  (= dst_reg_4_1 dst_reg_4_108)
  (= dst_reg_4_2 dst_reg_4_109)
  (= dst_reg_4_3 dst_reg_4_110)
  (= or.i_4_71 dst_reg_4_111)
  (= and.i156.i_4_76 dst_reg_4_112)
  (= cond.i168.i_4_96 dst_reg_4_113)
  (= cond14.i174.i_4_101 dst_reg_4_114)
  (= cond23.i178.i_4_103 dst_reg_4_115)
  (= cond35.i183.i_4_106 dst_reg_4_116)
  (= dst_reg_4_10 dst_reg_4_117)
  (= dst_reg_4_11 dst_reg_4_118)
  (= dst_reg_4_12 dst_reg_4_119)
  (= dst_reg_4_13 dst_reg_4_120)
<if.then207.i, if.end309.i> :
  (= #x00000001 src_reg_4_121)
  (= src_reg_4_15 src_reg_4_122)
  (= src_reg_4_16 src_reg_4_123)
  (= src_reg_4_17 src_reg_4_124)
  (= src_reg_4_18 src_reg_4_125)
  (= src_reg_4_19 src_reg_4_126)
  (= src_reg_4_20 src_reg_4_127)
  (= src_reg_4_21 src_reg_4_128)
  (= src_reg_4_22 src_reg_4_129)
  (= src_reg_4_23 src_reg_4_130)
  (= src_reg_4_24 src_reg_4_131)
  (= src_reg_4_25 src_reg_4_132)
  (= src_reg_4_26 src_reg_4_133)
  (= src_reg_4_27 src_reg_4_134)
  (= #x00000001 dst_reg_4_107)
  (= dst_reg_4_1 dst_reg_4_108)
  (= dst_reg_4_2 dst_reg_4_109)
  (= dst_reg_4_3 dst_reg_4_110)
  (= or.i_4_71 dst_reg_4_111)
  (= #x0000000000000000 dst_reg_4_112)
  (= or.i_4_71 dst_reg_4_113)
  (= or.i_4_71 dst_reg_4_114)
  (= or.i_4_71 dst_reg_4_115)
  (= or.i_4_71 dst_reg_4_116)
  (= dst_reg_4_10 dst_reg_4_117)
  (= dst_reg_4_11 dst_reg_4_118)
  (= dst_reg_4_12 dst_reg_4_119)
  (= dst_reg_4_13 dst_reg_4_120)
-------------------
  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value18.i.i, dst_reg, [8]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value18.i.i, dst_reg, [8]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i333.i_4_186
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i333.i_4_186
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
[handleLoadInst] (= dst_reg_4_166 i.i333.i_4_186)
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:1
  (= dst_reg_4_166 i.i333.i_4_186)
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i334.i, dst_reg, [9]
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value18.i.i, dst_reg, [8]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value18.i.i, dst_reg, [8]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i5.i.i_4_187
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i5.i.i_4_187
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
[handleLoadInst] (= dst_reg_4_167 i5.i.i_4_187)
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:2
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i5.i.i_4_187
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_4_186
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_4_188
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_4_188
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_4_188
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_4_190
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_4_190
[handleICmpInst] (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_4_188
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_4_192
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_4_192
[handleICmpInst] (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_4_188
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_4_194
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_4_194
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_4_192
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_4_194
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_4_188
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_4_195
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_4_195
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_4_192
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_4_194
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_4_188
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_4_195
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194)
     (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_4_192
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_4_198
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_4_198
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_4_192
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_4_198
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select17.i.i.i.i.i_4_198 #x0000001f)
     (= spec.select17.i.i.i.i.i_4_198 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_4_195
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_4_200
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_4_200
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_4_195 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= tobool2.not.i.i.i.i.i_4_200 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
  (= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194)
     (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select17.i.i.i.i.i_4_198 #x0000001f)
     (= spec.select17.i.i.i.i.i_4_198 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_4_195 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= tobool2.not.i.i.i.i.i_4_200 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_4_198
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_4_202
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_4_202
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_4_202 (bvadd spec.select17.i.i.i.i.i_4_198 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_4_195
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_4_204
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_4_204
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_4_204 (bvshl spec.select.i.i.i.i.i_4_195 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_4_200
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_4_204
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_4_195
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_4_205
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_4_205
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_4_200
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_4_204
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_4_195
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_4_205
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= word.addr.1.i.i.i.i.i_4_205 shl5.i.i.i.i.i_4_204)
     (= word.addr.1.i.i.i.i.i_4_205 spec.select.i.i.i.i.i_4_195))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_4_200
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_4_202
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_4_198
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_4_206
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_4_206
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_4_200
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_4_202
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_4_198
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_4_206
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= num.1.i.i.i.i.i_4_206 sub4.i.i.i.i.i_4_202)
     (= num.1.i.i.i.i.i_4_206 spec.select17.i.i.i.i.i_4_198))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_4_205
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_4_208
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_4_208
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_4_205 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= tobool8.not.i.i.i.i.i_4_208 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
  (= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194)
     (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select17.i.i.i.i.i_4_198 #x0000001f)
     (= spec.select17.i.i.i.i.i_4_198 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_4_195 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= tobool2.not.i.i.i.i.i_4_200 #b0))
  (= sub4.i.i.i.i.i_4_202 (bvadd spec.select17.i.i.i.i.i_4_198 #xfffffff0))
  (= shl5.i.i.i.i.i_4_204 (bvshl spec.select.i.i.i.i.i_4_195 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= word.addr.1.i.i.i.i.i_4_205 shl5.i.i.i.i.i_4_204)
     (= word.addr.1.i.i.i.i.i_4_205 spec.select.i.i.i.i.i_4_195))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= num.1.i.i.i.i.i_4_206 sub4.i.i.i.i.i_4_202)
     (= num.1.i.i.i.i.i_4_206 spec.select17.i.i.i.i.i_4_198))
  (ite (bvult word.addr.1.i.i.i.i.i_4_205 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= tobool8.not.i.i.i.i.i_4_208 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_4_206
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_4_210
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_4_210
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_4_210 (bvadd num.1.i.i.i.i.i_4_206 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_4_205
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_4_212
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_4_212
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_4_212 (bvshl word.addr.1.i.i.i.i.i_4_205 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_4_208
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_4_212
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_4_205
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_4_213
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_4_213
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_4_208
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_4_212
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_4_205
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_4_213
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= word.addr.2.i.i.i.i.i_4_213 shl11.i.i.i.i.i_4_212)
     (= word.addr.2.i.i.i.i.i_4_213 word.addr.1.i.i.i.i.i_4_205))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_4_208
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_4_210
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_4_206
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_4_214
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_4_214
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_4_208
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_4_210
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_4_206
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_4_214
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= num.2.i.i.i.i.i_4_214 sub10.i.i.i.i.i_4_210)
     (= num.2.i.i.i.i.i_4_214 num.1.i.i.i.i.i_4_206))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_4_213
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_4_216
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_4_216
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_4_213 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= tobool14.not.i.i.i.i.i_4_216 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
  (= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194)
     (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select17.i.i.i.i.i_4_198 #x0000001f)
     (= spec.select17.i.i.i.i.i_4_198 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_4_195 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= tobool2.not.i.i.i.i.i_4_200 #b0))
  (= sub4.i.i.i.i.i_4_202 (bvadd spec.select17.i.i.i.i.i_4_198 #xfffffff0))
  (= shl5.i.i.i.i.i_4_204 (bvshl spec.select.i.i.i.i.i_4_195 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= word.addr.1.i.i.i.i.i_4_205 shl5.i.i.i.i.i_4_204)
     (= word.addr.1.i.i.i.i.i_4_205 spec.select.i.i.i.i.i_4_195))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= num.1.i.i.i.i.i_4_206 sub4.i.i.i.i.i_4_202)
     (= num.1.i.i.i.i.i_4_206 spec.select17.i.i.i.i.i_4_198))
  (ite (bvult word.addr.1.i.i.i.i.i_4_205 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= tobool8.not.i.i.i.i.i_4_208 #b0))
  (= sub10.i.i.i.i.i_4_210 (bvadd num.1.i.i.i.i.i_4_206 #xfffffff8))
  (= shl11.i.i.i.i.i_4_212 (bvshl word.addr.1.i.i.i.i.i_4_205 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= word.addr.2.i.i.i.i.i_4_213 shl11.i.i.i.i.i_4_212)
     (= word.addr.2.i.i.i.i.i_4_213 word.addr.1.i.i.i.i.i_4_205))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= num.2.i.i.i.i.i_4_214 sub10.i.i.i.i.i_4_210)
     (= num.2.i.i.i.i.i_4_214 num.1.i.i.i.i.i_4_206))
  (ite (bvult word.addr.2.i.i.i.i.i_4_213 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= tobool14.not.i.i.i.i.i_4_216 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_4_214
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_4_218
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_4_218
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_4_218 (bvadd num.2.i.i.i.i.i_4_214 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_4_213
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_4_220
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_4_220
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_4_220 (bvshl word.addr.2.i.i.i.i.i_4_213 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_4_216
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_4_220
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_4_213
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_4_221
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_4_221
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_4_216
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_4_220
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_4_213
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_4_221
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= word.addr.3.i.i.i.i.i_4_221 shl17.i.i.i.i.i_4_220)
     (= word.addr.3.i.i.i.i.i_4_221 word.addr.2.i.i.i.i.i_4_213))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_4_216
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_4_218
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_4_214
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_4_222
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_4_222
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_4_216
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_4_218
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_4_214
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_4_222
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= num.3.i.i.i.i.i_4_222 sub16.i.i.i.i.i_4_218)
     (= num.3.i.i.i.i.i_4_222 num.2.i.i.i.i.i_4_214))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_4_221
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_4_224
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_4_224
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_4_221 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= tobool20.not.i.i.i.i.i_4_224 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
  (= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194)
     (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select17.i.i.i.i.i_4_198 #x0000001f)
     (= spec.select17.i.i.i.i.i_4_198 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_4_195 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= tobool2.not.i.i.i.i.i_4_200 #b0))
  (= sub4.i.i.i.i.i_4_202 (bvadd spec.select17.i.i.i.i.i_4_198 #xfffffff0))
  (= shl5.i.i.i.i.i_4_204 (bvshl spec.select.i.i.i.i.i_4_195 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= word.addr.1.i.i.i.i.i_4_205 shl5.i.i.i.i.i_4_204)
     (= word.addr.1.i.i.i.i.i_4_205 spec.select.i.i.i.i.i_4_195))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= num.1.i.i.i.i.i_4_206 sub4.i.i.i.i.i_4_202)
     (= num.1.i.i.i.i.i_4_206 spec.select17.i.i.i.i.i_4_198))
  (ite (bvult word.addr.1.i.i.i.i.i_4_205 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= tobool8.not.i.i.i.i.i_4_208 #b0))
  (= sub10.i.i.i.i.i_4_210 (bvadd num.1.i.i.i.i.i_4_206 #xfffffff8))
  (= shl11.i.i.i.i.i_4_212 (bvshl word.addr.1.i.i.i.i.i_4_205 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= word.addr.2.i.i.i.i.i_4_213 shl11.i.i.i.i.i_4_212)
     (= word.addr.2.i.i.i.i.i_4_213 word.addr.1.i.i.i.i.i_4_205))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= num.2.i.i.i.i.i_4_214 sub10.i.i.i.i.i_4_210)
     (= num.2.i.i.i.i.i_4_214 num.1.i.i.i.i.i_4_206))
  (ite (bvult word.addr.2.i.i.i.i.i_4_213 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= tobool14.not.i.i.i.i.i_4_216 #b0))
  (= sub16.i.i.i.i.i_4_218 (bvadd num.2.i.i.i.i.i_4_214 #xfffffffc))
  (= shl17.i.i.i.i.i_4_220 (bvshl word.addr.2.i.i.i.i.i_4_213 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= word.addr.3.i.i.i.i.i_4_221 shl17.i.i.i.i.i_4_220)
     (= word.addr.3.i.i.i.i.i_4_221 word.addr.2.i.i.i.i.i_4_213))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= num.3.i.i.i.i.i_4_222 sub16.i.i.i.i.i_4_218)
     (= num.3.i.i.i.i.i_4_222 num.2.i.i.i.i.i_4_214))
  (ite (bvult word.addr.3.i.i.i.i.i_4_221 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= tobool20.not.i.i.i.i.i_4_224 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_4_222
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_4_226
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_4_226
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_4_226 (bvadd num.3.i.i.i.i.i_4_222 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_4_221
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_4_228
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_4_228
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_4_228 (bvshl word.addr.3.i.i.i.i.i_4_221 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_4_224
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_4_228
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_4_221
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_4_229
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_4_229
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_4_224
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_4_228
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_4_221
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_4_229
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= word.addr.4.i.i.i.i.i_4_229 shl23.i.i.i.i.i_4_228)
     (= word.addr.4.i.i.i.i.i_4_229 word.addr.3.i.i.i.i.i_4_221))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_4_224
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_4_226
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_4_222
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_4_230
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_4_230
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_4_224
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_4_226
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_4_222
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_4_230
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= num.4.i.i.i.i.i_4_230 sub22.i.i.i.i.i_4_226)
     (= num.4.i.i.i.i.i_4_230 num.3.i.i.i.i.i_4_222))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_4_229
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_4_232
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_4_232
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_4_232
   (bvlshr word.addr.4.i.i.i.i.i_4_229 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_4_232
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_4_233
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_4_233
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_4_233
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_4_232))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_4_230
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_4_233
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_4_234
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_4_234
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_4_234 (bvadd num.4.i.i.i.i.i_4_230 i.i.i.i.i.i.neg_4_233))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_4_234
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_4_236
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_4_236
[handleBinaryOperatorInst] AND instruction
(= phi.bo_4_236 (bvand add.i.i.i335.i_4_234 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, __reg_deduce_bounds.exit.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_4_239
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_4_239
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_4_236
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
    (= retval.0.i.i.i.i_4_239 phi.bo_4_236))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
    (= retval.0.i.i.i.i_4_239 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
    (= retval.0.i.i.i.i_4_239 phi.bo_4_236))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
    (= retval.0.i.i.i.i_4_239 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_4_239
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_4_242
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_4_242
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_4_239 #x0000003f)
     (= cmp.i.i.i_4_242 #b1)
     (= cmp.i.i.i_4_242 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
    (= retval.0.i.i.i.i_4_239 phi.bo_4_236))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
    (= retval.0.i.i.i.i_4_239 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_4_239 #x0000003f)
     (= cmp.i.i.i_4_242 #b1)
     (= cmp.i.i.i_4_242 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
  (= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194)
     (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select17.i.i.i.i.i_4_198 #x0000001f)
     (= spec.select17.i.i.i.i.i_4_198 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_4_195 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= tobool2.not.i.i.i.i.i_4_200 #b0))
  (= sub4.i.i.i.i.i_4_202 (bvadd spec.select17.i.i.i.i.i_4_198 #xfffffff0))
  (= shl5.i.i.i.i.i_4_204 (bvshl spec.select.i.i.i.i.i_4_195 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= word.addr.1.i.i.i.i.i_4_205 shl5.i.i.i.i.i_4_204)
     (= word.addr.1.i.i.i.i.i_4_205 spec.select.i.i.i.i.i_4_195))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= num.1.i.i.i.i.i_4_206 sub4.i.i.i.i.i_4_202)
     (= num.1.i.i.i.i.i_4_206 spec.select17.i.i.i.i.i_4_198))
  (ite (bvult word.addr.1.i.i.i.i.i_4_205 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= tobool8.not.i.i.i.i.i_4_208 #b0))
  (= sub10.i.i.i.i.i_4_210 (bvadd num.1.i.i.i.i.i_4_206 #xfffffff8))
  (= shl11.i.i.i.i.i_4_212 (bvshl word.addr.1.i.i.i.i.i_4_205 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= word.addr.2.i.i.i.i.i_4_213 shl11.i.i.i.i.i_4_212)
     (= word.addr.2.i.i.i.i.i_4_213 word.addr.1.i.i.i.i.i_4_205))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= num.2.i.i.i.i.i_4_214 sub10.i.i.i.i.i_4_210)
     (= num.2.i.i.i.i.i_4_214 num.1.i.i.i.i.i_4_206))
  (ite (bvult word.addr.2.i.i.i.i.i_4_213 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= tobool14.not.i.i.i.i.i_4_216 #b0))
  (= sub16.i.i.i.i.i_4_218 (bvadd num.2.i.i.i.i.i_4_214 #xfffffffc))
  (= shl17.i.i.i.i.i_4_220 (bvshl word.addr.2.i.i.i.i.i_4_213 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= word.addr.3.i.i.i.i.i_4_221 shl17.i.i.i.i.i_4_220)
     (= word.addr.3.i.i.i.i.i_4_221 word.addr.2.i.i.i.i.i_4_213))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= num.3.i.i.i.i.i_4_222 sub16.i.i.i.i.i_4_218)
     (= num.3.i.i.i.i.i_4_222 num.2.i.i.i.i.i_4_214))
  (ite (bvult word.addr.3.i.i.i.i.i_4_221 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= tobool20.not.i.i.i.i.i_4_224 #b0))
  (= sub22.i.i.i.i.i_4_226 (bvadd num.3.i.i.i.i.i_4_222 #x000000fe))
  (= shl23.i.i.i.i.i_4_228 (bvshl word.addr.3.i.i.i.i.i_4_221 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= word.addr.4.i.i.i.i.i_4_229 shl23.i.i.i.i.i_4_228)
     (= word.addr.4.i.i.i.i.i_4_229 word.addr.3.i.i.i.i.i_4_221))
  (ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= num.4.i.i.i.i.i_4_230 sub22.i.i.i.i.i_4_226)
     (= num.4.i.i.i.i.i_4_230 num.3.i.i.i.i.i_4_222))
  (= word.addr.4.lobit.i.i.i.i.i.neg_4_232
   (bvlshr word.addr.4.i.i.i.i.i_4_229 #x000000000000003f))
  (= i.i.i.i.i.i.neg_4_233
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_4_232))
  (= add.i.i.i335.i_4_234 (bvadd num.4.i.i.i.i.i_4_230 i.i.i.i.i.i.neg_4_233))
  (= phi.bo_4_236 (bvand add.i.i.i335.i_4_234 #x000000ff))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_4_239
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_4_243
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_4_243
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_4_243 ((_ zero_extend 32) retval.0.i.i.i.i_4_239))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_4_243
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_4_245
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_4_245
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_4_245 (bvshl #xffffffffffffffff sh_prom.i.i.i_4_243))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_4_245
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_4_247
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_4_247
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_4_247 (bvxor notmask.i.i.i_4_245 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_4_245
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_4_186
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_4_248
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_4_248
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_4_248 (bvand notmask.i.i.i_4_245 i.i333.i_4_186))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_4_242
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_4_248
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_4_250
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_4_250
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_4_242
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_4_248
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_4_250
[handleSelectInst](ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.0.0.i.i.i_4_250 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_4_250 and.i.i336.i_4_248))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
retval.sroa.3.0.i.i.i,,sub.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select17.i.i.i.i.i,,
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond.i168.i,.cond225.i,or.i166.i
cond12.i.i,i35.i.i,i36.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond.i327.i,i.i322.i,i34.i.i
.or230.i,,or230.i
or.cond199.i,,cmp24.i
or.cond4.i,,cmp236.i
or.cond200.i,,cmp24.old.i
cond225.i,i258.i,src_reg1.sroa.17.0.copyload
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
cond23.i178.i,cond225.i,or.i
cond27.i.i,i33.i.i,i37.i.i
cond35.i183.i,or230.i,or29.i181.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_4_242
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_4_247
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_4_252
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_4_252
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_4_242
[handleSelectInst] z3ExprSelectOp2: #xffffffffffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_4_247
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_4_252
[handleSelectInst](ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.3.0.i.i.i_4_252 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_4_252 sub.i.i.i_4_247))
-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value18.i.i, dst_reg, [8]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i9.i.i_4_253
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i9.i.i_4_253
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleLoadInst] (= dst_reg_4_111 i9.i.i_4_253)
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:10
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
    (= retval.0.i.i.i.i_4_239 phi.bo_4_236))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
    (= retval.0.i.i.i.i_4_239 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_4_239 #x0000003f)
     (= cmp.i.i.i_4_242 #b1)
     (= cmp.i.i.i_4_242 #b0))
  (= sh_prom.i.i.i_4_243 ((_ zero_extend 32) retval.0.i.i.i.i_4_239))
  (= notmask.i.i.i_4_245 (bvshl #xffffffffffffffff sh_prom.i.i.i_4_243))
  (= sub.i.i.i_4_247 (bvxor notmask.i.i.i_4_245 #xffffffffffffffff))
  (= and.i.i336.i_4_248 (bvand notmask.i.i.i_4_245 i.i333.i_4_186))
  (ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.0.0.i.i.i_4_250 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_4_250 and.i.i336.i_4_248))
  (ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.3.0.i.i.i_4_252 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_4_252 sub.i.i.i_4_247))
  (= dst_reg_4_111 i9.i.i_4_253)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
  (= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194)
     (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select17.i.i.i.i.i_4_198 #x0000001f)
     (= spec.select17.i.i.i.i.i_4_198 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_4_195 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= tobool2.not.i.i.i.i.i_4_200 #b0))
  (= sub4.i.i.i.i.i_4_202 (bvadd spec.select17.i.i.i.i.i_4_198 #xfffffff0))
  (= shl5.i.i.i.i.i_4_204 (bvshl spec.select.i.i.i.i.i_4_195 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= word.addr.1.i.i.i.i.i_4_205 shl5.i.i.i.i.i_4_204)
     (= word.addr.1.i.i.i.i.i_4_205 spec.select.i.i.i.i.i_4_195))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= num.1.i.i.i.i.i_4_206 sub4.i.i.i.i.i_4_202)
     (= num.1.i.i.i.i.i_4_206 spec.select17.i.i.i.i.i_4_198))
  (ite (bvult word.addr.1.i.i.i.i.i_4_205 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= tobool8.not.i.i.i.i.i_4_208 #b0))
  (= sub10.i.i.i.i.i_4_210 (bvadd num.1.i.i.i.i.i_4_206 #xfffffff8))
  (= shl11.i.i.i.i.i_4_212 (bvshl word.addr.1.i.i.i.i.i_4_205 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= word.addr.2.i.i.i.i.i_4_213 shl11.i.i.i.i.i_4_212)
     (= word.addr.2.i.i.i.i.i_4_213 word.addr.1.i.i.i.i.i_4_205))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= num.2.i.i.i.i.i_4_214 sub10.i.i.i.i.i_4_210)
     (= num.2.i.i.i.i.i_4_214 num.1.i.i.i.i.i_4_206))
  (ite (bvult word.addr.2.i.i.i.i.i_4_213 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= tobool14.not.i.i.i.i.i_4_216 #b0))
  (= sub16.i.i.i.i.i_4_218 (bvadd num.2.i.i.i.i.i_4_214 #xfffffffc))
  (= shl17.i.i.i.i.i_4_220 (bvshl word.addr.2.i.i.i.i.i_4_213 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= word.addr.3.i.i.i.i.i_4_221 shl17.i.i.i.i.i_4_220)
     (= word.addr.3.i.i.i.i.i_4_221 word.addr.2.i.i.i.i.i_4_213))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= num.3.i.i.i.i.i_4_222 sub16.i.i.i.i.i_4_218)
     (= num.3.i.i.i.i.i_4_222 num.2.i.i.i.i.i_4_214))
  (ite (bvult word.addr.3.i.i.i.i.i_4_221 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= tobool20.not.i.i.i.i.i_4_224 #b0))
  (= sub22.i.i.i.i.i_4_226 (bvadd num.3.i.i.i.i.i_4_222 #x000000fe))
  (= shl23.i.i.i.i.i_4_228 (bvshl word.addr.3.i.i.i.i.i_4_221 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= word.addr.4.i.i.i.i.i_4_229 shl23.i.i.i.i.i_4_228)
     (= word.addr.4.i.i.i.i.i_4_229 word.addr.3.i.i.i.i.i_4_221))
  (ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= num.4.i.i.i.i.i_4_230 sub22.i.i.i.i.i_4_226)
     (= num.4.i.i.i.i.i_4_230 num.3.i.i.i.i.i_4_222))
  (= word.addr.4.lobit.i.i.i.i.i.neg_4_232
   (bvlshr word.addr.4.i.i.i.i.i_4_229 #x000000000000003f))
  (= i.i.i.i.i.i.neg_4_233
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_4_232))
  (= add.i.i.i335.i_4_234 (bvadd num.4.i.i.i.i.i_4_230 i.i.i.i.i.i.neg_4_233))
  (= phi.bo_4_236 (bvand add.i.i.i335.i_4_234 #x000000ff))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 49 = MemoryPhi({if.then207.i,24},{if.end212.i,34})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
umin_value.i332.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value245.i, dst_reg, [7]
smin_value232.i, dst_reg, [6]
umax_value231.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smin_value.i.i31.i, dst_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umin_value.i.i33.i, dst_reg, [8]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
umin_value18.i.i, dst_reg, [8]
type1, src_reg, [0]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
umax_value.i328.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
umax_value.i.i34.i, dst_reg, [9]
smax_value.i150.i, dst_reg, [7]
umax_value.i.i.i, dst_reg, [9]
umax_value15.i.i, dst_reg, [9]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
umin_value.i151.i, dst_reg, [8]
var_off.i28.i.repack1, dst_reg, [5, 1]
frameno.i30.i, dst_reg, [11]
smax_value.i.i32.i, dst_reg, [7]
var_off.i28.i.repack, dst_reg, [5, 0]
smin_value.i149.i, dst_reg, [6]
umax_value.i152.i, dst_reg, [9]
umin_value218.i, dst_reg, [8]
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i11.i.i_4_254
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i11.i.i_4_254
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
[handleLoadInst] (= dst_reg_4_112 i11.i.i_4_254)
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:11
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
    (= retval.0.i.i.i.i_4_239 phi.bo_4_236))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
    (= retval.0.i.i.i.i_4_239 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_4_239 #x0000003f)
     (= cmp.i.i.i_4_242 #b1)
     (= cmp.i.i.i_4_242 #b0))
  (= sh_prom.i.i.i_4_243 ((_ zero_extend 32) retval.0.i.i.i.i_4_239))
  (= notmask.i.i.i_4_245 (bvshl #xffffffffffffffff sh_prom.i.i.i_4_243))
  (= sub.i.i.i_4_247 (bvxor notmask.i.i.i_4_245 #xffffffffffffffff))
  (= and.i.i336.i_4_248 (bvand notmask.i.i.i_4_245 i.i333.i_4_186))
  (ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.0.0.i.i.i_4_250 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_4_250 and.i.i336.i_4_248))
  (ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.3.0.i.i.i_4_252 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_4_252 sub.i.i.i_4_247))
  (= dst_reg_4_111 i9.i.i_4_253)
  (= dst_reg_4_112 i11.i.i_4_254)
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
  (= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194)
     (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select17.i.i.i.i.i_4_198 #x0000001f)
     (= spec.select17.i.i.i.i.i_4_198 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_4_195 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= tobool2.not.i.i.i.i.i_4_200 #b0))
  (= sub4.i.i.i.i.i_4_202 (bvadd spec.select17.i.i.i.i.i_4_198 #xfffffff0))
  (= shl5.i.i.i.i.i_4_204 (bvshl spec.select.i.i.i.i.i_4_195 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= word.addr.1.i.i.i.i.i_4_205 shl5.i.i.i.i.i_4_204)
     (= word.addr.1.i.i.i.i.i_4_205 spec.select.i.i.i.i.i_4_195))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= num.1.i.i.i.i.i_4_206 sub4.i.i.i.i.i_4_202)
     (= num.1.i.i.i.i.i_4_206 spec.select17.i.i.i.i.i_4_198))
  (ite (bvult word.addr.1.i.i.i.i.i_4_205 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= tobool8.not.i.i.i.i.i_4_208 #b0))
  (= sub10.i.i.i.i.i_4_210 (bvadd num.1.i.i.i.i.i_4_206 #xfffffff8))
  (= shl11.i.i.i.i.i_4_212 (bvshl word.addr.1.i.i.i.i.i_4_205 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= word.addr.2.i.i.i.i.i_4_213 shl11.i.i.i.i.i_4_212)
     (= word.addr.2.i.i.i.i.i_4_213 word.addr.1.i.i.i.i.i_4_205))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= num.2.i.i.i.i.i_4_214 sub10.i.i.i.i.i_4_210)
     (= num.2.i.i.i.i.i_4_214 num.1.i.i.i.i.i_4_206))
  (ite (bvult word.addr.2.i.i.i.i.i_4_213 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= tobool14.not.i.i.i.i.i_4_216 #b0))
  (= sub16.i.i.i.i.i_4_218 (bvadd num.2.i.i.i.i.i_4_214 #xfffffffc))
  (= shl17.i.i.i.i.i_4_220 (bvshl word.addr.2.i.i.i.i.i_4_213 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= word.addr.3.i.i.i.i.i_4_221 shl17.i.i.i.i.i_4_220)
     (= word.addr.3.i.i.i.i.i_4_221 word.addr.2.i.i.i.i.i_4_213))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= num.3.i.i.i.i.i_4_222 sub16.i.i.i.i.i_4_218)
     (= num.3.i.i.i.i.i_4_222 num.2.i.i.i.i.i_4_214))
  (ite (bvult word.addr.3.i.i.i.i.i_4_221 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= tobool20.not.i.i.i.i.i_4_224 #b0))
  (= sub22.i.i.i.i.i_4_226 (bvadd num.3.i.i.i.i.i_4_222 #x000000fe))
  (= shl23.i.i.i.i.i_4_228 (bvshl word.addr.3.i.i.i.i.i_4_221 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= word.addr.4.i.i.i.i.i_4_229 shl23.i.i.i.i.i_4_228)
     (= word.addr.4.i.i.i.i.i_4_229 word.addr.3.i.i.i.i.i_4_221))
  (ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= num.4.i.i.i.i.i_4_230 sub22.i.i.i.i.i_4_226)
     (= num.4.i.i.i.i.i_4_230 num.3.i.i.i.i.i_4_222))
  (= word.addr.4.lobit.i.i.i.i.i.neg_4_232
   (bvlshr word.addr.4.i.i.i.i.i_4_229 #x000000000000003f))
  (= i.i.i.i.i.i.neg_4_233
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_4_232))
  (= add.i.i.i335.i_4_234 (bvadd num.4.i.i.i.i.i_4_230 i.i.i.i.i.i.neg_4_233))
  (= phi.bo_4_236 (bvand add.i.i.i335.i_4_234 #x000000ff))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_4_250
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i9.i.i_4_253
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_4_255
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_4_255
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_4_255 (bvor retval.sroa.0.0.i.i.i_4_250 i9.i.i_4_253))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_4_252
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i11.i.i_4_254
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_4_256
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_4_256
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_4_256 (bvand retval.sroa.3.0.i.i.i_4_252 i11.i.i_4_254))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_4_256
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_4_258
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_4_258
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_4_258 (bvxor and.i1.i.i_4_256 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_4_255
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_4_258
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_4_259
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_4_259
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_4_259 (bvand or.i.i.i_4_255 neg.i.i.i_4_258))
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_4_259
[handleStoreInst] BVToStore: and4.i.i.i_4_259
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 45 = MemoryDef(47)
[handleStoreInst] definingMemoryAccess: 47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_162 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_4_259 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
45 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ i37.i.i_4_148 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
42 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44}) : {
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_4_256
[handleStoreInst] BVToStore: and.i1.i.i_4_256
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 46 = MemoryDef(45)
[handleStoreInst] definingMemoryAccess: 45 = MemoryDef(47)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_4_163 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_4_256 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ and.i1.i.i_4_256 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
}
45 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ i37.i.i_4_148 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
42 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44}) : {
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_260
[lookInsideStruct] singleValueType:dst_reg_4_260
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_261
[lookInsideStruct] singleValueType:dst_reg_4_261
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_262
[lookInsideStruct] singleValueType:dst_reg_4_262
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_263
[lookInsideStruct] singleValueType:dst_reg_4_263
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_264
[lookInsideStruct] singleValueType:dst_reg_4_264
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_265
[lookInsideStruct] singleValueType:dst_reg_4_265
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_266
[lookInsideStruct] singleValueType:dst_reg_4_266
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_267
[lookInsideStruct] singleValueType:dst_reg_4_267
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_268
[lookInsideStruct] singleValueType:dst_reg_4_268
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_269
[lookInsideStruct] singleValueType:dst_reg_4_269
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_270
[lookInsideStruct] singleValueType:dst_reg_4_270
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_271
[lookInsideStruct] singleValueType:dst_reg_4_271
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_272
[lookInsideStruct] singleValueType:dst_reg_4_272
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_273
[lookInsideStruct] singleValueType:dst_reg_4_273
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_4_260 ] [ ] [ dst_reg_4_261 ] [ dst_reg_4_262 ] [ dst_reg_4_263 ] [ [ dst_reg_4_264 ] [ dst_reg_4_265 ] ] [ dst_reg_4_266 ] [ dst_reg_4_267 ] [ dst_reg_4_268 ] [ dst_reg_4_269 ] [ ] [ dst_reg_4_270 ] [ dst_reg_4_271 ] [ dst_reg_4_272 ] [ dst_reg_4_273 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_274
[lookInsideStruct] singleValueType:src_reg_4_274
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_275
[lookInsideStruct] singleValueType:src_reg_4_275
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_276
[lookInsideStruct] singleValueType:src_reg_4_276
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_277
[lookInsideStruct] singleValueType:src_reg_4_277
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_278
[lookInsideStruct] singleValueType:src_reg_4_278
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_279
[lookInsideStruct] singleValueType:src_reg_4_279
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_280
[lookInsideStruct] singleValueType:src_reg_4_280
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_281
[lookInsideStruct] singleValueType:src_reg_4_281
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_282
[lookInsideStruct] singleValueType:src_reg_4_282
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_283
[lookInsideStruct] singleValueType:src_reg_4_283
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_284
[lookInsideStruct] singleValueType:src_reg_4_284
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_285
[lookInsideStruct] singleValueType:src_reg_4_285
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_286
[lookInsideStruct] singleValueType:src_reg_4_286
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_287
[lookInsideStruct] singleValueType:src_reg_4_287
[setupBVTreeForArg] returning BVTree: [ [ src_reg_4_274 ] [ ] [ src_reg_4_275 ] [ src_reg_4_276 ] [ src_reg_4_277 ] [ [ src_reg_4_278 ] [ src_reg_4_279 ] ] [ src_reg_4_280 ] [ src_reg_4_281 ] [ src_reg_4_282 ] [ src_reg_4_283 ] [ ] [ src_reg_4_284 ] [ src_reg_4_285 ] [ src_reg_4_286 ] [ src_reg_4_287 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_4_274 ] [ ] [ src_reg_4_275 ] [ src_reg_4_276 ] [ src_reg_4_277 ] [ [ src_reg_4_278 ] [ src_reg_4_279 ] ] [ src_reg_4_280 ] [ src_reg_4_281 ] [ src_reg_4_282 ] [ src_reg_4_283 ] [ ] [ src_reg_4_284 ] [ src_reg_4_285 ] [ src_reg_4_286 ] [ src_reg_4_287 ] ] 
- dst_reg: [ [ dst_reg_4_260 ] [ ] [ dst_reg_4_261 ] [ dst_reg_4_262 ] [ dst_reg_4_263 ] [ [ dst_reg_4_264 ] [ dst_reg_4_265 ] ] [ dst_reg_4_266 ] [ dst_reg_4_267 ] [ dst_reg_4_268 ] [ dst_reg_4_269 ] [ ] [ dst_reg_4_270 ] [ dst_reg_4_271 ] [ dst_reg_4_272 ] [ dst_reg_4_273 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 10 = MemoryDef(9)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_4_274 ] [ ] [ src_reg_4_275 ] [ src_reg_4_276 ] [ src_reg_4_277 ] [ [ src_reg_4_278 ] [ src_reg_4_279 ] ] [ src_reg_4_280 ] [ src_reg_4_281 ] [ src_reg_4_282 ] [ src_reg_4_283 ] [ ] [ src_reg_4_284 ] [ src_reg_4_285 ] [ src_reg_4_286 ] [ src_reg_4_287 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_4_260 ] [ ] [ dst_reg_4_261 ] [ dst_reg_4_262 ] [ dst_reg_4_263 ] [ [ dst_reg_4_264 ] [ dst_reg_4_265 ] ] [ dst_reg_4_266 ] [ dst_reg_4_267 ] [ dst_reg_4_268 ] [ dst_reg_4_269 ] [ ] [ dst_reg_4_270 ] [ dst_reg_4_271 ] [ dst_reg_4_272 ] [ dst_reg_4_273 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_4_274)
(= src_reg_4_15 src_reg_4_275)
(= src_reg_4_16 src_reg_4_276)
(= src_reg_4_17 src_reg_4_277)
(= src_reg_4_18 src_reg_4_278)
(= src_reg_4_19 src_reg_4_279)
(= src_reg_4_20 src_reg_4_280)
(= src_reg_4_21 src_reg_4_281)
(= src_reg_4_22 src_reg_4_282)
(= src_reg_4_23 src_reg_4_283)
(= src_reg_4_24 src_reg_4_284)
(= src_reg_4_25 src_reg_4_285)
(= src_reg_4_26 src_reg_4_286)
(= src_reg_4_27 src_reg_4_287)
(= #x00000001 dst_reg_4_260)
(= dst_reg_4_1 dst_reg_4_261)
(= dst_reg_4_2 dst_reg_4_262)
(= dst_reg_4_3 dst_reg_4_263)
(= #x0000000000000000 dst_reg_4_264)
(= #xffffffffffffffff dst_reg_4_265)
(= #x8000000000000000 dst_reg_4_266)
(= #x7fffffffffffffff dst_reg_4_267)
(= #x0000000000000000 dst_reg_4_268)
(= #xffffffffffffffff dst_reg_4_269)
(= #x00000000 dst_reg_4_270)
(= dst_reg_4_11 dst_reg_4_271)
(= dst_reg_4_12 dst_reg_4_272)
(= dst_reg_4_13 dst_reg_4_273)
]
[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 46 = MemoryDef(45)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ and.i1.i.i_4_256 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_4_274 ] [ ] [ src_reg_4_275 ] [ src_reg_4_276 ] [ src_reg_4_277 ] [ [ src_reg_4_278 ] [ src_reg_4_279 ] ] [ src_reg_4_280 ] [ src_reg_4_281 ] [ src_reg_4_282 ] [ src_reg_4_283 ] [ ] [ src_reg_4_284 ] [ src_reg_4_285 ] [ src_reg_4_286 ] [ src_reg_4_287 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ and.i1.i.i_4_256 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_4_260 ] [ ] [ dst_reg_4_261 ] [ dst_reg_4_262 ] [ dst_reg_4_263 ] [ [ dst_reg_4_264 ] [ dst_reg_4_265 ] ] [ dst_reg_4_266 ] [ dst_reg_4_267 ] [ dst_reg_4_268 ] [ dst_reg_4_269 ] [ ] [ dst_reg_4_270 ] [ dst_reg_4_271 ] [ dst_reg_4_272 ] [ dst_reg_4_273 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_4_172 src_reg_4_274)
(= src_reg_4_173 src_reg_4_275)
(= src_reg_4_174 src_reg_4_276)
(= src_reg_4_175 src_reg_4_277)
(= src_reg_4_176 src_reg_4_278)
(= src_reg_4_177 src_reg_4_279)
(= src_reg_4_178 src_reg_4_280)
(= src_reg_4_179 src_reg_4_281)
(= src_reg_4_180 src_reg_4_282)
(= src_reg_4_181 src_reg_4_283)
(= src_reg_4_182 src_reg_4_284)
(= src_reg_4_183 src_reg_4_285)
(= src_reg_4_184 src_reg_4_286)
(= src_reg_4_185 src_reg_4_287)
(= dst_reg_4_158 dst_reg_4_260)
(= dst_reg_4_159 dst_reg_4_261)
(= dst_reg_4_160 dst_reg_4_262)
(= dst_reg_4_161 dst_reg_4_263)
(= and4.i.i.i_4_259 dst_reg_4_264)
(= and.i1.i.i_4_256 dst_reg_4_265)
(= dst_reg_4_164 dst_reg_4_266)
(= dst_reg_4_165 dst_reg_4_267)
(= dst_reg_4_166 dst_reg_4_268)
(= dst_reg_4_167 dst_reg_4_269)
(= dst_reg_4_168 dst_reg_4_270)
(= dst_reg_4_169 dst_reg_4_271)
(= dst_reg_4_170 dst_reg_4_272)
(= dst_reg_4_171 dst_reg_4_273)
]
[handleMemoryPhiNode] incomingBBI: if.then41.i
[handleMemoryPhiNode] incomingAccessI: 18 = MemoryDef(17)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_4_274 ] [ ] [ src_reg_4_275 ] [ src_reg_4_276 ] [ src_reg_4_277 ] [ [ src_reg_4_278 ] [ src_reg_4_279 ] ] [ src_reg_4_280 ] [ src_reg_4_281 ] [ src_reg_4_282 ] [ src_reg_4_283 ] [ ] [ src_reg_4_284 ] [ src_reg_4_285 ] [ src_reg_4_286 ] [ src_reg_4_287 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_4_260 ] [ ] [ dst_reg_4_261 ] [ dst_reg_4_262 ] [ dst_reg_4_263 ] [ [ dst_reg_4_264 ] [ dst_reg_4_265 ] ] [ dst_reg_4_266 ] [ dst_reg_4_267 ] [ dst_reg_4_268 ] [ dst_reg_4_269 ] [ ] [ dst_reg_4_270 ] [ dst_reg_4_271 ] [ dst_reg_4_272 ] [ dst_reg_4_273 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_4_274)
(= src_reg_4_15 src_reg_4_275)
(= src_reg_4_16 src_reg_4_276)
(= src_reg_4_17 src_reg_4_277)
(= src_reg_4_18 src_reg_4_278)
(= src_reg_4_19 src_reg_4_279)
(= src_reg_4_20 src_reg_4_280)
(= src_reg_4_21 src_reg_4_281)
(= src_reg_4_22 src_reg_4_282)
(= src_reg_4_23 src_reg_4_283)
(= src_reg_4_24 src_reg_4_284)
(= src_reg_4_25 src_reg_4_285)
(= src_reg_4_26 src_reg_4_286)
(= src_reg_4_27 src_reg_4_287)
(= #x00000001 dst_reg_4_260)
(= dst_reg_4_1 dst_reg_4_261)
(= dst_reg_4_2 dst_reg_4_262)
(= dst_reg_4_3 dst_reg_4_263)
(= #x0000000000000000 dst_reg_4_264)
(= #xffffffffffffffff dst_reg_4_265)
(= #x8000000000000000 dst_reg_4_266)
(= #x7fffffffffffffff dst_reg_4_267)
(= #x0000000000000000 dst_reg_4_268)
(= #xffffffffffffffff dst_reg_4_269)
(= #x00000000 dst_reg_4_270)
(= dst_reg_4_11 dst_reg_4_271)
(= dst_reg_4_12 dst_reg_4_272)
(= dst_reg_4_13 dst_reg_4_273)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_4_274)
  (= src_reg_4_15 src_reg_4_275)
  (= src_reg_4_16 src_reg_4_276)
  (= src_reg_4_17 src_reg_4_277)
  (= src_reg_4_18 src_reg_4_278)
  (= src_reg_4_19 src_reg_4_279)
  (= src_reg_4_20 src_reg_4_280)
  (= src_reg_4_21 src_reg_4_281)
  (= src_reg_4_22 src_reg_4_282)
  (= src_reg_4_23 src_reg_4_283)
  (= src_reg_4_24 src_reg_4_284)
  (= src_reg_4_25 src_reg_4_285)
  (= src_reg_4_26 src_reg_4_286)
  (= src_reg_4_27 src_reg_4_287)
  (= #x00000001 dst_reg_4_260)
  (= dst_reg_4_1 dst_reg_4_261)
  (= dst_reg_4_2 dst_reg_4_262)
  (= dst_reg_4_3 dst_reg_4_263)
  (= #x0000000000000000 dst_reg_4_264)
  (= #xffffffffffffffff dst_reg_4_265)
  (= #x8000000000000000 dst_reg_4_266)
  (= #x7fffffffffffffff dst_reg_4_267)
  (= #x0000000000000000 dst_reg_4_268)
  (= #xffffffffffffffff dst_reg_4_269)
  (= #x00000000 dst_reg_4_270)
  (= dst_reg_4_11 dst_reg_4_271)
  (= dst_reg_4_12 dst_reg_4_272)
  (= dst_reg_4_13 dst_reg_4_273)
<if.then41.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_4_274)
  (= src_reg_4_15 src_reg_4_275)
  (= src_reg_4_16 src_reg_4_276)
  (= src_reg_4_17 src_reg_4_277)
  (= src_reg_4_18 src_reg_4_278)
  (= src_reg_4_19 src_reg_4_279)
  (= src_reg_4_20 src_reg_4_280)
  (= src_reg_4_21 src_reg_4_281)
  (= src_reg_4_22 src_reg_4_282)
  (= src_reg_4_23 src_reg_4_283)
  (= src_reg_4_24 src_reg_4_284)
  (= src_reg_4_25 src_reg_4_285)
  (= src_reg_4_26 src_reg_4_286)
  (= src_reg_4_27 src_reg_4_287)
  (= #x00000001 dst_reg_4_260)
  (= dst_reg_4_1 dst_reg_4_261)
  (= dst_reg_4_2 dst_reg_4_262)
  (= dst_reg_4_3 dst_reg_4_263)
  (= #x0000000000000000 dst_reg_4_264)
  (= #xffffffffffffffff dst_reg_4_265)
  (= #x8000000000000000 dst_reg_4_266)
  (= #x7fffffffffffffff dst_reg_4_267)
  (= #x0000000000000000 dst_reg_4_268)
  (= #xffffffffffffffff dst_reg_4_269)
  (= #x00000000 dst_reg_4_270)
  (= dst_reg_4_11 dst_reg_4_271)
  (= dst_reg_4_12 dst_reg_4_272)
  (= dst_reg_4_13 dst_reg_4_273)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_4_121 src_reg_4_172)
  (= src_reg_4_122 src_reg_4_173)
  (= src_reg_4_123 src_reg_4_174)
  (= src_reg_4_124 src_reg_4_175)
  (= src_reg_4_125 src_reg_4_176)
  (= src_reg_4_126 src_reg_4_177)
  (= src_reg_4_127 src_reg_4_178)
  (= src_reg_4_128 src_reg_4_179)
  (= src_reg_4_129 src_reg_4_180)
  (= src_reg_4_130 src_reg_4_181)
  (= src_reg_4_131 src_reg_4_182)
  (= src_reg_4_132 src_reg_4_183)
  (= src_reg_4_133 src_reg_4_184)
  (= src_reg_4_134 src_reg_4_185)
  (= dst_reg_4_107 dst_reg_4_158)
  (= dst_reg_4_108 dst_reg_4_159)
  (= dst_reg_4_109 dst_reg_4_160)
  (= dst_reg_4_110 dst_reg_4_161)
  (= dst_reg_4_111 dst_reg_4_162)
  (= dst_reg_4_112 dst_reg_4_163)
  (= cond40.i.i_4_157 dst_reg_4_164)
  (= i37.i.i_4_148 dst_reg_4_165)
  (= cond40.i.i_4_157 dst_reg_4_166)
  (= dst_reg_4_116 dst_reg_4_167)
  (= dst_reg_4_117 dst_reg_4_168)
  (= dst_reg_4_118 dst_reg_4_169)
  (= dst_reg_4_119 dst_reg_4_170)
  (= dst_reg_4_120 dst_reg_4_171)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_4_121 src_reg_4_172)
  (= src_reg_4_122 src_reg_4_173)
  (= src_reg_4_123 src_reg_4_174)
  (= src_reg_4_124 src_reg_4_175)
  (= src_reg_4_125 src_reg_4_176)
  (= src_reg_4_126 src_reg_4_177)
  (= src_reg_4_127 src_reg_4_178)
  (= src_reg_4_128 src_reg_4_179)
  (= src_reg_4_129 src_reg_4_180)
  (= src_reg_4_130 src_reg_4_181)
  (= src_reg_4_131 src_reg_4_182)
  (= src_reg_4_132 src_reg_4_183)
  (= src_reg_4_133 src_reg_4_184)
  (= src_reg_4_134 src_reg_4_185)
  (= dst_reg_4_107 dst_reg_4_158)
  (= dst_reg_4_108 dst_reg_4_159)
  (= dst_reg_4_109 dst_reg_4_160)
  (= dst_reg_4_110 dst_reg_4_161)
  (= dst_reg_4_111 dst_reg_4_162)
  (= dst_reg_4_112 dst_reg_4_163)
  (= dst_reg_4_113 dst_reg_4_164)
  (= dst_reg_4_114 dst_reg_4_165)
  (= dst_reg_4_115 dst_reg_4_166)
  (= dst_reg_4_116 dst_reg_4_167)
  (= dst_reg_4_117 dst_reg_4_168)
  (= dst_reg_4_118 dst_reg_4_169)
  (= dst_reg_4_119 dst_reg_4_170)
  (= dst_reg_4_120 dst_reg_4_171)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_4_121 src_reg_4_172)
  (= src_reg_4_122 src_reg_4_173)
  (= src_reg_4_123 src_reg_4_174)
  (= src_reg_4_124 src_reg_4_175)
  (= src_reg_4_125 src_reg_4_176)
  (= src_reg_4_126 src_reg_4_177)
  (= src_reg_4_127 src_reg_4_178)
  (= src_reg_4_128 src_reg_4_179)
  (= src_reg_4_129 src_reg_4_180)
  (= src_reg_4_130 src_reg_4_181)
  (= src_reg_4_131 src_reg_4_182)
  (= src_reg_4_132 src_reg_4_183)
  (= src_reg_4_133 src_reg_4_184)
  (= src_reg_4_134 src_reg_4_185)
  (= dst_reg_4_107 dst_reg_4_158)
  (= dst_reg_4_108 dst_reg_4_159)
  (= dst_reg_4_109 dst_reg_4_160)
  (= dst_reg_4_110 dst_reg_4_161)
  (= dst_reg_4_111 dst_reg_4_162)
  (= dst_reg_4_112 dst_reg_4_163)
  (= i38.i.i_4_151 dst_reg_4_164)
  (= cond27.i.i_4_153 dst_reg_4_165)
  (= dst_reg_4_115 dst_reg_4_166)
  (= cond27.i.i_4_153 dst_reg_4_167)
  (= dst_reg_4_117 dst_reg_4_168)
  (= dst_reg_4_118 dst_reg_4_169)
  (= dst_reg_4_119 dst_reg_4_170)
  (= dst_reg_4_120 dst_reg_4_171)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_4_121 src_reg_4_172)
  (= src_reg_4_122 src_reg_4_173)
  (= src_reg_4_123 src_reg_4_174)
  (= src_reg_4_124 src_reg_4_175)
  (= src_reg_4_125 src_reg_4_176)
  (= src_reg_4_126 src_reg_4_177)
  (= src_reg_4_127 src_reg_4_178)
  (= src_reg_4_128 src_reg_4_179)
  (= src_reg_4_129 src_reg_4_180)
  (= src_reg_4_130 src_reg_4_181)
  (= src_reg_4_131 src_reg_4_182)
  (= src_reg_4_132 src_reg_4_183)
  (= src_reg_4_133 src_reg_4_184)
  (= src_reg_4_134 src_reg_4_185)
  (= dst_reg_4_107 dst_reg_4_158)
  (= dst_reg_4_108 dst_reg_4_159)
  (= dst_reg_4_109 dst_reg_4_160)
  (= dst_reg_4_110 dst_reg_4_161)
  (= dst_reg_4_111 dst_reg_4_162)
  (= dst_reg_4_112 dst_reg_4_163)
  (= cond.i327.i_4_143 dst_reg_4_164)
  (= cond12.i.i_4_147 dst_reg_4_165)
  (= cond.i327.i_4_143 dst_reg_4_166)
  (= cond12.i.i_4_147 dst_reg_4_167)
  (= dst_reg_4_117 dst_reg_4_168)
  (= dst_reg_4_118 dst_reg_4_169)
  (= dst_reg_4_119 dst_reg_4_170)
  (= dst_reg_4_120 dst_reg_4_171)
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_4_172 src_reg_4_274)
  (= src_reg_4_173 src_reg_4_275)
  (= src_reg_4_174 src_reg_4_276)
  (= src_reg_4_175 src_reg_4_277)
  (= src_reg_4_176 src_reg_4_278)
  (= src_reg_4_177 src_reg_4_279)
  (= src_reg_4_178 src_reg_4_280)
  (= src_reg_4_179 src_reg_4_281)
  (= src_reg_4_180 src_reg_4_282)
  (= src_reg_4_181 src_reg_4_283)
  (= src_reg_4_182 src_reg_4_284)
  (= src_reg_4_183 src_reg_4_285)
  (= src_reg_4_184 src_reg_4_286)
  (= src_reg_4_185 src_reg_4_287)
  (= dst_reg_4_158 dst_reg_4_260)
  (= dst_reg_4_159 dst_reg_4_261)
  (= dst_reg_4_160 dst_reg_4_262)
  (= dst_reg_4_161 dst_reg_4_263)
  (= and4.i.i.i_4_259 dst_reg_4_264)
  (= and.i1.i.i_4_256 dst_reg_4_265)
  (= dst_reg_4_164 dst_reg_4_266)
  (= dst_reg_4_165 dst_reg_4_267)
  (= dst_reg_4_166 dst_reg_4_268)
  (= dst_reg_4_167 dst_reg_4_269)
  (= dst_reg_4_168 dst_reg_4_270)
  (= dst_reg_4_169 dst_reg_4_271)
  (= dst_reg_4_170 dst_reg_4_272)
  (= dst_reg_4_171 dst_reg_4_273)
<if.end212.i, if.end309.i> :
  (= #x00000001 src_reg_4_121)
  (= src_reg_4_15 src_reg_4_122)
  (= src_reg_4_16 src_reg_4_123)
  (= src_reg_4_17 src_reg_4_124)
  (= src_reg_4_18 src_reg_4_125)
  (= src_reg_4_19 src_reg_4_126)
  (= src_reg_4_20 src_reg_4_127)
  (= src_reg_4_21 src_reg_4_128)
  (= src_reg_4_22 src_reg_4_129)
  (= src_reg_4_23 src_reg_4_130)
  (= src_reg_4_24 src_reg_4_131)
  (= src_reg_4_25 src_reg_4_132)
  (= src_reg_4_26 src_reg_4_133)
  (= src_reg_4_27 src_reg_4_134)
  (= #x00000001 dst_reg_4_107)
  (= dst_reg_4_1 dst_reg_4_108)
  (= dst_reg_4_2 dst_reg_4_109)
  (= dst_reg_4_3 dst_reg_4_110)
  (= or.i_4_71 dst_reg_4_111)
  (= and.i156.i_4_76 dst_reg_4_112)
  (= cond.i168.i_4_96 dst_reg_4_113)
  (= cond14.i174.i_4_101 dst_reg_4_114)
  (= cond23.i178.i_4_103 dst_reg_4_115)
  (= cond35.i183.i_4_106 dst_reg_4_116)
  (= dst_reg_4_10 dst_reg_4_117)
  (= dst_reg_4_11 dst_reg_4_118)
  (= dst_reg_4_12 dst_reg_4_119)
  (= dst_reg_4_13 dst_reg_4_120)
<if.then207.i, if.end309.i> :
  (= #x00000001 src_reg_4_121)
  (= src_reg_4_15 src_reg_4_122)
  (= src_reg_4_16 src_reg_4_123)
  (= src_reg_4_17 src_reg_4_124)
  (= src_reg_4_18 src_reg_4_125)
  (= src_reg_4_19 src_reg_4_126)
  (= src_reg_4_20 src_reg_4_127)
  (= src_reg_4_21 src_reg_4_128)
  (= src_reg_4_22 src_reg_4_129)
  (= src_reg_4_23 src_reg_4_130)
  (= src_reg_4_24 src_reg_4_131)
  (= src_reg_4_25 src_reg_4_132)
  (= src_reg_4_26 src_reg_4_133)
  (= src_reg_4_27 src_reg_4_134)
  (= #x00000001 dst_reg_4_107)
  (= dst_reg_4_1 dst_reg_4_108)
  (= dst_reg_4_2 dst_reg_4_109)
  (= dst_reg_4_3 dst_reg_4_110)
  (= or.i_4_71 dst_reg_4_111)
  (= #x0000000000000000 dst_reg_4_112)
  (= or.i_4_71 dst_reg_4_113)
  (= or.i_4_71 dst_reg_4_114)
  (= or.i_4_71 dst_reg_4_115)
  (= or.i_4_71 dst_reg_4_116)
  (= dst_reg_4_10 dst_reg_4_117)
  (= dst_reg_4_11 dst_reg_4_118)
  (= dst_reg_4_12 dst_reg_4_119)
  (= dst_reg_4_13 dst_reg_4_120)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  %tobool.not.i25.i = icmp eq i64 %i215.i, 0
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_4_37
[handleBranchInst] Edge Assertions:
<entry, land.lhs.true.i>: (= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i>: (= tobool.not.i.i_4_37 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (= tobool.not.i.i_4_37 #b1)
[handleBranchInst] lor.lhs.false20.i: (= tobool.not.i.i_4_37 #b0)
[handleBranchInst] <entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] <entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond199.i_4_49
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.then26.i>: (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<land.lhs.true.i, if.end27.i>: (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
[handleBranchInst] if.end27.i: (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
if.then26.i
  (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
if.then26.i
  (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond200.i_4_53
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.end27.i>: (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
[handleBranchInst] if.end27.i: (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb201.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_4_37
[handleBranchInst] Edge Assertions:
<if.end27.i, sw.bb201.i>: (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.end27.i, if.then41.i>: (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] sw.bb201.i: (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] if.then41.i: (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] <if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] <if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  %smin_value.i.i31.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
-------------------
  %smax_value.i.i32.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
-------------------
  %umin_value.i.i33.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
-------------------
  %umax_value.i.i34.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] <if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
sw.bb201.i
=========================
-------------------
  %i254.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %or.i = or i64 %i254.i, %src_reg1.sroa.3.0.copyload
-------------------
-------------------
  br i1 %tobool.not.i25.i, label %if.then207.i, label %if.end212.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i25.i = icmp eq i64 %i215.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i25.i_4_40
[handleBranchInst] Edge Assertions:
<sw.bb201.i, if.then207.i>: (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i>: (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then207.i: (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] if.end212.i: (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] <sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] <sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
if.then207.i
=========================
-------------------
  store i64 %or.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 0, i64* %i214.i, align 8
-------------------
-------------------
  %smin_value.i149.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 %or.i, i64* %smin_value.i149.i, align 8
-------------------
-------------------
  %smax_value.i150.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 %or.i, i64* %smax_value.i150.i, align 8
-------------------
-------------------
  %umin_value.i151.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 %or.i, i64* %umin_value.i151.i, align 8
-------------------
-------------------
  %umax_value.i152.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 %or.i, i64* %umax_value.i152.i, align 8
-------------------
-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end309.i
[handleBranchInst] newPathCond: (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] if.end309.i: (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] <if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end309.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
if.end212.i
=========================
-------------------
  %or3.i154.i = or i64 %i215.i, %src_reg1.sroa.10.0.copyload
-------------------
-------------------
  %neg.i155.i = xor i64 %or.i, -1
-------------------
-------------------
  %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
-------------------
-------------------
  store i64 %or.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i156.i, i64* %i214.i, align 8
-------------------
-------------------
  %umin_value218.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i258.i = load i64, i64* %umin_value218.i, align 8
-------------------
-------------------
  %cmp220.i = icmp ugt i64 %i258.i, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  %cond225.i = select i1 %cmp220.i, i64 %i258.i, i64 %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  store i64 %cond225.i, i64* %umin_value218.i, align 8
-------------------
-------------------
  %or230.i = or i64 %or.i, %or3.i154.i
-------------------
-------------------
  %umax_value231.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 %or230.i, i64* %umax_value231.i, align 8
-------------------
-------------------
  %smin_value232.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i260.i = load i64, i64* %smin_value232.i, align 8
-------------------
-------------------
  %cmp233.i = icmp slt i64 %i260.i, 0
-------------------
-------------------
  %cmp236.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
-------------------
-------------------
  %or.cond4.i = select i1 %cmp233.i, i1 true, i1 %cmp236.i
-------------------
-------------------
  %.cond225.i = select i1 %or.cond4.i, i64 -9223372036854775808, i64 %cond225.i
-------------------
-------------------
  %.or230.i = select i1 %or.cond4.i, i64 9223372036854775807, i64 %or230.i
-------------------
-------------------
  store i64 %.cond225.i, i64* %smin_value232.i, align 8
-------------------
-------------------
  %smax_value245.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 %.or230.i, i64* %smax_value245.i, align 8
-------------------
-------------------
  %and.i165.i = and i64 %and.i156.i, -9223372036854775808
-------------------
-------------------
  %or.i166.i = or i64 %and.i165.i, %or.i
-------------------
-------------------
  %cmp.i167.i = icmp sgt i64 %.cond225.i, %or.i166.i
-------------------
-------------------
  %cond.i168.i = select i1 %cmp.i167.i, i64 %.cond225.i, i64 %or.i166.i
-------------------
-------------------
  store i64 %cond.i168.i, i64* %smin_value232.i, align 8
-------------------
-------------------
  %and7.i171.i = and i64 %and.i156.i, 9223372036854775807
-------------------
-------------------
  %or8.i172.i = or i64 %and7.i171.i, %or.i
-------------------
-------------------
  %cmp10.i173.i = icmp slt i64 %.or230.i, %or8.i172.i
-------------------
-------------------
  %cond14.i174.i = select i1 %cmp10.i173.i, i64 %.or230.i, i64 %or8.i172.i
-------------------
-------------------
  store i64 %cond14.i174.i, i64* %smax_value245.i, align 8
-------------------
-------------------
  %cmp19.i177.i = icmp ugt i64 %cond225.i, %or.i
-------------------
-------------------
  %cond23.i178.i = select i1 %cmp19.i177.i, i64 %cond225.i, i64 %or.i
-------------------
-------------------
  store i64 %cond23.i178.i, i64* %umin_value218.i, align 8
-------------------
-------------------
  %or29.i181.i = or i64 %or.i, %or3.i154.i
-------------------
-------------------
  %cmp31.i182.i = icmp ult i64 %or230.i, %or29.i181.i
-------------------
-------------------
  %cond35.i183.i = select i1 %cmp31.i182.i, i64 %or230.i, i64 %or29.i181.i
-------------------
-------------------
  store i64 %cond35.i183.i, i64* %umax_value231.i, align 8
-------------------
-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end309.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end309.i
[handleBranchInst] newPathCond: (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] if.end309.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
[handleBranchInst] <if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
if.end309.i
=========================
-------------------
  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i323.i_4_137
[handleBranchInst] Edge Assertions:
<if.end309.i, if.then.i329.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] lor.lhs.false.i.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] <if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] <if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i325.i_4_140
[handleBranchInst] Edge Assertions:
<lor.lhs.false.i.i, if.then.i329.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<lor.lhs.false.i.i, if.end.i.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
[handleBranchInst] if.end.i.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] <lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] <lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
=========================
if.then.i329.i
=========================
-------------------
  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
[handleBranchInst] <if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
-------------------
  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.i.i_4_150
[handleBranchInst] Edge Assertions:
<if.end.i.i, if.then17.i.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then17.i.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] if.else.i331.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] <if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] <if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp16.i.i_4_150 #b1)
           (= cmp1.i325.i_4_140 #b0)
           (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2))))
[handleBranchInst] <if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp16.i.i_4_150 #b1)
           (= cmp1.i325.i_4_140 #b0)
           (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp16.i.i_4_150 #b1)
           (= cmp1.i325.i_4_140 #b0)
           (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i330.i_4_155
[handleBranchInst] Edge Assertions:
<if.else.i331.i, if.then32.i.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then32.i.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_4_155 #b0)
                (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
[handleBranchInst] <if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] <if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_4_155 #b0)
                (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_4_155 #b0)
                (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or (and (= cmp31.i330.i_4_155 #b1) a!3)
      (and (= cmp31.i330.i_4_155 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
[handleBranchInst] <if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or (and (= cmp31.i330.i_4_155 #b1) a!3)
      (and (= cmp31.i330.i_4_155 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
=========================
__reg_deduce_bounds.exit.i
=========================
-------------------
  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
-------------------
-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or (and (= cmp31.i330.i_4_155 #b1) a!3)
      (and (= cmp31.i330.i_4_155 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_4_190
[handleBranchInst] Edge Assertions:
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i>: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or (and (= cmp31.i330.i_4_155 #b1) a!3)
      (and (= cmp31.i330.i_4_155 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or (and (= cmp31.i330.i_4_155 #b1) a!3)
      (and (= cmp31.i330.i_4_155 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5) (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5) (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or (and (= cmp31.i330.i_4_155 #b1) a!3)
      (and (= cmp31.i330.i_4_155 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5) (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or (and (= cmp31.i330.i_4_155 #b1) a!3)
      (and (= cmp31.i330.i_4_155 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or a!1
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5) (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
               (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0)
                    (and (= tobool.not.i.i_4_37 #b1) a!1))
               (and (= tobool.not.i25.i_4_40 #b1)
                    (and (= tobool.not.i.i_4_37 #b1) a!1)))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5)
      (and (= cmp.i.i.i.i_4_190 #b1) a!5)
      (and (= tobool.not.i.i_4_37 #b0) a!1)
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5) (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
[handleBranchInst] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5) (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[handleBranchInst] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5) (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or (and (= cmp31.i330.i_4_155 #b1) a!3)
      (and (= cmp31.i330.i_4_155 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
               (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0)
                    (and (= tobool.not.i.i_4_37 #b1) a!1))
               (and (= tobool.not.i25.i_4_40 #b1)
                    (and (= tobool.not.i.i_4_37 #b1) a!1)))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5)
      (and (= cmp.i.i.i.i_4_190 #b1) a!5)
      (and (= tobool.not.i.i_4_37 #b0) a!1)
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
=========================
sw.bb201.i
=========================
=========================
if.then207.i
=========================
=========================
if.end212.i
=========================
=========================
if.end309.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= tobool.not.i25.i_4_40 #b1)
                (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_4_121)
           (= src_reg_4_15 src_reg_4_122)
           (= src_reg_4_16 src_reg_4_123)
           (= src_reg_4_17 src_reg_4_124)
           (= src_reg_4_18 src_reg_4_125)
           (= src_reg_4_19 src_reg_4_126)
           (= src_reg_4_20 src_reg_4_127)
           (= src_reg_4_21 src_reg_4_128)
           (= src_reg_4_22 src_reg_4_129)
           (= src_reg_4_23 src_reg_4_130)
           (= src_reg_4_24 src_reg_4_131)
           (= src_reg_4_25 src_reg_4_132)
           (= src_reg_4_26 src_reg_4_133)
           (= src_reg_4_27 src_reg_4_134)
           (= #x00000001 dst_reg_4_107)
           (= dst_reg_4_1 dst_reg_4_108)
           (= dst_reg_4_2 dst_reg_4_109)
           (= dst_reg_4_3 dst_reg_4_110)
           (= or.i_4_71 dst_reg_4_111)
           (= #x0000000000000000 dst_reg_4_112)
           (= or.i_4_71 dst_reg_4_113)
           (= or.i_4_71 dst_reg_4_114)
           (= or.i_4_71 dst_reg_4_115)
           (= or.i_4_71 dst_reg_4_116)
           (= dst_reg_4_10 dst_reg_4_117)
           (= dst_reg_4_11 dst_reg_4_118)
           (= dst_reg_4_12 dst_reg_4_119)
           (= dst_reg_4_13 dst_reg_4_120))))
phiResolveI (i=1) (let ((a!1 (and (= tobool.not.i25.i_4_40 #b0)
                (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_4_121)
           (= src_reg_4_15 src_reg_4_122)
           (= src_reg_4_16 src_reg_4_123)
           (= src_reg_4_17 src_reg_4_124)
           (= src_reg_4_18 src_reg_4_125)
           (= src_reg_4_19 src_reg_4_126)
           (= src_reg_4_20 src_reg_4_127)
           (= src_reg_4_21 src_reg_4_128)
           (= src_reg_4_22 src_reg_4_129)
           (= src_reg_4_23 src_reg_4_130)
           (= src_reg_4_24 src_reg_4_131)
           (= src_reg_4_25 src_reg_4_132)
           (= src_reg_4_26 src_reg_4_133)
           (= src_reg_4_27 src_reg_4_134)
           (= #x00000001 dst_reg_4_107)
           (= dst_reg_4_1 dst_reg_4_108)
           (= dst_reg_4_2 dst_reg_4_109)
           (= dst_reg_4_3 dst_reg_4_110)
           (= or.i_4_71 dst_reg_4_111)
           (= and.i156.i_4_76 dst_reg_4_112)
           (= cond.i168.i_4_96 dst_reg_4_113)
           (= cond14.i174.i_4_101 dst_reg_4_114)
           (= cond23.i178.i_4_103 dst_reg_4_115)
           (= cond35.i183.i_4_106 dst_reg_4_116)
           (= dst_reg_4_10 dst_reg_4_117)
           (= dst_reg_4_11 dst_reg_4_118)
           (= dst_reg_4_12 dst_reg_4_119)
           (= dst_reg_4_13 dst_reg_4_120))))
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (=> (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
          (and (= cmp.i323.i_4_137 #b1) a!2))
      (and (= src_reg_4_121 src_reg_4_172)
           (= src_reg_4_122 src_reg_4_173)
           (= src_reg_4_123 src_reg_4_174)
           (= src_reg_4_124 src_reg_4_175)
           (= src_reg_4_125 src_reg_4_176)
           (= src_reg_4_126 src_reg_4_177)
           (= src_reg_4_127 src_reg_4_178)
           (= src_reg_4_128 src_reg_4_179)
           (= src_reg_4_129 src_reg_4_180)
           (= src_reg_4_130 src_reg_4_181)
           (= src_reg_4_131 src_reg_4_182)
           (= src_reg_4_132 src_reg_4_183)
           (= src_reg_4_133 src_reg_4_184)
           (= src_reg_4_134 src_reg_4_185)
           (= dst_reg_4_107 dst_reg_4_158)
           (= dst_reg_4_108 dst_reg_4_159)
           (= dst_reg_4_109 dst_reg_4_160)
           (= dst_reg_4_110 dst_reg_4_161)
           (= dst_reg_4_111 dst_reg_4_162)
           (= dst_reg_4_112 dst_reg_4_163)
           (= cond.i327.i_4_143 dst_reg_4_164)
           (= cond12.i.i_4_147 dst_reg_4_165)
           (= cond.i327.i_4_143 dst_reg_4_166)
           (= cond12.i.i_4_147 dst_reg_4_167)
           (= dst_reg_4_117 dst_reg_4_168)
           (= dst_reg_4_118 dst_reg_4_169)
           (= dst_reg_4_119 dst_reg_4_170)
           (= dst_reg_4_120 dst_reg_4_171)))))
phiResolveI (i=1) (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (and (= cmp16.i.i_4_150 #b1)
                (= cmp1.i325.i_4_140 #b0)
                (= cmp.i323.i_4_137 #b0)
                (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
                    (and (= tobool.not.i25.i_4_40 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_4_121 src_reg_4_172)
           (= src_reg_4_122 src_reg_4_173)
           (= src_reg_4_123 src_reg_4_174)
           (= src_reg_4_124 src_reg_4_175)
           (= src_reg_4_125 src_reg_4_176)
           (= src_reg_4_126 src_reg_4_177)
           (= src_reg_4_127 src_reg_4_178)
           (= src_reg_4_128 src_reg_4_179)
           (= src_reg_4_129 src_reg_4_180)
           (= src_reg_4_130 src_reg_4_181)
           (= src_reg_4_131 src_reg_4_182)
           (= src_reg_4_132 src_reg_4_183)
           (= src_reg_4_133 src_reg_4_184)
           (= src_reg_4_134 src_reg_4_185)
           (= dst_reg_4_107 dst_reg_4_158)
           (= dst_reg_4_108 dst_reg_4_159)
           (= dst_reg_4_109 dst_reg_4_160)
           (= dst_reg_4_110 dst_reg_4_161)
           (= dst_reg_4_111 dst_reg_4_162)
           (= dst_reg_4_112 dst_reg_4_163)
           (= i38.i.i_4_151 dst_reg_4_164)
           (= cond27.i.i_4_153 dst_reg_4_165)
           (= dst_reg_4_115 dst_reg_4_166)
           (= cond27.i.i_4_153 dst_reg_4_167)
           (= dst_reg_4_117 dst_reg_4_168)
           (= dst_reg_4_118 dst_reg_4_169)
           (= dst_reg_4_119 dst_reg_4_170)
           (= dst_reg_4_120 dst_reg_4_171)))))
phiResolveI (i=2) (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (and (= cmp31.i330.i_4_155 #b0)
                (= cmp16.i.i_4_150 #b0)
                (= cmp1.i325.i_4_140 #b0)
                (= cmp.i323.i_4_137 #b0)
                (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
                    (and (= tobool.not.i25.i_4_40 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_4_121 src_reg_4_172)
           (= src_reg_4_122 src_reg_4_173)
           (= src_reg_4_123 src_reg_4_174)
           (= src_reg_4_124 src_reg_4_175)
           (= src_reg_4_125 src_reg_4_176)
           (= src_reg_4_126 src_reg_4_177)
           (= src_reg_4_127 src_reg_4_178)
           (= src_reg_4_128 src_reg_4_179)
           (= src_reg_4_129 src_reg_4_180)
           (= src_reg_4_130 src_reg_4_181)
           (= src_reg_4_131 src_reg_4_182)
           (= src_reg_4_132 src_reg_4_183)
           (= src_reg_4_133 src_reg_4_184)
           (= src_reg_4_134 src_reg_4_185)
           (= dst_reg_4_107 dst_reg_4_158)
           (= dst_reg_4_108 dst_reg_4_159)
           (= dst_reg_4_109 dst_reg_4_160)
           (= dst_reg_4_110 dst_reg_4_161)
           (= dst_reg_4_111 dst_reg_4_162)
           (= dst_reg_4_112 dst_reg_4_163)
           (= dst_reg_4_113 dst_reg_4_164)
           (= dst_reg_4_114 dst_reg_4_165)
           (= dst_reg_4_115 dst_reg_4_166)
           (= dst_reg_4_116 dst_reg_4_167)
           (= dst_reg_4_117 dst_reg_4_168)
           (= dst_reg_4_118 dst_reg_4_169)
           (= dst_reg_4_119 dst_reg_4_170)
           (= dst_reg_4_120 dst_reg_4_171)))))
phiResolveI (i=3) (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (and (= cmp31.i330.i_4_155 #b1)
                (= cmp16.i.i_4_150 #b0)
                (= cmp1.i325.i_4_140 #b0)
                (= cmp.i323.i_4_137 #b0)
                (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
                    (and (= tobool.not.i25.i_4_40 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_4_121 src_reg_4_172)
           (= src_reg_4_122 src_reg_4_173)
           (= src_reg_4_123 src_reg_4_174)
           (= src_reg_4_124 src_reg_4_175)
           (= src_reg_4_125 src_reg_4_176)
           (= src_reg_4_126 src_reg_4_177)
           (= src_reg_4_127 src_reg_4_178)
           (= src_reg_4_128 src_reg_4_179)
           (= src_reg_4_129 src_reg_4_180)
           (= src_reg_4_130 src_reg_4_181)
           (= src_reg_4_131 src_reg_4_182)
           (= src_reg_4_132 src_reg_4_183)
           (= src_reg_4_133 src_reg_4_184)
           (= src_reg_4_134 src_reg_4_185)
           (= dst_reg_4_107 dst_reg_4_158)
           (= dst_reg_4_108 dst_reg_4_159)
           (= dst_reg_4_109 dst_reg_4_160)
           (= dst_reg_4_110 dst_reg_4_161)
           (= dst_reg_4_111 dst_reg_4_162)
           (= dst_reg_4_112 dst_reg_4_163)
           (= cond40.i.i_4_157 dst_reg_4_164)
           (= i37.i.i_4_148 dst_reg_4_165)
           (= cond40.i.i_4_157 dst_reg_4_166)
           (= dst_reg_4_116 dst_reg_4_167)
           (= dst_reg_4_117 dst_reg_4_168)
           (= dst_reg_4_118 dst_reg_4_169)
           (= dst_reg_4_119 dst_reg_4_170)
           (= dst_reg_4_120 dst_reg_4_171)))))
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
     (and (= cmp.i.i.i.i_4_190 #b0) a!5))))))
[handlePhiNodeResolvePathConditions] incomingBlockI __reg_deduce_bounds.exit.i
[handlePhiNodeResolvePathConditions] phiConditionI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
     (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
    (= retval.0.i.i.i.i_4_239 phi.bo_4_236))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
    (= retval.0.i.i.i.i_4_239 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_4_239 #x0000003f)
     (= cmp.i.i.i_4_242 #b1)
     (= cmp.i.i.i_4_242 #b0))
  (= sh_prom.i.i.i_4_243 ((_ zero_extend 32) retval.0.i.i.i.i_4_239))
  (= notmask.i.i.i_4_245 (bvshl #xffffffffffffffff sh_prom.i.i.i_4_243))
  (= sub.i.i.i_4_247 (bvxor notmask.i.i.i_4_245 #xffffffffffffffff))
  (= and.i.i336.i_4_248 (bvand notmask.i.i.i_4_245 i.i333.i_4_186))
  (ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.0.0.i.i.i_4_250 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_4_250 and.i.i336.i_4_248))
  (ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.3.0.i.i.i_4_252 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_4_252 sub.i.i.i_4_247))
  (= dst_reg_4_111 i9.i.i_4_253)
  (= dst_reg_4_112 i11.i.i_4_254)
  (= or.i.i.i_4_255 (bvor retval.sroa.0.0.i.i.i_4_250 i9.i.i_4_253))
  (= and.i1.i.i_4_256 (bvand retval.sroa.3.0.i.i.i_4_252 i11.i.i_4_254))
  (= neg.i.i.i_4_258 (bvxor and.i1.i.i_4_256 #xffffffffffffffff))
  (= and4.i.i.i_4_259 (bvand or.i.i.i_4_255 neg.i.i.i_4_258))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
     (and (= cmp.i.i.i.i_4_190 #b0) a!5))))))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
     (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
        (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
    (and (= #x00000001 src_reg_4_274)
         (= src_reg_4_15 src_reg_4_275)
         (= src_reg_4_16 src_reg_4_276)
         (= src_reg_4_17 src_reg_4_277)
         (= src_reg_4_18 src_reg_4_278)
         (= src_reg_4_19 src_reg_4_279)
         (= src_reg_4_20 src_reg_4_280)
         (= src_reg_4_21 src_reg_4_281)
         (= src_reg_4_22 src_reg_4_282)
         (= src_reg_4_23 src_reg_4_283)
         (= src_reg_4_24 src_reg_4_284)
         (= src_reg_4_25 src_reg_4_285)
         (= src_reg_4_26 src_reg_4_286)
         (= src_reg_4_27 src_reg_4_287)
         (= #x00000001 dst_reg_4_260)
         (= dst_reg_4_1 dst_reg_4_261)
         (= dst_reg_4_2 dst_reg_4_262)
         (= dst_reg_4_3 dst_reg_4_263)
         (= #x0000000000000000 dst_reg_4_264)
         (= #xffffffffffffffff dst_reg_4_265)
         (= #x8000000000000000 dst_reg_4_266)
         (= #x7fffffffffffffff dst_reg_4_267)
         (= #x0000000000000000 dst_reg_4_268)
         (= #xffffffffffffffff dst_reg_4_269)
         (= #x00000000 dst_reg_4_270)
         (= dst_reg_4_11 dst_reg_4_271)
         (= dst_reg_4_12 dst_reg_4_272)
         (= dst_reg_4_13 dst_reg_4_273)))
phiResolveI (i=1) (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_4_190 #b0) a!5)
          (and (= cmp.i.i.i.i_4_190 #b1) a!5))
      (and (= src_reg_4_172 src_reg_4_274)
           (= src_reg_4_173 src_reg_4_275)
           (= src_reg_4_174 src_reg_4_276)
           (= src_reg_4_175 src_reg_4_277)
           (= src_reg_4_176 src_reg_4_278)
           (= src_reg_4_177 src_reg_4_279)
           (= src_reg_4_178 src_reg_4_280)
           (= src_reg_4_179 src_reg_4_281)
           (= src_reg_4_180 src_reg_4_282)
           (= src_reg_4_181 src_reg_4_283)
           (= src_reg_4_182 src_reg_4_284)
           (= src_reg_4_183 src_reg_4_285)
           (= src_reg_4_184 src_reg_4_286)
           (= src_reg_4_185 src_reg_4_287)
           (= dst_reg_4_158 dst_reg_4_260)
           (= dst_reg_4_159 dst_reg_4_261)
           (= dst_reg_4_160 dst_reg_4_262)
           (= dst_reg_4_161 dst_reg_4_263)
           (= and4.i.i.i_4_259 dst_reg_4_264)
           (= and.i1.i.i_4_256 dst_reg_4_265)
           (= dst_reg_4_164 dst_reg_4_266)
           (= dst_reg_4_165 dst_reg_4_267)
           (= dst_reg_4_166 dst_reg_4_268)
           (= dst_reg_4_167 dst_reg_4_269)
           (= dst_reg_4_168 dst_reg_4_270)
           (= dst_reg_4_169 dst_reg_4_271)
           (= dst_reg_4_170 dst_reg_4_272)
           (= dst_reg_4_171 dst_reg_4_273)))))))
phiResolveI (i=2) (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_4_274)
           (= src_reg_4_15 src_reg_4_275)
           (= src_reg_4_16 src_reg_4_276)
           (= src_reg_4_17 src_reg_4_277)
           (= src_reg_4_18 src_reg_4_278)
           (= src_reg_4_19 src_reg_4_279)
           (= src_reg_4_20 src_reg_4_280)
           (= src_reg_4_21 src_reg_4_281)
           (= src_reg_4_22 src_reg_4_282)
           (= src_reg_4_23 src_reg_4_283)
           (= src_reg_4_24 src_reg_4_284)
           (= src_reg_4_25 src_reg_4_285)
           (= src_reg_4_26 src_reg_4_286)
           (= src_reg_4_27 src_reg_4_287)
           (= #x00000001 dst_reg_4_260)
           (= dst_reg_4_1 dst_reg_4_261)
           (= dst_reg_4_2 dst_reg_4_262)
           (= dst_reg_4_3 dst_reg_4_263)
           (= #x0000000000000000 dst_reg_4_264)
           (= #xffffffffffffffff dst_reg_4_265)
           (= #x8000000000000000 dst_reg_4_266)
           (= #x7fffffffffffffff dst_reg_4_267)
           (= #x0000000000000000 dst_reg_4_268)
           (= #xffffffffffffffff dst_reg_4_269)
           (= #x00000000 dst_reg_4_270)
           (= dst_reg_4_11 dst_reg_4_271)
           (= dst_reg_4_12 dst_reg_4_272)
           (= dst_reg_4_13 dst_reg_4_273))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i31.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i32.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i33.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i34.i, align 8
-------------------
=========================
sw.bb201.i
=========================
=========================
if.then207.i
=========================
-------------------
  store i64 %or.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 0, i64* %i214.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %smin_value.i149.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %smax_value.i150.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %umin_value.i151.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %umax_value.i152.i, align 8
-------------------
=========================
if.end212.i
=========================
-------------------
  store i64 %or.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i156.i, i64* %i214.i, align 8
-------------------
-------------------
  store i64 %cond225.i, i64* %umin_value218.i, align 8
-------------------
-------------------
  store i64 %or230.i, i64* %umax_value231.i, align 8
-------------------
-------------------
  store i64 %.cond225.i, i64* %smin_value232.i, align 8
-------------------
-------------------
  store i64 %.or230.i, i64* %smax_value245.i, align 8
-------------------
-------------------
  store i64 %cond.i168.i, i64* %smin_value232.i, align 8
-------------------
-------------------
  store i64 %cond14.i174.i, i64* %smax_value245.i, align 8
-------------------
-------------------
  store i64 %cond23.i178.i, i64* %umin_value218.i, align 8
-------------------
-------------------
  store i64 %cond35.i183.i, i64* %umax_value231.i, align 8
-------------------
=========================
if.end309.i
=========================
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
__reg_deduce_bounds.exit.i
=========================
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 48 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,46},{if.then41.i,18})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
48 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,46},{if.then41.i,18}) : {
- src_reg: [ [ src_reg_4_274 ] [ ] [ src_reg_4_275 ] [ src_reg_4_276 ] [ src_reg_4_277 ] [ [ src_reg_4_278 ] [ src_reg_4_279 ] ] [ src_reg_4_280 ] [ src_reg_4_281 ] [ src_reg_4_282 ] [ src_reg_4_283 ] [ ] [ src_reg_4_284 ] [ src_reg_4_285 ] [ src_reg_4_286 ] [ src_reg_4_287 ] ] 
- dst_reg: [ [ dst_reg_4_260 ] [ ] [ dst_reg_4_261 ] [ dst_reg_4_262 ] [ dst_reg_4_263 ] [ [ dst_reg_4_264 ] [ dst_reg_4_265 ] ] [ dst_reg_4_266 ] [ dst_reg_4_267 ] [ dst_reg_4_268 ] [ dst_reg_4_269 ] [ ] [ dst_reg_4_270 ] [ dst_reg_4_271 ] [ dst_reg_4_272 ] [ dst_reg_4_273 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ and.i1.i.i_4_256 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
}
45 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ i37.i.i_4_148 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
42 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44}) : {
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 48 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,46},{if.then41.i,18})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_288
[lookInsideStruct] singleValueType:dst_reg_4_288
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_289
[lookInsideStruct] singleValueType:dst_reg_4_289
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_290
[lookInsideStruct] singleValueType:dst_reg_4_290
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_291
[lookInsideStruct] singleValueType:dst_reg_4_291
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_292
[lookInsideStruct] singleValueType:dst_reg_4_292
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_293
[lookInsideStruct] singleValueType:dst_reg_4_293
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_294
[lookInsideStruct] singleValueType:dst_reg_4_294
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_295
[lookInsideStruct] singleValueType:dst_reg_4_295
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_296
[lookInsideStruct] singleValueType:dst_reg_4_296
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_297
[lookInsideStruct] singleValueType:dst_reg_4_297
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_298
[lookInsideStruct] singleValueType:dst_reg_4_298
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_299
[lookInsideStruct] singleValueType:dst_reg_4_299
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_300
[lookInsideStruct] singleValueType:dst_reg_4_300
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_4_301
[lookInsideStruct] singleValueType:dst_reg_4_301
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_4_288 ] [ ] [ dst_reg_4_289 ] [ dst_reg_4_290 ] [ dst_reg_4_291 ] [ [ dst_reg_4_292 ] [ dst_reg_4_293 ] ] [ dst_reg_4_294 ] [ dst_reg_4_295 ] [ dst_reg_4_296 ] [ dst_reg_4_297 ] [ ] [ dst_reg_4_298 ] [ dst_reg_4_299 ] [ dst_reg_4_300 ] [ dst_reg_4_301 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_4_260 ] [ ] [ dst_reg_4_261 ] [ dst_reg_4_262 ] [ dst_reg_4_263 ] [ [ dst_reg_4_264 ] [ dst_reg_4_265 ] ] [ dst_reg_4_266 ] [ dst_reg_4_267 ] [ dst_reg_4_268 ] [ dst_reg_4_269 ] [ ] [ dst_reg_4_270 ] [ dst_reg_4_271 ] [ dst_reg_4_272 ] [ dst_reg_4_273 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_4_260 dst_reg_4_288)
(= dst_reg_4_261 dst_reg_4_289)
(= dst_reg_4_262 dst_reg_4_290)
(= dst_reg_4_263 dst_reg_4_291)
(= dst_reg_4_264 dst_reg_4_292)
(= dst_reg_4_265 dst_reg_4_293)
(= dst_reg_4_266 dst_reg_4_294)
(= dst_reg_4_267 dst_reg_4_295)
(= dst_reg_4_268 dst_reg_4_296)
(= dst_reg_4_269 dst_reg_4_297)
(= dst_reg_4_270 dst_reg_4_298)
(= dst_reg_4_271 dst_reg_4_299)
(= dst_reg_4_272 dst_reg_4_300)
(= dst_reg_4_273 dst_reg_4_301)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_302
[lookInsideStruct] singleValueType:src_reg_4_302
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_303
[lookInsideStruct] singleValueType:src_reg_4_303
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_304
[lookInsideStruct] singleValueType:src_reg_4_304
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_305
[lookInsideStruct] singleValueType:src_reg_4_305
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_306
[lookInsideStruct] singleValueType:src_reg_4_306
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_307
[lookInsideStruct] singleValueType:src_reg_4_307
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_308
[lookInsideStruct] singleValueType:src_reg_4_308
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_309
[lookInsideStruct] singleValueType:src_reg_4_309
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_310
[lookInsideStruct] singleValueType:src_reg_4_310
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_311
[lookInsideStruct] singleValueType:src_reg_4_311
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_312
[lookInsideStruct] singleValueType:src_reg_4_312
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_313
[lookInsideStruct] singleValueType:src_reg_4_313
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_314
[lookInsideStruct] singleValueType:src_reg_4_314
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_4_315
[lookInsideStruct] singleValueType:src_reg_4_315
[setupBVTreeForArg] returning BVTree: [ [ src_reg_4_302 ] [ ] [ src_reg_4_303 ] [ src_reg_4_304 ] [ src_reg_4_305 ] [ [ src_reg_4_306 ] [ src_reg_4_307 ] ] [ src_reg_4_308 ] [ src_reg_4_309 ] [ src_reg_4_310 ] [ src_reg_4_311 ] [ ] [ src_reg_4_312 ] [ src_reg_4_313 ] [ src_reg_4_314 ] [ src_reg_4_315 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_4_274 ] [ ] [ src_reg_4_275 ] [ src_reg_4_276 ] [ src_reg_4_277 ] [ [ src_reg_4_278 ] [ src_reg_4_279 ] ] [ src_reg_4_280 ] [ src_reg_4_281 ] [ src_reg_4_282 ] [ src_reg_4_283 ] [ ] [ src_reg_4_284 ] [ src_reg_4_285 ] [ src_reg_4_286 ] [ src_reg_4_287 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_4_274 src_reg_4_302)
(= src_reg_4_275 src_reg_4_303)
(= src_reg_4_276 src_reg_4_304)
(= src_reg_4_277 src_reg_4_305)
(= src_reg_4_278 src_reg_4_306)
(= src_reg_4_279 src_reg_4_307)
(= src_reg_4_280 src_reg_4_308)
(= src_reg_4_281 src_reg_4_309)
(= src_reg_4_282 src_reg_4_310)
(= src_reg_4_283 src_reg_4_311)
(= src_reg_4_284 src_reg_4_312)
(= src_reg_4_285 src_reg_4_313)
(= src_reg_4_286 src_reg_4_314)
(= src_reg_4_287 src_reg_4_315)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_4_302 ] [ ] [ src_reg_4_303 ] [ src_reg_4_304 ] [ src_reg_4_305 ] [ [ src_reg_4_306 ] [ src_reg_4_307 ] ] [ src_reg_4_308 ] [ src_reg_4_309 ] [ src_reg_4_310 ] [ src_reg_4_311 ] [ ] [ src_reg_4_312 ] [ src_reg_4_313 ] [ src_reg_4_314 ] [ src_reg_4_315 ] ] 
- dst_reg: [ [ dst_reg_4_288 ] [ ] [ dst_reg_4_289 ] [ dst_reg_4_290 ] [ dst_reg_4_291 ] [ [ dst_reg_4_292 ] [ dst_reg_4_293 ] ] [ dst_reg_4_294 ] [ dst_reg_4_295 ] [ dst_reg_4_296 ] [ dst_reg_4_297 ] [ ] [ dst_reg_4_298 ] [ dst_reg_4_299 ] [ dst_reg_4_300 ] [ dst_reg_4_301 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (=> (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
        (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
    (and (= #x00000001 src_reg_4_274)
         (= src_reg_4_15 src_reg_4_275)
         (= src_reg_4_16 src_reg_4_276)
         (= src_reg_4_17 src_reg_4_277)
         (= src_reg_4_18 src_reg_4_278)
         (= src_reg_4_19 src_reg_4_279)
         (= src_reg_4_20 src_reg_4_280)
         (= src_reg_4_21 src_reg_4_281)
         (= src_reg_4_22 src_reg_4_282)
         (= src_reg_4_23 src_reg_4_283)
         (= src_reg_4_24 src_reg_4_284)
         (= src_reg_4_25 src_reg_4_285)
         (= src_reg_4_26 src_reg_4_286)
         (= src_reg_4_27 src_reg_4_287)
         (= #x00000001 dst_reg_4_260)
         (= dst_reg_4_1 dst_reg_4_261)
         (= dst_reg_4_2 dst_reg_4_262)
         (= dst_reg_4_3 dst_reg_4_263)
         (= #x0000000000000000 dst_reg_4_264)
         (= #xffffffffffffffff dst_reg_4_265)
         (= #x8000000000000000 dst_reg_4_266)
         (= #x7fffffffffffffff dst_reg_4_267)
         (= #x0000000000000000 dst_reg_4_268)
         (= #xffffffffffffffff dst_reg_4_269)
         (= #x00000000 dst_reg_4_270)
         (= dst_reg_4_11 dst_reg_4_271)
         (= dst_reg_4_12 dst_reg_4_272)
         (= dst_reg_4_13 dst_reg_4_273)))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_4_190 #b0) a!5)
          (and (= cmp.i.i.i.i_4_190 #b1) a!5))
      (and (= src_reg_4_172 src_reg_4_274)
           (= src_reg_4_173 src_reg_4_275)
           (= src_reg_4_174 src_reg_4_276)
           (= src_reg_4_175 src_reg_4_277)
           (= src_reg_4_176 src_reg_4_278)
           (= src_reg_4_177 src_reg_4_279)
           (= src_reg_4_178 src_reg_4_280)
           (= src_reg_4_179 src_reg_4_281)
           (= src_reg_4_180 src_reg_4_282)
           (= src_reg_4_181 src_reg_4_283)
           (= src_reg_4_182 src_reg_4_284)
           (= src_reg_4_183 src_reg_4_285)
           (= src_reg_4_184 src_reg_4_286)
           (= src_reg_4_185 src_reg_4_287)
           (= dst_reg_4_158 dst_reg_4_260)
           (= dst_reg_4_159 dst_reg_4_261)
           (= dst_reg_4_160 dst_reg_4_262)
           (= dst_reg_4_161 dst_reg_4_263)
           (= and4.i.i.i_4_259 dst_reg_4_264)
           (= and.i1.i.i_4_256 dst_reg_4_265)
           (= dst_reg_4_164 dst_reg_4_266)
           (= dst_reg_4_165 dst_reg_4_267)
           (= dst_reg_4_166 dst_reg_4_268)
           (= dst_reg_4_167 dst_reg_4_269)
           (= dst_reg_4_168 dst_reg_4_270)
           (= dst_reg_4_169 dst_reg_4_271)
           (= dst_reg_4_170 dst_reg_4_272)
           (= dst_reg_4_171 dst_reg_4_273)))))))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_4_274)
           (= src_reg_4_15 src_reg_4_275)
           (= src_reg_4_16 src_reg_4_276)
           (= src_reg_4_17 src_reg_4_277)
           (= src_reg_4_18 src_reg_4_278)
           (= src_reg_4_19 src_reg_4_279)
           (= src_reg_4_20 src_reg_4_280)
           (= src_reg_4_21 src_reg_4_281)
           (= src_reg_4_22 src_reg_4_282)
           (= src_reg_4_23 src_reg_4_283)
           (= src_reg_4_24 src_reg_4_284)
           (= src_reg_4_25 src_reg_4_285)
           (= src_reg_4_26 src_reg_4_286)
           (= src_reg_4_27 src_reg_4_287)
           (= #x00000001 dst_reg_4_260)
           (= dst_reg_4_1 dst_reg_4_261)
           (= dst_reg_4_2 dst_reg_4_262)
           (= dst_reg_4_3 dst_reg_4_263)
           (= #x0000000000000000 dst_reg_4_264)
           (= #xffffffffffffffff dst_reg_4_265)
           (= #x8000000000000000 dst_reg_4_266)
           (= #x7fffffffffffffff dst_reg_4_267)
           (= #x0000000000000000 dst_reg_4_268)
           (= #xffffffffffffffff dst_reg_4_269)
           (= #x00000000 dst_reg_4_270)
           (= dst_reg_4_11 dst_reg_4_271)
           (= dst_reg_4_12 dst_reg_4_272)
           (= dst_reg_4_13 dst_reg_4_273))))
  (= dst_reg_4_260 dst_reg_4_288)
  (= dst_reg_4_261 dst_reg_4_289)
  (= dst_reg_4_262 dst_reg_4_290)
  (= dst_reg_4_263 dst_reg_4_291)
  (= dst_reg_4_264 dst_reg_4_292)
  (= dst_reg_4_265 dst_reg_4_293)
  (= dst_reg_4_266 dst_reg_4_294)
  (= dst_reg_4_267 dst_reg_4_295)
  (= dst_reg_4_268 dst_reg_4_296)
  (= dst_reg_4_269 dst_reg_4_297)
  (= dst_reg_4_270 dst_reg_4_298)
  (= dst_reg_4_271 dst_reg_4_299)
  (= dst_reg_4_272 dst_reg_4_300)
  (= dst_reg_4_273 dst_reg_4_301)
  (= src_reg_4_274 src_reg_4_302)
  (= src_reg_4_275 src_reg_4_303)
  (= src_reg_4_276 src_reg_4_304)
  (= src_reg_4_277 src_reg_4_305)
  (= src_reg_4_278 src_reg_4_306)
  (= src_reg_4_279 src_reg_4_307)
  (= src_reg_4_280 src_reg_4_308)
  (= src_reg_4_281 src_reg_4_309)
  (= src_reg_4_282 src_reg_4_310)
  (= src_reg_4_283 src_reg_4_311)
  (= src_reg_4_284 src_reg_4_312)
  (= src_reg_4_285 src_reg_4_313)
  (= src_reg_4_286 src_reg_4_314)
  (= src_reg_4_287 src_reg_4_315)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: adjust_scalar_min_max_vals.exit, Size:31
  (=> (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
        (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
    (and (= #x00000001 src_reg_4_274)
         (= src_reg_4_15 src_reg_4_275)
         (= src_reg_4_16 src_reg_4_276)
         (= src_reg_4_17 src_reg_4_277)
         (= src_reg_4_18 src_reg_4_278)
         (= src_reg_4_19 src_reg_4_279)
         (= src_reg_4_20 src_reg_4_280)
         (= src_reg_4_21 src_reg_4_281)
         (= src_reg_4_22 src_reg_4_282)
         (= src_reg_4_23 src_reg_4_283)
         (= src_reg_4_24 src_reg_4_284)
         (= src_reg_4_25 src_reg_4_285)
         (= src_reg_4_26 src_reg_4_286)
         (= src_reg_4_27 src_reg_4_287)
         (= #x00000001 dst_reg_4_260)
         (= dst_reg_4_1 dst_reg_4_261)
         (= dst_reg_4_2 dst_reg_4_262)
         (= dst_reg_4_3 dst_reg_4_263)
         (= #x0000000000000000 dst_reg_4_264)
         (= #xffffffffffffffff dst_reg_4_265)
         (= #x8000000000000000 dst_reg_4_266)
         (= #x7fffffffffffffff dst_reg_4_267)
         (= #x0000000000000000 dst_reg_4_268)
         (= #xffffffffffffffff dst_reg_4_269)
         (= #x00000000 dst_reg_4_270)
         (= dst_reg_4_11 dst_reg_4_271)
         (= dst_reg_4_12 dst_reg_4_272)
         (= dst_reg_4_13 dst_reg_4_273)))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_4_190 #b0) a!5)
          (and (= cmp.i.i.i.i_4_190 #b1) a!5))
      (and (= src_reg_4_172 src_reg_4_274)
           (= src_reg_4_173 src_reg_4_275)
           (= src_reg_4_174 src_reg_4_276)
           (= src_reg_4_175 src_reg_4_277)
           (= src_reg_4_176 src_reg_4_278)
           (= src_reg_4_177 src_reg_4_279)
           (= src_reg_4_178 src_reg_4_280)
           (= src_reg_4_179 src_reg_4_281)
           (= src_reg_4_180 src_reg_4_282)
           (= src_reg_4_181 src_reg_4_283)
           (= src_reg_4_182 src_reg_4_284)
           (= src_reg_4_183 src_reg_4_285)
           (= src_reg_4_184 src_reg_4_286)
           (= src_reg_4_185 src_reg_4_287)
           (= dst_reg_4_158 dst_reg_4_260)
           (= dst_reg_4_159 dst_reg_4_261)
           (= dst_reg_4_160 dst_reg_4_262)
           (= dst_reg_4_161 dst_reg_4_263)
           (= and4.i.i.i_4_259 dst_reg_4_264)
           (= and.i1.i.i_4_256 dst_reg_4_265)
           (= dst_reg_4_164 dst_reg_4_266)
           (= dst_reg_4_165 dst_reg_4_267)
           (= dst_reg_4_166 dst_reg_4_268)
           (= dst_reg_4_167 dst_reg_4_269)
           (= dst_reg_4_168 dst_reg_4_270)
           (= dst_reg_4_169 dst_reg_4_271)
           (= dst_reg_4_170 dst_reg_4_272)
           (= dst_reg_4_171 dst_reg_4_273)))))))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b0)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_4_274)
           (= src_reg_4_15 src_reg_4_275)
           (= src_reg_4_16 src_reg_4_276)
           (= src_reg_4_17 src_reg_4_277)
           (= src_reg_4_18 src_reg_4_278)
           (= src_reg_4_19 src_reg_4_279)
           (= src_reg_4_20 src_reg_4_280)
           (= src_reg_4_21 src_reg_4_281)
           (= src_reg_4_22 src_reg_4_282)
           (= src_reg_4_23 src_reg_4_283)
           (= src_reg_4_24 src_reg_4_284)
           (= src_reg_4_25 src_reg_4_285)
           (= src_reg_4_26 src_reg_4_286)
           (= src_reg_4_27 src_reg_4_287)
           (= #x00000001 dst_reg_4_260)
           (= dst_reg_4_1 dst_reg_4_261)
           (= dst_reg_4_2 dst_reg_4_262)
           (= dst_reg_4_3 dst_reg_4_263)
           (= #x0000000000000000 dst_reg_4_264)
           (= #xffffffffffffffff dst_reg_4_265)
           (= #x8000000000000000 dst_reg_4_266)
           (= #x7fffffffffffffff dst_reg_4_267)
           (= #x0000000000000000 dst_reg_4_268)
           (= #xffffffffffffffff dst_reg_4_269)
           (= #x00000000 dst_reg_4_270)
           (= dst_reg_4_11 dst_reg_4_271)
           (= dst_reg_4_12 dst_reg_4_272)
           (= dst_reg_4_13 dst_reg_4_273))))
  (= dst_reg_4_260 dst_reg_4_288)
  (= dst_reg_4_261 dst_reg_4_289)
  (= dst_reg_4_262 dst_reg_4_290)
  (= dst_reg_4_263 dst_reg_4_291)
  (= dst_reg_4_264 dst_reg_4_292)
  (= dst_reg_4_265 dst_reg_4_293)
  (= dst_reg_4_266 dst_reg_4_294)
  (= dst_reg_4_267 dst_reg_4_295)
  (= dst_reg_4_268 dst_reg_4_296)
  (= dst_reg_4_269 dst_reg_4_297)
  (= dst_reg_4_270 dst_reg_4_298)
  (= dst_reg_4_271 dst_reg_4_299)
  (= dst_reg_4_272 dst_reg_4_300)
  (= dst_reg_4_273 dst_reg_4_301)
  (= src_reg_4_274 src_reg_4_302)
  (= src_reg_4_275 src_reg_4_303)
  (= src_reg_4_276 src_reg_4_304)
  (= src_reg_4_277 src_reg_4_305)
  (= src_reg_4_278 src_reg_4_306)
  (= src_reg_4_279 src_reg_4_307)
  (= src_reg_4_280 src_reg_4_308)
  (= src_reg_4_281 src_reg_4_309)
  (= src_reg_4_282 src_reg_4_310)
  (= src_reg_4_283 src_reg_4_311)
  (= src_reg_4_284 src_reg_4_312)
  (= src_reg_4_285 src_reg_4_313)
  (= src_reg_4_286 src_reg_4_314)
  (= src_reg_4_287 src_reg_4_315)
BasicBlock: __reg_bound_offset.exit.i, Size:17
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
    (= retval.0.i.i.i.i_4_239 phi.bo_4_236))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
    (= retval.0.i.i.i.i_4_239 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_4_239 #x0000003f)
     (= cmp.i.i.i_4_242 #b1)
     (= cmp.i.i.i_4_242 #b0))
  (= sh_prom.i.i.i_4_243 ((_ zero_extend 32) retval.0.i.i.i.i_4_239))
  (= notmask.i.i.i_4_245 (bvshl #xffffffffffffffff sh_prom.i.i.i_4_243))
  (= sub.i.i.i_4_247 (bvxor notmask.i.i.i_4_245 #xffffffffffffffff))
  (= and.i.i336.i_4_248 (bvand notmask.i.i.i_4_245 i.i333.i_4_186))
  (ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.0.0.i.i.i_4_250 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_4_250 and.i.i336.i_4_248))
  (ite (= cmp.i.i.i_4_242 #b1)
     (= retval.sroa.3.0.i.i.i_4_252 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_4_252 sub.i.i.i_4_247))
  (= dst_reg_4_111 i9.i.i_4_253)
  (= dst_reg_4_112 i11.i.i_4_254)
  (= or.i.i.i_4_255 (bvor retval.sroa.0.0.i.i.i_4_250 i9.i.i_4_253))
  (= and.i1.i.i_4_256 (bvand retval.sroa.3.0.i.i.i_4_252 i11.i.i_4_254))
  (= neg.i.i.i_4_258 (bvxor and.i1.i.i_4_256 #xffffffffffffffff))
  (= and4.i.i.i_4_259 (bvand or.i.i.i_4_255 neg.i.i.i_4_258))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_4_237
     (and (= cmp.i.i.i.i_4_190 #b0) a!5))))))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238
     (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_4_135 i38.i.i_4_151)
     (= cmp36.i.i_4_156 #b1)
     (= cmp36.i.i_4_156 #b0))
  (ite (= cmp36.i.i_4_156 #b1)
     (= cond40.i.i_4_157 i.i322.i_4_135)
     (= cond40.i.i_4_157 i38.i.i_4_151))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_4_188 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= tobool.not.i.i.i.i.i_4_192 #b0))
  (= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194)
     (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))
  (ite (= tobool.not.i.i.i.i.i_4_192 #b1)
     (= spec.select17.i.i.i.i.i_4_198 #x0000001f)
     (= spec.select17.i.i.i.i.i_4_198 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_4_195 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= tobool2.not.i.i.i.i.i_4_200 #b0))
  (= sub4.i.i.i.i.i_4_202 (bvadd spec.select17.i.i.i.i.i_4_198 #xfffffff0))
  (= shl5.i.i.i.i.i_4_204 (bvshl spec.select.i.i.i.i.i_4_195 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= word.addr.1.i.i.i.i.i_4_205 shl5.i.i.i.i.i_4_204)
     (= word.addr.1.i.i.i.i.i_4_205 spec.select.i.i.i.i.i_4_195))
  (ite (= tobool2.not.i.i.i.i.i_4_200 #b1)
     (= num.1.i.i.i.i.i_4_206 sub4.i.i.i.i.i_4_202)
     (= num.1.i.i.i.i.i_4_206 spec.select17.i.i.i.i.i_4_198))
  (ite (bvult word.addr.1.i.i.i.i.i_4_205 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= tobool8.not.i.i.i.i.i_4_208 #b0))
  (= sub10.i.i.i.i.i_4_210 (bvadd num.1.i.i.i.i.i_4_206 #xfffffff8))
  (= shl11.i.i.i.i.i_4_212 (bvshl word.addr.1.i.i.i.i.i_4_205 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= word.addr.2.i.i.i.i.i_4_213 shl11.i.i.i.i.i_4_212)
     (= word.addr.2.i.i.i.i.i_4_213 word.addr.1.i.i.i.i.i_4_205))
  (ite (= tobool8.not.i.i.i.i.i_4_208 #b1)
     (= num.2.i.i.i.i.i_4_214 sub10.i.i.i.i.i_4_210)
     (= num.2.i.i.i.i.i_4_214 num.1.i.i.i.i.i_4_206))
  (ite (bvult word.addr.2.i.i.i.i.i_4_213 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= tobool14.not.i.i.i.i.i_4_216 #b0))
  (= sub16.i.i.i.i.i_4_218 (bvadd num.2.i.i.i.i.i_4_214 #xfffffffc))
  (= shl17.i.i.i.i.i_4_220 (bvshl word.addr.2.i.i.i.i.i_4_213 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= word.addr.3.i.i.i.i.i_4_221 shl17.i.i.i.i.i_4_220)
     (= word.addr.3.i.i.i.i.i_4_221 word.addr.2.i.i.i.i.i_4_213))
  (ite (= tobool14.not.i.i.i.i.i_4_216 #b1)
     (= num.3.i.i.i.i.i_4_222 sub16.i.i.i.i.i_4_218)
     (= num.3.i.i.i.i.i_4_222 num.2.i.i.i.i.i_4_214))
  (ite (bvult word.addr.3.i.i.i.i.i_4_221 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= tobool20.not.i.i.i.i.i_4_224 #b0))
  (= sub22.i.i.i.i.i_4_226 (bvadd num.3.i.i.i.i.i_4_222 #x000000fe))
  (= shl23.i.i.i.i.i_4_228 (bvshl word.addr.3.i.i.i.i.i_4_221 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= word.addr.4.i.i.i.i.i_4_229 shl23.i.i.i.i.i_4_228)
     (= word.addr.4.i.i.i.i.i_4_229 word.addr.3.i.i.i.i.i_4_221))
  (ite (= tobool20.not.i.i.i.i.i_4_224 #b1)
     (= num.4.i.i.i.i.i_4_230 sub22.i.i.i.i.i_4_226)
     (= num.4.i.i.i.i.i_4_230 num.3.i.i.i.i.i_4_222))
  (= word.addr.4.lobit.i.i.i.i.i.neg_4_232
   (bvlshr word.addr.4.i.i.i.i.i_4_229 #x000000000000003f))
  (= i.i.i.i.i.i.neg_4_233
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_4_232))
  (= add.i.i.i335.i_4_234 (bvadd num.4.i.i.i.i.i_4_230 i.i.i.i.i.i.neg_4_233))
  (= phi.bo_4_236 (bvand add.i.i.i335.i_4_234 #x000000ff))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_4_151 #x0000000000000000)
     (= cmp31.i330.i_4_155 #b1)
     (= cmp31.i330.i_4_155 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_4_138 i37.i.i_4_148)
     (= cmp23.i.i_4_152 #b1)
     (= cmp23.i.i_4_152 #b0))
  (ite (= cmp23.i.i_4_152 #b1)
     (= cond27.i.i_4_153 i33.i.i_4_138)
     (= cond27.i.i_4_153 i37.i.i_4_148))
BasicBlock: __reg_deduce_bounds.exit.i, Size:8
  (= dst_reg_4_166 i.i333.i_4_186)
  (= dst_reg_4_167 i5.i.i_4_187)
  (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))
  (ite (= xor.i.i.i_4_188 #x0000000000000000)
     (= cmp.i.i.i.i_4_190 #b1)
     (= cmp.i.i.i.i_4_190 #b0))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (=> (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
          (and (= cmp.i323.i_4_137 #b1) a!2))
      (and (= src_reg_4_121 src_reg_4_172)
           (= src_reg_4_122 src_reg_4_173)
           (= src_reg_4_123 src_reg_4_174)
           (= src_reg_4_124 src_reg_4_175)
           (= src_reg_4_125 src_reg_4_176)
           (= src_reg_4_126 src_reg_4_177)
           (= src_reg_4_127 src_reg_4_178)
           (= src_reg_4_128 src_reg_4_179)
           (= src_reg_4_129 src_reg_4_180)
           (= src_reg_4_130 src_reg_4_181)
           (= src_reg_4_131 src_reg_4_182)
           (= src_reg_4_132 src_reg_4_183)
           (= src_reg_4_133 src_reg_4_184)
           (= src_reg_4_134 src_reg_4_185)
           (= dst_reg_4_107 dst_reg_4_158)
           (= dst_reg_4_108 dst_reg_4_159)
           (= dst_reg_4_109 dst_reg_4_160)
           (= dst_reg_4_110 dst_reg_4_161)
           (= dst_reg_4_111 dst_reg_4_162)
           (= dst_reg_4_112 dst_reg_4_163)
           (= cond.i327.i_4_143 dst_reg_4_164)
           (= cond12.i.i_4_147 dst_reg_4_165)
           (= cond.i327.i_4_143 dst_reg_4_166)
           (= cond12.i.i_4_147 dst_reg_4_167)
           (= dst_reg_4_117 dst_reg_4_168)
           (= dst_reg_4_118 dst_reg_4_169)
           (= dst_reg_4_119 dst_reg_4_170)
           (= dst_reg_4_120 dst_reg_4_171)))))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (and (= cmp16.i.i_4_150 #b1)
                (= cmp1.i325.i_4_140 #b0)
                (= cmp.i323.i_4_137 #b0)
                (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
                    (and (= tobool.not.i25.i_4_40 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_4_121 src_reg_4_172)
           (= src_reg_4_122 src_reg_4_173)
           (= src_reg_4_123 src_reg_4_174)
           (= src_reg_4_124 src_reg_4_175)
           (= src_reg_4_125 src_reg_4_176)
           (= src_reg_4_126 src_reg_4_177)
           (= src_reg_4_127 src_reg_4_178)
           (= src_reg_4_128 src_reg_4_179)
           (= src_reg_4_129 src_reg_4_180)
           (= src_reg_4_130 src_reg_4_181)
           (= src_reg_4_131 src_reg_4_182)
           (= src_reg_4_132 src_reg_4_183)
           (= src_reg_4_133 src_reg_4_184)
           (= src_reg_4_134 src_reg_4_185)
           (= dst_reg_4_107 dst_reg_4_158)
           (= dst_reg_4_108 dst_reg_4_159)
           (= dst_reg_4_109 dst_reg_4_160)
           (= dst_reg_4_110 dst_reg_4_161)
           (= dst_reg_4_111 dst_reg_4_162)
           (= dst_reg_4_112 dst_reg_4_163)
           (= i38.i.i_4_151 dst_reg_4_164)
           (= cond27.i.i_4_153 dst_reg_4_165)
           (= dst_reg_4_115 dst_reg_4_166)
           (= cond27.i.i_4_153 dst_reg_4_167)
           (= dst_reg_4_117 dst_reg_4_168)
           (= dst_reg_4_118 dst_reg_4_169)
           (= dst_reg_4_119 dst_reg_4_170)
           (= dst_reg_4_120 dst_reg_4_171)))))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (and (= cmp31.i330.i_4_155 #b0)
                (= cmp16.i.i_4_150 #b0)
                (= cmp1.i325.i_4_140 #b0)
                (= cmp.i323.i_4_137 #b0)
                (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
                    (and (= tobool.not.i25.i_4_40 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_4_121 src_reg_4_172)
           (= src_reg_4_122 src_reg_4_173)
           (= src_reg_4_123 src_reg_4_174)
           (= src_reg_4_124 src_reg_4_175)
           (= src_reg_4_125 src_reg_4_176)
           (= src_reg_4_126 src_reg_4_177)
           (= src_reg_4_127 src_reg_4_178)
           (= src_reg_4_128 src_reg_4_179)
           (= src_reg_4_129 src_reg_4_180)
           (= src_reg_4_130 src_reg_4_181)
           (= src_reg_4_131 src_reg_4_182)
           (= src_reg_4_132 src_reg_4_183)
           (= src_reg_4_133 src_reg_4_184)
           (= src_reg_4_134 src_reg_4_185)
           (= dst_reg_4_107 dst_reg_4_158)
           (= dst_reg_4_108 dst_reg_4_159)
           (= dst_reg_4_109 dst_reg_4_160)
           (= dst_reg_4_110 dst_reg_4_161)
           (= dst_reg_4_111 dst_reg_4_162)
           (= dst_reg_4_112 dst_reg_4_163)
           (= dst_reg_4_113 dst_reg_4_164)
           (= dst_reg_4_114 dst_reg_4_165)
           (= dst_reg_4_115 dst_reg_4_166)
           (= dst_reg_4_116 dst_reg_4_167)
           (= dst_reg_4_117 dst_reg_4_168)
           (= dst_reg_4_118 dst_reg_4_169)
           (= dst_reg_4_119 dst_reg_4_170)
           (= dst_reg_4_120 dst_reg_4_171)))))
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (and (= cmp31.i330.i_4_155 #b1)
                (= cmp16.i.i_4_150 #b0)
                (= cmp1.i325.i_4_140 #b0)
                (= cmp.i323.i_4_137 #b0)
                (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
                    (and (= tobool.not.i25.i_4_40 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_4_121 src_reg_4_172)
           (= src_reg_4_122 src_reg_4_173)
           (= src_reg_4_123 src_reg_4_174)
           (= src_reg_4_124 src_reg_4_175)
           (= src_reg_4_125 src_reg_4_176)
           (= src_reg_4_126 src_reg_4_177)
           (= src_reg_4_127 src_reg_4_178)
           (= src_reg_4_128 src_reg_4_179)
           (= src_reg_4_129 src_reg_4_180)
           (= src_reg_4_130 src_reg_4_181)
           (= src_reg_4_131 src_reg_4_182)
           (= src_reg_4_132 src_reg_4_183)
           (= src_reg_4_133 src_reg_4_184)
           (= src_reg_4_134 src_reg_4_185)
           (= dst_reg_4_107 dst_reg_4_158)
           (= dst_reg_4_108 dst_reg_4_159)
           (= dst_reg_4_109 dst_reg_4_160)
           (= dst_reg_4_110 dst_reg_4_161)
           (= dst_reg_4_111 dst_reg_4_162)
           (= dst_reg_4_112 dst_reg_4_163)
           (= cond40.i.i_4_157 dst_reg_4_164)
           (= i37.i.i_4_148 dst_reg_4_165)
           (= cond40.i.i_4_157 dst_reg_4_166)
           (= dst_reg_4_116 dst_reg_4_167)
           (= dst_reg_4_117 dst_reg_4_168)
           (= dst_reg_4_118 dst_reg_4_169)
           (= dst_reg_4_119 dst_reg_4_170)
           (= dst_reg_4_120 dst_reg_4_171)))))
BasicBlock: entry, Size:37
  (= dst_reg_4_0 dst_reg_4_0)
  (= dst_reg_4_1 dst_reg_4_1)
  (= dst_reg_4_2 dst_reg_4_2)
  (= dst_reg_4_3 dst_reg_4_3)
  (= dst_reg_4_4 dst_reg_4_4)
  (= dst_reg_4_5 dst_reg_4_5)
  (= dst_reg_4_6 dst_reg_4_6)
  (= dst_reg_4_7 dst_reg_4_7)
  (= dst_reg_4_8 dst_reg_4_8)
  (= dst_reg_4_9 dst_reg_4_9)
  (= dst_reg_4_10 dst_reg_4_10)
  (= dst_reg_4_11 dst_reg_4_11)
  (= dst_reg_4_12 dst_reg_4_12)
  (= dst_reg_4_13 dst_reg_4_13)
  (= src_reg_4_14 src_reg_4_14)
  (= src_reg_4_15 src_reg_4_15)
  (= src_reg_4_16 src_reg_4_16)
  (= src_reg_4_17 src_reg_4_17)
  (= src_reg_4_18 src_reg_4_18)
  (= src_reg_4_19 src_reg_4_19)
  (= src_reg_4_20 src_reg_4_20)
  (= src_reg_4_21 src_reg_4_21)
  (= src_reg_4_22 src_reg_4_22)
  (= src_reg_4_23 src_reg_4_23)
  (= src_reg_4_24 src_reg_4_24)
  (= src_reg_4_25 src_reg_4_25)
  (= src_reg_4_26 src_reg_4_26)
  (= src_reg_4_27 src_reg_4_27)
  (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)
  (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)
  (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)
  (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)
  (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)
  (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)
  (ite (= src_reg1.sroa.10.0.copyload_4_31 #x0000000000000000)
     (= tobool.not.i.i_4_37 #b1)
     (= tobool.not.i.i_4_37 #b0))
  (= dst_reg_4_5 i215.i_4_38)
  (ite (= i215.i_4_38 #x0000000000000000)
     (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i25.i_4_40 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: sw.bb201.i, Size:2
  (= dst_reg_4_4 i254.i_4_70)
  (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))
BasicBlock: if.end212.i, Size:26
  (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))
  (= neg.i155.i_4_75 (bvxor or.i_4_71 #xffffffffffffffff))
  (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))
  (= dst_reg_4_8 i258.i_4_77)
  (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34)
     (= cmp220.i_4_78 #b1)
     (= cmp220.i_4_78 #b0))
  (ite (= cmp220.i_4_78 #b1)
     (= cond225.i_4_79 i258.i_4_77)
     (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))
  (= or230.i_4_80 (bvor or.i_4_71 or3.i154.i_4_73))
  (= dst_reg_4_6 i260.i_4_81)
  (ite (bvslt i260.i_4_81 #x0000000000000000)
     (= cmp233.i_4_83 #b1)
     (= cmp233.i_4_83 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 #x0000000000000000)
     (= cmp236.i_4_85 #b1)
     (= cmp236.i_4_85 #b0))
  (ite (= cmp233.i_4_83 #b1)
     (= or.cond4.i_4_87 #b1)
     (= or.cond4.i_4_87 cmp236.i_4_85))
  (ite (= or.cond4.i_4_87 #b1)
     (= .cond225.i_4_89 #x8000000000000000)
     (= .cond225.i_4_89 cond225.i_4_79))
  (ite (= or.cond4.i_4_87 #b1)
     (= .or230.i_4_91 #x7fffffffffffffff)
     (= .or230.i_4_91 or230.i_4_80))
  (= and.i165.i_4_93 (bvand and.i156.i_4_76 #x8000000000000000))
  (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))
  (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94)
     (= cmp.i167.i_4_95 #b1)
     (= cmp.i167.i_4_95 #b0))
  (ite (= cmp.i167.i_4_95 #b1)
     (= cond.i168.i_4_96 .cond225.i_4_89)
     (= cond.i168.i_4_96 or.i166.i_4_94))
  (= and7.i171.i_4_98 (bvand and.i156.i_4_76 #x7fffffffffffffff))
  (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))
  (ite (bvslt .or230.i_4_91 or8.i172.i_4_99)
     (= cmp10.i173.i_4_100 #b1)
     (= cmp10.i173.i_4_100 #b0))
  (ite (= cmp10.i173.i_4_100 #b1)
     (= cond14.i174.i_4_101 .or230.i_4_91)
     (= cond14.i174.i_4_101 or8.i172.i_4_99))
  (ite (bvugt cond225.i_4_79 or.i_4_71)
     (= cmp19.i177.i_4_102 #b1)
     (= cmp19.i177.i_4_102 #b0))
  (ite (= cmp19.i177.i_4_102 #b1)
     (= cond23.i178.i_4_103 cond225.i_4_79)
     (= cond23.i178.i_4_103 or.i_4_71))
  (= or29.i181.i_4_104 (bvor or.i_4_71 or3.i154.i_4_73))
  (ite (bvult or230.i_4_80 or29.i181.i_4_104)
     (= cmp31.i182.i_4_105 #b1)
     (= cmp31.i182.i_4_105 #b0))
  (ite (= cmp31.i182.i_4_105 #b1)
     (= cond35.i183.i_4_106 or230.i_4_80)
     (= cond35.i183.i_4_106 or29.i181.i_4_104))
BasicBlock: land.lhs.true.i, Size:7
  (ite (distinct src_reg1.sroa.13.0.copyload_4_32
               src_reg1.sroa.15.0.copyload_4_33)
     (= cmp16.not.i_4_41 #b1)
     (= cmp16.not.i_4_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_4_34
               src_reg1.sroa.22.0.copyload_4_35)
     (= cmp18.not.i_4_42 #b1)
     (= cmp18.not.i_4_42 #b0))
  (ite (= cmp16.not.i_4_41 #b1)
     (= or.cond197.i_4_44 #b1)
     (= or.cond197.i_4_44 cmp18.not.i_4_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.i_4_45 #b1)
     (= cmp21.i_4_45 #b0))
  (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.i_4_47 #b1)
     (= cmp24.i_4_47 #b0))
  (ite (= or.cond198.i_4_46 #b1)
     (= or.cond199.i_4_49 #b1)
     (= or.cond199.i_4_49 cmp24.i_4_47))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_4_115 i34.i.i_4_141)
  (ite (bvugt i.i322.i_4_135 i34.i.i_4_141)
     (= cmp3.i.i_4_142 #b1)
     (= cmp3.i.i_4_142 #b0))
  (ite (= cmp3.i.i_4_142 #b1)
     (= cond.i327.i_4_143 i.i322.i_4_135)
     (= cond.i327.i_4_143 i34.i.i_4_141))
  (= dst_reg_4_114 i35.i.i_4_144)
  (= dst_reg_4_116 i36.i.i_4_145)
  (ite (bvult i35.i.i_4_144 i36.i.i_4_145)
     (= cmp8.i.i_4_146 #b1)
     (= cmp8.i.i_4_146 #b0))
  (ite (= cmp8.i.i_4_146 #b1)
     (= cond12.i.i_4_147 i35.i.i_4_144)
     (= cond12.i.i_4_147 i36.i.i_4_145))
BasicBlock: if.end309.i, Size:4
  (= dst_reg_4_113 i.i322.i_4_135)
  (ite (bvsgt i.i322.i_4_135 #xffffffffffffffff)
     (= cmp.i323.i_4_137 #b1)
     (= cmp.i323.i_4_137 #b0))
  (let ((a!1 (and (= tobool.not.i25.i_4_40 #b1)
                (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_4_121)
           (= src_reg_4_15 src_reg_4_122)
           (= src_reg_4_16 src_reg_4_123)
           (= src_reg_4_17 src_reg_4_124)
           (= src_reg_4_18 src_reg_4_125)
           (= src_reg_4_19 src_reg_4_126)
           (= src_reg_4_20 src_reg_4_127)
           (= src_reg_4_21 src_reg_4_128)
           (= src_reg_4_22 src_reg_4_129)
           (= src_reg_4_23 src_reg_4_130)
           (= src_reg_4_24 src_reg_4_131)
           (= src_reg_4_25 src_reg_4_132)
           (= src_reg_4_26 src_reg_4_133)
           (= src_reg_4_27 src_reg_4_134)
           (= #x00000001 dst_reg_4_107)
           (= dst_reg_4_1 dst_reg_4_108)
           (= dst_reg_4_2 dst_reg_4_109)
           (= dst_reg_4_3 dst_reg_4_110)
           (= or.i_4_71 dst_reg_4_111)
           (= #x0000000000000000 dst_reg_4_112)
           (= or.i_4_71 dst_reg_4_113)
           (= or.i_4_71 dst_reg_4_114)
           (= or.i_4_71 dst_reg_4_115)
           (= or.i_4_71 dst_reg_4_116)
           (= dst_reg_4_10 dst_reg_4_117)
           (= dst_reg_4_11 dst_reg_4_118)
           (= dst_reg_4_12 dst_reg_4_119)
           (= dst_reg_4_13 dst_reg_4_120))))
  (let ((a!1 (and (= tobool.not.i25.i_4_40 #b0)
                (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_4_121)
           (= src_reg_4_15 src_reg_4_122)
           (= src_reg_4_16 src_reg_4_123)
           (= src_reg_4_17 src_reg_4_124)
           (= src_reg_4_18 src_reg_4_125)
           (= src_reg_4_19 src_reg_4_126)
           (= src_reg_4_20 src_reg_4_127)
           (= src_reg_4_21 src_reg_4_128)
           (= src_reg_4_22 src_reg_4_129)
           (= src_reg_4_23 src_reg_4_130)
           (= src_reg_4_24 src_reg_4_131)
           (= src_reg_4_25 src_reg_4_132)
           (= src_reg_4_26 src_reg_4_133)
           (= src_reg_4_27 src_reg_4_134)
           (= #x00000001 dst_reg_4_107)
           (= dst_reg_4_1 dst_reg_4_108)
           (= dst_reg_4_2 dst_reg_4_109)
           (= dst_reg_4_3 dst_reg_4_110)
           (= or.i_4_71 dst_reg_4_111)
           (= and.i156.i_4_76 dst_reg_4_112)
           (= cond.i168.i_4_96 dst_reg_4_113)
           (= cond14.i174.i_4_101 dst_reg_4_114)
           (= cond23.i178.i_4_103 dst_reg_4_115)
           (= cond35.i183.i_4_106 dst_reg_4_116)
           (= dst_reg_4_10 dst_reg_4_117)
           (= dst_reg_4_11 dst_reg_4_118)
           (= dst_reg_4_12 dst_reg_4_119)
           (= dst_reg_4_13 dst_reg_4_120))))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)
     (= cmp21.old.i_4_50 #b1)
     (= cmp21.old.i_4_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)
     (= cmp24.old.i_4_51 #b1)
     (= cmp24.old.i_4_51 #b0))
  (ite (= cmp21.old.i_4_50 #b1)
     (= or.cond200.i_4_53 #b1)
     (= or.cond200.i_4_53 cmp24.old.i_4_51))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_4_114 i33.i.i_4_138)
  (ite (bvslt i33.i.i_4_138 #x0000000000000000)
     (= cmp1.i325.i_4_140 #b1)
     (= cmp1.i325.i_4_140 #b0))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_4_116 i37.i.i_4_148)
  (ite (bvsgt i37.i.i_4_148 #xffffffffffffffff)
     (= cmp16.i.i_4_150 #b1)
     (= cmp16.i.i_4_150 #b0))
  (= dst_reg_4_115 i38.i.i_4_151)

[encodeFunctionBody] PathConditionsMap:
__reg_bound_offset.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5) (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
if.then32.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.end.i.i.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
if.else.i331.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then17.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
  (or (and (= cmp31.i330.i_4_155 #b1) a!3)
      (and (= cmp31.i330.i_4_155 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_4_140 #b1) (and (= cmp.i323.i_4_137 #b0) a!2))
      (and (= cmp.i323.i_4_137 #b1) a!2)))))
if.then26.i
  (or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
               (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1)))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0)
                    (and (= tobool.not.i.i_4_37 #b1) a!1))
               (and (= tobool.not.i25.i_4_40 #b1)
                    (and (= tobool.not.i.i_4_37 #b1) a!1)))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5)
      (and (= cmp.i.i.i.i_4_190 #b1) a!5)
      (and (= tobool.not.i.i_4_37 #b0) a!1)
      (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
      (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))))))
if.end212.i
  (and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_4_37 #b1)
if.then.i329.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
sw.bb201.i
  (and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.then207.i
  (and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end309.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
      (and (= tobool.not.i25.i_4_40 #b1) a!1)))
lor.lhs.false20.i
  (= tobool.not.i.i_4_37 #b0)
lor.lhs.false.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
if.then41.i
  (and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
if.end.i.i
  (let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
[encodeFunctionBody] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_4_190 #b0) a!5) (and (= cmp.i.i.i.i_4_190 #b1) a!5))))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b0)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.else.i331.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b1) a!5)))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b1)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
  (or (and (= cmp1.i325.i_4_140 #b1) (= cmp.i323.i_4_137 #b0) a!2)
      (and (= cmp.i323.i_4_137 #b1) a!2))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end212.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_4_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_4_37 #b0)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp31.i330.i_4_155 #b1)
       (= cmp16.i.i_4_150 #b0)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp.i323.i_4_137 #b1)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<if.end27.i, sw.bb201.i> :(and (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then41.i, adjust_scalar_min_max_vals.exit> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp16.i.i_4_150 #b1)
       (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
               (and (= tobool.not.i25.i_4_40 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_4_150 #b0)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_4_150 #b1)
                (and (= cmp1.i325.i_4_140 #b0)
                     (and (= cmp.i323.i_4_137 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_4_155 #b1) a!3)
               (and (= cmp31.i330.i_4_155 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_4_140 #b1)
                    (and (= cmp.i323.i_4_137 #b0) a!2))
               (and (= cmp.i323.i_4_137 #b1) a!2))))
  (and (= cmp.i.i.i.i_4_190 #b0) a!5)))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
    (and (= or.cond199.i_4_49 #b1) (= tobool.not.i.i_4_37 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_4_53 #b1) (= tobool.not.i.i_4_37 #b0))
<if.end27.i, if.then41.i> :(and (= tobool.not.i.i_4_37 #b0)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (and (= tobool.not.i.i_4_37 #b1)
                (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
                    (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))))
  (and (= cmp1.i325.i_4_140 #b0)
       (= cmp.i323.i_4_137 #b0)
       (or (and (= tobool.not.i25.i_4_40 #b0) a!1)
           (and (= tobool.not.i25.i_4_40 #b1) a!1))))
<sw.bb201.i, if.then207.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<sw.bb201.i, if.end212.i> :(and (= tobool.not.i25.i_4_40 #b0)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
<if.then207.i, if.end309.i> :(and (= tobool.not.i25.i_4_40 #b1)
     (= tobool.not.i.i_4_37 #b1)
     (or (and (= or.cond200.i_4_53 #b0) (= tobool.not.i.i_4_37 #b0))
         (and (= or.cond199.i_4_49 #b0) (= tobool.not.i.i_4_37 #b1))))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
48 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,46},{if.then41.i,18}) : {
- src_reg: [ [ src_reg_4_274 ] [ ] [ src_reg_4_275 ] [ src_reg_4_276 ] [ src_reg_4_277 ] [ [ src_reg_4_278 ] [ src_reg_4_279 ] ] [ src_reg_4_280 ] [ src_reg_4_281 ] [ src_reg_4_282 ] [ src_reg_4_283 ] [ ] [ src_reg_4_284 ] [ src_reg_4_285 ] [ src_reg_4_286 ] [ src_reg_4_287 ] ] 
- dst_reg: [ [ dst_reg_4_260 ] [ ] [ dst_reg_4_261 ] [ dst_reg_4_262 ] [ dst_reg_4_263 ] [ [ dst_reg_4_264 ] [ dst_reg_4_265 ] ] [ dst_reg_4_266 ] [ dst_reg_4_267 ] [ dst_reg_4_268 ] [ dst_reg_4_269 ] [ ] [ dst_reg_4_270 ] [ dst_reg_4_271 ] [ dst_reg_4_272 ] [ dst_reg_4_273 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ and.i1.i.i_4_256 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
}
45 = MemoryDef(47) : {
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ and4.i.i.i_4_259 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
}
44 = MemoryDef(43) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ i37.i.i_4_148 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond40.i.i_4_157 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
42 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond40.i.i_4_157 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
41 = MemoryDef(40) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ cond27.i.i_4_153 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
40 = MemoryDef(39) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ cond27.i.i_4_153 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
39 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ i38.i.i_4_151 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
36 = MemoryDef(35) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
35 = MemoryDef(49) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
34 = MemoryDef(33) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ cond35.i183.i_4_106 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
31 = MemoryDef(30) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ .or230.i_4_91 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
47 = MemoryPhi({if.then.i329.i,38},{if.then17.i.i,41},{if.else.i331.i,49},{if.then32.i.i,44}) : {
- src_reg: [ [ src_reg_4_172 ] [ ] [ src_reg_4_173 ] [ src_reg_4_174 ] [ src_reg_4_175 ] [ [ src_reg_4_176 ] [ src_reg_4_177 ] ] [ src_reg_4_178 ] [ src_reg_4_179 ] [ src_reg_4_180 ] [ src_reg_4_181 ] [ ] [ src_reg_4_182 ] [ src_reg_4_183 ] [ src_reg_4_184 ] [ src_reg_4_185 ] ] 
- dst_reg: [ [ dst_reg_4_158 ] [ ] [ dst_reg_4_159 ] [ dst_reg_4_160 ] [ dst_reg_4_161 ] [ [ dst_reg_4_162 ] [ dst_reg_4_163 ] ] [ dst_reg_4_164 ] [ dst_reg_4_165 ] [ dst_reg_4_166 ] [ dst_reg_4_167 ] [ ] [ dst_reg_4_168 ] [ dst_reg_4_169 ] [ dst_reg_4_170 ] [ dst_reg_4_171 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ .cond225.i_4_89 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
49 = MemoryPhi({if.then207.i,24},{if.end212.i,34}) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ dst_reg_4_113 ] [ dst_reg_4_114 ] [ dst_reg_4_115 ] [ dst_reg_4_116 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ cond.i168.i_4_96 ] [ cond14.i174.i_4_101 ] [ cond23.i178.i_4_103 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
37 = MemoryDef(36) : {
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ dst_reg_4_114 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_4_121 ] [ ] [ src_reg_4_122 ] [ src_reg_4_123 ] [ src_reg_4_124 ] [ [ src_reg_4_125 ] [ src_reg_4_126 ] ] [ src_reg_4_127 ] [ src_reg_4_128 ] [ src_reg_4_129 ] [ src_reg_4_130 ] [ ] [ src_reg_4_131 ] [ src_reg_4_132 ] [ src_reg_4_133 ] [ src_reg_4_134 ] ] 
- dst_reg: [ [ dst_reg_4_107 ] [ ] [ dst_reg_4_108 ] [ dst_reg_4_109 ] [ dst_reg_4_110 ] [ [ dst_reg_4_111 ] [ dst_reg_4_112 ] ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ cond.i327.i_4_143 ] [ cond12.i.i_4_147 ] [ ] [ dst_reg_4_117 ] [ dst_reg_4_118 ] [ dst_reg_4_119 ] [ dst_reg_4_120 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ or230.i_4_80 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_4_9 ] [ ] [ #x00000000 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
19 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ #x0000000000000000 ] ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ or.i_4_71 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
}
25 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ or.i_4_71 ] [ and.i156.i_4_76 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ cond225.i_4_79 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_4_0 ] [ ] [ dst_reg_4_1 ] [ dst_reg_4_2 ] [ dst_reg_4_3 ] [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] [ dst_reg_4_6 ] [ dst_reg_4_7 ] [ dst_reg_4_8 ] [ dst_reg_4_9 ] [ ] [ dst_reg_4_10 ] [ dst_reg_4_11 ] [ dst_reg_4_12 ] [ dst_reg_4_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_4_4 ] [ dst_reg_4_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_4",
	"dst_reg_4_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3",
	[
		"dst_reg_4_4",
		"dst_reg_4_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3",
	[
		"dst_reg_4_4",
		"dst_reg_4_5"
	],
	"dst_reg_4_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3",
	[
		"dst_reg_4_4",
		"dst_reg_4_5"
	],
	"dst_reg_4_6",
	"dst_reg_4_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3",
	[
		"dst_reg_4_4",
		"dst_reg_4_5"
	],
	"dst_reg_4_6",
	"dst_reg_4_7",
	"dst_reg_4_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3",
	[
		"dst_reg_4_4",
		"dst_reg_4_5"
	],
	"dst_reg_4_6",
	"dst_reg_4_7",
	"dst_reg_4_8",
	"dst_reg_4_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3",
	[
		"dst_reg_4_4",
		"dst_reg_4_5"
	],
	"dst_reg_4_6",
	"dst_reg_4_7",
	"dst_reg_4_8",
	"dst_reg_4_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3",
	[
		"dst_reg_4_4",
		"dst_reg_4_5"
	],
	"dst_reg_4_6",
	"dst_reg_4_7",
	"dst_reg_4_8",
	"dst_reg_4_9",
	"",
	"",
	"dst_reg_4_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3",
	[
		"dst_reg_4_4",
		"dst_reg_4_5"
	],
	"dst_reg_4_6",
	"dst_reg_4_7",
	"dst_reg_4_8",
	"dst_reg_4_9",
	"",
	"",
	"dst_reg_4_10",
	"dst_reg_4_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_4_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_0",
	[
		""
	],
	"dst_reg_4_1",
	"dst_reg_4_2",
	"dst_reg_4_3",
	[
		"dst_reg_4_4",
		"dst_reg_4_5"
	],
	"dst_reg_4_6",
	"dst_reg_4_7",
	"dst_reg_4_8",
	"dst_reg_4_9",
	"",
	"",
	"dst_reg_4_10",
	"dst_reg_4_11",
	"dst_reg_4_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_4_14 ] [ ] [ src_reg_4_15 ] [ src_reg_4_16 ] [ src_reg_4_17 ] [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] [ src_reg_4_20 ] [ src_reg_4_21 ] [ src_reg_4_22 ] [ src_reg_4_23 ] [ ] [ src_reg_4_24 ] [ src_reg_4_25 ] [ src_reg_4_26 ] [ src_reg_4_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_4_18 ] [ src_reg_4_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_4_18 ] [ src_reg_4_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_18",
	"src_reg_4_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17",
	[
		"src_reg_4_18",
		"src_reg_4_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17",
	[
		"src_reg_4_18",
		"src_reg_4_19"
	],
	"src_reg_4_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17",
	[
		"src_reg_4_18",
		"src_reg_4_19"
	],
	"src_reg_4_20",
	"src_reg_4_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17",
	[
		"src_reg_4_18",
		"src_reg_4_19"
	],
	"src_reg_4_20",
	"src_reg_4_21",
	"src_reg_4_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17",
	[
		"src_reg_4_18",
		"src_reg_4_19"
	],
	"src_reg_4_20",
	"src_reg_4_21",
	"src_reg_4_22",
	"src_reg_4_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17",
	[
		"src_reg_4_18",
		"src_reg_4_19"
	],
	"src_reg_4_20",
	"src_reg_4_21",
	"src_reg_4_22",
	"src_reg_4_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17",
	[
		"src_reg_4_18",
		"src_reg_4_19"
	],
	"src_reg_4_20",
	"src_reg_4_21",
	"src_reg_4_22",
	"src_reg_4_23",
	"",
	"",
	"src_reg_4_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17",
	[
		"src_reg_4_18",
		"src_reg_4_19"
	],
	"src_reg_4_20",
	"src_reg_4_21",
	"src_reg_4_22",
	"src_reg_4_23",
	"",
	"",
	"src_reg_4_24",
	"src_reg_4_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_4_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_14",
	[
		""
	],
	"src_reg_4_15",
	"src_reg_4_16",
	"src_reg_4_17",
	[
		"src_reg_4_18",
		"src_reg_4_19"
	],
	"src_reg_4_20",
	"src_reg_4_21",
	"src_reg_4_22",
	"src_reg_4_23",
	"",
	"",
	"src_reg_4_24",
	"src_reg_4_25",
	"src_reg_4_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_4_302 ] [ ] [ src_reg_4_303 ] [ src_reg_4_304 ] [ src_reg_4_305 ] [ [ src_reg_4_306 ] [ src_reg_4_307 ] ] [ src_reg_4_308 ] [ src_reg_4_309 ] [ src_reg_4_310 ] [ src_reg_4_311 ] [ ] [ src_reg_4_312 ] [ src_reg_4_313 ] [ src_reg_4_314 ] [ src_reg_4_315 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_4_302 ] [ ] [ src_reg_4_303 ] [ src_reg_4_304 ] [ src_reg_4_305 ] [ [ src_reg_4_306 ] [ src_reg_4_307 ] ] [ src_reg_4_308 ] [ src_reg_4_309 ] [ src_reg_4_310 ] [ src_reg_4_311 ] [ ] [ src_reg_4_312 ] [ src_reg_4_313 ] [ src_reg_4_314 ] [ src_reg_4_315 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_302 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_303 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_304 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_305 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_4_306 ] [ src_reg_4_307 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_4_306 ] [ src_reg_4_307 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_306 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_306"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_307 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_306",
	"src_reg_4_307"
]

[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305",
	[
		"src_reg_4_306",
		"src_reg_4_307"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_308 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305",
	[
		"src_reg_4_306",
		"src_reg_4_307"
	],
	"src_reg_4_308"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_309 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305",
	[
		"src_reg_4_306",
		"src_reg_4_307"
	],
	"src_reg_4_308",
	"src_reg_4_309"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_310 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305",
	[
		"src_reg_4_306",
		"src_reg_4_307"
	],
	"src_reg_4_308",
	"src_reg_4_309",
	"src_reg_4_310"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_4_311 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305",
	[
		"src_reg_4_306",
		"src_reg_4_307"
	],
	"src_reg_4_308",
	"src_reg_4_309",
	"src_reg_4_310",
	"src_reg_4_311"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305",
	[
		"src_reg_4_306",
		"src_reg_4_307"
	],
	"src_reg_4_308",
	"src_reg_4_309",
	"src_reg_4_310",
	"src_reg_4_311",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_312 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305",
	[
		"src_reg_4_306",
		"src_reg_4_307"
	],
	"src_reg_4_308",
	"src_reg_4_309",
	"src_reg_4_310",
	"src_reg_4_311",
	"",
	"",
	"src_reg_4_312"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_4_313 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305",
	[
		"src_reg_4_306",
		"src_reg_4_307"
	],
	"src_reg_4_308",
	"src_reg_4_309",
	"src_reg_4_310",
	"src_reg_4_311",
	"",
	"",
	"src_reg_4_312",
	"src_reg_4_313"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_4_314 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_4_302",
	[
		""
	],
	"src_reg_4_303",
	"src_reg_4_304",
	"src_reg_4_305",
	[
		"src_reg_4_306",
		"src_reg_4_307"
	],
	"src_reg_4_308",
	"src_reg_4_309",
	"src_reg_4_310",
	"src_reg_4_311",
	"",
	"",
	"src_reg_4_312",
	"src_reg_4_313",
	"src_reg_4_314"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_4_288 ] [ ] [ dst_reg_4_289 ] [ dst_reg_4_290 ] [ dst_reg_4_291 ] [ [ dst_reg_4_292 ] [ dst_reg_4_293 ] ] [ dst_reg_4_294 ] [ dst_reg_4_295 ] [ dst_reg_4_296 ] [ dst_reg_4_297 ] [ ] [ dst_reg_4_298 ] [ dst_reg_4_299 ] [ dst_reg_4_300 ] [ dst_reg_4_301 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_4_288 ] [ ] [ dst_reg_4_289 ] [ dst_reg_4_290 ] [ dst_reg_4_291 ] [ [ dst_reg_4_292 ] [ dst_reg_4_293 ] ] [ dst_reg_4_294 ] [ dst_reg_4_295 ] [ dst_reg_4_296 ] [ dst_reg_4_297 ] [ ] [ dst_reg_4_298 ] [ dst_reg_4_299 ] [ dst_reg_4_300 ] [ dst_reg_4_301 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_288 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_289 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_290 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_291 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_4_292 ] [ dst_reg_4_293 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_4_292 ] [ dst_reg_4_293 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_292 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_292"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_293 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_292",
	"dst_reg_4_293"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291",
	[
		"dst_reg_4_292",
		"dst_reg_4_293"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_294 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291",
	[
		"dst_reg_4_292",
		"dst_reg_4_293"
	],
	"dst_reg_4_294"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_295 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291",
	[
		"dst_reg_4_292",
		"dst_reg_4_293"
	],
	"dst_reg_4_294",
	"dst_reg_4_295"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_296 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291",
	[
		"dst_reg_4_292",
		"dst_reg_4_293"
	],
	"dst_reg_4_294",
	"dst_reg_4_295",
	"dst_reg_4_296"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_4_297 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291",
	[
		"dst_reg_4_292",
		"dst_reg_4_293"
	],
	"dst_reg_4_294",
	"dst_reg_4_295",
	"dst_reg_4_296",
	"dst_reg_4_297"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291",
	[
		"dst_reg_4_292",
		"dst_reg_4_293"
	],
	"dst_reg_4_294",
	"dst_reg_4_295",
	"dst_reg_4_296",
	"dst_reg_4_297",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_298 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291",
	[
		"dst_reg_4_292",
		"dst_reg_4_293"
	],
	"dst_reg_4_294",
	"dst_reg_4_295",
	"dst_reg_4_296",
	"dst_reg_4_297",
	"",
	"",
	"dst_reg_4_298"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_4_299 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291",
	[
		"dst_reg_4_292",
		"dst_reg_4_293"
	],
	"dst_reg_4_294",
	"dst_reg_4_295",
	"dst_reg_4_296",
	"dst_reg_4_297",
	"",
	"",
	"dst_reg_4_298",
	"dst_reg_4_299"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_4_300 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_4_288",
	[
		""
	],
	"dst_reg_4_289",
	"dst_reg_4_290",
	"dst_reg_4_291",
	[
		"dst_reg_4_292",
		"dst_reg_4_293"
	],
	"dst_reg_4_294",
	"dst_reg_4_295",
	"dst_reg_4_296",
	"dst_reg_4_297",
	"",
	"",
	"dst_reg_4_298",
	"dst_reg_4_299",
	"dst_reg_4_300"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_OR
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_4_0",
      [ "" ],
      "dst_reg_4_1",
      "dst_reg_4_2",
      "dst_reg_4_3",
      [ "dst_reg_4_4", "dst_reg_4_5" ],
      "dst_reg_4_6",
      "dst_reg_4_7",
      "dst_reg_4_8",
      "dst_reg_4_9",
      "",
      "",
      "dst_reg_4_10",
      "dst_reg_4_11",
      "dst_reg_4_12"
   ],
   "src_reg" : [
      "src_reg_4_14",
      [ "" ],
      "src_reg_4_15",
      "src_reg_4_16",
      "src_reg_4_17",
      [ "src_reg_4_18", "src_reg_4_19" ],
      "src_reg_4_20",
      "src_reg_4_21",
      "src_reg_4_22",
      "src_reg_4_23",
      "",
      "",
      "src_reg_4_24",
      "src_reg_4_25",
      "src_reg_4_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_4_288",
      [ "" ],
      "dst_reg_4_289",
      "dst_reg_4_290",
      "dst_reg_4_291",
      [ "dst_reg_4_292", "dst_reg_4_293" ],
      "dst_reg_4_294",
      "dst_reg_4_295",
      "dst_reg_4_296",
      "dst_reg_4_297",
      "",
      "",
      "dst_reg_4_298",
      "dst_reg_4_299",
      "dst_reg_4_300"
   ],
   "src_reg" : [
      "src_reg_4_302",
      [ "" ],
      "src_reg_4_303",
      "src_reg_4_304",
      "src_reg_4_305",
      [ "src_reg_4_306", "src_reg_4_307" ],
      "src_reg_4_308",
      "src_reg_4_309",
      "src_reg_4_310",
      "src_reg_4_311",
      "",
      "",
      "src_reg_4_312",
      "src_reg_4_313",
      "src_reg_4_314"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun i38.i.i_4_151 () (_ BitVec 64))
(declare-fun dst_reg_4_115 () (_ BitVec 64))
(declare-fun cmp16.i.i_4_150 () (_ BitVec 1))
(declare-fun i37.i.i_4_148 () (_ BitVec 64))
(declare-fun dst_reg_4_116 () (_ BitVec 64))
(declare-fun tobool.not.i.i_4_37 () (_ BitVec 1))
(declare-fun or.cond199.i_4_49 () (_ BitVec 1))
(declare-fun or.cond200.i_4_53 () (_ BitVec 1))
(declare-fun tobool.not.i25.i_4_40 () (_ BitVec 1))
(declare-fun cmp.i323.i_4_137 () (_ BitVec 1))
(declare-fun cmp1.i325.i_4_140 () (_ BitVec 1))
(declare-fun i33.i.i_4_138 () (_ BitVec 64))
(declare-fun dst_reg_4_114 () (_ BitVec 64))
(declare-fun cmp24.old.i_4_51 () (_ BitVec 1))
(declare-fun cmp21.old.i_4_50 () (_ BitVec 1))
(declare-fun src_reg1.sroa.22.0.copyload_4_35 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_4_34 () (_ BitVec 64))
(declare-fun src_reg1.sroa.15.0.copyload_4_33 () (_ BitVec 64))
(declare-fun src_reg1.sroa.13.0.copyload_4_32 () (_ BitVec 64))
(declare-fun dst_reg_4_120 () (_ BitVec 8))
(declare-fun dst_reg_4_13 () (_ BitVec 8))
(declare-fun dst_reg_4_119 () (_ BitVec 32))
(declare-fun dst_reg_4_12 () (_ BitVec 32))
(declare-fun dst_reg_4_118 () (_ BitVec 32))
(declare-fun dst_reg_4_11 () (_ BitVec 32))
(declare-fun dst_reg_4_117 () (_ BitVec 32))
(declare-fun dst_reg_4_10 () (_ BitVec 32))
(declare-fun cond35.i183.i_4_106 () (_ BitVec 64))
(declare-fun cond23.i178.i_4_103 () (_ BitVec 64))
(declare-fun cond14.i174.i_4_101 () (_ BitVec 64))
(declare-fun dst_reg_4_113 () (_ BitVec 64))
(declare-fun cond.i168.i_4_96 () (_ BitVec 64))
(declare-fun dst_reg_4_112 () (_ BitVec 64))
(declare-fun and.i156.i_4_76 () (_ BitVec 64))
(declare-fun dst_reg_4_111 () (_ BitVec 64))
(declare-fun or.i_4_71 () (_ BitVec 64))
(declare-fun dst_reg_4_110 () (_ BitVec 32))
(declare-fun dst_reg_4_3 () (_ BitVec 32))
(declare-fun dst_reg_4_109 () (_ BitVec 32))
(declare-fun dst_reg_4_2 () (_ BitVec 32))
(declare-fun dst_reg_4_108 () (_ BitVec 32))
(declare-fun dst_reg_4_1 () (_ BitVec 32))
(declare-fun dst_reg_4_107 () (_ BitVec 32))
(declare-fun src_reg_4_134 () (_ BitVec 8))
(declare-fun src_reg_4_27 () (_ BitVec 8))
(declare-fun src_reg_4_133 () (_ BitVec 32))
(declare-fun src_reg_4_26 () (_ BitVec 32))
(declare-fun src_reg_4_132 () (_ BitVec 32))
(declare-fun src_reg_4_25 () (_ BitVec 32))
(declare-fun src_reg_4_131 () (_ BitVec 32))
(declare-fun src_reg_4_24 () (_ BitVec 32))
(declare-fun src_reg_4_130 () (_ BitVec 64))
(declare-fun src_reg_4_23 () (_ BitVec 64))
(declare-fun src_reg_4_129 () (_ BitVec 64))
(declare-fun src_reg_4_22 () (_ BitVec 64))
(declare-fun src_reg_4_128 () (_ BitVec 64))
(declare-fun src_reg_4_21 () (_ BitVec 64))
(declare-fun src_reg_4_127 () (_ BitVec 64))
(declare-fun src_reg_4_20 () (_ BitVec 64))
(declare-fun src_reg_4_126 () (_ BitVec 64))
(declare-fun src_reg_4_19 () (_ BitVec 64))
(declare-fun src_reg_4_125 () (_ BitVec 64))
(declare-fun src_reg_4_18 () (_ BitVec 64))
(declare-fun src_reg_4_124 () (_ BitVec 32))
(declare-fun src_reg_4_17 () (_ BitVec 32))
(declare-fun src_reg_4_123 () (_ BitVec 32))
(declare-fun src_reg_4_16 () (_ BitVec 32))
(declare-fun src_reg_4_122 () (_ BitVec 32))
(declare-fun src_reg_4_15 () (_ BitVec 32))
(declare-fun src_reg_4_121 () (_ BitVec 32))
(declare-fun i.i322.i_4_135 () (_ BitVec 64))
(declare-fun i36.i.i_4_145 () (_ BitVec 64))
(declare-fun cond12.i.i_4_147 () (_ BitVec 64))
(declare-fun i35.i.i_4_144 () (_ BitVec 64))
(declare-fun cmp8.i.i_4_146 () (_ BitVec 1))
(declare-fun i34.i.i_4_141 () (_ BitVec 64))
(declare-fun cond.i327.i_4_143 () (_ BitVec 64))
(declare-fun cmp3.i.i_4_142 () (_ BitVec 1))
(declare-fun cmp24.i_4_47 () (_ BitVec 1))
(declare-fun or.cond198.i_4_46 () (_ BitVec 1))
(declare-fun or.cond197.i_4_44 () (_ BitVec 1))
(declare-fun cmp21.i_4_45 () (_ BitVec 1))
(declare-fun cmp18.not.i_4_42 () (_ BitVec 1))
(declare-fun cmp16.not.i_4_41 () (_ BitVec 1))
(declare-fun or29.i181.i_4_104 () (_ BitVec 64))
(declare-fun or230.i_4_80 () (_ BitVec 64))
(declare-fun cmp31.i182.i_4_105 () (_ BitVec 1))
(declare-fun or3.i154.i_4_73 () (_ BitVec 64))
(declare-fun cond225.i_4_79 () (_ BitVec 64))
(declare-fun cmp19.i177.i_4_102 () (_ BitVec 1))
(declare-fun or8.i172.i_4_99 () (_ BitVec 64))
(declare-fun .or230.i_4_91 () (_ BitVec 64))
(declare-fun cmp10.i173.i_4_100 () (_ BitVec 1))
(declare-fun and7.i171.i_4_98 () (_ BitVec 64))
(declare-fun or.i166.i_4_94 () (_ BitVec 64))
(declare-fun .cond225.i_4_89 () (_ BitVec 64))
(declare-fun cmp.i167.i_4_95 () (_ BitVec 1))
(declare-fun and.i165.i_4_93 () (_ BitVec 64))
(declare-fun or.cond4.i_4_87 () (_ BitVec 1))
(declare-fun cmp236.i_4_85 () (_ BitVec 1))
(declare-fun cmp233.i_4_83 () (_ BitVec 1))
(declare-fun i260.i_4_81 () (_ BitVec 64))
(declare-fun dst_reg_4_6 () (_ BitVec 64))
(declare-fun i258.i_4_77 () (_ BitVec 64))
(declare-fun cmp220.i_4_78 () (_ BitVec 1))
(declare-fun dst_reg_4_8 () (_ BitVec 64))
(declare-fun neg.i155.i_4_75 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_4_31 () (_ BitVec 64))
(declare-fun i215.i_4_38 () (_ BitVec 64))
(declare-fun src_reg1.sroa.3.0.copyload_4_30 () (_ BitVec 64))
(declare-fun i254.i_4_70 () (_ BitVec 64))
(declare-fun dst_reg_4_4 () (_ BitVec 64))
(declare-fun dst_reg_4_5 () (_ BitVec 64))
(declare-fun src_reg_4_14 () (_ BitVec 32))
(declare-fun dst_reg_4_9 () (_ BitVec 64))
(declare-fun dst_reg_4_7 () (_ BitVec 64))
(declare-fun dst_reg_4_0 () (_ BitVec 32))
(declare-fun dst_reg_4_171 () (_ BitVec 8))
(declare-fun dst_reg_4_170 () (_ BitVec 32))
(declare-fun dst_reg_4_169 () (_ BitVec 32))
(declare-fun dst_reg_4_168 () (_ BitVec 32))
(declare-fun dst_reg_4_167 () (_ BitVec 64))
(declare-fun dst_reg_4_166 () (_ BitVec 64))
(declare-fun cond40.i.i_4_157 () (_ BitVec 64))
(declare-fun dst_reg_4_165 () (_ BitVec 64))
(declare-fun dst_reg_4_164 () (_ BitVec 64))
(declare-fun dst_reg_4_163 () (_ BitVec 64))
(declare-fun dst_reg_4_162 () (_ BitVec 64))
(declare-fun dst_reg_4_161 () (_ BitVec 32))
(declare-fun dst_reg_4_160 () (_ BitVec 32))
(declare-fun dst_reg_4_159 () (_ BitVec 32))
(declare-fun dst_reg_4_158 () (_ BitVec 32))
(declare-fun src_reg_4_185 () (_ BitVec 8))
(declare-fun src_reg_4_184 () (_ BitVec 32))
(declare-fun src_reg_4_183 () (_ BitVec 32))
(declare-fun src_reg_4_182 () (_ BitVec 32))
(declare-fun src_reg_4_181 () (_ BitVec 64))
(declare-fun src_reg_4_180 () (_ BitVec 64))
(declare-fun src_reg_4_179 () (_ BitVec 64))
(declare-fun src_reg_4_178 () (_ BitVec 64))
(declare-fun src_reg_4_177 () (_ BitVec 64))
(declare-fun src_reg_4_176 () (_ BitVec 64))
(declare-fun src_reg_4_175 () (_ BitVec 32))
(declare-fun src_reg_4_174 () (_ BitVec 32))
(declare-fun src_reg_4_173 () (_ BitVec 32))
(declare-fun src_reg_4_172 () (_ BitVec 32))
(declare-fun cmp31.i330.i_4_155 () (_ BitVec 1))
(declare-fun cond27.i.i_4_153 () (_ BitVec 64))
(declare-fun cmp.i.i.i.i_4_190 () (_ BitVec 1))
(declare-fun xor.i.i.i_4_188 () (_ BitVec 64))
(declare-fun i.i333.i_4_186 () (_ BitVec 64))
(declare-fun i5.i.i_4_187 () (_ BitVec 64))
(declare-fun cmp23.i.i_4_152 () (_ BitVec 1))
(declare-fun add.i.i.i335.i_4_234 () (_ BitVec 32))
(declare-fun phi.bo_4_236 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_4_233 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_4_230 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_4_232 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_4_229 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_4_222 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_4_226 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_4_224 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_4_221 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_4_228 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_4_214 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_4_218 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_4_216 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_4_213 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_4_220 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_4_206 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_4_210 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_4_208 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_4_205 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_4_212 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_4_198 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_4_202 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_4_200 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_4_195 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_4_204 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_4_192 () (_ BitVec 1))
(declare-fun shl.i.i.i.i.i_4_194 () (_ BitVec 64))
(declare-fun cmp36.i.i_4_156 () (_ BitVec 1))
(declare-fun __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_4_237 () Bool)
(declare-fun neg.i.i.i_4_258 () (_ BitVec 64))
(declare-fun or.i.i.i_4_255 () (_ BitVec 64))
(declare-fun and4.i.i.i_4_259 () (_ BitVec 64))
(declare-fun and.i1.i.i_4_256 () (_ BitVec 64))
(declare-fun i11.i.i_4_254 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_4_252 () (_ BitVec 64))
(declare-fun i9.i.i_4_253 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_4_250 () (_ BitVec 64))
(declare-fun sub.i.i.i_4_247 () (_ BitVec 64))
(declare-fun cmp.i.i.i_4_242 () (_ BitVec 1))
(declare-fun and.i.i336.i_4_248 () (_ BitVec 64))
(declare-fun notmask.i.i.i_4_245 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_4_243 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_4_239 () (_ BitVec 32))
(declare-fun src_reg_4_315 () (_ BitVec 8))
(declare-fun src_reg_4_287 () (_ BitVec 8))
(declare-fun src_reg_4_314 () (_ BitVec 32))
(declare-fun src_reg_4_286 () (_ BitVec 32))
(declare-fun src_reg_4_313 () (_ BitVec 32))
(declare-fun src_reg_4_285 () (_ BitVec 32))
(declare-fun src_reg_4_312 () (_ BitVec 32))
(declare-fun src_reg_4_284 () (_ BitVec 32))
(declare-fun src_reg_4_311 () (_ BitVec 64))
(declare-fun src_reg_4_283 () (_ BitVec 64))
(declare-fun src_reg_4_310 () (_ BitVec 64))
(declare-fun src_reg_4_282 () (_ BitVec 64))
(declare-fun src_reg_4_309 () (_ BitVec 64))
(declare-fun src_reg_4_281 () (_ BitVec 64))
(declare-fun src_reg_4_308 () (_ BitVec 64))
(declare-fun src_reg_4_280 () (_ BitVec 64))
(declare-fun src_reg_4_307 () (_ BitVec 64))
(declare-fun src_reg_4_279 () (_ BitVec 64))
(declare-fun src_reg_4_306 () (_ BitVec 64))
(declare-fun src_reg_4_278 () (_ BitVec 64))
(declare-fun src_reg_4_305 () (_ BitVec 32))
(declare-fun src_reg_4_277 () (_ BitVec 32))
(declare-fun src_reg_4_304 () (_ BitVec 32))
(declare-fun src_reg_4_276 () (_ BitVec 32))
(declare-fun src_reg_4_303 () (_ BitVec 32))
(declare-fun src_reg_4_275 () (_ BitVec 32))
(declare-fun src_reg_4_302 () (_ BitVec 32))
(declare-fun src_reg_4_274 () (_ BitVec 32))
(declare-fun dst_reg_4_301 () (_ BitVec 8))
(declare-fun dst_reg_4_273 () (_ BitVec 8))
(declare-fun dst_reg_4_300 () (_ BitVec 32))
(declare-fun dst_reg_4_272 () (_ BitVec 32))
(declare-fun dst_reg_4_299 () (_ BitVec 32))
(declare-fun dst_reg_4_271 () (_ BitVec 32))
(declare-fun dst_reg_4_298 () (_ BitVec 32))
(declare-fun dst_reg_4_270 () (_ BitVec 32))
(declare-fun dst_reg_4_297 () (_ BitVec 64))
(declare-fun dst_reg_4_269 () (_ BitVec 64))
(declare-fun dst_reg_4_296 () (_ BitVec 64))
(declare-fun dst_reg_4_268 () (_ BitVec 64))
(declare-fun dst_reg_4_295 () (_ BitVec 64))
(declare-fun dst_reg_4_267 () (_ BitVec 64))
(declare-fun dst_reg_4_294 () (_ BitVec 64))
(declare-fun dst_reg_4_266 () (_ BitVec 64))
(declare-fun dst_reg_4_293 () (_ BitVec 64))
(declare-fun dst_reg_4_265 () (_ BitVec 64))
(declare-fun dst_reg_4_292 () (_ BitVec 64))
(declare-fun dst_reg_4_264 () (_ BitVec 64))
(declare-fun dst_reg_4_291 () (_ BitVec 32))
(declare-fun dst_reg_4_263 () (_ BitVec 32))
(declare-fun dst_reg_4_290 () (_ BitVec 32))
(declare-fun dst_reg_4_262 () (_ BitVec 32))
(declare-fun dst_reg_4_289 () (_ BitVec 32))
(declare-fun dst_reg_4_261 () (_ BitVec 32))
(declare-fun dst_reg_4_288 () (_ BitVec 32))
(declare-fun dst_reg_4_260 () (_ BitVec 32))
(assert
 (let (($x346 (= dst_reg_4_115 i38.i.i_4_151)))
 (let (($x342 (= cmp16.i.i_4_150 (_ bv0 1))))
 (let (($x343 (= cmp16.i.i_4_150 (_ bv1 1))))
 (let (($x344 (ite (bvsgt i37.i.i_4_148 (_ bv18446744073709551615 64)) $x343 $x342)))
 (let (($x339 (= dst_reg_4_116 i37.i.i_4_148)))
 (let (($x80 (= tobool.not.i.i_4_37 (_ bv1 1))))
 (let (($x702 (= or.cond199.i_4_49 (_ bv0 1))))
 (let (($x704 (and $x702 $x80)))
 (let (($x78 (= tobool.not.i.i_4_37 (_ bv0 1))))
 (let (($x705 (= or.cond200.i_4_53 (_ bv0 1))))
 (let (($x707 (and $x705 $x78)))
 (let (($x709 (or $x707 $x704)))
 (let (($x710 (and $x80 $x709)))
 (let (($x87 (= tobool.not.i25.i_4_40 (_ bv1 1))))
 (let (($x713 (and $x87 $x710)))
 (let (($x86 (= tobool.not.i25.i_4_40 (_ bv0 1))))
 (let (($x714 (and $x86 $x710)))
 (let (($x715 (or $x714 $x713)))
 (let (($x304 (= cmp.i323.i_4_137 (_ bv0 1))))
 (let (($x717 (and $x304 $x715)))
 (let (($x311 (= cmp1.i325.i_4_140 (_ bv0 1))))
 (let (($x719 (and $x311 $x717)))
 (let (($x836 (=> $x719 (and $x339 $x344 $x346))))
 (let (($x312 (= cmp1.i325.i_4_140 (_ bv1 1))))
 (let (($x313 (ite (bvslt i33.i.i_4_138 (_ bv0 64)) $x312 $x311)))
 (let (($x308 (= dst_reg_4_114 i33.i.i_4_138)))
 (let (($x834 (=> $x717 (and $x308 $x313))))
 (let (($x131 (= or.cond200.i_4_53 (_ bv1 1))))
 (let (($x123 (= cmp21.old.i_4_50 (_ bv1 1))))
 (let (($x132 (ite $x123 $x131 (= or.cond200.i_4_53 cmp24.old.i_4_51))))
 (let (($x126 (= cmp24.old.i_4_51 (_ bv0 1))))
 (let (($x127 (= cmp24.old.i_4_51 (_ bv1 1))))
 (let (($x112 (bvugt src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35)))
 (let (($x128 (ite $x112 $x127 $x126)))
 (let (($x122 (= cmp21.old.i_4_50 (_ bv0 1))))
 (let (($x104 (bvsgt src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33)))
 (let (($x124 (ite $x104 $x123 $x122)))
 (let (($x832 (=> $x78 (and $x124 $x128 $x132))))
 (let (($x294 (= dst_reg_4_13 dst_reg_4_120)))
 (let (($x293 (= dst_reg_4_12 dst_reg_4_119)))
 (let (($x292 (= dst_reg_4_11 dst_reg_4_118)))
 (let (($x291 (= dst_reg_4_10 dst_reg_4_117)))
 (let (($x299 (= cond35.i183.i_4_106 dst_reg_4_116)))
 (let (($x298 (= cond23.i178.i_4_103 dst_reg_4_115)))
 (let (($x297 (= cond14.i174.i_4_101 dst_reg_4_114)))
 (let (($x296 (= cond.i168.i_4_96 dst_reg_4_113)))
 (let (($x295 (= and.i156.i_4_76 dst_reg_4_112)))
 (let (($x285 (= or.i_4_71 dst_reg_4_111)))
 (let (($x284 (= dst_reg_4_3 dst_reg_4_110)))
 (let (($x283 (= dst_reg_4_2 dst_reg_4_109)))
 (let (($x282 (= dst_reg_4_1 dst_reg_4_108)))
 (let (($x281 (= (_ bv1 32) dst_reg_4_107)))
 (let (($x280 (= src_reg_4_27 src_reg_4_134)))
 (let (($x279 (= src_reg_4_26 src_reg_4_133)))
 (let (($x278 (= src_reg_4_25 src_reg_4_132)))
 (let (($x277 (= src_reg_4_24 src_reg_4_131)))
 (let (($x276 (= src_reg_4_23 src_reg_4_130)))
 (let (($x275 (= src_reg_4_22 src_reg_4_129)))
 (let (($x274 (= src_reg_4_21 src_reg_4_128)))
 (let (($x273 (= src_reg_4_20 src_reg_4_127)))
 (let (($x272 (= src_reg_4_19 src_reg_4_126)))
 (let (($x271 (= src_reg_4_18 src_reg_4_125)))
 (let (($x270 (= src_reg_4_17 src_reg_4_124)))
 (let (($x269 (= src_reg_4_16 src_reg_4_123)))
 (let (($x268 (= src_reg_4_15 src_reg_4_122)))
 (let (($x267 (= (_ bv1 32) src_reg_4_121)))
 (let (($x734 (and $x267 $x268 $x269 $x270 $x271 $x272 $x273 $x274 $x275 $x276 $x277 $x278 $x279 $x280 $x281 $x282 $x283 $x284 $x285 $x295 $x296 $x297 $x298 $x299 $x291 $x292 $x293 $x294)))
 (let (($x735 (=> $x714 $x734)))
 (let (($x290 (= or.i_4_71 dst_reg_4_116)))
 (let (($x289 (= or.i_4_71 dst_reg_4_115)))
 (let (($x288 (= or.i_4_71 dst_reg_4_114)))
 (let (($x287 (= or.i_4_71 dst_reg_4_113)))
 (let (($x286 (= (_ bv0 64) dst_reg_4_112)))
 (let (($x732 (and $x267 $x268 $x269 $x270 $x271 $x272 $x273 $x274 $x275 $x276 $x277 $x278 $x279 $x280 $x281 $x282 $x283 $x284 $x285 $x286 $x287 $x288 $x289 $x290 $x291 $x292 $x293 $x294)))
 (let (($x733 (=> $x713 $x732)))
 (let (($x305 (= cmp.i323.i_4_137 (_ bv1 1))))
 (let (($x306 (ite (bvsgt i.i322.i_4_135 (_ bv18446744073709551615 64)) $x305 $x304)))
 (let (($x301 (= dst_reg_4_113 i.i322.i_4_135)))
 (let (($x830 (=> $x715 (and $x301 $x306 $x733 $x735))))
 (let (($x332 (= cmp8.i.i_4_146 (_ bv1 1))))
 (let (($x337 (ite $x332 (= cond12.i.i_4_147 i35.i.i_4_144) (= cond12.i.i_4_147 i36.i.i_4_145))))
 (let (($x331 (= cmp8.i.i_4_146 (_ bv0 1))))
 (let (($x333 (ite (bvult i35.i.i_4_144 i36.i.i_4_145) $x332 $x331)))
 (let (($x328 (= dst_reg_4_116 i36.i.i_4_145)))
 (let (($x326 (= dst_reg_4_114 i35.i.i_4_144)))
 (let (($x319 (= cmp3.i.i_4_142 (_ bv1 1))))
 (let (($x324 (ite $x319 (= cond.i327.i_4_143 i.i322.i_4_135) (= cond.i327.i_4_143 i34.i.i_4_141))))
 (let (($x318 (= cmp3.i.i_4_142 (_ bv0 1))))
 (let (($x320 (ite (bvugt i.i322.i_4_135 i34.i.i_4_141) $x319 $x318)))
 (let (($x315 (= dst_reg_4_115 i34.i.i_4_141)))
 (let (($x716 (and $x305 $x715)))
 (let (($x718 (and $x312 $x717)))
 (let (($x720 (or $x718 $x716)))
 (let (($x828 (=> $x720 (and $x315 $x320 $x324 $x326 $x328 $x333 $x337))))
 (let (($x118 (= or.cond199.i_4_49 (_ bv1 1))))
 (let (($x120 (ite (= or.cond198.i_4_46 (_ bv1 1)) $x118 (= or.cond199.i_4_49 cmp24.i_4_47))))
 (let (($x113 (= cmp24.i_4_47 (_ bv0 1))))
 (let (($x114 (= cmp24.i_4_47 (_ bv1 1))))
 (let (($x115 (ite $x112 $x114 $x113)))
 (let (($x110 (= or.cond198.i_4_46 (bvor cmp21.i_4_45 or.cond197.i_4_44))))
 (let (($x105 (= cmp21.i_4_45 (_ bv0 1))))
 (let (($x106 (= cmp21.i_4_45 (_ bv1 1))))
 (let (($x107 (ite $x104 $x106 $x105)))
 (let (($x92 (= cmp16.not.i_4_41 (_ bv1 1))))
 (let (($x102 (ite $x92 (= or.cond197.i_4_44 (_ bv1 1)) (= or.cond197.i_4_44 cmp18.not.i_4_42))))
 (let (($x96 (= cmp18.not.i_4_42 (_ bv0 1))))
 (let (($x97 (= cmp18.not.i_4_42 (_ bv1 1))))
 (let (($x95 (and (distinct src_reg1.sroa.17.0.copyload_4_34 src_reg1.sroa.22.0.copyload_4_35) true)))
 (let (($x98 (ite $x95 $x97 $x96)))
 (let (($x91 (= cmp16.not.i_4_41 (_ bv0 1))))
 (let (($x90 (and (distinct src_reg1.sroa.13.0.copyload_4_32 src_reg1.sroa.15.0.copyload_4_33) true)))
 (let (($x93 (ite $x90 $x92 $x91)))
 (let (($x826 (=> $x80 (and $x93 $x98 $x102 $x107 $x110 $x115 $x120))))
 (let (($x233 (= cmp31.i182.i_4_105 (_ bv1 1))))
 (let (($x238 (ite $x233 (= cond35.i183.i_4_106 or230.i_4_80) (= cond35.i183.i_4_106 or29.i181.i_4_104))))
 (let (($x232 (= cmp31.i182.i_4_105 (_ bv0 1))))
 (let (($x234 (ite (bvult or230.i_4_80 or29.i181.i_4_104) $x233 $x232)))
 (let ((?x163 (bvor or.i_4_71 or3.i154.i_4_73)))
 (let (($x229 (= or29.i181.i_4_104 ?x163)))
 (let (($x222 (= cmp19.i177.i_4_102 (_ bv1 1))))
 (let (($x227 (ite $x222 (= cond23.i178.i_4_103 cond225.i_4_79) (= cond23.i178.i_4_103 or.i_4_71))))
 (let (($x221 (= cmp19.i177.i_4_102 (_ bv0 1))))
 (let (($x223 (ite (bvugt cond225.i_4_79 or.i_4_71) $x222 $x221)))
 (let (($x213 (= cmp10.i173.i_4_100 (_ bv1 1))))
 (let (($x218 (ite $x213 (= cond14.i174.i_4_101 .or230.i_4_91) (= cond14.i174.i_4_101 or8.i172.i_4_99))))
 (let (($x212 (= cmp10.i173.i_4_100 (_ bv0 1))))
 (let (($x214 (ite (bvslt .or230.i_4_91 or8.i172.i_4_99) $x213 $x212)))
 (let (($x209 (= or8.i172.i_4_99 (bvor and7.i171.i_4_98 or.i_4_71))))
 (let (($x206 (= and7.i171.i_4_98 (bvand and.i156.i_4_76 (_ bv9223372036854775807 64)))))
 (let (($x198 (= cmp.i167.i_4_95 (_ bv1 1))))
 (let (($x203 (ite $x198 (= cond.i168.i_4_96 .cond225.i_4_89) (= cond.i168.i_4_96 or.i166.i_4_94))))
 (let (($x197 (= cmp.i167.i_4_95 (_ bv0 1))))
 (let (($x199 (ite (bvsgt .cond225.i_4_89 or.i166.i_4_94) $x198 $x197)))
 (let (($x194 (= or.i166.i_4_94 (bvor and.i165.i_4_93 or.i_4_71))))
 (let (($x191 (= and.i165.i_4_93 (bvand and.i156.i_4_76 (_ bv9223372036854775808 64)))))
 (let (($x179 (= or.cond4.i_4_87 (_ bv1 1))))
 (let (($x188 (ite $x179 (= .or230.i_4_91 (_ bv9223372036854775807 64)) (= .or230.i_4_91 or230.i_4_80))))
 (let (($x184 (ite $x179 (= .cond225.i_4_89 (_ bv9223372036854775808 64)) (= .cond225.i_4_89 cond225.i_4_79))))
 (let (($x170 (= cmp233.i_4_83 (_ bv1 1))))
 (let (($x180 (ite $x170 $x179 (= or.cond4.i_4_87 cmp236.i_4_85))))
 (let (($x174 (= cmp236.i_4_85 (_ bv0 1))))
 (let (($x175 (= cmp236.i_4_85 (_ bv1 1))))
 (let (($x176 (ite (bvslt src_reg1.sroa.13.0.copyload_4_32 (_ bv0 64)) $x175 $x174)))
 (let (($x169 (= cmp233.i_4_83 (_ bv0 1))))
 (let (($x171 (ite (bvslt i260.i_4_81 (_ bv0 64)) $x170 $x169)))
 (let (($x166 (= dst_reg_4_6 i260.i_4_81)))
 (let (($x164 (= or230.i_4_80 ?x163)))
 (let (($x156 (= cmp220.i_4_78 (_ bv1 1))))
 (let (($x161 (ite $x156 (= cond225.i_4_79 i258.i_4_77) (= cond225.i_4_79 src_reg1.sroa.17.0.copyload_4_34))))
 (let (($x155 (= cmp220.i_4_78 (_ bv0 1))))
 (let (($x157 (ite (bvugt i258.i_4_77 src_reg1.sroa.17.0.copyload_4_34) $x156 $x155)))
 (let (($x152 (= dst_reg_4_8 i258.i_4_77)))
 (let (($x150 (= and.i156.i_4_76 (bvand or3.i154.i_4_73 neg.i155.i_4_75))))
 (let (($x147 (= neg.i155.i_4_75 (bvxor or.i_4_71 (_ bv18446744073709551615 64)))))
 (let (($x144 (= or3.i154.i_4_73 (bvor i215.i_4_38 src_reg1.sroa.10.0.copyload_4_31))))
 (let (($x823 (and $x144 $x147 $x150 $x152 $x157 $x161 $x164 $x166 $x171 $x176 $x180 $x184 $x188 $x191 $x194 $x199 $x203 $x206 $x209 $x214 $x218 $x223 $x227 $x229 $x234 $x238)))
 (let (($x824 (=> $x714 $x823)))
 (let (($x141 (= or.i_4_71 (bvor i254.i_4_70 src_reg1.sroa.3.0.copyload_4_30))))
 (let (($x138 (= dst_reg_4_4 i254.i_4_70)))
 (let (($x821 (and $x138 $x141)))
 (let (($x822 (=> $x710 $x821)))
 (let (($x88 (ite (= i215.i_4_38 (_ bv0 64)) $x87 $x86)))
 (let (($x83 (= dst_reg_4_5 i215.i_4_38)))
 (let (($x81 (ite (= src_reg1.sroa.10.0.copyload_4_31 (_ bv0 64)) $x80 $x78)))
 (let (($x73 (= src_reg_4_23 src_reg1.sroa.22.0.copyload_4_35)))
 (let (($x71 (= src_reg_4_22 src_reg1.sroa.17.0.copyload_4_34)))
 (let (($x69 (= src_reg_4_21 src_reg1.sroa.15.0.copyload_4_33)))
 (let (($x67 (= src_reg_4_20 src_reg1.sroa.13.0.copyload_4_32)))
 (let (($x65 (= src_reg_4_19 src_reg1.sroa.10.0.copyload_4_31)))
 (let (($x63 (= src_reg_4_18 src_reg1.sroa.3.0.copyload_4_30)))
 (let (($x60 (= src_reg_4_27 src_reg_4_27)))
 (let (($x59 (= src_reg_4_26 src_reg_4_26)))
 (let (($x58 (= src_reg_4_25 src_reg_4_25)))
 (let (($x57 (= src_reg_4_24 src_reg_4_24)))
 (let (($x56 (= src_reg_4_23 src_reg_4_23)))
 (let (($x55 (= src_reg_4_22 src_reg_4_22)))
 (let (($x54 (= src_reg_4_21 src_reg_4_21)))
 (let (($x53 (= src_reg_4_20 src_reg_4_20)))
 (let (($x52 (= src_reg_4_19 src_reg_4_19)))
 (let (($x51 (= src_reg_4_18 src_reg_4_18)))
 (let (($x50 (= src_reg_4_17 src_reg_4_17)))
 (let (($x49 (= src_reg_4_16 src_reg_4_16)))
 (let (($x48 (= src_reg_4_15 src_reg_4_15)))
 (let (($x47 (= src_reg_4_14 src_reg_4_14)))
 (let (($x32 (= dst_reg_4_13 dst_reg_4_13)))
 (let (($x31 (= dst_reg_4_12 dst_reg_4_12)))
 (let (($x30 (= dst_reg_4_11 dst_reg_4_11)))
 (let (($x29 (= dst_reg_4_10 dst_reg_4_10)))
 (let (($x28 (= dst_reg_4_9 dst_reg_4_9)))
 (let (($x27 (= dst_reg_4_8 dst_reg_4_8)))
 (let (($x26 (= dst_reg_4_7 dst_reg_4_7)))
 (let (($x25 (= dst_reg_4_6 dst_reg_4_6)))
 (let (($x24 (= dst_reg_4_5 dst_reg_4_5)))
 (let (($x23 (= dst_reg_4_4 dst_reg_4_4)))
 (let (($x22 (= dst_reg_4_3 dst_reg_4_3)))
 (let (($x21 (= dst_reg_4_2 dst_reg_4_2)))
 (let (($x20 (= dst_reg_4_1 dst_reg_4_1)))
 (let (($x19 (= dst_reg_4_0 dst_reg_4_0)))
 (let (($x425 (= dst_reg_4_120 dst_reg_4_171)))
 (let (($x424 (= dst_reg_4_119 dst_reg_4_170)))
 (let (($x423 (= dst_reg_4_118 dst_reg_4_169)))
 (let (($x422 (= dst_reg_4_117 dst_reg_4_168)))
 (let (($x432 (= dst_reg_4_116 dst_reg_4_167)))
 (let (($x435 (= cond40.i.i_4_157 dst_reg_4_166)))
 (let (($x434 (= i37.i.i_4_148 dst_reg_4_165)))
 (let (($x433 (= cond40.i.i_4_157 dst_reg_4_164)))
 (let (($x417 (= dst_reg_4_112 dst_reg_4_163)))
 (let (($x416 (= dst_reg_4_111 dst_reg_4_162)))
 (let (($x415 (= dst_reg_4_110 dst_reg_4_161)))
 (let (($x414 (= dst_reg_4_109 dst_reg_4_160)))
 (let (($x413 (= dst_reg_4_108 dst_reg_4_159)))
 (let (($x412 (= dst_reg_4_107 dst_reg_4_158)))
 (let (($x411 (= src_reg_4_134 src_reg_4_185)))
 (let (($x410 (= src_reg_4_133 src_reg_4_184)))
 (let (($x409 (= src_reg_4_132 src_reg_4_183)))
 (let (($x408 (= src_reg_4_131 src_reg_4_182)))
 (let (($x407 (= src_reg_4_130 src_reg_4_181)))
 (let (($x406 (= src_reg_4_129 src_reg_4_180)))
 (let (($x405 (= src_reg_4_128 src_reg_4_179)))
 (let (($x404 (= src_reg_4_127 src_reg_4_178)))
 (let (($x403 (= src_reg_4_126 src_reg_4_177)))
 (let (($x402 (= src_reg_4_125 src_reg_4_176)))
 (let (($x401 (= src_reg_4_124 src_reg_4_175)))
 (let (($x400 (= src_reg_4_123 src_reg_4_174)))
 (let (($x399 (= src_reg_4_122 src_reg_4_173)))
 (let (($x398 (= src_reg_4_121 src_reg_4_172)))
 (let (($x742 (and $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x417 $x433 $x434 $x435 $x432 $x422 $x423 $x424 $x425)))
 (let (($x722 (and $x342 $x719)))
 (let (($x359 (= cmp31.i330.i_4_155 (_ bv1 1))))
 (let (($x724 (and $x359 $x722)))
 (let (($x743 (=> $x724 $x742)))
 (let (($x428 (= dst_reg_4_115 dst_reg_4_166)))
 (let (($x431 (= dst_reg_4_114 dst_reg_4_165)))
 (let (($x430 (= dst_reg_4_113 dst_reg_4_164)))
 (let (($x740 (and $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x417 $x430 $x431 $x428 $x432 $x422 $x423 $x424 $x425)))
 (let (($x358 (= cmp31.i330.i_4_155 (_ bv0 1))))
 (let (($x725 (and $x358 $x722)))
 (let (($x741 (=> $x725 $x740)))
 (let (($x429 (= cond27.i.i_4_153 dst_reg_4_167)))
 (let (($x427 (= cond27.i.i_4_153 dst_reg_4_165)))
 (let (($x426 (= i38.i.i_4_151 dst_reg_4_164)))
 (let (($x738 (and $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x417 $x426 $x427 $x428 $x429 $x422 $x423 $x424 $x425)))
 (let (($x721 (and $x343 $x719)))
 (let (($x739 (=> $x721 $x738)))
 (let (($x421 (= cond12.i.i_4_147 dst_reg_4_167)))
 (let (($x420 (= cond.i327.i_4_143 dst_reg_4_166)))
 (let (($x419 (= cond12.i.i_4_147 dst_reg_4_165)))
 (let (($x418 (= cond.i327.i_4_143 dst_reg_4_164)))
 (let (($x736 (and $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x417 $x418 $x419 $x420 $x421 $x422 $x423 $x424 $x425)))
 (let (($x737 (=> $x720 $x736)))
 (let (($x445 (= cmp.i.i.i.i_4_190 (_ bv0 1))))
 (let (($x446 (= cmp.i.i.i.i_4_190 (_ bv1 1))))
 (let (($x447 (ite (= xor.i.i.i_4_188 (_ bv0 64)) $x446 $x445)))
 (let (($x442 (= xor.i.i.i_4_188 (bvxor i5.i.i_4_187 i.i333.i_4_186))))
 (let (($x439 (= dst_reg_4_167 i5.i.i_4_187)))
 (let (($x437 (= dst_reg_4_166 i.i333.i_4_186)))
 (let (($x727 (or $x724 (or $x725 (or $x721 $x720)))))
 (let (($x820 (=> $x727 (and $x437 $x439 $x442 $x447 $x737 $x739 $x741 $x743))))
 (let (($x350 (= cmp23.i.i_4_152 (_ bv1 1))))
 (let (($x355 (ite $x350 (= cond27.i.i_4_153 i33.i.i_4_138) (= cond27.i.i_4_153 i37.i.i_4_148))))
 (let (($x349 (= cmp23.i.i_4_152 (_ bv0 1))))
 (let (($x351 (ite (bvult i33.i.i_4_138 i37.i.i_4_148) $x350 $x349)))
 (let (($x818 (=> $x721 (and $x351 $x355))))
 (let (($x816 (=> $x722 (and (ite (bvslt i38.i.i_4_151 (_ bv0 64)) $x359 $x358)))))
 (let (($x569 (= phi.bo_4_236 (bvand add.i.i.i335.i_4_234 (_ bv255 32)))))
 (let (($x565 (= add.i.i.i335.i_4_234 (bvadd num.4.i.i.i.i.i_4_230 i.i.i.i.i.i.neg_4_233))))
 (let (($x562 (= i.i.i.i.i.i.neg_4_233 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_4_232))))
 (let (($x559 (= word.addr.4.lobit.i.i.i.i.i.neg_4_232 (bvlshr word.addr.4.i.i.i.i.i_4_229 (_ bv63 64)))))
 (let (($x538 (= tobool20.not.i.i.i.i.i_4_224 (_ bv1 1))))
 (let (($x555 (ite $x538 (= num.4.i.i.i.i.i_4_230 sub22.i.i.i.i.i_4_226) (= num.4.i.i.i.i.i_4_230 num.3.i.i.i.i.i_4_222))))
 (let (($x551 (ite $x538 (= word.addr.4.i.i.i.i.i_4_229 shl23.i.i.i.i.i_4_228) (= word.addr.4.i.i.i.i.i_4_229 word.addr.3.i.i.i.i.i_4_221))))
 (let (($x547 (= shl23.i.i.i.i.i_4_228 (bvshl word.addr.3.i.i.i.i.i_4_221 (_ bv2 64)))))
 (let (($x543 (= sub22.i.i.i.i.i_4_226 (bvadd num.3.i.i.i.i.i_4_222 (_ bv254 32)))))
 (let (($x537 (= tobool20.not.i.i.i.i.i_4_224 (_ bv0 1))))
 (let (($x539 (ite (bvult word.addr.3.i.i.i.i.i_4_221 (_ bv4611686018427387904 64)) $x538 $x537)))
 (let (($x516 (= tobool14.not.i.i.i.i.i_4_216 (_ bv1 1))))
 (let (($x533 (ite $x516 (= num.3.i.i.i.i.i_4_222 sub16.i.i.i.i.i_4_218) (= num.3.i.i.i.i.i_4_222 num.2.i.i.i.i.i_4_214))))
 (let (($x529 (ite $x516 (= word.addr.3.i.i.i.i.i_4_221 shl17.i.i.i.i.i_4_220) (= word.addr.3.i.i.i.i.i_4_221 word.addr.2.i.i.i.i.i_4_213))))
 (let (($x525 (= shl17.i.i.i.i.i_4_220 (bvshl word.addr.2.i.i.i.i.i_4_213 (_ bv4 64)))))
 (let (($x521 (= sub16.i.i.i.i.i_4_218 (bvadd num.2.i.i.i.i.i_4_214 (_ bv4294967292 32)))))
 (let (($x515 (= tobool14.not.i.i.i.i.i_4_216 (_ bv0 1))))
 (let (($x517 (ite (bvult word.addr.2.i.i.i.i.i_4_213 (_ bv1152921504606846976 64)) $x516 $x515)))
 (let (($x494 (= tobool8.not.i.i.i.i.i_4_208 (_ bv1 1))))
 (let (($x511 (ite $x494 (= num.2.i.i.i.i.i_4_214 sub10.i.i.i.i.i_4_210) (= num.2.i.i.i.i.i_4_214 num.1.i.i.i.i.i_4_206))))
 (let (($x507 (ite $x494 (= word.addr.2.i.i.i.i.i_4_213 shl11.i.i.i.i.i_4_212) (= word.addr.2.i.i.i.i.i_4_213 word.addr.1.i.i.i.i.i_4_205))))
 (let (($x503 (= shl11.i.i.i.i.i_4_212 (bvshl word.addr.1.i.i.i.i.i_4_205 (_ bv8 64)))))
 (let (($x499 (= sub10.i.i.i.i.i_4_210 (bvadd num.1.i.i.i.i.i_4_206 (_ bv4294967288 32)))))
 (let (($x493 (= tobool8.not.i.i.i.i.i_4_208 (_ bv0 1))))
 (let (($x495 (ite (bvult word.addr.1.i.i.i.i.i_4_205 (_ bv72057594037927936 64)) $x494 $x493)))
 (let (($x472 (= tobool2.not.i.i.i.i.i_4_200 (_ bv1 1))))
 (let (($x489 (ite $x472 (= num.1.i.i.i.i.i_4_206 sub4.i.i.i.i.i_4_202) (= num.1.i.i.i.i.i_4_206 spec.select17.i.i.i.i.i_4_198))))
 (let (($x485 (ite $x472 (= word.addr.1.i.i.i.i.i_4_205 shl5.i.i.i.i.i_4_204) (= word.addr.1.i.i.i.i.i_4_205 spec.select.i.i.i.i.i_4_195))))
 (let (($x481 (= shl5.i.i.i.i.i_4_204 (bvshl spec.select.i.i.i.i.i_4_195 (_ bv16 64)))))
 (let (($x477 (= sub4.i.i.i.i.i_4_202 (bvadd spec.select17.i.i.i.i.i_4_198 (_ bv4294967280 32)))))
 (let (($x471 (= tobool2.not.i.i.i.i.i_4_200 (_ bv0 1))))
 (let (($x473 (ite (bvult spec.select.i.i.i.i.i_4_195 (_ bv281474976710656 64)) $x472 $x471)))
 (let (($x452 (= tobool.not.i.i.i.i.i_4_192 (_ bv1 1))))
 (let (($x467 (ite $x452 (= spec.select17.i.i.i.i.i_4_198 (_ bv31 32)) (= spec.select17.i.i.i.i.i_4_198 (_ bv63 32)))))
 (let (($x461 (ite $x452 (= spec.select.i.i.i.i.i_4_195 shl.i.i.i.i.i_4_194) (= spec.select.i.i.i.i.i_4_195 xor.i.i.i_4_188))))
 (let (($x457 (= shl.i.i.i.i.i_4_194 (bvshl xor.i.i.i_4_188 (_ bv32 64)))))
 (let (($x451 (= tobool.not.i.i.i.i.i_4_192 (_ bv0 1))))
 (let (($x453 (ite (bvult xor.i.i.i_4_188 (_ bv4294967296 64)) $x452 $x451)))
 (let (($x813 (and $x453 $x457 $x461 $x467 $x473 $x477 $x481 $x485 $x489 $x495 $x499 $x503 $x507 $x511 $x517 $x521 $x525 $x529 $x533 $x539 $x543 $x547 $x551 $x555 $x559 $x562 $x565 $x569)))
 (let (($x729 (and $x445 $x727)))
 (let (($x814 (=> $x729 $x813)))
 (let (($x364 (= cmp36.i.i_4_156 (_ bv1 1))))
 (let (($x369 (ite $x364 (= cond40.i.i_4_157 i.i322.i_4_135) (= cond40.i.i_4_157 i38.i.i_4_151))))
 (let (($x363 (= cmp36.i.i_4_156 (_ bv0 1))))
 (let (($x365 (ite (bvugt i.i322.i_4_135 i38.i.i_4_151) $x364 $x363)))
 (let (($x812 (=> $x724 (and $x365 $x369))))
 (let (($x728 (and $x446 $x727)))
 (let (($x745 (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238 $x728)))
 (let (($x744 (= if.end.i.i.i.i___reg_bound_offset.exit.i_4_237 $x729)))
 (let (($x617 (= and4.i.i.i_4_259 (bvand or.i.i.i_4_255 neg.i.i.i_4_258))))
 (let (($x614 (= neg.i.i.i_4_258 (bvxor and.i1.i.i_4_256 (_ bv18446744073709551615 64)))))
 (let (($x611 (= and.i1.i.i_4_256 (bvand retval.sroa.3.0.i.i.i_4_252 i11.i.i_4_254))))
 (let (($x608 (= or.i.i.i_4_255 (bvor retval.sroa.0.0.i.i.i_4_250 i9.i.i_4_253))))
 (let (($x605 (= dst_reg_4_112 i11.i.i_4_254)))
 (let (($x603 (= dst_reg_4_111 i9.i.i_4_253)))
 (let (($x580 (= cmp.i.i.i_4_242 (_ bv1 1))))
 (let (($x601 (ite $x580 (= retval.sroa.3.0.i.i.i_4_252 (_ bv18446744073709551615 64)) (= retval.sroa.3.0.i.i.i_4_252 sub.i.i.i_4_247))))
 (let (($x597 (ite $x580 (= retval.sroa.0.0.i.i.i_4_250 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_4_250 and.i.i336.i_4_248))))
 (let (($x593 (= and.i.i336.i_4_248 (bvand notmask.i.i.i_4_245 i.i333.i_4_186))))
 (let (($x590 (= sub.i.i.i_4_247 (bvxor notmask.i.i.i_4_245 (_ bv18446744073709551615 64)))))
 (let (($x587 (= notmask.i.i.i_4_245 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_4_243))))
 (let (($x584 (= sh_prom.i.i.i_4_243 ((_ zero_extend 32) retval.0.i.i.i.i_4_239))))
 (let (($x579 (= cmp.i.i.i_4_242 (_ bv0 1))))
 (let (($x581 (ite (bvugt retval.0.i.i.i.i_4_239 (_ bv63 32)) $x580 $x579)))
 (let (($x575 (= retval.0.i.i.i.i_4_239 (_ bv0 32))))
 (let (($x576 (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_4_238 $x575)))
 (let (($x573 (= retval.0.i.i.i.i_4_239 phi.bo_4_236)))
 (let (($x574 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_4_237 $x573)))
 (let (($x809 (and $x574 $x576 $x581 $x584 $x587 $x590 $x593 $x597 $x601 $x603 $x605 $x608 $x611 $x614 $x617 $x744 $x745)))
 (let (($x730 (or $x729 $x728)))
 (let (($x810 (=> $x730 $x809)))
 (let (($x806 (= src_reg_4_287 src_reg_4_315)))
 (let (($x805 (= src_reg_4_286 src_reg_4_314)))
 (let (($x804 (= src_reg_4_285 src_reg_4_313)))
 (let (($x803 (= src_reg_4_284 src_reg_4_312)))
 (let (($x802 (= src_reg_4_283 src_reg_4_311)))
 (let (($x801 (= src_reg_4_282 src_reg_4_310)))
 (let (($x800 (= src_reg_4_281 src_reg_4_309)))
 (let (($x799 (= src_reg_4_280 src_reg_4_308)))
 (let (($x798 (= src_reg_4_279 src_reg_4_307)))
 (let (($x797 (= src_reg_4_278 src_reg_4_306)))
 (let (($x796 (= src_reg_4_277 src_reg_4_305)))
 (let (($x795 (= src_reg_4_276 src_reg_4_304)))
 (let (($x794 (= src_reg_4_275 src_reg_4_303)))
 (let (($x793 (= src_reg_4_274 src_reg_4_302)))
 (let (($x778 (= dst_reg_4_273 dst_reg_4_301)))
 (let (($x777 (= dst_reg_4_272 dst_reg_4_300)))
 (let (($x776 (= dst_reg_4_271 dst_reg_4_299)))
 (let (($x775 (= dst_reg_4_270 dst_reg_4_298)))
 (let (($x774 (= dst_reg_4_269 dst_reg_4_297)))
 (let (($x773 (= dst_reg_4_268 dst_reg_4_296)))
 (let (($x772 (= dst_reg_4_267 dst_reg_4_295)))
 (let (($x771 (= dst_reg_4_266 dst_reg_4_294)))
 (let (($x770 (= dst_reg_4_265 dst_reg_4_293)))
 (let (($x769 (= dst_reg_4_264 dst_reg_4_292)))
 (let (($x768 (= dst_reg_4_263 dst_reg_4_291)))
 (let (($x767 (= dst_reg_4_262 dst_reg_4_290)))
 (let (($x766 (= dst_reg_4_261 dst_reg_4_289)))
 (let (($x765 (= dst_reg_4_260 dst_reg_4_288)))
 (let (($x673 (= dst_reg_4_13 dst_reg_4_273)))
 (let (($x672 (= dst_reg_4_12 dst_reg_4_272)))
 (let (($x671 (= dst_reg_4_11 dst_reg_4_271)))
 (let (($x670 (= (_ bv0 32) dst_reg_4_270)))
 (let (($x669 (= (_ bv18446744073709551615 64) dst_reg_4_269)))
 (let (($x668 (= (_ bv0 64) dst_reg_4_268)))
 (let (($x667 (= (_ bv9223372036854775807 64) dst_reg_4_267)))
 (let (($x666 (= (_ bv9223372036854775808 64) dst_reg_4_266)))
 (let (($x665 (= (_ bv18446744073709551615 64) dst_reg_4_265)))
 (let (($x664 (= (_ bv0 64) dst_reg_4_264)))
 (let (($x663 (= dst_reg_4_3 dst_reg_4_263)))
 (let (($x662 (= dst_reg_4_2 dst_reg_4_262)))
 (let (($x661 (= dst_reg_4_1 dst_reg_4_261)))
 (let (($x660 (= (_ bv1 32) dst_reg_4_260)))
 (let (($x659 (= src_reg_4_27 src_reg_4_287)))
 (let (($x658 (= src_reg_4_26 src_reg_4_286)))
 (let (($x657 (= src_reg_4_25 src_reg_4_285)))
 (let (($x656 (= src_reg_4_24 src_reg_4_284)))
 (let (($x655 (= src_reg_4_23 src_reg_4_283)))
 (let (($x654 (= src_reg_4_22 src_reg_4_282)))
 (let (($x653 (= src_reg_4_21 src_reg_4_281)))
 (let (($x652 (= src_reg_4_20 src_reg_4_280)))
 (let (($x651 (= src_reg_4_19 src_reg_4_279)))
 (let (($x650 (= src_reg_4_18 src_reg_4_278)))
 (let (($x649 (= src_reg_4_17 src_reg_4_277)))
 (let (($x648 (= src_reg_4_16 src_reg_4_276)))
 (let (($x647 (= src_reg_4_15 src_reg_4_275)))
 (let (($x646 (= (_ bv1 32) src_reg_4_274)))
 (let (($x746 (and $x646 $x647 $x648 $x649 $x650 $x651 $x652 $x653 $x654 $x655 $x656 $x657 $x658 $x659 $x660 $x661 $x662 $x663 $x664 $x665 $x666 $x667 $x668 $x669 $x670 $x671 $x672 $x673)))
 (let (($x711 (and $x78 $x709)))
 (let (($x750 (=> $x711 $x746)))
 (let (($x701 (= dst_reg_4_171 dst_reg_4_273)))
 (let (($x700 (= dst_reg_4_170 dst_reg_4_272)))
 (let (($x699 (= dst_reg_4_169 dst_reg_4_271)))
 (let (($x698 (= dst_reg_4_168 dst_reg_4_270)))
 (let (($x697 (= dst_reg_4_167 dst_reg_4_269)))
 (let (($x696 (= dst_reg_4_166 dst_reg_4_268)))
 (let (($x695 (= dst_reg_4_165 dst_reg_4_267)))
 (let (($x694 (= dst_reg_4_164 dst_reg_4_266)))
 (let (($x693 (= and.i1.i.i_4_256 dst_reg_4_265)))
 (let (($x692 (= and4.i.i.i_4_259 dst_reg_4_264)))
 (let (($x691 (= dst_reg_4_161 dst_reg_4_263)))
 (let (($x690 (= dst_reg_4_160 dst_reg_4_262)))
 (let (($x689 (= dst_reg_4_159 dst_reg_4_261)))
 (let (($x688 (= dst_reg_4_158 dst_reg_4_260)))
 (let (($x687 (= src_reg_4_185 src_reg_4_287)))
 (let (($x686 (= src_reg_4_184 src_reg_4_286)))
 (let (($x685 (= src_reg_4_183 src_reg_4_285)))
 (let (($x684 (= src_reg_4_182 src_reg_4_284)))
 (let (($x683 (= src_reg_4_181 src_reg_4_283)))
 (let (($x682 (= src_reg_4_180 src_reg_4_282)))
 (let (($x681 (= src_reg_4_179 src_reg_4_281)))
 (let (($x680 (= src_reg_4_178 src_reg_4_280)))
 (let (($x679 (= src_reg_4_177 src_reg_4_279)))
 (let (($x678 (= src_reg_4_176 src_reg_4_278)))
 (let (($x677 (= src_reg_4_175 src_reg_4_277)))
 (let (($x676 (= src_reg_4_174 src_reg_4_276)))
 (let (($x675 (= src_reg_4_173 src_reg_4_275)))
 (let (($x674 (= src_reg_4_172 src_reg_4_274)))
 (let (($x748 (and $x674 $x675 $x676 $x677 $x678 $x679 $x680 $x681 $x682 $x683 $x684 $x685 $x686 $x687 $x688 $x689 $x690 $x691 $x692 $x693 $x694 $x695 $x696 $x697 $x698 $x699 $x700 $x701)))
 (let (($x749 (=> $x730 $x748)))
 (let (($x703 (and $x118 $x80)))
 (let (($x706 (and $x131 $x78)))
 (let (($x708 (or $x706 $x703)))
 (let (($x747 (=> $x708 $x746)))
 (let (($x807 (and $x747 $x749 $x750 $x765 $x766 $x767 $x768 $x769 $x770 $x771 $x772 $x773 $x774 $x775 $x776 $x777 $x778 $x793 $x794 $x795 $x796 $x797 $x798 $x799 $x800 $x801 $x802 $x803 $x804 $x805 $x806)))
 (let (($x731 (or $x730 (or $x711 $x708))))
 (let (($x808 (=> $x731 $x807)))
 (and $x808 $x810 $x812 $x814 $x816 $x818 $x820 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x73 $x81 $x83 $x88 $x822 $x824 $x826 $x828 $x830 $x832 $x834 $x836)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR/BPF_OR.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR BPF_OR.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_OR 4 BPF_OR.smt2

Finished llvm_to_smt_pass
