Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32 BPF_OR_32.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_OR_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_OR_32
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0x1b7c930
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_OR_32'<<0x1b7c930>>  #uses=1
  CS<0x1c121b0> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_OR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32 BPF_OR_32.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_OR_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_OR_32'<<0x1312430>>  #uses=1
  CS<0x11a01f0> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_OR_32
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_OR_32
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_OR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32 BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_OR_32
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i28.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy1 = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy1, %struct.tnum* %var_off.i28.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_OR_32:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i29.i = bitcast %struct.tnum* %var_off.i28.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_OR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32 BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_OR_32
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_OR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32 BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_OR_32
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_OR_32'<<0xd157b0>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_OR_32
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_OR_32
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_OR_32 /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32 BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_OR_32 -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_OR_32
GLOBAL_BITVECTOR_SUFFIX: 16
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_0
[lookInsideStruct] singleValueType:dst_reg_16_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_1
[lookInsideStruct] singleValueType:dst_reg_16_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_2
[lookInsideStruct] singleValueType:dst_reg_16_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_3
[lookInsideStruct] singleValueType:dst_reg_16_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_4
[lookInsideStruct] singleValueType:dst_reg_16_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_5
[lookInsideStruct] singleValueType:dst_reg_16_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_6
[lookInsideStruct] singleValueType:dst_reg_16_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_7
[lookInsideStruct] singleValueType:dst_reg_16_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_8
[lookInsideStruct] singleValueType:dst_reg_16_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_9
[lookInsideStruct] singleValueType:dst_reg_16_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_10
[lookInsideStruct] singleValueType:dst_reg_16_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_11
[lookInsideStruct] singleValueType:dst_reg_16_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_12
[lookInsideStruct] singleValueType:dst_reg_16_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_13
[lookInsideStruct] singleValueType:dst_reg_16_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_14
[lookInsideStruct] singleValueType:src_reg_16_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_15
[lookInsideStruct] singleValueType:src_reg_16_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_16
[lookInsideStruct] singleValueType:src_reg_16_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_17
[lookInsideStruct] singleValueType:src_reg_16_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_18
[lookInsideStruct] singleValueType:src_reg_16_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_19
[lookInsideStruct] singleValueType:src_reg_16_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_20
[lookInsideStruct] singleValueType:src_reg_16_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_21
[lookInsideStruct] singleValueType:src_reg_16_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_22
[lookInsideStruct] singleValueType:src_reg_16_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_23
[lookInsideStruct] singleValueType:src_reg_16_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_24
[lookInsideStruct] singleValueType:src_reg_16_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_25
[lookInsideStruct] singleValueType:src_reg_16_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_26
[lookInsideStruct] singleValueType:src_reg_16_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_27
[lookInsideStruct] singleValueType:src_reg_16_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_16_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.3.0.copyload_16_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_16_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleLoadInst] (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_16_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_16_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleLoadInst] (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_16_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_16_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleLoadInst] (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_16_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_16_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleLoadInst] (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)

-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleLoadInst] pointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i18.i.i_16_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i18.i.i_16_34
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[handleLoadInst] (= dst_reg_16_4 i18.i.i_16_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)

-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleLoadInst] pointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i20.i.i_16_35
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i20.i.i_16_35
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[handleLoadInst] (= dst_reg_16_5 i20.i.i_16_35)
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)

-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i18.i.i = load i64, i64* %i.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType]   %i18.i.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i18.i.i_16_34
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i.i_16_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i.i_16_37
[handleBinaryOperatorInst] AND instruction
(= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i20.i.i = load i64, i64* %i19.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType]   %i20.i.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i20.i.i_16_35
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i.i_16_39
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i.i_16_39
[handleBinaryOperatorInst] AND instruction
(= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_16_37
[handleStoreInst] BVToStore: and.i.i.i_16_37
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i.i_16_37 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_16_39
[handleStoreInst] BVToStore: and6.i.i.i_16_39
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i.i_16_39 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i23.i.i_16_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i23.i.i_16_40
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[handleLoadInst] (= dst_reg_16_8 i23.i.i_16_40)
[printBBAssertionsMap] 
BasicBlock: entry, Size:37
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)

-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i24.i.i_16_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i24.i.i_16_41
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[handleLoadInst] (= dst_reg_16_9 i24.i.i_16_41)
[printBBAssertionsMap] 
BasicBlock: entry, Size:38
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)

-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_16_41
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_16_40
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i.i_16_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i.i_16_42
[handleBinaryOperatorInst] XOR instruction
(= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i.i = xor i64 %i24.i.i, %i23.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i.i_16_42
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i_16_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i_16_44
[handleICmpInst] (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType]   %i23.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i.i_16_40
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i_16_46
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i_16_46
[handleBinaryOperatorInst] AND instruction
(= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i = and i64 %i23.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i_16_46
[handleStoreInst] BVToStore: and6.i.i_16_46
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i_16_46 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType]   %i24.i.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i.i_16_41
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i.i_16_48
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i.i_16_48
[handleBinaryOperatorInst] AND instruction
(= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_50
[lookInsideStruct] singleValueType:dst_reg_16_50
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_51
[lookInsideStruct] singleValueType:dst_reg_16_51
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_52
[lookInsideStruct] singleValueType:dst_reg_16_52
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_53
[lookInsideStruct] singleValueType:dst_reg_16_53
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_54
[lookInsideStruct] singleValueType:dst_reg_16_54
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_55
[lookInsideStruct] singleValueType:dst_reg_16_55
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_56
[lookInsideStruct] singleValueType:dst_reg_16_56
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_57
[lookInsideStruct] singleValueType:dst_reg_16_57
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_58
[lookInsideStruct] singleValueType:dst_reg_16_58
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_59
[lookInsideStruct] singleValueType:dst_reg_16_59
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_60
[lookInsideStruct] singleValueType:dst_reg_16_60
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_61
[lookInsideStruct] singleValueType:dst_reg_16_61
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_62
[lookInsideStruct] singleValueType:dst_reg_16_62
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_63
[lookInsideStruct] singleValueType:dst_reg_16_63
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_64
[lookInsideStruct] singleValueType:src_reg_16_64
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_65
[lookInsideStruct] singleValueType:src_reg_16_65
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_66
[lookInsideStruct] singleValueType:src_reg_16_66
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_67
[lookInsideStruct] singleValueType:src_reg_16_67
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_68
[lookInsideStruct] singleValueType:src_reg_16_68
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_69
[lookInsideStruct] singleValueType:src_reg_16_69
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_70
[lookInsideStruct] singleValueType:src_reg_16_70
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_71
[lookInsideStruct] singleValueType:src_reg_16_71
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_72
[lookInsideStruct] singleValueType:src_reg_16_72
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_73
[lookInsideStruct] singleValueType:src_reg_16_73
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_74
[lookInsideStruct] singleValueType:src_reg_16_74
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_75
[lookInsideStruct] singleValueType:src_reg_16_75
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_76
[lookInsideStruct] singleValueType:src_reg_16_76
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_77
[lookInsideStruct] singleValueType:src_reg_16_77
[setupBVTreeForArg] returning BVTree: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i.i
[handleMemoryPhiNode] incomingAccessI: 5 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_16_64)
(= src_reg_16_15 src_reg_16_65)
(= src_reg_16_16 src_reg_16_66)
(= src_reg_16_17 src_reg_16_67)
(= src_reg_16_18 src_reg_16_68)
(= src_reg_16_19 src_reg_16_69)
(= src_reg_16_20 src_reg_16_70)
(= src_reg_16_21 src_reg_16_71)
(= src_reg_16_22 src_reg_16_72)
(= src_reg_16_23 src_reg_16_73)
(= src_reg_16_24 src_reg_16_74)
(= src_reg_16_25 src_reg_16_75)
(= src_reg_16_26 src_reg_16_76)
(= src_reg_16_27 src_reg_16_77)
(= #x00000001 dst_reg_16_50)
(= dst_reg_16_1 dst_reg_16_51)
(= dst_reg_16_2 dst_reg_16_52)
(= dst_reg_16_3 dst_reg_16_53)
(= and.i.i.i_16_37 dst_reg_16_54)
(= and6.i.i.i_16_39 dst_reg_16_55)
(= dst_reg_16_6 dst_reg_16_56)
(= dst_reg_16_7 dst_reg_16_57)
(= and6.i.i_16_46 dst_reg_16_58)
(= dst_reg_16_9 dst_reg_16_59)
(= dst_reg_16_10 dst_reg_16_60)
(= dst_reg_16_11 dst_reg_16_61)
(= dst_reg_16_12 dst_reg_16_62)
(= dst_reg_16_13 dst_reg_16_63)
]
[handleMemoryPhiNode] incomingBBI: if.else.i.i
[handleMemoryPhiNode] incomingAccessI: 6 = MemoryDef(4)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_16_64)
(= src_reg_16_15 src_reg_16_65)
(= src_reg_16_16 src_reg_16_66)
(= src_reg_16_17 src_reg_16_67)
(= src_reg_16_18 src_reg_16_68)
(= src_reg_16_19 src_reg_16_69)
(= src_reg_16_20 src_reg_16_70)
(= src_reg_16_21 src_reg_16_71)
(= src_reg_16_22 src_reg_16_72)
(= src_reg_16_23 src_reg_16_73)
(= src_reg_16_24 src_reg_16_74)
(= src_reg_16_25 src_reg_16_75)
(= src_reg_16_26 src_reg_16_76)
(= src_reg_16_27 src_reg_16_77)
(= #x00000001 dst_reg_16_50)
(= dst_reg_16_1 dst_reg_16_51)
(= dst_reg_16_2 dst_reg_16_52)
(= dst_reg_16_3 dst_reg_16_53)
(= and.i.i.i_16_37 dst_reg_16_54)
(= and6.i.i.i_16_39 dst_reg_16_55)
(= dst_reg_16_6 dst_reg_16_56)
(= dst_reg_16_7 dst_reg_16_57)
(= #x0000000000000000 dst_reg_16_58)
(= dst_reg_16_9 dst_reg_16_59)
(= dst_reg_16_10 dst_reg_16_60)
(= dst_reg_16_11 dst_reg_16_61)
(= dst_reg_16_12 dst_reg_16_62)
(= dst_reg_16_13 dst_reg_16_63)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_16_64)
  (= src_reg_16_15 src_reg_16_65)
  (= src_reg_16_16 src_reg_16_66)
  (= src_reg_16_17 src_reg_16_67)
  (= src_reg_16_18 src_reg_16_68)
  (= src_reg_16_19 src_reg_16_69)
  (= src_reg_16_20 src_reg_16_70)
  (= src_reg_16_21 src_reg_16_71)
  (= src_reg_16_22 src_reg_16_72)
  (= src_reg_16_23 src_reg_16_73)
  (= src_reg_16_24 src_reg_16_74)
  (= src_reg_16_25 src_reg_16_75)
  (= src_reg_16_26 src_reg_16_76)
  (= src_reg_16_27 src_reg_16_77)
  (= #x00000001 dst_reg_16_50)
  (= dst_reg_16_1 dst_reg_16_51)
  (= dst_reg_16_2 dst_reg_16_52)
  (= dst_reg_16_3 dst_reg_16_53)
  (= and.i.i.i_16_37 dst_reg_16_54)
  (= and6.i.i.i_16_39 dst_reg_16_55)
  (= dst_reg_16_6 dst_reg_16_56)
  (= dst_reg_16_7 dst_reg_16_57)
  (= #x0000000000000000 dst_reg_16_58)
  (= dst_reg_16_9 dst_reg_16_59)
  (= dst_reg_16_10 dst_reg_16_60)
  (= dst_reg_16_11 dst_reg_16_61)
  (= dst_reg_16_12 dst_reg_16_62)
  (= dst_reg_16_13 dst_reg_16_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_16_64)
  (= src_reg_16_15 src_reg_16_65)
  (= src_reg_16_16 src_reg_16_66)
  (= src_reg_16_17 src_reg_16_67)
  (= src_reg_16_18 src_reg_16_68)
  (= src_reg_16_19 src_reg_16_69)
  (= src_reg_16_20 src_reg_16_70)
  (= src_reg_16_21 src_reg_16_71)
  (= src_reg_16_22 src_reg_16_72)
  (= src_reg_16_23 src_reg_16_73)
  (= src_reg_16_24 src_reg_16_74)
  (= src_reg_16_25 src_reg_16_75)
  (= src_reg_16_26 src_reg_16_76)
  (= src_reg_16_27 src_reg_16_77)
  (= #x00000001 dst_reg_16_50)
  (= dst_reg_16_1 dst_reg_16_51)
  (= dst_reg_16_2 dst_reg_16_52)
  (= dst_reg_16_3 dst_reg_16_53)
  (= and.i.i.i_16_37 dst_reg_16_54)
  (= and6.i.i.i_16_39 dst_reg_16_55)
  (= dst_reg_16_6 dst_reg_16_56)
  (= dst_reg_16_7 dst_reg_16_57)
  (= and6.i.i_16_46 dst_reg_16_58)
  (= dst_reg_16_9 dst_reg_16_59)
  (= dst_reg_16_10 dst_reg_16_60)
  (= dst_reg_16_11 dst_reg_16_61)
  (= dst_reg_16_12 dst_reg_16_62)
  (= dst_reg_16_13 dst_reg_16_63)
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 4294967295
[getBool] returning unique bool w/ prefix: if.else.i.i_coerce_reg_to_size.exit.i_16_78
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_16_78
[handlePhiNodeSetupBitVecs] valueI:   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBool] returning unique bool w/ prefix: if.then.i.i_coerce_reg_to_size.exit.i_16_79
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_16_79
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_16_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_16_78
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i.i_16_80
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i.i_16_80
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i.i_coerce_reg_to_size.exit.i_16_78
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
[getBitVecSingValType]   %and8.i.i = and i64 %i24.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i.i_16_48
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i.i_coerce_reg_to_size.exit.i_16_79
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))

-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_16_80
[handleStoreInst] BVToStore: storemerge.i.i_16_80
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(56)
[handleStoreInst] definingMemoryAccess: 56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_59 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_16_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i27.i.i_16_82
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i27.i.i_16_82
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleLoadInst] (= dst_reg_16_58 i27.i.i_16_82)
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:3
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_16_82
[handleStoreInst] BVToStore: i27.i.i_16_82
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(56)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_56 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i.i_16_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i.i_16_80
[handleStoreInst] BVToStore: storemerge.i.i_16_80
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_57 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i.i_16_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_16_30
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i5.i_16_84
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i5.i_16_84
[handleBinaryOperatorInst] AND instruction
(= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_16_31
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i6.i_16_86
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i6.i_16_86
[handleBinaryOperatorInst] AND instruction
(= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] opResVal:   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_16_33
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_16_32
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i13.i_16_87
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i13.i_16_87
[handleBinaryOperatorInst] XOR instruction
(= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i13.i_16_87
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i15.i_16_89
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i15.i_16_89
[handleICmpInst] (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:7
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_16_32
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i16.i_16_91
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i16.i_16_91
[handleBinaryOperatorInst] AND instruction
(= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_16_33
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i17.i_16_93
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i17.i_16_93
[handleBinaryOperatorInst] AND instruction
(= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 

[handleSelectInst]SelectMap:
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_16_89
[getBitVecSingValType]   %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i16.i_16_91
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0_16_95
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0_16_95
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_16_89
[handleSelectInst] z3ExprSelectOp2: and6.i16.i_16_91
[handleSelectInst] z3ExprSelectOp3: #x0000000000000000
[handleSelectInst] z3ExprRes: src_reg1.sroa.17.0_16_95
[handleSelectInst](ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 9 = MemoryDef(8)
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 

[handleSelectInst]SelectMap:
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i15.i_16_89
[getBitVecSingValType]   %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i17.i_16_93
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i20.i_16_97
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i20.i_16_97
[handleSelectInst] z3ExprSelectOp1: cmp.i15.i_16_89
[handleSelectInst] z3ExprSelectOp2: and8.i17.i_16_93
[handleSelectInst] z3ExprSelectOp3: #x00000000ffffffff
[handleSelectInst] z3ExprRes: storemerge.i20.i_16_97
[handleSelectInst](ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i6.i_16_86
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_16_99
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_16_99
[handleICmpInst] (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:12
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %tobool.not.i25.i = icmp eq i64 %and6.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_16_39
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i25.i = icmp eq i64 %and6.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i25.i_16_101
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i25.i_16_101
[handleICmpInst] (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
[printBBAssertionsMap] 
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_16_95
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_16_97
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i.not_16_102
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i.not_16_102
[handleICmpInst] (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_16_95
[getBitVecSingValType]   %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i20.i_16_97
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_16_103
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_16_103
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_50 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i.i.repack, dst_reg, [5, 0]
smax_value.i.i, dst_reg, [7]
smin_value.i.i, dst_reg, [6]
umin_value.i.i, dst_reg, [8]
i.i.i, dst_reg, [5, 0]
umax_value.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] definingMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}

-------------------
  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(10)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_60 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_16_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_16_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(16)
[handleStoreInst] definingMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_16_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb201.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_50 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] definingMemoryAccess: 18 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_60 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_16_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_16_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] definingMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_16_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
sw.bb201.i
=========================
-------------------
  %or.i = or i64 %and.i.i.i, %and.i.i5.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i.i.i = and i64 %i18.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
[handleBinaryOperatorInst] opResVal:   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType]   %and.i.i.i = and i64 %i18.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i.i_16_37
[getBitVecSingValType]   %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i5.i_16_84
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i_16_120
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i_16_120
[handleBinaryOperatorInst] OR instruction
(= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
-------------------
  br i1 %tobool.not.i25.i, label %if.then207.i, label %if.end212.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then207.i
=========================
-------------------
  store i64 %or.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[handleStoreInst] BVToStore: or.i_16_120
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_16_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 0, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] definingMemoryAccess: 26 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}

-------------------
  store i64 %or.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[handleStoreInst] BVToStore: or.i_16_120
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] definingMemoryAccess: 27 = MemoryDef(26)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_16_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_16_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %or.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[handleStoreInst] BVToStore: or.i_16_120
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] definingMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_16_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_16_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %or.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[handleStoreInst] BVToStore: or.i_16_120
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_16_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end212.i
=========================
-------------------
  %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[handleBinaryOperatorInst] op1Val:   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[handleBinaryOperatorInst] opResVal:   %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType]   %and6.i.i.i = and i64 %i20.i.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i.i_16_39
[getBitVecSingValType]   %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i6.i_16_86
[getBitVecSingValType]   %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or3.i154.i_16_122
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or3.i154.i_16_122
[handleBinaryOperatorInst] OR instruction
(= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
-------------------
  %neg.i155.i = xor i64 %or.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i155.i = xor i64 %or.i, -1
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i155.i = xor i64 %or.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i155.i_16_124
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i155.i_16_124
[handleBinaryOperatorInst] XOR instruction
(= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
-------------------
  %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
[handleBinaryOperatorInst] op1Val:   %neg.i155.i = xor i64 %or.i, -1
[handleBinaryOperatorInst] opResVal:   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[getBitVecSingValType]   %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or3.i154.i_16_122
[getBitVecSingValType]   %neg.i155.i = xor i64 %or.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i155.i_16_124
[getBitVecSingValType]   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i156.i_16_125
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i156.i_16_125
[handleBinaryOperatorInst] AND instruction
(= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
-------------------
  store i64 %or.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[handleStoreInst] BVToStore: or.i_16_120
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_54 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or.i_16_120 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %and.i156.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i156.i_16_125
[handleStoreInst] BVToStore: and.i156.i_16_125
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] definingMemoryAccess: 31 = MemoryDef(9)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_55 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i156.i_16_125 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %cmp220.i = icmp ugt i64 %i27.i.i, %src_reg1.sroa.17.0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_16_82
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_16_95
[getBitVecSingValType]   %cmp220.i = icmp ugt i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp220.i_16_126
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp220.i_16_126
[handleICmpInst] (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:4
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %cond225.i = select i1 %cmp220.i, i64 %i27.i.i, i64 %src_reg1.sroa.17.0
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 32 = MemoryDef(31)
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 

[handleSelectInst]SelectMap:
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp220.i = icmp ugt i64 %i27.i.i, %src_reg1.sroa.17.0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp220.i_16_126
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_16_82
[getBitVecSingValType]   %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0_16_95
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i27.i.i, i64 %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond225.i_16_127
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond225.i_16_127
[handleSelectInst] z3ExprSelectOp1: cmp220.i_16_126
[handleSelectInst] z3ExprSelectOp2: i27.i.i_16_82
[handleSelectInst] z3ExprSelectOp3: src_reg1.sroa.17.0_16_95
[handleSelectInst] z3ExprRes: cond225.i_16_127
[handleSelectInst](ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
-------------------
  store i64 %cond225.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i27.i.i, i64 %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond225.i_16_127
[handleStoreInst] BVToStore: cond225.i_16_127
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] definingMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_58 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond225.i_16_127 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %or230.i = or i64 %or3.i154.i, %or.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
[handleBinaryOperatorInst] op1Val:   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[handleBinaryOperatorInst] opResVal:   %or230.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType]   %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or3.i154.i_16_122
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[getBitVecSingValType]   %or230.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or230.i_16_128
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or230.i_16_128
[handleBinaryOperatorInst] OR instruction
(= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
-------------------
  store i64 %or230.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %or230.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or230.i_16_128
[handleStoreInst] BVToStore: or230.i_16_128
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] definingMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_16_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ or230.i_16_128 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %cmp233.i = icmp slt i64 %i27.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i27.i.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i.i_16_82
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp233.i = icmp slt i64 %i27.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp233.i_16_130
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp233.i_16_130
[handleICmpInst] (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:7
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %.cond225.i = select i1 %cmp233.i, i64 -9223372036854775808, i64 %cond225.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 

[handleSelectInst]SelectMap:
.cond225.i,,cond225.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp233.i = icmp slt i64 %i27.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp233.i_16_130
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i27.i.i, i64 %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond225.i_16_127
[getBitVecSingValType]   %.cond225.i = select i1 %cmp233.i, i64 -9223372036854775808, i64 %cond225.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: .cond225.i_16_132
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] .cond225.i_16_132
[handleSelectInst] z3ExprSelectOp1: cmp233.i_16_130
[handleSelectInst] z3ExprSelectOp2: #x8000000000000000
[handleSelectInst] z3ExprSelectOp3: cond225.i_16_127
[handleSelectInst] z3ExprRes: .cond225.i_16_132
[handleSelectInst](ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
-------------------
  %.or230.i = select i1 %cmp233.i, i64 9223372036854775807, i64 %or230.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 34 = MemoryDef(33)
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 

[handleSelectInst]SelectMap:
.cond225.i,,cond225.i
.or230.i,,or230.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp233.i = icmp slt i64 %i27.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp233.i_16_130
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %or230.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or230.i_16_128
[getBitVecSingValType]   %.or230.i = select i1 %cmp233.i, i64 9223372036854775807, i64 %or230.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: .or230.i_16_134
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] .or230.i_16_134
[handleSelectInst] z3ExprSelectOp1: cmp233.i_16_130
[handleSelectInst] z3ExprSelectOp2: #x7fffffffffffffff
[handleSelectInst] z3ExprSelectOp3: or230.i_16_128
[handleSelectInst] z3ExprRes: .or230.i_16_134
[handleSelectInst](ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
-------------------
  store i64 %.cond225.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %.cond225.i = select i1 %cmp233.i, i64 -9223372036854775808, i64 %cond225.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond225.i_16_132
[handleStoreInst] BVToStore: .cond225.i_16_132
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] definingMemoryAccess: 34 = MemoryDef(33)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i.i_16_82 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ .cond225.i_16_132 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %.or230.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %.or230.i = select i1 %cmp233.i, i64 9223372036854775807, i64 %or230.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .or230.i_16_134
[handleStoreInst] BVToStore: .or230.i_16_134
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 36 = MemoryDef(35)
[handleStoreInst] definingMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i.i_16_80 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ .or230.i_16_134 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %cmp.i167.i = icmp sgt i64 %.cond225.i, %or.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %.cond225.i = select i1 %cmp233.i, i64 -9223372036854775808, i64 %cond225.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond225.i_16_132
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[getBitVecSingValType]   %cmp.i167.i = icmp sgt i64 %.cond225.i, %or.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i167.i_16_135
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i167.i_16_135
[handleICmpInst] (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:10
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %cond.i168.i = select i1 %cmp.i167.i, i64 %.cond225.i, i64 %or.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 36 = MemoryDef(35)
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 

[handleSelectInst]SelectMap:
cond.i168.i,.cond225.i,or.i
.cond225.i,,cond225.i
.or230.i,,or230.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i167.i = icmp sgt i64 %.cond225.i, %or.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i167.i_16_135
[getBitVecSingValType]   %.cond225.i = select i1 %cmp233.i, i64 -9223372036854775808, i64 %cond225.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond225.i_16_132
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[getBitVecSingValType]   %cond.i168.i = select i1 %cmp.i167.i, i64 %.cond225.i, i64 %or.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i168.i_16_136
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i168.i_16_136
[handleSelectInst] z3ExprSelectOp1: cmp.i167.i_16_135
[handleSelectInst] z3ExprSelectOp2: .cond225.i_16_132
[handleSelectInst] z3ExprSelectOp3: or.i_16_120
[handleSelectInst] z3ExprRes: cond.i168.i_16_136
[handleSelectInst](ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
-------------------
  store i64 %cond.i168.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i168.i = select i1 %cmp.i167.i, i64 %.cond225.i, i64 %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i168.i_16_136
[handleStoreInst] BVToStore: cond.i168.i_16_136
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] definingMemoryAccess: 36 = MemoryDef(35)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ .cond225.i_16_132 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i168.i_16_136 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %or8.i172.i = or i64 %or3.i154.i, %or.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
[handleBinaryOperatorInst] op1Val:   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[handleBinaryOperatorInst] opResVal:   %or8.i172.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType]   %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or3.i154.i_16_122
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[getBitVecSingValType]   %or8.i172.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or8.i172.i_16_137
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or8.i172.i_16_137
[handleBinaryOperatorInst] OR instruction
(= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
-------------------
  %cmp10.i173.i = icmp ult i64 %.or230.i, %or8.i172.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %.or230.i = select i1 %cmp233.i, i64 9223372036854775807, i64 %or230.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .or230.i_16_134
[getBitVecSingValType]   %or8.i172.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i172.i_16_137
[getBitVecSingValType]   %cmp10.i173.i = icmp ult i64 %.or230.i, %or8.i172.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp10.i173.i_16_138
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp10.i173.i_16_138
[handleICmpInst] (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:13
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %cond14.i174.i = select i1 %cmp10.i173.i, i64 %.or230.i, i64 %or8.i172.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 37 = MemoryDef(36)
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 

[handleSelectInst]SelectMap:
cond.i168.i,.cond225.i,or.i
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
.or230.i,,or230.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp10.i173.i = icmp ult i64 %.or230.i, %or8.i172.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp10.i173.i_16_138
[getBitVecSingValType]   %.or230.i = select i1 %cmp233.i, i64 9223372036854775807, i64 %or230.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .or230.i_16_134
[getBitVecSingValType]   %or8.i172.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i172.i_16_137
[getBitVecSingValType]   %cond14.i174.i = select i1 %cmp10.i173.i, i64 %.or230.i, i64 %or8.i172.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond14.i174.i_16_139
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond14.i174.i_16_139
[handleSelectInst] z3ExprSelectOp1: cmp10.i173.i_16_138
[handleSelectInst] z3ExprSelectOp2: .or230.i_16_134
[handleSelectInst] z3ExprSelectOp3: or8.i172.i_16_137
[handleSelectInst] z3ExprRes: cond14.i174.i_16_139
[handleSelectInst](ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
-------------------
  store i64 %cond14.i174.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond14.i174.i = select i1 %cmp10.i173.i, i64 %.or230.i, i64 %or8.i172.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond14.i174.i_16_139
[handleStoreInst] BVToStore: cond14.i174.i_16_139
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] definingMemoryAccess: 37 = MemoryDef(36)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ .or230.i_16_134 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond14.i174.i_16_139 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %cmp19.i177.i = icmp ugt i64 %cond225.i, %or.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i27.i.i, i64 %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond225.i_16_127
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[getBitVecSingValType]   %cmp19.i177.i = icmp ugt i64 %cond225.i, %or.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp19.i177.i_16_140
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp19.i177.i_16_140
[handleICmpInst] (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:15
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %cond23.i178.i = select i1 %cmp19.i177.i, i64 %cond225.i, i64 %or.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 38 = MemoryDef(37)
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 

[handleSelectInst]SelectMap:
cond23.i178.i,cond225.i,or.i
cond.i168.i,.cond225.i,or.i
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
.or230.i,,or230.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp19.i177.i = icmp ugt i64 %cond225.i, %or.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp19.i177.i_16_140
[getBitVecSingValType]   %cond225.i = select i1 %cmp220.i, i64 %i27.i.i, i64 %src_reg1.sroa.17.0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond225.i_16_127
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[getBitVecSingValType]   %cond23.i178.i = select i1 %cmp19.i177.i, i64 %cond225.i, i64 %or.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond23.i178.i_16_141
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond23.i178.i_16_141
[handleSelectInst] z3ExprSelectOp1: cmp19.i177.i_16_140
[handleSelectInst] z3ExprSelectOp2: cond225.i_16_127
[handleSelectInst] z3ExprSelectOp3: or.i_16_120
[handleSelectInst] z3ExprRes: cond23.i178.i_16_141
[handleSelectInst](ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
-------------------
  store i64 %cond23.i178.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond23.i178.i = select i1 %cmp19.i177.i, i64 %cond225.i, i64 %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond23.i178.i_16_141
[handleStoreInst] BVToStore: cond23.i178.i_16_141
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 39 = MemoryDef(38)
[handleStoreInst] definingMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ cond225.i_16_127 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond23.i178.i_16_141 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %cmp31.i182.i = icmp ult i64 %or230.i, %or8.i172.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %or230.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or230.i_16_128
[getBitVecSingValType]   %or8.i172.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i172.i_16_137
[getBitVecSingValType]   %cmp31.i182.i = icmp ult i64 %or230.i, %or8.i172.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i182.i_16_142
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i182.i_16_142
[handleICmpInst] (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end212.i, Size:17
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %cond35.i183.i = select i1 %cmp31.i182.i, i64 %or230.i, i64 %or8.i172.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryDef(38)
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 

[handleSelectInst]SelectMap:
cond23.i178.i,cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
cond.i168.i,.cond225.i,or.i
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
.or230.i,,or230.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp31.i182.i = icmp ult i64 %or230.i, %or8.i172.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i182.i_16_142
[getBitVecSingValType]   %or230.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or230.i_16_128
[getBitVecSingValType]   %or8.i172.i = or i64 %or3.i154.i, %or.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i172.i_16_137
[getBitVecSingValType]   %cond35.i183.i = select i1 %cmp31.i182.i, i64 %or230.i, i64 %or8.i172.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond35.i183.i_16_143
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond35.i183.i_16_143
[handleSelectInst] z3ExprSelectOp1: cmp31.i182.i_16_142
[handleSelectInst] z3ExprSelectOp2: or230.i_16_128
[handleSelectInst] z3ExprSelectOp3: or8.i172.i_16_137
[handleSelectInst] z3ExprRes: cond35.i183.i_16_143
[handleSelectInst](ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then308.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_144
[lookInsideStruct] singleValueType:dst_reg_16_144
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_145
[lookInsideStruct] singleValueType:dst_reg_16_145
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_146
[lookInsideStruct] singleValueType:dst_reg_16_146
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_147
[lookInsideStruct] singleValueType:dst_reg_16_147
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_148
[lookInsideStruct] singleValueType:dst_reg_16_148
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_149
[lookInsideStruct] singleValueType:dst_reg_16_149
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_150
[lookInsideStruct] singleValueType:dst_reg_16_150
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_151
[lookInsideStruct] singleValueType:dst_reg_16_151
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_152
[lookInsideStruct] singleValueType:dst_reg_16_152
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_153
[lookInsideStruct] singleValueType:dst_reg_16_153
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_154
[lookInsideStruct] singleValueType:dst_reg_16_154
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_155
[lookInsideStruct] singleValueType:dst_reg_16_155
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_156
[lookInsideStruct] singleValueType:dst_reg_16_156
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_157
[lookInsideStruct] singleValueType:dst_reg_16_157
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_158
[lookInsideStruct] singleValueType:src_reg_16_158
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_159
[lookInsideStruct] singleValueType:src_reg_16_159
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_160
[lookInsideStruct] singleValueType:src_reg_16_160
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_161
[lookInsideStruct] singleValueType:src_reg_16_161
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_162
[lookInsideStruct] singleValueType:src_reg_16_162
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_163
[lookInsideStruct] singleValueType:src_reg_16_163
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_164
[lookInsideStruct] singleValueType:src_reg_16_164
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_165
[lookInsideStruct] singleValueType:src_reg_16_165
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_166
[lookInsideStruct] singleValueType:src_reg_16_166
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_167
[lookInsideStruct] singleValueType:src_reg_16_167
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_168
[lookInsideStruct] singleValueType:src_reg_16_168
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_169
[lookInsideStruct] singleValueType:src_reg_16_169
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_170
[lookInsideStruct] singleValueType:src_reg_16_170
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_171
[lookInsideStruct] singleValueType:src_reg_16_171
[setupBVTreeForArg] returning BVTree: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then207.i
[handleMemoryPhiNode] incomingAccessI: 30 = MemoryDef(29)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_16_64 src_reg_16_158)
(= src_reg_16_65 src_reg_16_159)
(= src_reg_16_66 src_reg_16_160)
(= src_reg_16_67 src_reg_16_161)
(= src_reg_16_68 src_reg_16_162)
(= src_reg_16_69 src_reg_16_163)
(= src_reg_16_70 src_reg_16_164)
(= src_reg_16_71 src_reg_16_165)
(= src_reg_16_72 src_reg_16_166)
(= src_reg_16_73 src_reg_16_167)
(= src_reg_16_74 src_reg_16_168)
(= src_reg_16_75 src_reg_16_169)
(= src_reg_16_76 src_reg_16_170)
(= src_reg_16_77 src_reg_16_171)
(= dst_reg_16_50 dst_reg_16_144)
(= dst_reg_16_51 dst_reg_16_145)
(= dst_reg_16_52 dst_reg_16_146)
(= dst_reg_16_53 dst_reg_16_147)
(= or.i_16_120 dst_reg_16_148)
(= #x0000000000000000 dst_reg_16_149)
(= or.i_16_120 dst_reg_16_150)
(= or.i_16_120 dst_reg_16_151)
(= or.i_16_120 dst_reg_16_152)
(= storemerge.i.i_16_80 dst_reg_16_153)
(= dst_reg_16_60 dst_reg_16_154)
(= dst_reg_16_61 dst_reg_16_155)
(= dst_reg_16_62 dst_reg_16_156)
(= dst_reg_16_63 dst_reg_16_157)
]
[handleMemoryPhiNode] incomingBBI: if.end212.i
[handleMemoryPhiNode] incomingAccessI: 39 = MemoryDef(38)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_16_64 src_reg_16_158)
(= src_reg_16_65 src_reg_16_159)
(= src_reg_16_66 src_reg_16_160)
(= src_reg_16_67 src_reg_16_161)
(= src_reg_16_68 src_reg_16_162)
(= src_reg_16_69 src_reg_16_163)
(= src_reg_16_70 src_reg_16_164)
(= src_reg_16_71 src_reg_16_165)
(= src_reg_16_72 src_reg_16_166)
(= src_reg_16_73 src_reg_16_167)
(= src_reg_16_74 src_reg_16_168)
(= src_reg_16_75 src_reg_16_169)
(= src_reg_16_76 src_reg_16_170)
(= src_reg_16_77 src_reg_16_171)
(= dst_reg_16_50 dst_reg_16_144)
(= dst_reg_16_51 dst_reg_16_145)
(= dst_reg_16_52 dst_reg_16_146)
(= dst_reg_16_53 dst_reg_16_147)
(= or.i_16_120 dst_reg_16_148)
(= and.i156.i_16_125 dst_reg_16_149)
(= cond.i168.i_16_136 dst_reg_16_150)
(= cond14.i174.i_16_139 dst_reg_16_151)
(= cond23.i178.i_16_141 dst_reg_16_152)
(= or230.i_16_128 dst_reg_16_153)
(= dst_reg_16_60 dst_reg_16_154)
(= dst_reg_16_61 dst_reg_16_155)
(= dst_reg_16_62 dst_reg_16_156)
(= dst_reg_16_63 dst_reg_16_157)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.end212.i, if.then308.i> :
  (= src_reg_16_64 src_reg_16_158)
  (= src_reg_16_65 src_reg_16_159)
  (= src_reg_16_66 src_reg_16_160)
  (= src_reg_16_67 src_reg_16_161)
  (= src_reg_16_68 src_reg_16_162)
  (= src_reg_16_69 src_reg_16_163)
  (= src_reg_16_70 src_reg_16_164)
  (= src_reg_16_71 src_reg_16_165)
  (= src_reg_16_72 src_reg_16_166)
  (= src_reg_16_73 src_reg_16_167)
  (= src_reg_16_74 src_reg_16_168)
  (= src_reg_16_75 src_reg_16_169)
  (= src_reg_16_76 src_reg_16_170)
  (= src_reg_16_77 src_reg_16_171)
  (= dst_reg_16_50 dst_reg_16_144)
  (= dst_reg_16_51 dst_reg_16_145)
  (= dst_reg_16_52 dst_reg_16_146)
  (= dst_reg_16_53 dst_reg_16_147)
  (= or.i_16_120 dst_reg_16_148)
  (= and.i156.i_16_125 dst_reg_16_149)
  (= cond.i168.i_16_136 dst_reg_16_150)
  (= cond14.i174.i_16_139 dst_reg_16_151)
  (= cond23.i178.i_16_141 dst_reg_16_152)
  (= or230.i_16_128 dst_reg_16_153)
  (= dst_reg_16_60 dst_reg_16_154)
  (= dst_reg_16_61 dst_reg_16_155)
  (= dst_reg_16_62 dst_reg_16_156)
  (= dst_reg_16_63 dst_reg_16_157)
<if.then207.i, if.then308.i> :
  (= src_reg_16_64 src_reg_16_158)
  (= src_reg_16_65 src_reg_16_159)
  (= src_reg_16_66 src_reg_16_160)
  (= src_reg_16_67 src_reg_16_161)
  (= src_reg_16_68 src_reg_16_162)
  (= src_reg_16_69 src_reg_16_163)
  (= src_reg_16_70 src_reg_16_164)
  (= src_reg_16_71 src_reg_16_165)
  (= src_reg_16_72 src_reg_16_166)
  (= src_reg_16_73 src_reg_16_167)
  (= src_reg_16_74 src_reg_16_168)
  (= src_reg_16_75 src_reg_16_169)
  (= src_reg_16_76 src_reg_16_170)
  (= src_reg_16_77 src_reg_16_171)
  (= dst_reg_16_50 dst_reg_16_144)
  (= dst_reg_16_51 dst_reg_16_145)
  (= dst_reg_16_52 dst_reg_16_146)
  (= dst_reg_16_53 dst_reg_16_147)
  (= or.i_16_120 dst_reg_16_148)
  (= #x0000000000000000 dst_reg_16_149)
  (= or.i_16_120 dst_reg_16_150)
  (= or.i_16_120 dst_reg_16_151)
  (= or.i_16_120 dst_reg_16_152)
  (= storemerge.i.i_16_80 dst_reg_16_153)
  (= dst_reg_16_60 dst_reg_16_154)
  (= dst_reg_16_61 dst_reg_16_155)
  (= dst_reg_16_62 dst_reg_16_156)
  (= dst_reg_16_63 dst_reg_16_157)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_16_64)
  (= src_reg_16_15 src_reg_16_65)
  (= src_reg_16_16 src_reg_16_66)
  (= src_reg_16_17 src_reg_16_67)
  (= src_reg_16_18 src_reg_16_68)
  (= src_reg_16_19 src_reg_16_69)
  (= src_reg_16_20 src_reg_16_70)
  (= src_reg_16_21 src_reg_16_71)
  (= src_reg_16_22 src_reg_16_72)
  (= src_reg_16_23 src_reg_16_73)
  (= src_reg_16_24 src_reg_16_74)
  (= src_reg_16_25 src_reg_16_75)
  (= src_reg_16_26 src_reg_16_76)
  (= src_reg_16_27 src_reg_16_77)
  (= #x00000001 dst_reg_16_50)
  (= dst_reg_16_1 dst_reg_16_51)
  (= dst_reg_16_2 dst_reg_16_52)
  (= dst_reg_16_3 dst_reg_16_53)
  (= and.i.i.i_16_37 dst_reg_16_54)
  (= and6.i.i.i_16_39 dst_reg_16_55)
  (= dst_reg_16_6 dst_reg_16_56)
  (= dst_reg_16_7 dst_reg_16_57)
  (= #x0000000000000000 dst_reg_16_58)
  (= dst_reg_16_9 dst_reg_16_59)
  (= dst_reg_16_10 dst_reg_16_60)
  (= dst_reg_16_11 dst_reg_16_61)
  (= dst_reg_16_12 dst_reg_16_62)
  (= dst_reg_16_13 dst_reg_16_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_16_64)
  (= src_reg_16_15 src_reg_16_65)
  (= src_reg_16_16 src_reg_16_66)
  (= src_reg_16_17 src_reg_16_67)
  (= src_reg_16_18 src_reg_16_68)
  (= src_reg_16_19 src_reg_16_69)
  (= src_reg_16_20 src_reg_16_70)
  (= src_reg_16_21 src_reg_16_71)
  (= src_reg_16_22 src_reg_16_72)
  (= src_reg_16_23 src_reg_16_73)
  (= src_reg_16_24 src_reg_16_74)
  (= src_reg_16_25 src_reg_16_75)
  (= src_reg_16_26 src_reg_16_76)
  (= src_reg_16_27 src_reg_16_77)
  (= #x00000001 dst_reg_16_50)
  (= dst_reg_16_1 dst_reg_16_51)
  (= dst_reg_16_2 dst_reg_16_52)
  (= dst_reg_16_3 dst_reg_16_53)
  (= and.i.i.i_16_37 dst_reg_16_54)
  (= and6.i.i.i_16_39 dst_reg_16_55)
  (= dst_reg_16_6 dst_reg_16_56)
  (= dst_reg_16_7 dst_reg_16_57)
  (= and6.i.i_16_46 dst_reg_16_58)
  (= dst_reg_16_9 dst_reg_16_59)
  (= dst_reg_16_10 dst_reg_16_60)
  (= dst_reg_16_11 dst_reg_16_61)
  (= dst_reg_16_12 dst_reg_16_62)
  (= dst_reg_16_13 dst_reg_16_63)
-------------------
  %storemerge = phi i64 [ %cond35.i183.i, %if.end212.i ], [ %or.i, %if.then207.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge = phi i64 [ %cond35.i183.i, %if.end212.i ], [ %or.i, %if.then207.i ]
[handlePhiNodeSetupBitVecs] valueI:   %cond35.i183.i = select i1 %cmp31.i182.i, i64 %or230.i, i64 %or8.i172.i
[getBool] returning unique bool w/ prefix: if.end212.i_if.then308.i_16_172
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end212.i_if.then308.i_16_172
[handlePhiNodeSetupBitVecs] valueI:   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBool] returning unique bool w/ prefix: if.then207.i_if.then308.i_16_173
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then207.i_if.then308.i_16_173
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge : [<cond35.i183.i, if.end212.i>, <or.i, if.then207.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then207.i, if.then308.i>: if.then207.i_if.then308.i_16_173
<if.end212.i, if.then308.i>: if.end212.i_if.then308.i_16_172
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_16_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_16_78
[getBitVecSingValType]   %storemerge = phi i64 [ %cond35.i183.i, %if.end212.i ], [ %or.i, %if.then207.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge_16_174
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge_16_174
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %cond35.i183.i = select i1 %cmp31.i182.i, i64 %or230.i, i64 %or8.i172.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond35.i183.i_16_143
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end212.i_if.then308.i_16_172
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
[getBitVecSingValType]   %or.i = or i64 %and.i.i.i, %and.i.i5.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i_16_120
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then207.i_if.then308.i_16_173
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))

-------------------
  store i64 %storemerge, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge = phi i64 [ %cond35.i183.i, %if.end212.i ], [ %or.i, %if.then207.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge_16_174
[handleStoreInst] BVToStore: storemerge_16_174
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 40 = MemoryDef(55)
[handleStoreInst] definingMemoryAccess: 55 = MemoryPhi({if.then207.i,30},{if.end212.i,39})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_153 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge_16_174 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %i18.i298.i = load i64, i64* %i.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i18.i298.i = load i64, i64* %i.i.i, align 8
[handleLoadInst] pointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 55 = MemoryPhi({if.then207.i,30},{if.end212.i,39})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i18.i298.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i18.i298.i_16_175
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i18.i298.i_16_175
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleLoadInst] (= dst_reg_16_148 i18.i298.i_16_175)
[printBBAssertionsMap] 
BasicBlock: if.then308.i, Size:3
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %i20.i300.i = load i64, i64* %i19.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[handleLoadInst] pointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 55 = MemoryPhi({if.then207.i,30},{if.end212.i,39})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i20.i300.i_16_176
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i20.i300.i_16_176
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleLoadInst] (= dst_reg_16_149 i20.i300.i_16_176)
[printBBAssertionsMap] 
BasicBlock: if.then308.i, Size:4
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %and.i.i301.i = and i64 %i18.i298.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i18.i298.i = load i64, i64* %i.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType]   %i18.i298.i = load i64, i64* %i.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i18.i298.i_16_175
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i301.i_16_178
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i301.i_16_178
[handleBinaryOperatorInst] AND instruction
(= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
-------------------
  %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType]   %i20.i300.i = load i64, i64* %i19.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i20.i300.i_16_176
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i.i302.i_16_180
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i.i302.i_16_180
[handleBinaryOperatorInst] AND instruction
(= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_16_178
[handleStoreInst] BVToStore: and.i.i301.i_16_178
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 41 = MemoryDef(40)
[handleStoreInst] definingMemoryAccess: 40 = MemoryDef(55)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_148 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i.i301.i_16_178 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_16_180
[handleStoreInst] BVToStore: and6.i.i302.i_16_180
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 42 = MemoryDef(41)
[handleStoreInst] definingMemoryAccess: 41 = MemoryDef(40)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_149 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i.i302.i_16_180 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 55 = MemoryPhi({if.then207.i,30},{if.end212.i,39})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i23.i306.i_16_181
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i23.i306.i_16_181
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleLoadInst] (= dst_reg_16_152 i23.i306.i_16_181)
[printBBAssertionsMap] 
BasicBlock: if.then308.i, Size:7
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 40 = MemoryDef(55)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i24.i308.i_16_182
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i24.i308.i_16_182
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleLoadInst] (= storemerge_16_174 i24.i308.i_16_182)
[printBBAssertionsMap] 
BasicBlock: if.then308.i, Size:8
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i308.i_16_182
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i306.i_16_181
[getBitVecSingValType]   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i25.i309.i_16_183
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i25.i309.i_16_183
[handleBinaryOperatorInst] XOR instruction
(= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
-------------------
  %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i25.i309.i_16_183
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i311.i_16_185
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i311.i_16_185
[handleICmpInst] (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then308.i, Size:10
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then207.i, Size:0
BasicBlock: if.then41.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: if.else.i.i, Size:0
BasicBlock: if.end27.i, Size:0
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))

-------------------
  br i1 %cmp.i311.i, label %if.then.i314.i, label %if.else.i315.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i314.i
=========================
-------------------
  %and6.i312.i = and i64 %i23.i306.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType]   %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i23.i306.i_16_181
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and6.i312.i_16_187
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and6.i312.i_16_187
[handleBinaryOperatorInst] AND instruction
(= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and6.i312.i = and i64 %i23.i306.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i312.i_16_187
[handleStoreInst] BVToStore: and6.i312.i_16_187
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 43 = MemoryDef(42)
[handleStoreInst] definingMemoryAccess: 42 = MemoryDef(41)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_152 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and6.i312.i_16_187 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %and8.i313.i = and i64 %i24.i308.i, 4294967295
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[handleBinaryOperatorInst] op1Val: i64 4294967295
[handleBinaryOperatorInst] opResVal:   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType]   %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i24.i308.i_16_182
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i313.i_16_189
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i313.i_16_189
[handleBinaryOperatorInst] AND instruction
(= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 44 = MemoryDef(42)
[handleStoreInst] definingMemoryAccess: 42 = MemoryDef(41)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_152 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
coerce_reg_to_size.exit320.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_191
[lookInsideStruct] singleValueType:dst_reg_16_191
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_192
[lookInsideStruct] singleValueType:dst_reg_16_192
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_193
[lookInsideStruct] singleValueType:dst_reg_16_193
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_194
[lookInsideStruct] singleValueType:dst_reg_16_194
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_195
[lookInsideStruct] singleValueType:dst_reg_16_195
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_196
[lookInsideStruct] singleValueType:dst_reg_16_196
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_197
[lookInsideStruct] singleValueType:dst_reg_16_197
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_198
[lookInsideStruct] singleValueType:dst_reg_16_198
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_199
[lookInsideStruct] singleValueType:dst_reg_16_199
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_200
[lookInsideStruct] singleValueType:dst_reg_16_200
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_201
[lookInsideStruct] singleValueType:dst_reg_16_201
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_202
[lookInsideStruct] singleValueType:dst_reg_16_202
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_203
[lookInsideStruct] singleValueType:dst_reg_16_203
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_204
[lookInsideStruct] singleValueType:dst_reg_16_204
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_205
[lookInsideStruct] singleValueType:src_reg_16_205
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_206
[lookInsideStruct] singleValueType:src_reg_16_206
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_207
[lookInsideStruct] singleValueType:src_reg_16_207
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_208
[lookInsideStruct] singleValueType:src_reg_16_208
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_209
[lookInsideStruct] singleValueType:src_reg_16_209
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_210
[lookInsideStruct] singleValueType:src_reg_16_210
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_211
[lookInsideStruct] singleValueType:src_reg_16_211
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_212
[lookInsideStruct] singleValueType:src_reg_16_212
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_213
[lookInsideStruct] singleValueType:src_reg_16_213
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_214
[lookInsideStruct] singleValueType:src_reg_16_214
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_215
[lookInsideStruct] singleValueType:src_reg_16_215
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_216
[lookInsideStruct] singleValueType:src_reg_16_216
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_217
[lookInsideStruct] singleValueType:src_reg_16_217
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_218
[lookInsideStruct] singleValueType:src_reg_16_218
[setupBVTreeForArg] returning BVTree: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i314.i
[handleMemoryPhiNode] incomingAccessI: 43 = MemoryDef(42)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_16_158 src_reg_16_205)
(= src_reg_16_159 src_reg_16_206)
(= src_reg_16_160 src_reg_16_207)
(= src_reg_16_161 src_reg_16_208)
(= src_reg_16_162 src_reg_16_209)
(= src_reg_16_163 src_reg_16_210)
(= src_reg_16_164 src_reg_16_211)
(= src_reg_16_165 src_reg_16_212)
(= src_reg_16_166 src_reg_16_213)
(= src_reg_16_167 src_reg_16_214)
(= src_reg_16_168 src_reg_16_215)
(= src_reg_16_169 src_reg_16_216)
(= src_reg_16_170 src_reg_16_217)
(= src_reg_16_171 src_reg_16_218)
(= dst_reg_16_144 dst_reg_16_191)
(= dst_reg_16_145 dst_reg_16_192)
(= dst_reg_16_146 dst_reg_16_193)
(= dst_reg_16_147 dst_reg_16_194)
(= and.i.i301.i_16_178 dst_reg_16_195)
(= and6.i.i302.i_16_180 dst_reg_16_196)
(= dst_reg_16_150 dst_reg_16_197)
(= dst_reg_16_151 dst_reg_16_198)
(= and6.i312.i_16_187 dst_reg_16_199)
(= storemerge_16_174 dst_reg_16_200)
(= dst_reg_16_154 dst_reg_16_201)
(= dst_reg_16_155 dst_reg_16_202)
(= dst_reg_16_156 dst_reg_16_203)
(= dst_reg_16_157 dst_reg_16_204)
]
[handleMemoryPhiNode] incomingBBI: if.else.i315.i
[handleMemoryPhiNode] incomingAccessI: 44 = MemoryDef(42)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_16_158 src_reg_16_205)
(= src_reg_16_159 src_reg_16_206)
(= src_reg_16_160 src_reg_16_207)
(= src_reg_16_161 src_reg_16_208)
(= src_reg_16_162 src_reg_16_209)
(= src_reg_16_163 src_reg_16_210)
(= src_reg_16_164 src_reg_16_211)
(= src_reg_16_165 src_reg_16_212)
(= src_reg_16_166 src_reg_16_213)
(= src_reg_16_167 src_reg_16_214)
(= src_reg_16_168 src_reg_16_215)
(= src_reg_16_169 src_reg_16_216)
(= src_reg_16_170 src_reg_16_217)
(= src_reg_16_171 src_reg_16_218)
(= dst_reg_16_144 dst_reg_16_191)
(= dst_reg_16_145 dst_reg_16_192)
(= dst_reg_16_146 dst_reg_16_193)
(= dst_reg_16_147 dst_reg_16_194)
(= and.i.i301.i_16_178 dst_reg_16_195)
(= and6.i.i302.i_16_180 dst_reg_16_196)
(= dst_reg_16_150 dst_reg_16_197)
(= dst_reg_16_151 dst_reg_16_198)
(= #x0000000000000000 dst_reg_16_199)
(= storemerge_16_174 dst_reg_16_200)
(= dst_reg_16_154 dst_reg_16_201)
(= dst_reg_16_155 dst_reg_16_202)
(= dst_reg_16_156 dst_reg_16_203)
(= dst_reg_16_157 dst_reg_16_204)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.else.i315.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_16_158 src_reg_16_205)
  (= src_reg_16_159 src_reg_16_206)
  (= src_reg_16_160 src_reg_16_207)
  (= src_reg_16_161 src_reg_16_208)
  (= src_reg_16_162 src_reg_16_209)
  (= src_reg_16_163 src_reg_16_210)
  (= src_reg_16_164 src_reg_16_211)
  (= src_reg_16_165 src_reg_16_212)
  (= src_reg_16_166 src_reg_16_213)
  (= src_reg_16_167 src_reg_16_214)
  (= src_reg_16_168 src_reg_16_215)
  (= src_reg_16_169 src_reg_16_216)
  (= src_reg_16_170 src_reg_16_217)
  (= src_reg_16_171 src_reg_16_218)
  (= dst_reg_16_144 dst_reg_16_191)
  (= dst_reg_16_145 dst_reg_16_192)
  (= dst_reg_16_146 dst_reg_16_193)
  (= dst_reg_16_147 dst_reg_16_194)
  (= and.i.i301.i_16_178 dst_reg_16_195)
  (= and6.i.i302.i_16_180 dst_reg_16_196)
  (= dst_reg_16_150 dst_reg_16_197)
  (= dst_reg_16_151 dst_reg_16_198)
  (= #x0000000000000000 dst_reg_16_199)
  (= storemerge_16_174 dst_reg_16_200)
  (= dst_reg_16_154 dst_reg_16_201)
  (= dst_reg_16_155 dst_reg_16_202)
  (= dst_reg_16_156 dst_reg_16_203)
  (= dst_reg_16_157 dst_reg_16_204)
<if.then.i314.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_16_158 src_reg_16_205)
  (= src_reg_16_159 src_reg_16_206)
  (= src_reg_16_160 src_reg_16_207)
  (= src_reg_16_161 src_reg_16_208)
  (= src_reg_16_162 src_reg_16_209)
  (= src_reg_16_163 src_reg_16_210)
  (= src_reg_16_164 src_reg_16_211)
  (= src_reg_16_165 src_reg_16_212)
  (= src_reg_16_166 src_reg_16_213)
  (= src_reg_16_167 src_reg_16_214)
  (= src_reg_16_168 src_reg_16_215)
  (= src_reg_16_169 src_reg_16_216)
  (= src_reg_16_170 src_reg_16_217)
  (= src_reg_16_171 src_reg_16_218)
  (= dst_reg_16_144 dst_reg_16_191)
  (= dst_reg_16_145 dst_reg_16_192)
  (= dst_reg_16_146 dst_reg_16_193)
  (= dst_reg_16_147 dst_reg_16_194)
  (= and.i.i301.i_16_178 dst_reg_16_195)
  (= and6.i.i302.i_16_180 dst_reg_16_196)
  (= dst_reg_16_150 dst_reg_16_197)
  (= dst_reg_16_151 dst_reg_16_198)
  (= and6.i312.i_16_187 dst_reg_16_199)
  (= storemerge_16_174 dst_reg_16_200)
  (= dst_reg_16_154 dst_reg_16_201)
  (= dst_reg_16_155 dst_reg_16_202)
  (= dst_reg_16_156 dst_reg_16_203)
  (= dst_reg_16_157 dst_reg_16_204)
<if.end212.i, if.then308.i> :
  (= src_reg_16_64 src_reg_16_158)
  (= src_reg_16_65 src_reg_16_159)
  (= src_reg_16_66 src_reg_16_160)
  (= src_reg_16_67 src_reg_16_161)
  (= src_reg_16_68 src_reg_16_162)
  (= src_reg_16_69 src_reg_16_163)
  (= src_reg_16_70 src_reg_16_164)
  (= src_reg_16_71 src_reg_16_165)
  (= src_reg_16_72 src_reg_16_166)
  (= src_reg_16_73 src_reg_16_167)
  (= src_reg_16_74 src_reg_16_168)
  (= src_reg_16_75 src_reg_16_169)
  (= src_reg_16_76 src_reg_16_170)
  (= src_reg_16_77 src_reg_16_171)
  (= dst_reg_16_50 dst_reg_16_144)
  (= dst_reg_16_51 dst_reg_16_145)
  (= dst_reg_16_52 dst_reg_16_146)
  (= dst_reg_16_53 dst_reg_16_147)
  (= or.i_16_120 dst_reg_16_148)
  (= and.i156.i_16_125 dst_reg_16_149)
  (= cond.i168.i_16_136 dst_reg_16_150)
  (= cond14.i174.i_16_139 dst_reg_16_151)
  (= cond23.i178.i_16_141 dst_reg_16_152)
  (= or230.i_16_128 dst_reg_16_153)
  (= dst_reg_16_60 dst_reg_16_154)
  (= dst_reg_16_61 dst_reg_16_155)
  (= dst_reg_16_62 dst_reg_16_156)
  (= dst_reg_16_63 dst_reg_16_157)
<if.then207.i, if.then308.i> :
  (= src_reg_16_64 src_reg_16_158)
  (= src_reg_16_65 src_reg_16_159)
  (= src_reg_16_66 src_reg_16_160)
  (= src_reg_16_67 src_reg_16_161)
  (= src_reg_16_68 src_reg_16_162)
  (= src_reg_16_69 src_reg_16_163)
  (= src_reg_16_70 src_reg_16_164)
  (= src_reg_16_71 src_reg_16_165)
  (= src_reg_16_72 src_reg_16_166)
  (= src_reg_16_73 src_reg_16_167)
  (= src_reg_16_74 src_reg_16_168)
  (= src_reg_16_75 src_reg_16_169)
  (= src_reg_16_76 src_reg_16_170)
  (= src_reg_16_77 src_reg_16_171)
  (= dst_reg_16_50 dst_reg_16_144)
  (= dst_reg_16_51 dst_reg_16_145)
  (= dst_reg_16_52 dst_reg_16_146)
  (= dst_reg_16_53 dst_reg_16_147)
  (= or.i_16_120 dst_reg_16_148)
  (= #x0000000000000000 dst_reg_16_149)
  (= or.i_16_120 dst_reg_16_150)
  (= or.i_16_120 dst_reg_16_151)
  (= or.i_16_120 dst_reg_16_152)
  (= storemerge.i.i_16_80 dst_reg_16_153)
  (= dst_reg_16_60 dst_reg_16_154)
  (= dst_reg_16_61 dst_reg_16_155)
  (= dst_reg_16_62 dst_reg_16_156)
  (= dst_reg_16_63 dst_reg_16_157)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_16_64)
  (= src_reg_16_15 src_reg_16_65)
  (= src_reg_16_16 src_reg_16_66)
  (= src_reg_16_17 src_reg_16_67)
  (= src_reg_16_18 src_reg_16_68)
  (= src_reg_16_19 src_reg_16_69)
  (= src_reg_16_20 src_reg_16_70)
  (= src_reg_16_21 src_reg_16_71)
  (= src_reg_16_22 src_reg_16_72)
  (= src_reg_16_23 src_reg_16_73)
  (= src_reg_16_24 src_reg_16_74)
  (= src_reg_16_25 src_reg_16_75)
  (= src_reg_16_26 src_reg_16_76)
  (= src_reg_16_27 src_reg_16_77)
  (= #x00000001 dst_reg_16_50)
  (= dst_reg_16_1 dst_reg_16_51)
  (= dst_reg_16_2 dst_reg_16_52)
  (= dst_reg_16_3 dst_reg_16_53)
  (= and.i.i.i_16_37 dst_reg_16_54)
  (= and6.i.i.i_16_39 dst_reg_16_55)
  (= dst_reg_16_6 dst_reg_16_56)
  (= dst_reg_16_7 dst_reg_16_57)
  (= #x0000000000000000 dst_reg_16_58)
  (= dst_reg_16_9 dst_reg_16_59)
  (= dst_reg_16_10 dst_reg_16_60)
  (= dst_reg_16_11 dst_reg_16_61)
  (= dst_reg_16_12 dst_reg_16_62)
  (= dst_reg_16_13 dst_reg_16_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_16_64)
  (= src_reg_16_15 src_reg_16_65)
  (= src_reg_16_16 src_reg_16_66)
  (= src_reg_16_17 src_reg_16_67)
  (= src_reg_16_18 src_reg_16_68)
  (= src_reg_16_19 src_reg_16_69)
  (= src_reg_16_20 src_reg_16_70)
  (= src_reg_16_21 src_reg_16_71)
  (= src_reg_16_22 src_reg_16_72)
  (= src_reg_16_23 src_reg_16_73)
  (= src_reg_16_24 src_reg_16_74)
  (= src_reg_16_25 src_reg_16_75)
  (= src_reg_16_26 src_reg_16_76)
  (= src_reg_16_27 src_reg_16_77)
  (= #x00000001 dst_reg_16_50)
  (= dst_reg_16_1 dst_reg_16_51)
  (= dst_reg_16_2 dst_reg_16_52)
  (= dst_reg_16_3 dst_reg_16_53)
  (= and.i.i.i_16_37 dst_reg_16_54)
  (= and6.i.i.i_16_39 dst_reg_16_55)
  (= dst_reg_16_6 dst_reg_16_56)
  (= dst_reg_16_7 dst_reg_16_57)
  (= and6.i.i_16_46 dst_reg_16_58)
  (= dst_reg_16_9 dst_reg_16_59)
  (= dst_reg_16_10 dst_reg_16_60)
  (= dst_reg_16_11 dst_reg_16_61)
  (= dst_reg_16_12 dst_reg_16_62)
  (= dst_reg_16_13 dst_reg_16_63)
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[handlePhiNodeSetupBitVecs] valueI: i64 4294967295
[getBool] returning unique bool w/ prefix: if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
[handlePhiNodeSetupBitVecs] valueI:   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBool] returning unique bool w/ prefix: if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
[handlePhiNodeSetupBitVecs] printPhiMap: 
storemerge.i316.i : [<, if.else.i315.i>, <and8.i313.i, if.then.i314.i>, ]
storemerge : [<cond35.i183.i, if.end212.i>, <or.i, if.then207.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.then.i314.i, coerce_reg_to_size.exit320.i>: if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
<if.else.i315.i, coerce_reg_to_size.exit320.i>: if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
<if.then207.i, if.then308.i>: if.then207.i_if.then308.i_16_173
<if.end212.i, if.then308.i>: if.end212.i_if.then308.i_16_172
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_16_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_16_78
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: storemerge.i316.i_16_221
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] storemerge.i316.i_16_221
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
[getBitVecSingValType]   %and8.i313.i = and i64 %i24.i308.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i313.i_16_189
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))

-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_16_221
[handleStoreInst] BVToStore: storemerge.i316.i_16_221
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 45 = MemoryDef(54)
[handleStoreInst] definingMemoryAccess: 54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_200 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_16_221 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
frameno.i30.i, dst_reg, [11]
var_off.i28.i.repack, dst_reg, [5, 0]
frameno.i.i, dst_reg, [11]
type, dst_reg, [0]
type1, src_reg, [0]
var_off.i28.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i19.i.i, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack2, dst_reg, [5, 1]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
umax_value.i.i, dst_reg, [9]
i.i.i, dst_reg, [5, 0]
umin_value.i.i, dst_reg, [8]
smin_value.i.i, dst_reg, [6]
smax_value.i.i, dst_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i27.i317.i_16_223
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i27.i317.i_16_223
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
[handleLoadInst] (= dst_reg_16_199 i27.i317.i_16_223)
[printBBAssertionsMap] 
BasicBlock: if.else.i315.i, Size:0
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
  (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:3
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
BasicBlock: if.then26.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then308.i, Size:10
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))

-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_16_223
[handleStoreInst] BVToStore: i27.i317.i_16_223
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 46 = MemoryDef(45)
[handleStoreInst] definingMemoryAccess: 45 = MemoryDef(54)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_197 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i317.i_16_223 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_16_221
[handleStoreInst] BVToStore: storemerge.i316.i_16_221
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 47 = MemoryDef(46)
[handleStoreInst] definingMemoryAccess: 46 = MemoryDef(45)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_198 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_16_221 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
47 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_16_223
[handleStoreInst] BVToStore: i27.i317.i_16_223
[handleStoreInst] destPointerValue:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 48 = MemoryDef(47)
[handleStoreInst] definingMemoryAccess: 47 = MemoryDef(46)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ i27.i317.i_16_223 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i27.i317.i_16_223 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
47 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_16_221
[handleStoreInst] BVToStore: storemerge.i316.i_16_221
[handleStoreInst] destPointerValue:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 49 = MemoryDef(48)
[handleStoreInst] definingMemoryAccess: 48 = MemoryDef(47)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i316.i_16_221 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_16_221 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
47 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_16_221
[handleStoreInst] BVToStore: storemerge.i316.i_16_221
[handleStoreInst] destPointerValue:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 50 = MemoryDef(49)
[handleStoreInst] definingMemoryAccess: 49 = MemoryDef(48)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ storemerge.i316.i_16_221 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ storemerge.i316.i_16_221 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
47 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] op1Val:   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_16_223
[getBitVecSingValType]   %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] storemerge.i316.i_16_221
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_16_224
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_16_224
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_16_224
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_16_226
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_16_226
[handleICmpInst] (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
[printBBAssertionsMap] 
BasicBlock: if.else.i315.i, Size:0
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
  (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
  (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
  (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then308.i, Size:10
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_16_224
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_16_228
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_16_228
[handleICmpInst] (ite (bvult xor.i.i.i_16_224 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= tobool.not.i.i.i.i.i_16_228 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_16_224 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= tobool.not.i.i.i.i.i_16_228 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
  (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
  (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
  (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then308.i, Size:10
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_16_224
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_16_230
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_16_230
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_16_230 (bvshl xor.i.i.i_16_224 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond23.i178.i,cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
cond.i168.i,.cond225.i,or.i
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
.or230.i,,or230.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_16_228
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_16_230
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_16_224
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_16_231
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_16_231
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_16_228
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_16_230
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_16_224
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_16_231
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select.i.i.i.i.i_16_231 shl.i.i.i.i.i_16_230)
     (= spec.select.i.i.i.i.i_16_231 xor.i.i.i_16_224))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond23.i178.i,cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
cond.i168.i,.cond225.i,or.i
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
.or230.i,,or230.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
spec.select17.i.i.i.i.i,,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_16_228
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_16_234
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_16_234
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_16_228
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_16_234
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select17.i.i.i.i.i_16_234 #x0000001f)
     (= spec.select17.i.i.i.i.i_16_234 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_16_231
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_16_236
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_16_236
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_16_231 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= tobool2.not.i.i.i.i.i_16_236 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_16_224 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= tobool.not.i.i.i.i.i_16_228 #b0))
  (= shl.i.i.i.i.i_16_230 (bvshl xor.i.i.i_16_224 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select.i.i.i.i.i_16_231 shl.i.i.i.i.i_16_230)
     (= spec.select.i.i.i.i.i_16_231 xor.i.i.i_16_224))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select17.i.i.i.i.i_16_234 #x0000001f)
     (= spec.select17.i.i.i.i.i_16_234 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_16_231 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= tobool2.not.i.i.i.i.i_16_236 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
  (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
  (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
  (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then308.i, Size:10
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_16_234
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_16_238
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_16_238
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_16_238 (bvadd spec.select17.i.i.i.i.i_16_234 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_16_231
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_16_240
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_16_240
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_16_240
   (bvshl spec.select.i.i.i.i.i_16_231 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond23.i178.i,cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
cond.i168.i,.cond225.i,or.i
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
.or230.i,,or230.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
spec.select17.i.i.i.i.i,,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_16_236
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_16_240
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_16_231
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_16_241
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_16_241
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_16_236
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_16_240
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_16_231
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_16_241
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= word.addr.1.i.i.i.i.i_16_241 shl5.i.i.i.i.i_16_240)
     (= word.addr.1.i.i.i.i.i_16_241 spec.select.i.i.i.i.i_16_231))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
cond23.i178.i,cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
cond.i168.i,.cond225.i,or.i
.cond225.i,,cond225.i
cond14.i174.i,.or230.i,or8.i172.i
.or230.i,,or230.i
cond225.i,i27.i.i,src_reg1.sroa.17.0
storemerge.i20.i,and8.i17.i,
spec.select17.i.i.i.i.i,,
src_reg1.sroa.17.0,and6.i16.i,
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_16_236
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_16_238
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_16_234
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_16_242
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_16_242
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_16_236
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_16_238
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_16_234
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_16_242
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= num.1.i.i.i.i.i_16_242 sub4.i.i.i.i.i_16_238)
     (= num.1.i.i.i.i.i_16_242 spec.select17.i.i.i.i.i_16_234))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_16_241
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_16_244
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_16_244
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_16_241 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= tobool8.not.i.i.i.i.i_16_244 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_16_224 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= tobool.not.i.i.i.i.i_16_228 #b0))
  (= shl.i.i.i.i.i_16_230 (bvshl xor.i.i.i_16_224 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select.i.i.i.i.i_16_231 shl.i.i.i.i.i_16_230)
     (= spec.select.i.i.i.i.i_16_231 xor.i.i.i_16_224))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select17.i.i.i.i.i_16_234 #x0000001f)
     (= spec.select17.i.i.i.i.i_16_234 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_16_231 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= tobool2.not.i.i.i.i.i_16_236 #b0))
  (= sub4.i.i.i.i.i_16_238 (bvadd spec.select17.i.i.i.i.i_16_234 #xfffffff0))
  (= shl5.i.i.i.i.i_16_240
   (bvshl spec.select.i.i.i.i.i_16_231 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= word.addr.1.i.i.i.i.i_16_241 shl5.i.i.i.i.i_16_240)
     (= word.addr.1.i.i.i.i.i_16_241 spec.select.i.i.i.i.i_16_231))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= num.1.i.i.i.i.i_16_242 sub4.i.i.i.i.i_16_238)
     (= num.1.i.i.i.i.i_16_242 spec.select17.i.i.i.i.i_16_234))
  (ite (bvult word.addr.1.i.i.i.i.i_16_241 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= tobool8.not.i.i.i.i.i_16_244 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
  (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
  (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
  (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then308.i, Size:10
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_16_242
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_16_246
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_16_246
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_16_246 (bvadd num.1.i.i.i.i.i_16_242 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_16_241
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_16_248
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_16_248
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_16_248
   (bvshl word.addr.1.i.i.i.i.i_16_241 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
cond225.i,i27.i.i,src_reg1.sroa.17.0
.or230.i,,or230.i
.cond225.i,,cond225.i
cond.i168.i,.cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
storemerge.i20.i,and8.i17.i,
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_16_244
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_16_248
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_16_241
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_16_249
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_16_249
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_16_244
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_16_248
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_16_241
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_16_249
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= word.addr.2.i.i.i.i.i_16_249 shl11.i.i.i.i.i_16_248)
     (= word.addr.2.i.i.i.i.i_16_249 word.addr.1.i.i.i.i.i_16_241))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
cond225.i,i27.i.i,src_reg1.sroa.17.0
.or230.i,,or230.i
.cond225.i,,cond225.i
cond.i168.i,.cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
storemerge.i20.i,and8.i17.i,
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_16_244
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_16_246
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_16_242
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_16_250
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_16_250
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_16_244
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_16_246
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_16_242
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_16_250
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= num.2.i.i.i.i.i_16_250 sub10.i.i.i.i.i_16_246)
     (= num.2.i.i.i.i.i_16_250 num.1.i.i.i.i.i_16_242))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_16_249
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_16_252
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_16_252
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_16_249 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= tobool14.not.i.i.i.i.i_16_252 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_16_224 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= tobool.not.i.i.i.i.i_16_228 #b0))
  (= shl.i.i.i.i.i_16_230 (bvshl xor.i.i.i_16_224 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select.i.i.i.i.i_16_231 shl.i.i.i.i.i_16_230)
     (= spec.select.i.i.i.i.i_16_231 xor.i.i.i_16_224))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select17.i.i.i.i.i_16_234 #x0000001f)
     (= spec.select17.i.i.i.i.i_16_234 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_16_231 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= tobool2.not.i.i.i.i.i_16_236 #b0))
  (= sub4.i.i.i.i.i_16_238 (bvadd spec.select17.i.i.i.i.i_16_234 #xfffffff0))
  (= shl5.i.i.i.i.i_16_240
   (bvshl spec.select.i.i.i.i.i_16_231 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= word.addr.1.i.i.i.i.i_16_241 shl5.i.i.i.i.i_16_240)
     (= word.addr.1.i.i.i.i.i_16_241 spec.select.i.i.i.i.i_16_231))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= num.1.i.i.i.i.i_16_242 sub4.i.i.i.i.i_16_238)
     (= num.1.i.i.i.i.i_16_242 spec.select17.i.i.i.i.i_16_234))
  (ite (bvult word.addr.1.i.i.i.i.i_16_241 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= tobool8.not.i.i.i.i.i_16_244 #b0))
  (= sub10.i.i.i.i.i_16_246 (bvadd num.1.i.i.i.i.i_16_242 #xfffffff8))
  (= shl11.i.i.i.i.i_16_248
   (bvshl word.addr.1.i.i.i.i.i_16_241 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= word.addr.2.i.i.i.i.i_16_249 shl11.i.i.i.i.i_16_248)
     (= word.addr.2.i.i.i.i.i_16_249 word.addr.1.i.i.i.i.i_16_241))
  (ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= num.2.i.i.i.i.i_16_250 sub10.i.i.i.i.i_16_246)
     (= num.2.i.i.i.i.i_16_250 num.1.i.i.i.i.i_16_242))
  (ite (bvult word.addr.2.i.i.i.i.i_16_249 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= tobool14.not.i.i.i.i.i_16_252 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
  (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
  (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
  (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then308.i, Size:10
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_16_250
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_16_254
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_16_254
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_16_254 (bvadd num.2.i.i.i.i.i_16_250 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_16_249
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_16_256
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_16_256
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_16_256
   (bvshl word.addr.2.i.i.i.i.i_16_249 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
cond225.i,i27.i.i,src_reg1.sroa.17.0
.or230.i,,or230.i
.cond225.i,,cond225.i
cond.i168.i,.cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_16_252
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_16_256
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_16_249
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_16_257
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_16_257
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_16_252
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_16_256
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_16_249
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_16_257
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= word.addr.3.i.i.i.i.i_16_257 shl17.i.i.i.i.i_16_256)
     (= word.addr.3.i.i.i.i.i_16_257 word.addr.2.i.i.i.i.i_16_249))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
cond225.i,i27.i.i,src_reg1.sroa.17.0
.or230.i,,or230.i
.cond225.i,,cond225.i
cond.i168.i,.cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_16_252
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_16_254
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_16_250
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_16_258
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_16_258
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_16_252
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_16_254
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_16_250
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_16_258
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= num.3.i.i.i.i.i_16_258 sub16.i.i.i.i.i_16_254)
     (= num.3.i.i.i.i.i_16_258 num.2.i.i.i.i.i_16_250))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_16_257
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_16_260
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_16_260
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_16_257 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= tobool20.not.i.i.i.i.i_16_260 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_16_224 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= tobool.not.i.i.i.i.i_16_228 #b0))
  (= shl.i.i.i.i.i_16_230 (bvshl xor.i.i.i_16_224 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select.i.i.i.i.i_16_231 shl.i.i.i.i.i_16_230)
     (= spec.select.i.i.i.i.i_16_231 xor.i.i.i_16_224))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select17.i.i.i.i.i_16_234 #x0000001f)
     (= spec.select17.i.i.i.i.i_16_234 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_16_231 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= tobool2.not.i.i.i.i.i_16_236 #b0))
  (= sub4.i.i.i.i.i_16_238 (bvadd spec.select17.i.i.i.i.i_16_234 #xfffffff0))
  (= shl5.i.i.i.i.i_16_240
   (bvshl spec.select.i.i.i.i.i_16_231 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= word.addr.1.i.i.i.i.i_16_241 shl5.i.i.i.i.i_16_240)
     (= word.addr.1.i.i.i.i.i_16_241 spec.select.i.i.i.i.i_16_231))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= num.1.i.i.i.i.i_16_242 sub4.i.i.i.i.i_16_238)
     (= num.1.i.i.i.i.i_16_242 spec.select17.i.i.i.i.i_16_234))
  (ite (bvult word.addr.1.i.i.i.i.i_16_241 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= tobool8.not.i.i.i.i.i_16_244 #b0))
  (= sub10.i.i.i.i.i_16_246 (bvadd num.1.i.i.i.i.i_16_242 #xfffffff8))
  (= shl11.i.i.i.i.i_16_248
   (bvshl word.addr.1.i.i.i.i.i_16_241 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= word.addr.2.i.i.i.i.i_16_249 shl11.i.i.i.i.i_16_248)
     (= word.addr.2.i.i.i.i.i_16_249 word.addr.1.i.i.i.i.i_16_241))
  (ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= num.2.i.i.i.i.i_16_250 sub10.i.i.i.i.i_16_246)
     (= num.2.i.i.i.i.i_16_250 num.1.i.i.i.i.i_16_242))
  (ite (bvult word.addr.2.i.i.i.i.i_16_249 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= tobool14.not.i.i.i.i.i_16_252 #b0))
  (= sub16.i.i.i.i.i_16_254 (bvadd num.2.i.i.i.i.i_16_250 #xfffffffc))
  (= shl17.i.i.i.i.i_16_256
   (bvshl word.addr.2.i.i.i.i.i_16_249 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= word.addr.3.i.i.i.i.i_16_257 shl17.i.i.i.i.i_16_256)
     (= word.addr.3.i.i.i.i.i_16_257 word.addr.2.i.i.i.i.i_16_249))
  (ite (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= num.3.i.i.i.i.i_16_258 sub16.i.i.i.i.i_16_254)
     (= num.3.i.i.i.i.i_16_258 num.2.i.i.i.i.i_16_250))
  (ite (bvult word.addr.3.i.i.i.i.i_16_257 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= tobool20.not.i.i.i.i.i_16_260 #b0))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
  (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
  (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
  (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then308.i, Size:10
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_16_258
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_16_262
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_16_262
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_16_262 (bvadd num.3.i.i.i.i.i_16_258 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_16_257
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_16_264
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_16_264
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_16_264
   (bvshl word.addr.3.i.i.i.i.i_16_257 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
cond225.i,i27.i.i,src_reg1.sroa.17.0
.or230.i,,or230.i
.cond225.i,,cond225.i
cond.i168.i,.cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_16_260
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_16_264
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_16_257
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_16_265
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_16_265
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_16_260
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_16_264
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_16_257
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_16_265
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= word.addr.4.i.i.i.i.i_16_265 shl23.i.i.i.i.i_16_264)
     (= word.addr.4.i.i.i.i.i_16_265 word.addr.3.i.i.i.i.i_16_257))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
cond225.i,i27.i.i,src_reg1.sroa.17.0
.or230.i,,or230.i
.cond225.i,,cond225.i
cond.i168.i,.cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_16_260
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_16_262
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_16_258
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_16_266
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_16_266
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_16_260
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_16_262
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_16_258
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_16_266
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= num.4.i.i.i.i.i_16_266 sub22.i.i.i.i.i_16_262)
     (= num.4.i.i.i.i.i_16_266 num.3.i.i.i.i.i_16_258))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_16_265
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_16_268
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_16_268
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_16_268
   (bvlshr word.addr.4.i.i.i.i.i_16_265 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_16_268
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_16_269
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_16_269
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_16_269
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_16_268))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_16_266
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_16_269
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_16_270
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_16_270
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_16_270 (bvadd num.4.i.i.i.i.i_16_266 i.i.i.i.i.i.neg_16_269))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_16_270
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_16_272
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_16_272
[handleBinaryOperatorInst] AND instruction
(= phi.bo_16_272 (bvand add.i.i.i335.i_16_270 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
[handlePhiNodeSetupBitVecs] phiConditionBoolI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, coerce_reg_to_size.exit320.i>, ]
storemerge.i316.i : [<, if.else.i315.i>, <and8.i313.i, if.then.i314.i>, ]
storemerge : [<cond35.i183.i, if.end212.i>, <or.i, if.then207.i>, ]
storemerge.i.i : [<, if.else.i.i>, <and8.i.i, if.then.i.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
<if.then.i314.i, coerce_reg_to_size.exit320.i>: if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
<if.else.i315.i, coerce_reg_to_size.exit320.i>: if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
<if.then207.i, if.then308.i>: if.then207.i_if.then308.i_16_173
<if.end212.i, if.then308.i>: if.end212.i_if.then308.i_16_172
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i>: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
<if.then.i.i, coerce_reg_to_size.exit.i>: if.then.i.i_coerce_reg_to_size.exit.i_16_79
<if.else.i.i, coerce_reg_to_size.exit.i>: if.else.i.i_coerce_reg_to_size.exit.i_16_78
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_16_275
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_16_275
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_16_272
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
    (= retval.0.i.i.i.i_16_275 phi.bo_16_272))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
    (= retval.0.i.i.i.i_16_275 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
    (= retval.0.i.i.i.i_16_275 phi.bo_16_272))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
    (= retval.0.i.i.i.i_16_275 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_16_275
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_16_278
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_16_278
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_16_275 #x0000003f)
     (= cmp.i.i.i_16_278 #b1)
     (= cmp.i.i.i_16_278 #b0))
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
    (= retval.0.i.i.i.i_16_275 phi.bo_16_272))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
    (= retval.0.i.i.i.i_16_275 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_16_275 #x0000003f)
     (= cmp.i.i.i_16_278 #b1)
     (= cmp.i.i.i_16_278 #b0))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_16_224 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= tobool.not.i.i.i.i.i_16_228 #b0))
  (= shl.i.i.i.i.i_16_230 (bvshl xor.i.i.i_16_224 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select.i.i.i.i.i_16_231 shl.i.i.i.i.i_16_230)
     (= spec.select.i.i.i.i.i_16_231 xor.i.i.i_16_224))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select17.i.i.i.i.i_16_234 #x0000001f)
     (= spec.select17.i.i.i.i.i_16_234 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_16_231 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= tobool2.not.i.i.i.i.i_16_236 #b0))
  (= sub4.i.i.i.i.i_16_238 (bvadd spec.select17.i.i.i.i.i_16_234 #xfffffff0))
  (= shl5.i.i.i.i.i_16_240
   (bvshl spec.select.i.i.i.i.i_16_231 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= word.addr.1.i.i.i.i.i_16_241 shl5.i.i.i.i.i_16_240)
     (= word.addr.1.i.i.i.i.i_16_241 spec.select.i.i.i.i.i_16_231))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= num.1.i.i.i.i.i_16_242 sub4.i.i.i.i.i_16_238)
     (= num.1.i.i.i.i.i_16_242 spec.select17.i.i.i.i.i_16_234))
  (ite (bvult word.addr.1.i.i.i.i.i_16_241 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= tobool8.not.i.i.i.i.i_16_244 #b0))
  (= sub10.i.i.i.i.i_16_246 (bvadd num.1.i.i.i.i.i_16_242 #xfffffff8))
  (= shl11.i.i.i.i.i_16_248
   (bvshl word.addr.1.i.i.i.i.i_16_241 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= word.addr.2.i.i.i.i.i_16_249 shl11.i.i.i.i.i_16_248)
     (= word.addr.2.i.i.i.i.i_16_249 word.addr.1.i.i.i.i.i_16_241))
  (ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= num.2.i.i.i.i.i_16_250 sub10.i.i.i.i.i_16_246)
     (= num.2.i.i.i.i.i_16_250 num.1.i.i.i.i.i_16_242))
  (ite (bvult word.addr.2.i.i.i.i.i_16_249 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= tobool14.not.i.i.i.i.i_16_252 #b0))
  (= sub16.i.i.i.i.i_16_254 (bvadd num.2.i.i.i.i.i_16_250 #xfffffffc))
  (= shl17.i.i.i.i.i_16_256
   (bvshl word.addr.2.i.i.i.i.i_16_249 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= word.addr.3.i.i.i.i.i_16_257 shl17.i.i.i.i.i_16_256)
     (= word.addr.3.i.i.i.i.i_16_257 word.addr.2.i.i.i.i.i_16_249))
  (ite (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= num.3.i.i.i.i.i_16_258 sub16.i.i.i.i.i_16_254)
     (= num.3.i.i.i.i.i_16_258 num.2.i.i.i.i.i_16_250))
  (ite (bvult word.addr.3.i.i.i.i.i_16_257 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= tobool20.not.i.i.i.i.i_16_260 #b0))
  (= sub22.i.i.i.i.i_16_262 (bvadd num.3.i.i.i.i.i_16_258 #x000000fe))
  (= shl23.i.i.i.i.i_16_264
   (bvshl word.addr.3.i.i.i.i.i_16_257 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= word.addr.4.i.i.i.i.i_16_265 shl23.i.i.i.i.i_16_264)
     (= word.addr.4.i.i.i.i.i_16_265 word.addr.3.i.i.i.i.i_16_257))
  (ite (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= num.4.i.i.i.i.i_16_266 sub22.i.i.i.i.i_16_262)
     (= num.4.i.i.i.i.i_16_266 num.3.i.i.i.i.i_16_258))
  (= word.addr.4.lobit.i.i.i.i.i.neg_16_268
   (bvlshr word.addr.4.i.i.i.i.i_16_265 #x000000000000003f))
  (= i.i.i.i.i.i.neg_16_269
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_16_268))
  (= add.i.i.i335.i_16_270 (bvadd num.4.i.i.i.i.i_16_266 i.i.i.i.i.i.neg_16_269))
  (= phi.bo_16_272 (bvand add.i.i.i335.i_16_270 #x000000ff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
  (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:13
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:5
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
  (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
  (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
BasicBlock: if.then26.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then308.i, Size:10
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_16_275
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_16_279
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_16_279
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_16_279 ((_ zero_extend 32) retval.0.i.i.i.i_16_275))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_16_279
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_16_281
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_16_281
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_16_281 (bvshl #xffffffffffffffff sh_prom.i.i.i_16_279))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_16_281
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_16_283
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_16_283
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_16_283 (bvxor notmask.i.i.i_16_281 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_16_281
[getBitVecSingValType]   %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i27.i317.i_16_223
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_16_284
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_16_284
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_16_284 (bvand notmask.i.i.i_16_281 i27.i317.i_16_223))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.0.0.i.i.i,,and.i.i336.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
cond225.i,i27.i.i,src_reg1.sroa.17.0
.or230.i,,or230.i
.cond225.i,,cond225.i
cond.i168.i,.cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_16_278
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_16_284
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_16_286
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_16_286
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_16_278
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_16_284
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_16_286
[handleSelectInst](ite (= cmp.i.i.i_16_278 #b1)
     (= retval.sroa.0.0.i.i.i_16_286 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_16_286 and.i.i336.i_16_284))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 50 = MemoryDef(49)
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleSelectInst]SelectMap:
retval.sroa.3.0.i.i.i,,sub.i.i.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
src_reg1.sroa.17.0,and6.i16.i,
spec.select17.i.i.i.i.i,,
cond225.i,i27.i.i,src_reg1.sroa.17.0
.or230.i,,or230.i
.cond225.i,,cond225.i
cond.i168.i,.cond225.i,or.i
cond35.i183.i,or230.i,or8.i172.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
storemerge.i20.i,and8.i17.i,
cond23.i178.i,cond225.i,or.i
cond14.i174.i,.or230.i,or8.i172.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_16_278
[getBitVecSingValType] i64 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000ffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_16_283
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_16_288
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_16_288
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_16_278
[handleSelectInst] z3ExprSelectOp2: #x00000000ffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_16_283
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_16_288
[handleSelectInst](ite (= cmp.i.i.i_16_278 #b1)
     (= retval.sroa.3.0.i.i.i_16_288 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_16_288 sub.i.i.i_16_283))
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_16_286
[getBitVecSingValType]   %and.i.i301.i = and i64 %i18.i298.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i301.i_16_178
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_16_289
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_16_289
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_16_289 (bvor retval.sroa.0.0.i.i.i_16_286 and.i.i301.i_16_178))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_16_288
[getBitVecSingValType]   %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and6.i.i302.i_16_180
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_16_290
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_16_290
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_16_290 (bvand retval.sroa.3.0.i.i.i_16_288 and6.i.i302.i_16_180))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_16_290
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_16_292
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_16_292
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_16_292 (bvxor and.i1.i.i_16_290 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_16_289
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_16_292
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_16_293
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_16_293
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_16_293 (bvand or.i.i.i_16_289 neg.i.i.i_16_292))
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_16_293
[handleStoreInst] BVToStore: and4.i.i.i_16_293
[handleStoreInst] destPointerValue:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 51 = MemoryDef(50)
[handleStoreInst] definingMemoryAccess: 50 = MemoryDef(49)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_195 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_16_293 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
47 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_16_290
[handleStoreInst] BVToStore: and.i1.i.i_16_290
[handleStoreInst] destPointerValue:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 52 = MemoryDef(51)
[handleStoreInst] definingMemoryAccess: 51 = MemoryDef(50)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_16_196 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_16_290 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
52 = MemoryDef(51) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ and.i1.i.i_16_290 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
47 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_294
[lookInsideStruct] singleValueType:dst_reg_16_294
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_295
[lookInsideStruct] singleValueType:dst_reg_16_295
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_296
[lookInsideStruct] singleValueType:dst_reg_16_296
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_297
[lookInsideStruct] singleValueType:dst_reg_16_297
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_298
[lookInsideStruct] singleValueType:dst_reg_16_298
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_299
[lookInsideStruct] singleValueType:dst_reg_16_299
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_300
[lookInsideStruct] singleValueType:dst_reg_16_300
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_301
[lookInsideStruct] singleValueType:dst_reg_16_301
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_302
[lookInsideStruct] singleValueType:dst_reg_16_302
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_303
[lookInsideStruct] singleValueType:dst_reg_16_303
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_304
[lookInsideStruct] singleValueType:dst_reg_16_304
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_305
[lookInsideStruct] singleValueType:dst_reg_16_305
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_306
[lookInsideStruct] singleValueType:dst_reg_16_306
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_307
[lookInsideStruct] singleValueType:dst_reg_16_307
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_16_294 ] [ ] [ dst_reg_16_295 ] [ dst_reg_16_296 ] [ dst_reg_16_297 ] [ [ dst_reg_16_298 ] [ dst_reg_16_299 ] ] [ dst_reg_16_300 ] [ dst_reg_16_301 ] [ dst_reg_16_302 ] [ dst_reg_16_303 ] [ ] [ dst_reg_16_304 ] [ dst_reg_16_305 ] [ dst_reg_16_306 ] [ dst_reg_16_307 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_308
[lookInsideStruct] singleValueType:src_reg_16_308
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_309
[lookInsideStruct] singleValueType:src_reg_16_309
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_310
[lookInsideStruct] singleValueType:src_reg_16_310
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_311
[lookInsideStruct] singleValueType:src_reg_16_311
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_312
[lookInsideStruct] singleValueType:src_reg_16_312
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_313
[lookInsideStruct] singleValueType:src_reg_16_313
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_314
[lookInsideStruct] singleValueType:src_reg_16_314
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_315
[lookInsideStruct] singleValueType:src_reg_16_315
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_316
[lookInsideStruct] singleValueType:src_reg_16_316
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_317
[lookInsideStruct] singleValueType:src_reg_16_317
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_318
[lookInsideStruct] singleValueType:src_reg_16_318
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_319
[lookInsideStruct] singleValueType:src_reg_16_319
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_320
[lookInsideStruct] singleValueType:src_reg_16_320
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_321
[lookInsideStruct] singleValueType:src_reg_16_321
[setupBVTreeForArg] returning BVTree: [ [ src_reg_16_308 ] [ ] [ src_reg_16_309 ] [ src_reg_16_310 ] [ src_reg_16_311 ] [ [ src_reg_16_312 ] [ src_reg_16_313 ] ] [ src_reg_16_314 ] [ src_reg_16_315 ] [ src_reg_16_316 ] [ src_reg_16_317 ] [ ] [ src_reg_16_318 ] [ src_reg_16_319 ] [ src_reg_16_320 ] [ src_reg_16_321 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_16_308 ] [ ] [ src_reg_16_309 ] [ src_reg_16_310 ] [ src_reg_16_311 ] [ [ src_reg_16_312 ] [ src_reg_16_313 ] ] [ src_reg_16_314 ] [ src_reg_16_315 ] [ src_reg_16_316 ] [ src_reg_16_317 ] [ ] [ src_reg_16_318 ] [ src_reg_16_319 ] [ src_reg_16_320 ] [ src_reg_16_321 ] ] 
- dst_reg: [ [ dst_reg_16_294 ] [ ] [ dst_reg_16_295 ] [ dst_reg_16_296 ] [ dst_reg_16_297 ] [ [ dst_reg_16_298 ] [ dst_reg_16_299 ] ] [ dst_reg_16_300 ] [ dst_reg_16_301 ] [ dst_reg_16_302 ] [ dst_reg_16_303 ] [ ] [ dst_reg_16_304 ] [ dst_reg_16_305 ] [ dst_reg_16_306 ] [ dst_reg_16_307 ] ] 

[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 52 = MemoryDef(51)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ and.i1.i.i_16_290 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_16_308 ] [ ] [ src_reg_16_309 ] [ src_reg_16_310 ] [ src_reg_16_311 ] [ [ src_reg_16_312 ] [ src_reg_16_313 ] ] [ src_reg_16_314 ] [ src_reg_16_315 ] [ src_reg_16_316 ] [ src_reg_16_317 ] [ ] [ src_reg_16_318 ] [ src_reg_16_319 ] [ src_reg_16_320 ] [ src_reg_16_321 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ and.i1.i.i_16_290 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_16_294 ] [ ] [ dst_reg_16_295 ] [ dst_reg_16_296 ] [ dst_reg_16_297 ] [ [ dst_reg_16_298 ] [ dst_reg_16_299 ] ] [ dst_reg_16_300 ] [ dst_reg_16_301 ] [ dst_reg_16_302 ] [ dst_reg_16_303 ] [ ] [ dst_reg_16_304 ] [ dst_reg_16_305 ] [ dst_reg_16_306 ] [ dst_reg_16_307 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_16_205 src_reg_16_308)
(= src_reg_16_206 src_reg_16_309)
(= src_reg_16_207 src_reg_16_310)
(= src_reg_16_208 src_reg_16_311)
(= src_reg_16_209 src_reg_16_312)
(= src_reg_16_210 src_reg_16_313)
(= src_reg_16_211 src_reg_16_314)
(= src_reg_16_212 src_reg_16_315)
(= src_reg_16_213 src_reg_16_316)
(= src_reg_16_214 src_reg_16_317)
(= src_reg_16_215 src_reg_16_318)
(= src_reg_16_216 src_reg_16_319)
(= src_reg_16_217 src_reg_16_320)
(= src_reg_16_218 src_reg_16_321)
(= dst_reg_16_191 dst_reg_16_294)
(= dst_reg_16_192 dst_reg_16_295)
(= dst_reg_16_193 dst_reg_16_296)
(= dst_reg_16_194 dst_reg_16_297)
(= and4.i.i.i_16_293 dst_reg_16_298)
(= and.i1.i.i_16_290 dst_reg_16_299)
(= i27.i317.i_16_223 dst_reg_16_300)
(= storemerge.i316.i_16_221 dst_reg_16_301)
(= dst_reg_16_199 dst_reg_16_302)
(= storemerge.i316.i_16_221 dst_reg_16_303)
(= dst_reg_16_201 dst_reg_16_304)
(= dst_reg_16_202 dst_reg_16_305)
(= dst_reg_16_203 dst_reg_16_306)
(= dst_reg_16_204 dst_reg_16_307)
]
[handleMemoryPhiNode] incomingBBI: if.then41.i
[handleMemoryPhiNode] incomingAccessI: 25 = MemoryDef(24)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_16_308 ] [ ] [ src_reg_16_309 ] [ src_reg_16_310 ] [ src_reg_16_311 ] [ [ src_reg_16_312 ] [ src_reg_16_313 ] ] [ src_reg_16_314 ] [ src_reg_16_315 ] [ src_reg_16_316 ] [ src_reg_16_317 ] [ ] [ src_reg_16_318 ] [ src_reg_16_319 ] [ src_reg_16_320 ] [ src_reg_16_321 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_16_294 ] [ ] [ dst_reg_16_295 ] [ dst_reg_16_296 ] [ dst_reg_16_297 ] [ [ dst_reg_16_298 ] [ dst_reg_16_299 ] ] [ dst_reg_16_300 ] [ dst_reg_16_301 ] [ dst_reg_16_302 ] [ dst_reg_16_303 ] [ ] [ dst_reg_16_304 ] [ dst_reg_16_305 ] [ dst_reg_16_306 ] [ dst_reg_16_307 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_16_64 src_reg_16_308)
(= src_reg_16_65 src_reg_16_309)
(= src_reg_16_66 src_reg_16_310)
(= src_reg_16_67 src_reg_16_311)
(= src_reg_16_68 src_reg_16_312)
(= src_reg_16_69 src_reg_16_313)
(= src_reg_16_70 src_reg_16_314)
(= src_reg_16_71 src_reg_16_315)
(= src_reg_16_72 src_reg_16_316)
(= src_reg_16_73 src_reg_16_317)
(= src_reg_16_74 src_reg_16_318)
(= src_reg_16_75 src_reg_16_319)
(= src_reg_16_76 src_reg_16_320)
(= src_reg_16_77 src_reg_16_321)
(= #x00000001 dst_reg_16_294)
(= dst_reg_16_51 dst_reg_16_295)
(= dst_reg_16_52 dst_reg_16_296)
(= dst_reg_16_53 dst_reg_16_297)
(= #x0000000000000000 dst_reg_16_298)
(= #xffffffffffffffff dst_reg_16_299)
(= #x8000000000000000 dst_reg_16_300)
(= #x7fffffffffffffff dst_reg_16_301)
(= #x0000000000000000 dst_reg_16_302)
(= #xffffffffffffffff dst_reg_16_303)
(= #x00000000 dst_reg_16_304)
(= dst_reg_16_61 dst_reg_16_305)
(= dst_reg_16_62 dst_reg_16_306)
(= dst_reg_16_63 dst_reg_16_307)
]
[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 17 = MemoryDef(16)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_16_308 ] [ ] [ src_reg_16_309 ] [ src_reg_16_310 ] [ src_reg_16_311 ] [ [ src_reg_16_312 ] [ src_reg_16_313 ] ] [ src_reg_16_314 ] [ src_reg_16_315 ] [ src_reg_16_316 ] [ src_reg_16_317 ] [ ] [ src_reg_16_318 ] [ src_reg_16_319 ] [ src_reg_16_320 ] [ src_reg_16_321 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_16_294 ] [ ] [ dst_reg_16_295 ] [ dst_reg_16_296 ] [ dst_reg_16_297 ] [ [ dst_reg_16_298 ] [ dst_reg_16_299 ] ] [ dst_reg_16_300 ] [ dst_reg_16_301 ] [ dst_reg_16_302 ] [ dst_reg_16_303 ] [ ] [ dst_reg_16_304 ] [ dst_reg_16_305 ] [ dst_reg_16_306 ] [ dst_reg_16_307 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_16_64 src_reg_16_308)
(= src_reg_16_65 src_reg_16_309)
(= src_reg_16_66 src_reg_16_310)
(= src_reg_16_67 src_reg_16_311)
(= src_reg_16_68 src_reg_16_312)
(= src_reg_16_69 src_reg_16_313)
(= src_reg_16_70 src_reg_16_314)
(= src_reg_16_71 src_reg_16_315)
(= src_reg_16_72 src_reg_16_316)
(= src_reg_16_73 src_reg_16_317)
(= src_reg_16_74 src_reg_16_318)
(= src_reg_16_75 src_reg_16_319)
(= src_reg_16_76 src_reg_16_320)
(= src_reg_16_77 src_reg_16_321)
(= #x00000001 dst_reg_16_294)
(= dst_reg_16_51 dst_reg_16_295)
(= dst_reg_16_52 dst_reg_16_296)
(= dst_reg_16_53 dst_reg_16_297)
(= #x0000000000000000 dst_reg_16_298)
(= #xffffffffffffffff dst_reg_16_299)
(= #x8000000000000000 dst_reg_16_300)
(= #x7fffffffffffffff dst_reg_16_301)
(= #x0000000000000000 dst_reg_16_302)
(= #xffffffffffffffff dst_reg_16_303)
(= #x00000000 dst_reg_16_304)
(= dst_reg_16_61 dst_reg_16_305)
(= dst_reg_16_62 dst_reg_16_306)
(= dst_reg_16_63 dst_reg_16_307)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_16_64 src_reg_16_308)
  (= src_reg_16_65 src_reg_16_309)
  (= src_reg_16_66 src_reg_16_310)
  (= src_reg_16_67 src_reg_16_311)
  (= src_reg_16_68 src_reg_16_312)
  (= src_reg_16_69 src_reg_16_313)
  (= src_reg_16_70 src_reg_16_314)
  (= src_reg_16_71 src_reg_16_315)
  (= src_reg_16_72 src_reg_16_316)
  (= src_reg_16_73 src_reg_16_317)
  (= src_reg_16_74 src_reg_16_318)
  (= src_reg_16_75 src_reg_16_319)
  (= src_reg_16_76 src_reg_16_320)
  (= src_reg_16_77 src_reg_16_321)
  (= #x00000001 dst_reg_16_294)
  (= dst_reg_16_51 dst_reg_16_295)
  (= dst_reg_16_52 dst_reg_16_296)
  (= dst_reg_16_53 dst_reg_16_297)
  (= #x0000000000000000 dst_reg_16_298)
  (= #xffffffffffffffff dst_reg_16_299)
  (= #x8000000000000000 dst_reg_16_300)
  (= #x7fffffffffffffff dst_reg_16_301)
  (= #x0000000000000000 dst_reg_16_302)
  (= #xffffffffffffffff dst_reg_16_303)
  (= #x00000000 dst_reg_16_304)
  (= dst_reg_16_61 dst_reg_16_305)
  (= dst_reg_16_62 dst_reg_16_306)
  (= dst_reg_16_63 dst_reg_16_307)
<if.then41.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_16_64 src_reg_16_308)
  (= src_reg_16_65 src_reg_16_309)
  (= src_reg_16_66 src_reg_16_310)
  (= src_reg_16_67 src_reg_16_311)
  (= src_reg_16_68 src_reg_16_312)
  (= src_reg_16_69 src_reg_16_313)
  (= src_reg_16_70 src_reg_16_314)
  (= src_reg_16_71 src_reg_16_315)
  (= src_reg_16_72 src_reg_16_316)
  (= src_reg_16_73 src_reg_16_317)
  (= src_reg_16_74 src_reg_16_318)
  (= src_reg_16_75 src_reg_16_319)
  (= src_reg_16_76 src_reg_16_320)
  (= src_reg_16_77 src_reg_16_321)
  (= #x00000001 dst_reg_16_294)
  (= dst_reg_16_51 dst_reg_16_295)
  (= dst_reg_16_52 dst_reg_16_296)
  (= dst_reg_16_53 dst_reg_16_297)
  (= #x0000000000000000 dst_reg_16_298)
  (= #xffffffffffffffff dst_reg_16_299)
  (= #x8000000000000000 dst_reg_16_300)
  (= #x7fffffffffffffff dst_reg_16_301)
  (= #x0000000000000000 dst_reg_16_302)
  (= #xffffffffffffffff dst_reg_16_303)
  (= #x00000000 dst_reg_16_304)
  (= dst_reg_16_61 dst_reg_16_305)
  (= dst_reg_16_62 dst_reg_16_306)
  (= dst_reg_16_63 dst_reg_16_307)
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_16_205 src_reg_16_308)
  (= src_reg_16_206 src_reg_16_309)
  (= src_reg_16_207 src_reg_16_310)
  (= src_reg_16_208 src_reg_16_311)
  (= src_reg_16_209 src_reg_16_312)
  (= src_reg_16_210 src_reg_16_313)
  (= src_reg_16_211 src_reg_16_314)
  (= src_reg_16_212 src_reg_16_315)
  (= src_reg_16_213 src_reg_16_316)
  (= src_reg_16_214 src_reg_16_317)
  (= src_reg_16_215 src_reg_16_318)
  (= src_reg_16_216 src_reg_16_319)
  (= src_reg_16_217 src_reg_16_320)
  (= src_reg_16_218 src_reg_16_321)
  (= dst_reg_16_191 dst_reg_16_294)
  (= dst_reg_16_192 dst_reg_16_295)
  (= dst_reg_16_193 dst_reg_16_296)
  (= dst_reg_16_194 dst_reg_16_297)
  (= and4.i.i.i_16_293 dst_reg_16_298)
  (= and.i1.i.i_16_290 dst_reg_16_299)
  (= i27.i317.i_16_223 dst_reg_16_300)
  (= storemerge.i316.i_16_221 dst_reg_16_301)
  (= dst_reg_16_199 dst_reg_16_302)
  (= storemerge.i316.i_16_221 dst_reg_16_303)
  (= dst_reg_16_201 dst_reg_16_304)
  (= dst_reg_16_202 dst_reg_16_305)
  (= dst_reg_16_203 dst_reg_16_306)
  (= dst_reg_16_204 dst_reg_16_307)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_16_158 src_reg_16_205)
  (= src_reg_16_159 src_reg_16_206)
  (= src_reg_16_160 src_reg_16_207)
  (= src_reg_16_161 src_reg_16_208)
  (= src_reg_16_162 src_reg_16_209)
  (= src_reg_16_163 src_reg_16_210)
  (= src_reg_16_164 src_reg_16_211)
  (= src_reg_16_165 src_reg_16_212)
  (= src_reg_16_166 src_reg_16_213)
  (= src_reg_16_167 src_reg_16_214)
  (= src_reg_16_168 src_reg_16_215)
  (= src_reg_16_169 src_reg_16_216)
  (= src_reg_16_170 src_reg_16_217)
  (= src_reg_16_171 src_reg_16_218)
  (= dst_reg_16_144 dst_reg_16_191)
  (= dst_reg_16_145 dst_reg_16_192)
  (= dst_reg_16_146 dst_reg_16_193)
  (= dst_reg_16_147 dst_reg_16_194)
  (= and.i.i301.i_16_178 dst_reg_16_195)
  (= and6.i.i302.i_16_180 dst_reg_16_196)
  (= dst_reg_16_150 dst_reg_16_197)
  (= dst_reg_16_151 dst_reg_16_198)
  (= #x0000000000000000 dst_reg_16_199)
  (= storemerge_16_174 dst_reg_16_200)
  (= dst_reg_16_154 dst_reg_16_201)
  (= dst_reg_16_155 dst_reg_16_202)
  (= dst_reg_16_156 dst_reg_16_203)
  (= dst_reg_16_157 dst_reg_16_204)
<if.then.i314.i, coerce_reg_to_size.exit320.i> :
  (= src_reg_16_158 src_reg_16_205)
  (= src_reg_16_159 src_reg_16_206)
  (= src_reg_16_160 src_reg_16_207)
  (= src_reg_16_161 src_reg_16_208)
  (= src_reg_16_162 src_reg_16_209)
  (= src_reg_16_163 src_reg_16_210)
  (= src_reg_16_164 src_reg_16_211)
  (= src_reg_16_165 src_reg_16_212)
  (= src_reg_16_166 src_reg_16_213)
  (= src_reg_16_167 src_reg_16_214)
  (= src_reg_16_168 src_reg_16_215)
  (= src_reg_16_169 src_reg_16_216)
  (= src_reg_16_170 src_reg_16_217)
  (= src_reg_16_171 src_reg_16_218)
  (= dst_reg_16_144 dst_reg_16_191)
  (= dst_reg_16_145 dst_reg_16_192)
  (= dst_reg_16_146 dst_reg_16_193)
  (= dst_reg_16_147 dst_reg_16_194)
  (= and.i.i301.i_16_178 dst_reg_16_195)
  (= and6.i.i302.i_16_180 dst_reg_16_196)
  (= dst_reg_16_150 dst_reg_16_197)
  (= dst_reg_16_151 dst_reg_16_198)
  (= and6.i312.i_16_187 dst_reg_16_199)
  (= storemerge_16_174 dst_reg_16_200)
  (= dst_reg_16_154 dst_reg_16_201)
  (= dst_reg_16_155 dst_reg_16_202)
  (= dst_reg_16_156 dst_reg_16_203)
  (= dst_reg_16_157 dst_reg_16_204)
<if.end212.i, if.then308.i> :
  (= src_reg_16_64 src_reg_16_158)
  (= src_reg_16_65 src_reg_16_159)
  (= src_reg_16_66 src_reg_16_160)
  (= src_reg_16_67 src_reg_16_161)
  (= src_reg_16_68 src_reg_16_162)
  (= src_reg_16_69 src_reg_16_163)
  (= src_reg_16_70 src_reg_16_164)
  (= src_reg_16_71 src_reg_16_165)
  (= src_reg_16_72 src_reg_16_166)
  (= src_reg_16_73 src_reg_16_167)
  (= src_reg_16_74 src_reg_16_168)
  (= src_reg_16_75 src_reg_16_169)
  (= src_reg_16_76 src_reg_16_170)
  (= src_reg_16_77 src_reg_16_171)
  (= dst_reg_16_50 dst_reg_16_144)
  (= dst_reg_16_51 dst_reg_16_145)
  (= dst_reg_16_52 dst_reg_16_146)
  (= dst_reg_16_53 dst_reg_16_147)
  (= or.i_16_120 dst_reg_16_148)
  (= and.i156.i_16_125 dst_reg_16_149)
  (= cond.i168.i_16_136 dst_reg_16_150)
  (= cond14.i174.i_16_139 dst_reg_16_151)
  (= cond23.i178.i_16_141 dst_reg_16_152)
  (= or230.i_16_128 dst_reg_16_153)
  (= dst_reg_16_60 dst_reg_16_154)
  (= dst_reg_16_61 dst_reg_16_155)
  (= dst_reg_16_62 dst_reg_16_156)
  (= dst_reg_16_63 dst_reg_16_157)
<if.then207.i, if.then308.i> :
  (= src_reg_16_64 src_reg_16_158)
  (= src_reg_16_65 src_reg_16_159)
  (= src_reg_16_66 src_reg_16_160)
  (= src_reg_16_67 src_reg_16_161)
  (= src_reg_16_68 src_reg_16_162)
  (= src_reg_16_69 src_reg_16_163)
  (= src_reg_16_70 src_reg_16_164)
  (= src_reg_16_71 src_reg_16_165)
  (= src_reg_16_72 src_reg_16_166)
  (= src_reg_16_73 src_reg_16_167)
  (= src_reg_16_74 src_reg_16_168)
  (= src_reg_16_75 src_reg_16_169)
  (= src_reg_16_76 src_reg_16_170)
  (= src_reg_16_77 src_reg_16_171)
  (= dst_reg_16_50 dst_reg_16_144)
  (= dst_reg_16_51 dst_reg_16_145)
  (= dst_reg_16_52 dst_reg_16_146)
  (= dst_reg_16_53 dst_reg_16_147)
  (= or.i_16_120 dst_reg_16_148)
  (= #x0000000000000000 dst_reg_16_149)
  (= or.i_16_120 dst_reg_16_150)
  (= or.i_16_120 dst_reg_16_151)
  (= or.i_16_120 dst_reg_16_152)
  (= storemerge.i.i_16_80 dst_reg_16_153)
  (= dst_reg_16_60 dst_reg_16_154)
  (= dst_reg_16_61 dst_reg_16_155)
  (= dst_reg_16_62 dst_reg_16_156)
  (= dst_reg_16_63 dst_reg_16_157)
<if.else.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_16_64)
  (= src_reg_16_15 src_reg_16_65)
  (= src_reg_16_16 src_reg_16_66)
  (= src_reg_16_17 src_reg_16_67)
  (= src_reg_16_18 src_reg_16_68)
  (= src_reg_16_19 src_reg_16_69)
  (= src_reg_16_20 src_reg_16_70)
  (= src_reg_16_21 src_reg_16_71)
  (= src_reg_16_22 src_reg_16_72)
  (= src_reg_16_23 src_reg_16_73)
  (= src_reg_16_24 src_reg_16_74)
  (= src_reg_16_25 src_reg_16_75)
  (= src_reg_16_26 src_reg_16_76)
  (= src_reg_16_27 src_reg_16_77)
  (= #x00000001 dst_reg_16_50)
  (= dst_reg_16_1 dst_reg_16_51)
  (= dst_reg_16_2 dst_reg_16_52)
  (= dst_reg_16_3 dst_reg_16_53)
  (= and.i.i.i_16_37 dst_reg_16_54)
  (= and6.i.i.i_16_39 dst_reg_16_55)
  (= dst_reg_16_6 dst_reg_16_56)
  (= dst_reg_16_7 dst_reg_16_57)
  (= #x0000000000000000 dst_reg_16_58)
  (= dst_reg_16_9 dst_reg_16_59)
  (= dst_reg_16_10 dst_reg_16_60)
  (= dst_reg_16_11 dst_reg_16_61)
  (= dst_reg_16_12 dst_reg_16_62)
  (= dst_reg_16_13 dst_reg_16_63)
<if.then.i.i, coerce_reg_to_size.exit.i> :
  (= #x00000001 src_reg_16_64)
  (= src_reg_16_15 src_reg_16_65)
  (= src_reg_16_16 src_reg_16_66)
  (= src_reg_16_17 src_reg_16_67)
  (= src_reg_16_18 src_reg_16_68)
  (= src_reg_16_19 src_reg_16_69)
  (= src_reg_16_20 src_reg_16_70)
  (= src_reg_16_21 src_reg_16_71)
  (= src_reg_16_22 src_reg_16_72)
  (= src_reg_16_23 src_reg_16_73)
  (= src_reg_16_24 src_reg_16_74)
  (= src_reg_16_25 src_reg_16_75)
  (= src_reg_16_26 src_reg_16_76)
  (= src_reg_16_27 src_reg_16_77)
  (= #x00000001 dst_reg_16_50)
  (= dst_reg_16_1 dst_reg_16_51)
  (= dst_reg_16_2 dst_reg_16_52)
  (= dst_reg_16_3 dst_reg_16_53)
  (= and.i.i.i_16_37 dst_reg_16_54)
  (= and6.i.i.i_16_39 dst_reg_16_55)
  (= dst_reg_16_6 dst_reg_16_56)
  (= dst_reg_16_7 dst_reg_16_57)
  (= and6.i.i_16_46 dst_reg_16_58)
  (= dst_reg_16_9 dst_reg_16_59)
  (= dst_reg_16_10 dst_reg_16_60)
  (= dst_reg_16_11 dst_reg_16_61)
  (= dst_reg_16_12 dst_reg_16_62)
  (= dst_reg_16_13 dst_reg_16_63)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i18.i.i = load i64, i64* %i.i.i, align 8
-------------------
-------------------
  %i19.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i20.i.i = load i64, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i.i = and i64 %i18.i.i, 4294967295
-------------------
-------------------
  %and6.i.i.i = and i64 %i20.i.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %umin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i23.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %umax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i24.i.i = load i64, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i25.i.i = xor i64 %i24.i.i, %i23.i.i
-------------------
-------------------
  %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
-------------------
-------------------
  br i1 %cmp.i.i, label %if.then.i.i, label %if.else.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i = icmp ult i64 %i25.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i_16_44
[handleBranchInst] Edge Assertions:
<entry, if.then.i.i>: (= cmp.i.i_16_44 #b1)
<entry, if.else.i.i>: (= cmp.i.i_16_44 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i.i: (= cmp.i.i_16_44 #b1)
[handleBranchInst] if.else.i.i: (= cmp.i.i_16_44 #b0)
[handleBranchInst] <entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] <entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
if.then.i.i
=========================
-------------------
  %and6.i.i = and i64 %i23.i.i, 4294967295
-------------------
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %and8.i.i = and i64 %i24.i.i, 4294967295
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_16_44 #b1)
[handleBranchInst] coerce_reg_to_size.exit.i: (= cmp.i.i_16_44 #b1)
[handleBranchInst] <if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_16_44 #b1)
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %coerce_reg_to_size.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (= cmp.i.i_16_44 #b1)
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit.i
[handleBranchInst] newPathCond: (= cmp.i.i_16_44 #b0)
[handleBranchInst] coerce_reg_to_size.exit.i: (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
[handleBranchInst] <if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i27.i.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %smin_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  %smax_value.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %and.i.i5.i = and i64 %src_reg1.sroa.3.0.copyload, 4294967295
-------------------
-------------------
  %and6.i.i6.i = and i64 %src_reg1.sroa.10.0.copyload, 4294967295
-------------------
-------------------
  %i25.i13.i = xor i64 %src_reg1.sroa.22.0.copyload, %src_reg1.sroa.17.0.copyload
-------------------
-------------------
  %cmp.i15.i = icmp ult i64 %i25.i13.i, 4294967296
-------------------
-------------------
  %and6.i16.i = and i64 %src_reg1.sroa.17.0.copyload, 4294967295
-------------------
-------------------
  %and8.i17.i = and i64 %src_reg1.sroa.22.0.copyload, 4294967295
-------------------
-------------------
  %src_reg1.sroa.17.0 = select i1 %cmp.i15.i, i64 %and6.i16.i, i64 0
-------------------
-------------------
  %storemerge.i20.i = select i1 %cmp.i15.i, i64 %and8.i17.i, i64 4294967295
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
-------------------
-------------------
  %tobool.not.i25.i = icmp eq i64 %and6.i.i.i, 0
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_16_99
[handleBranchInst] Edge Assertions:
<coerce_reg_to_size.exit.i, land.lhs.true.i>: (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i>: (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] lor.lhs.false20.i: (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] <coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp18.not.i.not, label %if.end27.i, label %if.then26.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp18.not.i.not = icmp eq i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i.not_16_102
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.end27.i>: (and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i>: (and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.end27.i: (and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] if.then26.i: (and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
-------------------
-------------------
  br i1 %cmp24.old.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0, %storemerge.i20.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_16_103
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i>: (and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
[handleBranchInst] if.end27.i: (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack2 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
if.end27.i
=========================
-------------------
  br i1 %tobool.not.i.i, label %sw.bb201.i, label %if.then41.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %and6.i.i6.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_16_99
[handleBranchInst] Edge Assertions:
<if.end27.i, sw.bb201.i>: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i>: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] Path Conditions:
[handleBranchInst] sw.bb201.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] if.then41.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] <if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] <if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i28.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  %var_off.i28.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  %frameno.i30.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
[handleBranchInst] <if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] EdgeAssertionsMap:
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
sw.bb201.i
=========================
-------------------
  %or.i = or i64 %and.i.i.i, %and.i.i5.i
-------------------
-------------------
  br i1 %tobool.not.i25.i, label %if.then207.i, label %if.end212.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i25.i = icmp eq i64 %and6.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i25.i_16_101
[handleBranchInst] Edge Assertions:
<sw.bb201.i, if.then207.i>: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i>: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then207.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] if.end212.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] <sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] <sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] EdgeAssertionsMap:
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
if.then207.i
=========================
-------------------
  store i64 %or.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.then308.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] if.then308.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] <if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] EdgeAssertionsMap:
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
if.end212.i
=========================
-------------------
  %or3.i154.i = or i64 %and6.i.i.i, %and6.i.i6.i
-------------------
-------------------
  %neg.i155.i = xor i64 %or.i, -1
-------------------
-------------------
  %and.i156.i = and i64 %or3.i154.i, %neg.i155.i
-------------------
-------------------
  store i64 %or.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i156.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %cmp220.i = icmp ugt i64 %i27.i.i, %src_reg1.sroa.17.0
-------------------
-------------------
  %cond225.i = select i1 %cmp220.i, i64 %i27.i.i, i64 %src_reg1.sroa.17.0
-------------------
-------------------
  store i64 %cond225.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %or230.i = or i64 %or3.i154.i, %or.i
-------------------
-------------------
  store i64 %or230.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %cmp233.i = icmp slt i64 %i27.i.i, 0
-------------------
-------------------
  %.cond225.i = select i1 %cmp233.i, i64 -9223372036854775808, i64 %cond225.i
-------------------
-------------------
  %.or230.i = select i1 %cmp233.i, i64 9223372036854775807, i64 %or230.i
-------------------
-------------------
  store i64 %.cond225.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %.or230.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %cmp.i167.i = icmp sgt i64 %.cond225.i, %or.i
-------------------
-------------------
  %cond.i168.i = select i1 %cmp.i167.i, i64 %.cond225.i, i64 %or.i
-------------------
-------------------
  store i64 %cond.i168.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  %or8.i172.i = or i64 %or3.i154.i, %or.i
-------------------
-------------------
  %cmp10.i173.i = icmp ult i64 %.or230.i, %or8.i172.i
-------------------
-------------------
  %cond14.i174.i = select i1 %cmp10.i173.i, i64 %.or230.i, i64 %or8.i172.i
-------------------
-------------------
  store i64 %cond14.i174.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %cmp19.i177.i = icmp ugt i64 %cond225.i, %or.i
-------------------
-------------------
  %cond23.i178.i = select i1 %cmp19.i177.i, i64 %cond225.i, i64 %or.i
-------------------
-------------------
  store i64 %cond23.i178.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %cmp31.i182.i = icmp ult i64 %or230.i, %or8.i172.i
-------------------
-------------------
  %cond35.i183.i = select i1 %cmp31.i182.i, i64 %or230.i, i64 %or8.i172.i
-------------------
-------------------
  br label %if.then308.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.then308.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] if.then308.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
[handleBranchInst] <if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
[handleBranchInst] EdgeAssertionsMap:
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
=========================
if.then308.i
=========================
-------------------
  %storemerge = phi i64 [ %cond35.i183.i, %if.end212.i ], [ %or.i, %if.then207.i ]
-------------------
-------------------
  store i64 %storemerge, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i18.i298.i = load i64, i64* %i.i.i, align 8
-------------------
-------------------
  %i20.i300.i = load i64, i64* %i19.i.i, align 8
-------------------
-------------------
  %and.i.i301.i = and i64 %i18.i298.i, 4294967295
-------------------
-------------------
  %and6.i.i302.i = and i64 %i20.i300.i, 4294967295
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
-------------------
  %i23.i306.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %i24.i308.i = load i64, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i25.i309.i = xor i64 %i24.i308.i, %i23.i306.i
-------------------
-------------------
  %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
-------------------
-------------------
  br i1 %cmp.i311.i, label %if.then.i314.i, label %if.else.i315.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i311.i = icmp ult i64 %i25.i309.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i311.i_16_185
[handleBranchInst] Edge Assertions:
<if.then308.i, if.then.i314.i>: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.then308.i, if.else.i315.i>: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i314.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
[handleBranchInst] if.else.i315.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
[handleBranchInst] <if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
[handleBranchInst] <if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
=========================
if.then.i314.i
=========================
-------------------
  %and6.i312.i = and i64 %i23.i306.i, 4294967295
-------------------
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  %and8.i313.i = and i64 %i24.i308.i, 4294967295
-------------------
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit320.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
[handleBranchInst] coerce_reg_to_size.exit320.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
[handleBranchInst] <if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  br label %coerce_reg_to_size.exit320.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: coerce_reg_to_size.exit320.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
[handleBranchInst] coerce_reg_to_size.exit320.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (or (and (= cmp.i311.i_16_185 #b0) a!2) (and (= cmp.i311.i_16_185 #b1) a!2))))
[handleBranchInst] <if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (or (and (= cmp.i311.i_16_185 #b0) a!2) (and (= cmp.i311.i_16_185 #b1) a!2))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
=========================
coerce_reg_to_size.exit320.i
=========================
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  %i27.i317.i = load i64, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i27.i317.i, %storemerge.i316.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (or (and (= cmp.i311.i_16_185 #b0) a!2) (and (= cmp.i311.i_16_185 #b1) a!2))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_16_226
[handleBranchInst] Edge Assertions:
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i>: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i>: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
[handleBranchInst] <coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
[handleBranchInst] <coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (or (and (= cmp.i311.i_16_185 #b0) a!2) (and (= cmp.i311.i_16_185 #b1) a!2))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (or (and (= cmp.i311.i_16_185 #b0) a!2) (and (= cmp.i311.i_16_185 #b1) a!2))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!3) (and (= cmp.i.i.i.i_16_226 #b1) a!3)))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!3) (and (= cmp.i.i.i.i_16_226 #b1) a!3)))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (or (and (= cmp.i311.i_16_185 #b0) a!2) (and (= cmp.i311.i_16_185 #b1) a!2))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i27.i317.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 4294967295, i64 %sub.i.i.i
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %and.i.i301.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %and6.i.i302.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!3) (and (= cmp.i.i.i.i_16_226 #b1) a!3)))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (or (and (= cmp.i311.i_16_185 #b0) a!2) (and (= cmp.i311.i_16_185 #b1) a!2))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (and (= tobool.not.i.i_16_99 #b0)
                (or (and (= cmp24.old.i_16_103 #b0) a!1)
                    (and (= cmp18.not.i.not_16_102 #b1) a!2)))))
  (or a!3
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!3) (and (= cmp.i.i.i.i_16_226 #b1) a!3)))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_16_103 #b0) a!1)
               (and (= cmp18.not.i.not_16_102 #b1) a!2))))
(let ((a!4 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!3))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!3)))))
(let ((a!5 (or (and (= cmp.i311.i_16_185 #b0) a!4)
               (and (= cmp.i311.i_16_185 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!5)
      (and (= cmp.i.i.i.i_16_226 #b1) a!5)
      (and (= tobool.not.i.i_16_99 #b0) a!3)
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!3) (and (= cmp.i.i.i.i_16_226 #b1) a!3)))))
[handleBranchInst] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!3) (and (= cmp.i.i.i.i_16_226 #b1) a!3)))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!3) (and (= cmp.i.i.i.i_16_226 #b1) a!3)))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (or (and (= cmp.i311.i_16_185 #b0) a!2) (and (= cmp.i311.i_16_185 #b1) a!2))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_16_103 #b0) a!1)
               (and (= cmp18.not.i.not_16_102 #b1) a!2))))
(let ((a!4 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!3))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!3)))))
(let ((a!5 (or (and (= cmp.i311.i_16_185 #b0) a!4)
               (and (= cmp.i311.i_16_185 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!5)
      (and (= cmp.i.i.i.i_16_226 #b1) a!5)
      (and (= tobool.not.i.i_16_99 #b0) a!3)
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
if.then.i.i
=========================
=========================
if.else.i.i
=========================
=========================
coerce_reg_to_size.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (= cmp.i.i_16_44 #b1)
    (and (= #x00000001 src_reg_16_64)
         (= src_reg_16_15 src_reg_16_65)
         (= src_reg_16_16 src_reg_16_66)
         (= src_reg_16_17 src_reg_16_67)
         (= src_reg_16_18 src_reg_16_68)
         (= src_reg_16_19 src_reg_16_69)
         (= src_reg_16_20 src_reg_16_70)
         (= src_reg_16_21 src_reg_16_71)
         (= src_reg_16_22 src_reg_16_72)
         (= src_reg_16_23 src_reg_16_73)
         (= src_reg_16_24 src_reg_16_74)
         (= src_reg_16_25 src_reg_16_75)
         (= src_reg_16_26 src_reg_16_76)
         (= src_reg_16_27 src_reg_16_77)
         (= #x00000001 dst_reg_16_50)
         (= dst_reg_16_1 dst_reg_16_51)
         (= dst_reg_16_2 dst_reg_16_52)
         (= dst_reg_16_3 dst_reg_16_53)
         (= and.i.i.i_16_37 dst_reg_16_54)
         (= and6.i.i.i_16_39 dst_reg_16_55)
         (= dst_reg_16_6 dst_reg_16_56)
         (= dst_reg_16_7 dst_reg_16_57)
         (= and6.i.i_16_46 dst_reg_16_58)
         (= dst_reg_16_9 dst_reg_16_59)
         (= dst_reg_16_10 dst_reg_16_60)
         (= dst_reg_16_11 dst_reg_16_61)
         (= dst_reg_16_12 dst_reg_16_62)
         (= dst_reg_16_13 dst_reg_16_63)))
phiResolveI (i=1) (=> (= cmp.i.i_16_44 #b0)
    (and (= #x00000001 src_reg_16_64)
         (= src_reg_16_15 src_reg_16_65)
         (= src_reg_16_16 src_reg_16_66)
         (= src_reg_16_17 src_reg_16_67)
         (= src_reg_16_18 src_reg_16_68)
         (= src_reg_16_19 src_reg_16_69)
         (= src_reg_16_20 src_reg_16_70)
         (= src_reg_16_21 src_reg_16_71)
         (= src_reg_16_22 src_reg_16_72)
         (= src_reg_16_23 src_reg_16_73)
         (= src_reg_16_24 src_reg_16_74)
         (= src_reg_16_25 src_reg_16_75)
         (= src_reg_16_26 src_reg_16_76)
         (= src_reg_16_27 src_reg_16_77)
         (= #x00000001 dst_reg_16_50)
         (= dst_reg_16_1 dst_reg_16_51)
         (= dst_reg_16_2 dst_reg_16_52)
         (= dst_reg_16_3 dst_reg_16_53)
         (= and.i.i.i_16_37 dst_reg_16_54)
         (= and6.i.i.i_16_39 dst_reg_16_55)
         (= dst_reg_16_6 dst_reg_16_56)
         (= dst_reg_16_7 dst_reg_16_57)
         (= #x0000000000000000 dst_reg_16_58)
         (= dst_reg_16_9 dst_reg_16_59)
         (= dst_reg_16_10 dst_reg_16_60)
         (= dst_reg_16_11 dst_reg_16_61)
         (= dst_reg_16_12 dst_reg_16_62)
         (= dst_reg_16_13 dst_reg_16_63)))
-------------------
  %storemerge.i.i = phi i64 [ 4294967295, %if.else.i.i ], [ %and8.i.i, %if.then.i.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else.i.i_coerce_reg_to_size.exit.i_16_78
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_16_44 #b0)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.else.i.i_coerce_reg_to_size.exit.i_16_78 (= cmp.i.i_16_44 #b0))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then.i.i_coerce_reg_to_size.exit.i_16_79
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (= cmp.i.i_16_44 #b1)
[handlePhiNodeResolvePathConditions] phiResolveI: (= if.then.i.i_coerce_reg_to_size.exit.i_16_79 (= cmp.i.i_16_44 #b1))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
  (=> (= cmp.i.i_16_44 #b1)
    (and (= #x00000001 src_reg_16_64)
         (= src_reg_16_15 src_reg_16_65)
         (= src_reg_16_16 src_reg_16_66)
         (= src_reg_16_17 src_reg_16_67)
         (= src_reg_16_18 src_reg_16_68)
         (= src_reg_16_19 src_reg_16_69)
         (= src_reg_16_20 src_reg_16_70)
         (= src_reg_16_21 src_reg_16_71)
         (= src_reg_16_22 src_reg_16_72)
         (= src_reg_16_23 src_reg_16_73)
         (= src_reg_16_24 src_reg_16_74)
         (= src_reg_16_25 src_reg_16_75)
         (= src_reg_16_26 src_reg_16_76)
         (= src_reg_16_27 src_reg_16_77)
         (= #x00000001 dst_reg_16_50)
         (= dst_reg_16_1 dst_reg_16_51)
         (= dst_reg_16_2 dst_reg_16_52)
         (= dst_reg_16_3 dst_reg_16_53)
         (= and.i.i.i_16_37 dst_reg_16_54)
         (= and6.i.i.i_16_39 dst_reg_16_55)
         (= dst_reg_16_6 dst_reg_16_56)
         (= dst_reg_16_7 dst_reg_16_57)
         (= and6.i.i_16_46 dst_reg_16_58)
         (= dst_reg_16_9 dst_reg_16_59)
         (= dst_reg_16_10 dst_reg_16_60)
         (= dst_reg_16_11 dst_reg_16_61)
         (= dst_reg_16_12 dst_reg_16_62)
         (= dst_reg_16_13 dst_reg_16_63)))
  (=> (= cmp.i.i_16_44 #b0)
    (and (= #x00000001 src_reg_16_64)
         (= src_reg_16_15 src_reg_16_65)
         (= src_reg_16_16 src_reg_16_66)
         (= src_reg_16_17 src_reg_16_67)
         (= src_reg_16_18 src_reg_16_68)
         (= src_reg_16_19 src_reg_16_69)
         (= src_reg_16_20 src_reg_16_70)
         (= src_reg_16_21 src_reg_16_71)
         (= src_reg_16_22 src_reg_16_72)
         (= src_reg_16_23 src_reg_16_73)
         (= src_reg_16_24 src_reg_16_74)
         (= src_reg_16_25 src_reg_16_75)
         (= src_reg_16_26 src_reg_16_76)
         (= src_reg_16_27 src_reg_16_77)
         (= #x00000001 dst_reg_16_50)
         (= dst_reg_16_1 dst_reg_16_51)
         (= dst_reg_16_2 dst_reg_16_52)
         (= dst_reg_16_3 dst_reg_16_53)
         (= and.i.i.i_16_37 dst_reg_16_54)
         (= and6.i.i.i_16_39 dst_reg_16_55)
         (= dst_reg_16_6 dst_reg_16_56)
         (= dst_reg_16_7 dst_reg_16_57)
         (= #x0000000000000000 dst_reg_16_58)
         (= dst_reg_16_9 dst_reg_16_59)
         (= dst_reg_16_10 dst_reg_16_60)
         (= dst_reg_16_11 dst_reg_16_61)
         (= dst_reg_16_12 dst_reg_16_62)
         (= dst_reg_16_13 dst_reg_16_63)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_16_78 (= cmp.i.i_16_44 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_16_79 (= cmp.i.i_16_44 #b1))

=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
=========================
sw.bb201.i
=========================
=========================
if.then207.i
=========================
=========================
if.end212.i
=========================
=========================
if.then308.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1)
      (and (= src_reg_16_64 src_reg_16_158)
           (= src_reg_16_65 src_reg_16_159)
           (= src_reg_16_66 src_reg_16_160)
           (= src_reg_16_67 src_reg_16_161)
           (= src_reg_16_68 src_reg_16_162)
           (= src_reg_16_69 src_reg_16_163)
           (= src_reg_16_70 src_reg_16_164)
           (= src_reg_16_71 src_reg_16_165)
           (= src_reg_16_72 src_reg_16_166)
           (= src_reg_16_73 src_reg_16_167)
           (= src_reg_16_74 src_reg_16_168)
           (= src_reg_16_75 src_reg_16_169)
           (= src_reg_16_76 src_reg_16_170)
           (= src_reg_16_77 src_reg_16_171)
           (= dst_reg_16_50 dst_reg_16_144)
           (= dst_reg_16_51 dst_reg_16_145)
           (= dst_reg_16_52 dst_reg_16_146)
           (= dst_reg_16_53 dst_reg_16_147)
           (= or.i_16_120 dst_reg_16_148)
           (= #x0000000000000000 dst_reg_16_149)
           (= or.i_16_120 dst_reg_16_150)
           (= or.i_16_120 dst_reg_16_151)
           (= or.i_16_120 dst_reg_16_152)
           (= storemerge.i.i_16_80 dst_reg_16_153)
           (= dst_reg_16_60 dst_reg_16_154)
           (= dst_reg_16_61 dst_reg_16_155)
           (= dst_reg_16_62 dst_reg_16_156)
           (= dst_reg_16_63 dst_reg_16_157))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1)
      (and (= src_reg_16_64 src_reg_16_158)
           (= src_reg_16_65 src_reg_16_159)
           (= src_reg_16_66 src_reg_16_160)
           (= src_reg_16_67 src_reg_16_161)
           (= src_reg_16_68 src_reg_16_162)
           (= src_reg_16_69 src_reg_16_163)
           (= src_reg_16_70 src_reg_16_164)
           (= src_reg_16_71 src_reg_16_165)
           (= src_reg_16_72 src_reg_16_166)
           (= src_reg_16_73 src_reg_16_167)
           (= src_reg_16_74 src_reg_16_168)
           (= src_reg_16_75 src_reg_16_169)
           (= src_reg_16_76 src_reg_16_170)
           (= src_reg_16_77 src_reg_16_171)
           (= dst_reg_16_50 dst_reg_16_144)
           (= dst_reg_16_51 dst_reg_16_145)
           (= dst_reg_16_52 dst_reg_16_146)
           (= dst_reg_16_53 dst_reg_16_147)
           (= or.i_16_120 dst_reg_16_148)
           (= and.i156.i_16_125 dst_reg_16_149)
           (= cond.i168.i_16_136 dst_reg_16_150)
           (= cond14.i174.i_16_139 dst_reg_16_151)
           (= cond23.i178.i_16_141 dst_reg_16_152)
           (= or230.i_16_128 dst_reg_16_153)
           (= dst_reg_16_60 dst_reg_16_154)
           (= dst_reg_16_61 dst_reg_16_155)
           (= dst_reg_16_62 dst_reg_16_156)
           (= dst_reg_16_63 dst_reg_16_157))))
-------------------
  %storemerge = phi i64 [ %cond35.i183.i, %if.end212.i ], [ %or.i, %if.then207.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end212.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end212.i_if.then308.i_16_172
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (= if.end212.i_if.then308.i_16_172
     (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1)))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then207.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then207.i_if.then308.i_16_173
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (= if.then207.i_if.then308.i_16_173
     (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1)))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1)
      (and (= src_reg_16_64 src_reg_16_158)
           (= src_reg_16_65 src_reg_16_159)
           (= src_reg_16_66 src_reg_16_160)
           (= src_reg_16_67 src_reg_16_161)
           (= src_reg_16_68 src_reg_16_162)
           (= src_reg_16_69 src_reg_16_163)
           (= src_reg_16_70 src_reg_16_164)
           (= src_reg_16_71 src_reg_16_165)
           (= src_reg_16_72 src_reg_16_166)
           (= src_reg_16_73 src_reg_16_167)
           (= src_reg_16_74 src_reg_16_168)
           (= src_reg_16_75 src_reg_16_169)
           (= src_reg_16_76 src_reg_16_170)
           (= src_reg_16_77 src_reg_16_171)
           (= dst_reg_16_50 dst_reg_16_144)
           (= dst_reg_16_51 dst_reg_16_145)
           (= dst_reg_16_52 dst_reg_16_146)
           (= dst_reg_16_53 dst_reg_16_147)
           (= or.i_16_120 dst_reg_16_148)
           (= #x0000000000000000 dst_reg_16_149)
           (= or.i_16_120 dst_reg_16_150)
           (= or.i_16_120 dst_reg_16_151)
           (= or.i_16_120 dst_reg_16_152)
           (= storemerge.i.i_16_80 dst_reg_16_153)
           (= dst_reg_16_60 dst_reg_16_154)
           (= dst_reg_16_61 dst_reg_16_155)
           (= dst_reg_16_62 dst_reg_16_156)
           (= dst_reg_16_63 dst_reg_16_157))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1)
      (and (= src_reg_16_64 src_reg_16_158)
           (= src_reg_16_65 src_reg_16_159)
           (= src_reg_16_66 src_reg_16_160)
           (= src_reg_16_67 src_reg_16_161)
           (= src_reg_16_68 src_reg_16_162)
           (= src_reg_16_69 src_reg_16_163)
           (= src_reg_16_70 src_reg_16_164)
           (= src_reg_16_71 src_reg_16_165)
           (= src_reg_16_72 src_reg_16_166)
           (= src_reg_16_73 src_reg_16_167)
           (= src_reg_16_74 src_reg_16_168)
           (= src_reg_16_75 src_reg_16_169)
           (= src_reg_16_76 src_reg_16_170)
           (= src_reg_16_77 src_reg_16_171)
           (= dst_reg_16_50 dst_reg_16_144)
           (= dst_reg_16_51 dst_reg_16_145)
           (= dst_reg_16_52 dst_reg_16_146)
           (= dst_reg_16_53 dst_reg_16_147)
           (= or.i_16_120 dst_reg_16_148)
           (= and.i156.i_16_125 dst_reg_16_149)
           (= cond.i168.i_16_136 dst_reg_16_150)
           (= cond14.i174.i_16_139 dst_reg_16_151)
           (= cond23.i178.i_16_141 dst_reg_16_152)
           (= or230.i_16_128 dst_reg_16_153)
           (= dst_reg_16_60 dst_reg_16_154)
           (= dst_reg_16_61 dst_reg_16_155)
           (= dst_reg_16_62 dst_reg_16_156)
           (= dst_reg_16_63 dst_reg_16_157))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (= if.end212.i_if.then308.i_16_172
     (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (= if.then207.i_if.then308.i_16_173
     (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1)))

=========================
if.then.i314.i
=========================
=========================
if.else.i315.i
=========================
=========================
coerce_reg_to_size.exit320.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (=> (and (= cmp.i311.i_16_185 #b1) a!2)
      (and (= src_reg_16_158 src_reg_16_205)
           (= src_reg_16_159 src_reg_16_206)
           (= src_reg_16_160 src_reg_16_207)
           (= src_reg_16_161 src_reg_16_208)
           (= src_reg_16_162 src_reg_16_209)
           (= src_reg_16_163 src_reg_16_210)
           (= src_reg_16_164 src_reg_16_211)
           (= src_reg_16_165 src_reg_16_212)
           (= src_reg_16_166 src_reg_16_213)
           (= src_reg_16_167 src_reg_16_214)
           (= src_reg_16_168 src_reg_16_215)
           (= src_reg_16_169 src_reg_16_216)
           (= src_reg_16_170 src_reg_16_217)
           (= src_reg_16_171 src_reg_16_218)
           (= dst_reg_16_144 dst_reg_16_191)
           (= dst_reg_16_145 dst_reg_16_192)
           (= dst_reg_16_146 dst_reg_16_193)
           (= dst_reg_16_147 dst_reg_16_194)
           (= and.i.i301.i_16_178 dst_reg_16_195)
           (= and6.i.i302.i_16_180 dst_reg_16_196)
           (= dst_reg_16_150 dst_reg_16_197)
           (= dst_reg_16_151 dst_reg_16_198)
           (= and6.i312.i_16_187 dst_reg_16_199)
           (= storemerge_16_174 dst_reg_16_200)
           (= dst_reg_16_154 dst_reg_16_201)
           (= dst_reg_16_155 dst_reg_16_202)
           (= dst_reg_16_156 dst_reg_16_203)
           (= dst_reg_16_157 dst_reg_16_204)))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (=> (and (= cmp.i311.i_16_185 #b0) a!2)
      (and (= src_reg_16_158 src_reg_16_205)
           (= src_reg_16_159 src_reg_16_206)
           (= src_reg_16_160 src_reg_16_207)
           (= src_reg_16_161 src_reg_16_208)
           (= src_reg_16_162 src_reg_16_209)
           (= src_reg_16_163 src_reg_16_210)
           (= src_reg_16_164 src_reg_16_211)
           (= src_reg_16_165 src_reg_16_212)
           (= src_reg_16_166 src_reg_16_213)
           (= src_reg_16_167 src_reg_16_214)
           (= src_reg_16_168 src_reg_16_215)
           (= src_reg_16_169 src_reg_16_216)
           (= src_reg_16_170 src_reg_16_217)
           (= src_reg_16_171 src_reg_16_218)
           (= dst_reg_16_144 dst_reg_16_191)
           (= dst_reg_16_145 dst_reg_16_192)
           (= dst_reg_16_146 dst_reg_16_193)
           (= dst_reg_16_147 dst_reg_16_194)
           (= and.i.i301.i_16_178 dst_reg_16_195)
           (= and6.i.i302.i_16_180 dst_reg_16_196)
           (= dst_reg_16_150 dst_reg_16_197)
           (= dst_reg_16_151 dst_reg_16_198)
           (= #x0000000000000000 dst_reg_16_199)
           (= storemerge_16_174 dst_reg_16_200)
           (= dst_reg_16_154 dst_reg_16_201)
           (= dst_reg_16_155 dst_reg_16_202)
           (= dst_reg_16_156 dst_reg_16_203)
           (= dst_reg_16_157 dst_reg_16_204)))))
-------------------
  %storemerge.i316.i = phi i64 [ 4294967295, %if.else.i315.i ], [ %and8.i313.i, %if.then.i314.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.else.i315.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
     (and (= cmp.i311.i_16_185 #b0) a!2))))
[handlePhiNodeResolvePathConditions] incomingBlockI if.then.i314.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
     (and (= cmp.i311.i_16_185 #b1) a!2))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
  (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
  (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (=> (and (= cmp.i311.i_16_185 #b1) a!2)
      (and (= src_reg_16_158 src_reg_16_205)
           (= src_reg_16_159 src_reg_16_206)
           (= src_reg_16_160 src_reg_16_207)
           (= src_reg_16_161 src_reg_16_208)
           (= src_reg_16_162 src_reg_16_209)
           (= src_reg_16_163 src_reg_16_210)
           (= src_reg_16_164 src_reg_16_211)
           (= src_reg_16_165 src_reg_16_212)
           (= src_reg_16_166 src_reg_16_213)
           (= src_reg_16_167 src_reg_16_214)
           (= src_reg_16_168 src_reg_16_215)
           (= src_reg_16_169 src_reg_16_216)
           (= src_reg_16_170 src_reg_16_217)
           (= src_reg_16_171 src_reg_16_218)
           (= dst_reg_16_144 dst_reg_16_191)
           (= dst_reg_16_145 dst_reg_16_192)
           (= dst_reg_16_146 dst_reg_16_193)
           (= dst_reg_16_147 dst_reg_16_194)
           (= and.i.i301.i_16_178 dst_reg_16_195)
           (= and6.i.i302.i_16_180 dst_reg_16_196)
           (= dst_reg_16_150 dst_reg_16_197)
           (= dst_reg_16_151 dst_reg_16_198)
           (= and6.i312.i_16_187 dst_reg_16_199)
           (= storemerge_16_174 dst_reg_16_200)
           (= dst_reg_16_154 dst_reg_16_201)
           (= dst_reg_16_155 dst_reg_16_202)
           (= dst_reg_16_156 dst_reg_16_203)
           (= dst_reg_16_157 dst_reg_16_204)))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (=> (and (= cmp.i311.i_16_185 #b0) a!2)
      (and (= src_reg_16_158 src_reg_16_205)
           (= src_reg_16_159 src_reg_16_206)
           (= src_reg_16_160 src_reg_16_207)
           (= src_reg_16_161 src_reg_16_208)
           (= src_reg_16_162 src_reg_16_209)
           (= src_reg_16_163 src_reg_16_210)
           (= src_reg_16_164 src_reg_16_211)
           (= src_reg_16_165 src_reg_16_212)
           (= src_reg_16_166 src_reg_16_213)
           (= src_reg_16_167 src_reg_16_214)
           (= src_reg_16_168 src_reg_16_215)
           (= src_reg_16_169 src_reg_16_216)
           (= src_reg_16_170 src_reg_16_217)
           (= src_reg_16_171 src_reg_16_218)
           (= dst_reg_16_144 dst_reg_16_191)
           (= dst_reg_16_145 dst_reg_16_192)
           (= dst_reg_16_146 dst_reg_16_193)
           (= dst_reg_16_147 dst_reg_16_194)
           (= and.i.i301.i_16_178 dst_reg_16_195)
           (= and6.i.i302.i_16_180 dst_reg_16_196)
           (= dst_reg_16_150 dst_reg_16_197)
           (= dst_reg_16_151 dst_reg_16_198)
           (= #x0000000000000000 dst_reg_16_199)
           (= storemerge_16_174 dst_reg_16_200)
           (= dst_reg_16_154 dst_reg_16_201)
           (= dst_reg_16_155 dst_reg_16_202)
           (= dst_reg_16_156 dst_reg_16_203)
           (= dst_reg_16_157 dst_reg_16_204)))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
     (and (= cmp.i311.i_16_185 #b0) a!2))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
     (and (= cmp.i311.i_16_185 #b1) a!2))))

=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %coerce_reg_to_size.exit320.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (and (= cmp.i.i.i.i_16_226 #b0)
                (or (and (= cmp.i311.i_16_185 #b0) a!2)
                    (and (= cmp.i311.i_16_185 #b1) a!2)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_16_273 a!3))))
[handlePhiNodeResolvePathConditions] incomingBlockI coerce_reg_to_size.exit320.i
[handlePhiNodeResolvePathConditions] phiConditionI: coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (and (= cmp.i.i.i.i_16_226 #b1)
                (or (and (= cmp.i311.i_16_185 #b0) a!2)
                    (and (= cmp.i311.i_16_185 #b1) a!2)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274 a!3))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
    (= retval.0.i.i.i.i_16_275 phi.bo_16_272))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
    (= retval.0.i.i.i.i_16_275 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_16_275 #x0000003f)
     (= cmp.i.i.i_16_278 #b1)
     (= cmp.i.i.i_16_278 #b0))
  (= sh_prom.i.i.i_16_279 ((_ zero_extend 32) retval.0.i.i.i.i_16_275))
  (= notmask.i.i.i_16_281 (bvshl #xffffffffffffffff sh_prom.i.i.i_16_279))
  (= sub.i.i.i_16_283 (bvxor notmask.i.i.i_16_281 #xffffffffffffffff))
  (= and.i.i336.i_16_284 (bvand notmask.i.i.i_16_281 i27.i317.i_16_223))
  (ite (= cmp.i.i.i_16_278 #b1)
     (= retval.sroa.0.0.i.i.i_16_286 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_16_286 and.i.i336.i_16_284))
  (ite (= cmp.i.i.i_16_278 #b1)
     (= retval.sroa.3.0.i.i.i_16_288 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_16_288 sub.i.i.i_16_283))
  (= or.i.i.i_16_289 (bvor retval.sroa.0.0.i.i.i_16_286 and.i.i301.i_16_178))
  (= and.i1.i.i_16_290 (bvand retval.sroa.3.0.i.i.i_16_288 and6.i.i302.i_16_180))
  (= neg.i.i.i_16_292 (bvxor and.i1.i.i_16_290 #xffffffffffffffff))
  (= and4.i.i.i_16_293 (bvand or.i.i.i_16_289 neg.i.i.i_16_292))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (and (= cmp.i.i.i.i_16_226 #b0)
                (or (and (= cmp.i311.i_16_185 #b0) a!2)
                    (and (= cmp.i311.i_16_185 #b1) a!2)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_16_273 a!3))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (and (= cmp.i.i.i.i_16_226 #b1)
                (or (and (= cmp.i311.i_16_185 #b0) a!2)
                    (and (= cmp.i311.i_16_185 #b1) a!2)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274 a!3))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_16_226 #b0) a!3)
          (and (= cmp.i.i.i.i_16_226 #b1) a!3))
      (and (= src_reg_16_205 src_reg_16_308)
           (= src_reg_16_206 src_reg_16_309)
           (= src_reg_16_207 src_reg_16_310)
           (= src_reg_16_208 src_reg_16_311)
           (= src_reg_16_209 src_reg_16_312)
           (= src_reg_16_210 src_reg_16_313)
           (= src_reg_16_211 src_reg_16_314)
           (= src_reg_16_212 src_reg_16_315)
           (= src_reg_16_213 src_reg_16_316)
           (= src_reg_16_214 src_reg_16_317)
           (= src_reg_16_215 src_reg_16_318)
           (= src_reg_16_216 src_reg_16_319)
           (= src_reg_16_217 src_reg_16_320)
           (= src_reg_16_218 src_reg_16_321)
           (= dst_reg_16_191 dst_reg_16_294)
           (= dst_reg_16_192 dst_reg_16_295)
           (= dst_reg_16_193 dst_reg_16_296)
           (= dst_reg_16_194 dst_reg_16_297)
           (= and4.i.i.i_16_293 dst_reg_16_298)
           (= and.i1.i.i_16_290 dst_reg_16_299)
           (= i27.i317.i_16_223 dst_reg_16_300)
           (= storemerge.i316.i_16_221 dst_reg_16_301)
           (= dst_reg_16_199 dst_reg_16_302)
           (= storemerge.i316.i_16_221 dst_reg_16_303)
           (= dst_reg_16_201 dst_reg_16_304)
           (= dst_reg_16_202 dst_reg_16_305)
           (= dst_reg_16_203 dst_reg_16_306)
           (= dst_reg_16_204 dst_reg_16_307))))))
phiResolveI (i=1) (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> (and (= tobool.not.i.i_16_99 #b0) a!1)
      (and (= src_reg_16_64 src_reg_16_308)
           (= src_reg_16_65 src_reg_16_309)
           (= src_reg_16_66 src_reg_16_310)
           (= src_reg_16_67 src_reg_16_311)
           (= src_reg_16_68 src_reg_16_312)
           (= src_reg_16_69 src_reg_16_313)
           (= src_reg_16_70 src_reg_16_314)
           (= src_reg_16_71 src_reg_16_315)
           (= src_reg_16_72 src_reg_16_316)
           (= src_reg_16_73 src_reg_16_317)
           (= src_reg_16_74 src_reg_16_318)
           (= src_reg_16_75 src_reg_16_319)
           (= src_reg_16_76 src_reg_16_320)
           (= src_reg_16_77 src_reg_16_321)
           (= #x00000001 dst_reg_16_294)
           (= dst_reg_16_51 dst_reg_16_295)
           (= dst_reg_16_52 dst_reg_16_296)
           (= dst_reg_16_53 dst_reg_16_297)
           (= #x0000000000000000 dst_reg_16_298)
           (= #xffffffffffffffff dst_reg_16_299)
           (= #x8000000000000000 dst_reg_16_300)
           (= #x7fffffffffffffff dst_reg_16_301)
           (= #x0000000000000000 dst_reg_16_302)
           (= #xffffffffffffffff dst_reg_16_303)
           (= #x00000000 dst_reg_16_304)
           (= dst_reg_16_61 dst_reg_16_305)
           (= dst_reg_16_62 dst_reg_16_306)
           (= dst_reg_16_63 dst_reg_16_307))))
phiResolveI (i=2) (let ((a!1 (or (and (= cmp24.old.i_16_103 #b1)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b0)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> a!1
      (and (= src_reg_16_64 src_reg_16_308)
           (= src_reg_16_65 src_reg_16_309)
           (= src_reg_16_66 src_reg_16_310)
           (= src_reg_16_67 src_reg_16_311)
           (= src_reg_16_68 src_reg_16_312)
           (= src_reg_16_69 src_reg_16_313)
           (= src_reg_16_70 src_reg_16_314)
           (= src_reg_16_71 src_reg_16_315)
           (= src_reg_16_72 src_reg_16_316)
           (= src_reg_16_73 src_reg_16_317)
           (= src_reg_16_74 src_reg_16_318)
           (= src_reg_16_75 src_reg_16_319)
           (= src_reg_16_76 src_reg_16_320)
           (= src_reg_16_77 src_reg_16_321)
           (= #x00000001 dst_reg_16_294)
           (= dst_reg_16_51 dst_reg_16_295)
           (= dst_reg_16_52 dst_reg_16_296)
           (= dst_reg_16_53 dst_reg_16_297)
           (= #x0000000000000000 dst_reg_16_298)
           (= #xffffffffffffffff dst_reg_16_299)
           (= #x8000000000000000 dst_reg_16_300)
           (= #x7fffffffffffffff dst_reg_16_301)
           (= #x0000000000000000 dst_reg_16_302)
           (= #xffffffffffffffff dst_reg_16_303)
           (= #x00000000 dst_reg_16_304)
           (= dst_reg_16_61 dst_reg_16_305)
           (= dst_reg_16_62 dst_reg_16_306)
           (= dst_reg_16_63 dst_reg_16_307))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  store i64 %and.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i.i, i64* %i19.i.i, align 8
-------------------
=========================
if.then.i.i
=========================
-------------------
  store i64 %and6.i.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else.i.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
coerce_reg_to_size.exit.i
=========================
-------------------
  store i64 %storemerge.i.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i.i, i64* %smax_value.i.i, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack2, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
=========================
if.end27.i
=========================
=========================
if.then41.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i28.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i28.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i30.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i, align 8
-------------------
=========================
sw.bb201.i
=========================
=========================
if.then207.i
=========================
-------------------
  store i64 %or.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %or.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.end212.i
=========================
-------------------
  store i64 %or.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i156.i, i64* %i19.i.i, align 8
-------------------
-------------------
  store i64 %cond225.i, i64* %umin_value.i.i, align 8
-------------------
-------------------
  store i64 %or230.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %.cond225.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %.or230.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %cond.i168.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %cond14.i174.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %cond23.i178.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.then308.i
=========================
-------------------
  store i64 %storemerge, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %and.i.i301.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and6.i.i302.i, i64* %i19.i.i, align 8
-------------------
=========================
if.then.i314.i
=========================
-------------------
  store i64 %and6.i312.i, i64* %umin_value.i.i, align 8
-------------------
=========================
if.else.i315.i
=========================
-------------------
  store i64 0, i64* %umin_value.i.i, align 8
-------------------
=========================
coerce_reg_to_size.exit320.i
=========================
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
-------------------
  store i64 %i27.i317.i, i64* %smin_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %umax_value.i.i, align 8
-------------------
-------------------
  store i64 %storemerge.i316.i, i64* %smax_value.i.i, align 8
-------------------
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i.i.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i19.i.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 53 = MemoryPhi({__reg_bound_offset.exit.i,52},{if.then41.i,25},{if.then26.i,17})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
52 = MemoryDef(51) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ and.i1.i.i_16_290 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
47 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
53 = MemoryPhi({__reg_bound_offset.exit.i,52},{if.then41.i,25},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_16_308 ] [ ] [ src_reg_16_309 ] [ src_reg_16_310 ] [ src_reg_16_311 ] [ [ src_reg_16_312 ] [ src_reg_16_313 ] ] [ src_reg_16_314 ] [ src_reg_16_315 ] [ src_reg_16_316 ] [ src_reg_16_317 ] [ ] [ src_reg_16_318 ] [ src_reg_16_319 ] [ src_reg_16_320 ] [ src_reg_16_321 ] ] 
- dst_reg: [ [ dst_reg_16_294 ] [ ] [ dst_reg_16_295 ] [ dst_reg_16_296 ] [ dst_reg_16_297 ] [ [ dst_reg_16_298 ] [ dst_reg_16_299 ] ] [ dst_reg_16_300 ] [ dst_reg_16_301 ] [ dst_reg_16_302 ] [ dst_reg_16_303 ] [ ] [ dst_reg_16_304 ] [ dst_reg_16_305 ] [ dst_reg_16_306 ] [ dst_reg_16_307 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 53 = MemoryPhi({__reg_bound_offset.exit.i,52},{if.then41.i,25},{if.then26.i,17})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_322
[lookInsideStruct] singleValueType:dst_reg_16_322
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_323
[lookInsideStruct] singleValueType:dst_reg_16_323
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_324
[lookInsideStruct] singleValueType:dst_reg_16_324
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_325
[lookInsideStruct] singleValueType:dst_reg_16_325
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_326
[lookInsideStruct] singleValueType:dst_reg_16_326
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_327
[lookInsideStruct] singleValueType:dst_reg_16_327
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_328
[lookInsideStruct] singleValueType:dst_reg_16_328
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_329
[lookInsideStruct] singleValueType:dst_reg_16_329
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_330
[lookInsideStruct] singleValueType:dst_reg_16_330
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_331
[lookInsideStruct] singleValueType:dst_reg_16_331
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_332
[lookInsideStruct] singleValueType:dst_reg_16_332
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_333
[lookInsideStruct] singleValueType:dst_reg_16_333
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_334
[lookInsideStruct] singleValueType:dst_reg_16_334
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_16_335
[lookInsideStruct] singleValueType:dst_reg_16_335
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_16_322 ] [ ] [ dst_reg_16_323 ] [ dst_reg_16_324 ] [ dst_reg_16_325 ] [ [ dst_reg_16_326 ] [ dst_reg_16_327 ] ] [ dst_reg_16_328 ] [ dst_reg_16_329 ] [ dst_reg_16_330 ] [ dst_reg_16_331 ] [ ] [ dst_reg_16_332 ] [ dst_reg_16_333 ] [ dst_reg_16_334 ] [ dst_reg_16_335 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_16_294 ] [ ] [ dst_reg_16_295 ] [ dst_reg_16_296 ] [ dst_reg_16_297 ] [ [ dst_reg_16_298 ] [ dst_reg_16_299 ] ] [ dst_reg_16_300 ] [ dst_reg_16_301 ] [ dst_reg_16_302 ] [ dst_reg_16_303 ] [ ] [ dst_reg_16_304 ] [ dst_reg_16_305 ] [ dst_reg_16_306 ] [ dst_reg_16_307 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_16_294 dst_reg_16_322)
(= dst_reg_16_295 dst_reg_16_323)
(= dst_reg_16_296 dst_reg_16_324)
(= dst_reg_16_297 dst_reg_16_325)
(= dst_reg_16_298 dst_reg_16_326)
(= dst_reg_16_299 dst_reg_16_327)
(= dst_reg_16_300 dst_reg_16_328)
(= dst_reg_16_301 dst_reg_16_329)
(= dst_reg_16_302 dst_reg_16_330)
(= dst_reg_16_303 dst_reg_16_331)
(= dst_reg_16_304 dst_reg_16_332)
(= dst_reg_16_305 dst_reg_16_333)
(= dst_reg_16_306 dst_reg_16_334)
(= dst_reg_16_307 dst_reg_16_335)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_336
[lookInsideStruct] singleValueType:src_reg_16_336
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_337
[lookInsideStruct] singleValueType:src_reg_16_337
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_338
[lookInsideStruct] singleValueType:src_reg_16_338
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_339
[lookInsideStruct] singleValueType:src_reg_16_339
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_340
[lookInsideStruct] singleValueType:src_reg_16_340
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_341
[lookInsideStruct] singleValueType:src_reg_16_341
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_342
[lookInsideStruct] singleValueType:src_reg_16_342
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_343
[lookInsideStruct] singleValueType:src_reg_16_343
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_344
[lookInsideStruct] singleValueType:src_reg_16_344
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_345
[lookInsideStruct] singleValueType:src_reg_16_345
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_346
[lookInsideStruct] singleValueType:src_reg_16_346
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_347
[lookInsideStruct] singleValueType:src_reg_16_347
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_348
[lookInsideStruct] singleValueType:src_reg_16_348
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_16_349
[lookInsideStruct] singleValueType:src_reg_16_349
[setupBVTreeForArg] returning BVTree: [ [ src_reg_16_336 ] [ ] [ src_reg_16_337 ] [ src_reg_16_338 ] [ src_reg_16_339 ] [ [ src_reg_16_340 ] [ src_reg_16_341 ] ] [ src_reg_16_342 ] [ src_reg_16_343 ] [ src_reg_16_344 ] [ src_reg_16_345 ] [ ] [ src_reg_16_346 ] [ src_reg_16_347 ] [ src_reg_16_348 ] [ src_reg_16_349 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_16_308 ] [ ] [ src_reg_16_309 ] [ src_reg_16_310 ] [ src_reg_16_311 ] [ [ src_reg_16_312 ] [ src_reg_16_313 ] ] [ src_reg_16_314 ] [ src_reg_16_315 ] [ src_reg_16_316 ] [ src_reg_16_317 ] [ ] [ src_reg_16_318 ] [ src_reg_16_319 ] [ src_reg_16_320 ] [ src_reg_16_321 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_16_308 src_reg_16_336)
(= src_reg_16_309 src_reg_16_337)
(= src_reg_16_310 src_reg_16_338)
(= src_reg_16_311 src_reg_16_339)
(= src_reg_16_312 src_reg_16_340)
(= src_reg_16_313 src_reg_16_341)
(= src_reg_16_314 src_reg_16_342)
(= src_reg_16_315 src_reg_16_343)
(= src_reg_16_316 src_reg_16_344)
(= src_reg_16_317 src_reg_16_345)
(= src_reg_16_318 src_reg_16_346)
(= src_reg_16_319 src_reg_16_347)
(= src_reg_16_320 src_reg_16_348)
(= src_reg_16_321 src_reg_16_349)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_16_336 ] [ ] [ src_reg_16_337 ] [ src_reg_16_338 ] [ src_reg_16_339 ] [ [ src_reg_16_340 ] [ src_reg_16_341 ] ] [ src_reg_16_342 ] [ src_reg_16_343 ] [ src_reg_16_344 ] [ src_reg_16_345 ] [ ] [ src_reg_16_346 ] [ src_reg_16_347 ] [ src_reg_16_348 ] [ src_reg_16_349 ] ] 
- dst_reg: [ [ dst_reg_16_322 ] [ ] [ dst_reg_16_323 ] [ dst_reg_16_324 ] [ dst_reg_16_325 ] [ [ dst_reg_16_326 ] [ dst_reg_16_327 ] ] [ dst_reg_16_328 ] [ dst_reg_16_329 ] [ dst_reg_16_330 ] [ dst_reg_16_331 ] [ ] [ dst_reg_16_332 ] [ dst_reg_16_333 ] [ dst_reg_16_334 ] [ dst_reg_16_335 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_16_226 #b0) a!3)
          (and (= cmp.i.i.i.i_16_226 #b1) a!3))
      (and (= src_reg_16_205 src_reg_16_308)
           (= src_reg_16_206 src_reg_16_309)
           (= src_reg_16_207 src_reg_16_310)
           (= src_reg_16_208 src_reg_16_311)
           (= src_reg_16_209 src_reg_16_312)
           (= src_reg_16_210 src_reg_16_313)
           (= src_reg_16_211 src_reg_16_314)
           (= src_reg_16_212 src_reg_16_315)
           (= src_reg_16_213 src_reg_16_316)
           (= src_reg_16_214 src_reg_16_317)
           (= src_reg_16_215 src_reg_16_318)
           (= src_reg_16_216 src_reg_16_319)
           (= src_reg_16_217 src_reg_16_320)
           (= src_reg_16_218 src_reg_16_321)
           (= dst_reg_16_191 dst_reg_16_294)
           (= dst_reg_16_192 dst_reg_16_295)
           (= dst_reg_16_193 dst_reg_16_296)
           (= dst_reg_16_194 dst_reg_16_297)
           (= and4.i.i.i_16_293 dst_reg_16_298)
           (= and.i1.i.i_16_290 dst_reg_16_299)
           (= i27.i317.i_16_223 dst_reg_16_300)
           (= storemerge.i316.i_16_221 dst_reg_16_301)
           (= dst_reg_16_199 dst_reg_16_302)
           (= storemerge.i316.i_16_221 dst_reg_16_303)
           (= dst_reg_16_201 dst_reg_16_304)
           (= dst_reg_16_202 dst_reg_16_305)
           (= dst_reg_16_203 dst_reg_16_306)
           (= dst_reg_16_204 dst_reg_16_307))))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> (and (= tobool.not.i.i_16_99 #b0) a!1)
      (and (= src_reg_16_64 src_reg_16_308)
           (= src_reg_16_65 src_reg_16_309)
           (= src_reg_16_66 src_reg_16_310)
           (= src_reg_16_67 src_reg_16_311)
           (= src_reg_16_68 src_reg_16_312)
           (= src_reg_16_69 src_reg_16_313)
           (= src_reg_16_70 src_reg_16_314)
           (= src_reg_16_71 src_reg_16_315)
           (= src_reg_16_72 src_reg_16_316)
           (= src_reg_16_73 src_reg_16_317)
           (= src_reg_16_74 src_reg_16_318)
           (= src_reg_16_75 src_reg_16_319)
           (= src_reg_16_76 src_reg_16_320)
           (= src_reg_16_77 src_reg_16_321)
           (= #x00000001 dst_reg_16_294)
           (= dst_reg_16_51 dst_reg_16_295)
           (= dst_reg_16_52 dst_reg_16_296)
           (= dst_reg_16_53 dst_reg_16_297)
           (= #x0000000000000000 dst_reg_16_298)
           (= #xffffffffffffffff dst_reg_16_299)
           (= #x8000000000000000 dst_reg_16_300)
           (= #x7fffffffffffffff dst_reg_16_301)
           (= #x0000000000000000 dst_reg_16_302)
           (= #xffffffffffffffff dst_reg_16_303)
           (= #x00000000 dst_reg_16_304)
           (= dst_reg_16_61 dst_reg_16_305)
           (= dst_reg_16_62 dst_reg_16_306)
           (= dst_reg_16_63 dst_reg_16_307))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b1)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b0)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> a!1
      (and (= src_reg_16_64 src_reg_16_308)
           (= src_reg_16_65 src_reg_16_309)
           (= src_reg_16_66 src_reg_16_310)
           (= src_reg_16_67 src_reg_16_311)
           (= src_reg_16_68 src_reg_16_312)
           (= src_reg_16_69 src_reg_16_313)
           (= src_reg_16_70 src_reg_16_314)
           (= src_reg_16_71 src_reg_16_315)
           (= src_reg_16_72 src_reg_16_316)
           (= src_reg_16_73 src_reg_16_317)
           (= src_reg_16_74 src_reg_16_318)
           (= src_reg_16_75 src_reg_16_319)
           (= src_reg_16_76 src_reg_16_320)
           (= src_reg_16_77 src_reg_16_321)
           (= #x00000001 dst_reg_16_294)
           (= dst_reg_16_51 dst_reg_16_295)
           (= dst_reg_16_52 dst_reg_16_296)
           (= dst_reg_16_53 dst_reg_16_297)
           (= #x0000000000000000 dst_reg_16_298)
           (= #xffffffffffffffff dst_reg_16_299)
           (= #x8000000000000000 dst_reg_16_300)
           (= #x7fffffffffffffff dst_reg_16_301)
           (= #x0000000000000000 dst_reg_16_302)
           (= #xffffffffffffffff dst_reg_16_303)
           (= #x00000000 dst_reg_16_304)
           (= dst_reg_16_61 dst_reg_16_305)
           (= dst_reg_16_62 dst_reg_16_306)
           (= dst_reg_16_63 dst_reg_16_307))))
  (= dst_reg_16_294 dst_reg_16_322)
  (= dst_reg_16_295 dst_reg_16_323)
  (= dst_reg_16_296 dst_reg_16_324)
  (= dst_reg_16_297 dst_reg_16_325)
  (= dst_reg_16_298 dst_reg_16_326)
  (= dst_reg_16_299 dst_reg_16_327)
  (= dst_reg_16_300 dst_reg_16_328)
  (= dst_reg_16_301 dst_reg_16_329)
  (= dst_reg_16_302 dst_reg_16_330)
  (= dst_reg_16_303 dst_reg_16_331)
  (= dst_reg_16_304 dst_reg_16_332)
  (= dst_reg_16_305 dst_reg_16_333)
  (= dst_reg_16_306 dst_reg_16_334)
  (= dst_reg_16_307 dst_reg_16_335)
  (= src_reg_16_308 src_reg_16_336)
  (= src_reg_16_309 src_reg_16_337)
  (= src_reg_16_310 src_reg_16_338)
  (= src_reg_16_311 src_reg_16_339)
  (= src_reg_16_312 src_reg_16_340)
  (= src_reg_16_313 src_reg_16_341)
  (= src_reg_16_314 src_reg_16_342)
  (= src_reg_16_315 src_reg_16_343)
  (= src_reg_16_316 src_reg_16_344)
  (= src_reg_16_317 src_reg_16_345)
  (= src_reg_16_318 src_reg_16_346)
  (= src_reg_16_319 src_reg_16_347)
  (= src_reg_16_320 src_reg_16_348)
  (= src_reg_16_321 src_reg_16_349)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: __reg_bound_offset.exit.i, Size:15
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_16_273
    (= retval.0.i.i.i.i_16_275 phi.bo_16_272))
  (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274
    (= retval.0.i.i.i.i_16_275 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_16_275 #x0000003f)
     (= cmp.i.i.i_16_278 #b1)
     (= cmp.i.i.i_16_278 #b0))
  (= sh_prom.i.i.i_16_279 ((_ zero_extend 32) retval.0.i.i.i.i_16_275))
  (= notmask.i.i.i_16_281 (bvshl #xffffffffffffffff sh_prom.i.i.i_16_279))
  (= sub.i.i.i_16_283 (bvxor notmask.i.i.i_16_281 #xffffffffffffffff))
  (= and.i.i336.i_16_284 (bvand notmask.i.i.i_16_281 i27.i317.i_16_223))
  (ite (= cmp.i.i.i_16_278 #b1)
     (= retval.sroa.0.0.i.i.i_16_286 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_16_286 and.i.i336.i_16_284))
  (ite (= cmp.i.i.i_16_278 #b1)
     (= retval.sroa.3.0.i.i.i_16_288 #x00000000ffffffff)
     (= retval.sroa.3.0.i.i.i_16_288 sub.i.i.i_16_283))
  (= or.i.i.i_16_289 (bvor retval.sroa.0.0.i.i.i_16_286 and.i.i301.i_16_178))
  (= and.i1.i.i_16_290 (bvand retval.sroa.3.0.i.i.i_16_288 and6.i.i302.i_16_180))
  (= neg.i.i.i_16_292 (bvxor and.i1.i.i_16_290 #xffffffffffffffff))
  (= and4.i.i.i_16_293 (bvand or.i.i.i_16_289 neg.i.i.i_16_292))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (and (= cmp.i.i.i.i_16_226 #b0)
                (or (and (= cmp.i311.i_16_185 #b0) a!2)
                    (and (= cmp.i311.i_16_185 #b1) a!2)))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_16_273 a!3))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (and (= cmp.i.i.i.i_16_226 #b1)
                (or (and (= cmp.i311.i_16_185 #b0) a!2)
                    (and (= cmp.i311.i_16_185 #b1) a!2)))))
  (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274 a!3))))
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_16_224 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= tobool.not.i.i.i.i.i_16_228 #b0))
  (= shl.i.i.i.i.i_16_230 (bvshl xor.i.i.i_16_224 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select.i.i.i.i.i_16_231 shl.i.i.i.i.i_16_230)
     (= spec.select.i.i.i.i.i_16_231 xor.i.i.i_16_224))
  (ite (= tobool.not.i.i.i.i.i_16_228 #b1)
     (= spec.select17.i.i.i.i.i_16_234 #x0000001f)
     (= spec.select17.i.i.i.i.i_16_234 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_16_231 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= tobool2.not.i.i.i.i.i_16_236 #b0))
  (= sub4.i.i.i.i.i_16_238 (bvadd spec.select17.i.i.i.i.i_16_234 #xfffffff0))
  (= shl5.i.i.i.i.i_16_240
   (bvshl spec.select.i.i.i.i.i_16_231 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= word.addr.1.i.i.i.i.i_16_241 shl5.i.i.i.i.i_16_240)
     (= word.addr.1.i.i.i.i.i_16_241 spec.select.i.i.i.i.i_16_231))
  (ite (= tobool2.not.i.i.i.i.i_16_236 #b1)
     (= num.1.i.i.i.i.i_16_242 sub4.i.i.i.i.i_16_238)
     (= num.1.i.i.i.i.i_16_242 spec.select17.i.i.i.i.i_16_234))
  (ite (bvult word.addr.1.i.i.i.i.i_16_241 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= tobool8.not.i.i.i.i.i_16_244 #b0))
  (= sub10.i.i.i.i.i_16_246 (bvadd num.1.i.i.i.i.i_16_242 #xfffffff8))
  (= shl11.i.i.i.i.i_16_248
   (bvshl word.addr.1.i.i.i.i.i_16_241 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= word.addr.2.i.i.i.i.i_16_249 shl11.i.i.i.i.i_16_248)
     (= word.addr.2.i.i.i.i.i_16_249 word.addr.1.i.i.i.i.i_16_241))
  (ite (= tobool8.not.i.i.i.i.i_16_244 #b1)
     (= num.2.i.i.i.i.i_16_250 sub10.i.i.i.i.i_16_246)
     (= num.2.i.i.i.i.i_16_250 num.1.i.i.i.i.i_16_242))
  (ite (bvult word.addr.2.i.i.i.i.i_16_249 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= tobool14.not.i.i.i.i.i_16_252 #b0))
  (= sub16.i.i.i.i.i_16_254 (bvadd num.2.i.i.i.i.i_16_250 #xfffffffc))
  (= shl17.i.i.i.i.i_16_256
   (bvshl word.addr.2.i.i.i.i.i_16_249 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= word.addr.3.i.i.i.i.i_16_257 shl17.i.i.i.i.i_16_256)
     (= word.addr.3.i.i.i.i.i_16_257 word.addr.2.i.i.i.i.i_16_249))
  (ite (= tobool14.not.i.i.i.i.i_16_252 #b1)
     (= num.3.i.i.i.i.i_16_258 sub16.i.i.i.i.i_16_254)
     (= num.3.i.i.i.i.i_16_258 num.2.i.i.i.i.i_16_250))
  (ite (bvult word.addr.3.i.i.i.i.i_16_257 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= tobool20.not.i.i.i.i.i_16_260 #b0))
  (= sub22.i.i.i.i.i_16_262 (bvadd num.3.i.i.i.i.i_16_258 #x000000fe))
  (= shl23.i.i.i.i.i_16_264
   (bvshl word.addr.3.i.i.i.i.i_16_257 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= word.addr.4.i.i.i.i.i_16_265 shl23.i.i.i.i.i_16_264)
     (= word.addr.4.i.i.i.i.i_16_265 word.addr.3.i.i.i.i.i_16_257))
  (ite (= tobool20.not.i.i.i.i.i_16_260 #b1)
     (= num.4.i.i.i.i.i_16_266 sub22.i.i.i.i.i_16_262)
     (= num.4.i.i.i.i.i_16_266 num.3.i.i.i.i.i_16_258))
  (= word.addr.4.lobit.i.i.i.i.i.neg_16_268
   (bvlshr word.addr.4.i.i.i.i.i_16_265 #x000000000000003f))
  (= i.i.i.i.i.i.neg_16_269
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_16_268))
  (= add.i.i.i335.i_16_270 (bvadd num.4.i.i.i.i.i_16_266 i.i.i.i.i.i.neg_16_269))
  (= phi.bo_16_272 (bvand add.i.i.i335.i_16_270 #x000000ff))
BasicBlock: if.else.i315.i, Size:0
BasicBlock: if.then.i314.i, Size:2
  (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 #x00000000ffffffff))
  (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 #x00000000ffffffff))
BasicBlock: entry, Size:40
  (= dst_reg_16_0 dst_reg_16_0)
  (= dst_reg_16_1 dst_reg_16_1)
  (= dst_reg_16_2 dst_reg_16_2)
  (= dst_reg_16_3 dst_reg_16_3)
  (= dst_reg_16_4 dst_reg_16_4)
  (= dst_reg_16_5 dst_reg_16_5)
  (= dst_reg_16_6 dst_reg_16_6)
  (= dst_reg_16_7 dst_reg_16_7)
  (= dst_reg_16_8 dst_reg_16_8)
  (= dst_reg_16_9 dst_reg_16_9)
  (= dst_reg_16_10 dst_reg_16_10)
  (= dst_reg_16_11 dst_reg_16_11)
  (= dst_reg_16_12 dst_reg_16_12)
  (= dst_reg_16_13 dst_reg_16_13)
  (= src_reg_16_14 src_reg_16_14)
  (= src_reg_16_15 src_reg_16_15)
  (= src_reg_16_16 src_reg_16_16)
  (= src_reg_16_17 src_reg_16_17)
  (= src_reg_16_18 src_reg_16_18)
  (= src_reg_16_19 src_reg_16_19)
  (= src_reg_16_20 src_reg_16_20)
  (= src_reg_16_21 src_reg_16_21)
  (= src_reg_16_22 src_reg_16_22)
  (= src_reg_16_23 src_reg_16_23)
  (= src_reg_16_24 src_reg_16_24)
  (= src_reg_16_25 src_reg_16_25)
  (= src_reg_16_26 src_reg_16_26)
  (= src_reg_16_27 src_reg_16_27)
  (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)
  (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)
  (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)
  (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)
  (= dst_reg_16_4 i18.i.i_16_34)
  (= dst_reg_16_5 i20.i.i_16_35)
  (= and.i.i.i_16_37 (bvand i18.i.i_16_34 #x00000000ffffffff))
  (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 #x00000000ffffffff))
  (= dst_reg_16_8 i23.i.i_16_40)
  (= dst_reg_16_9 i24.i.i_16_41)
  (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))
  (ite (bvult i25.i.i_16_42 #x0000000100000000)
     (= cmp.i.i_16_44 #b1)
     (= cmp.i.i_16_44 #b0))
BasicBlock: if.then.i.i, Size:2
  (= and6.i.i_16_46 (bvand i23.i.i_16_40 #x00000000ffffffff))
  (= and8.i.i_16_48 (bvand i24.i.i_16_41 #x00000000ffffffff))
BasicBlock: if.end27.i, Size:0
BasicBlock: if.else.i.i, Size:0
BasicBlock: coerce_reg_to_size.exit.i, Size:17
  (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78
    (= storemerge.i.i_16_80 #x00000000ffffffff))
  (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79
    (= storemerge.i.i_16_80 and8.i.i_16_48))
  (= dst_reg_16_58 i27.i.i_16_82)
  (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 #x00000000ffffffff))
  (= and6.i.i6.i_16_86
   (bvand src_reg1.sroa.10.0.copyload_16_31 #x00000000ffffffff))
  (= i25.i13.i_16_87
   (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32))
  (ite (bvult i25.i13.i_16_87 #x0000000100000000)
     (= cmp.i15.i_16_89 #b1)
     (= cmp.i15.i_16_89 #b0))
  (= and6.i16.i_16_91
   (bvand src_reg1.sroa.17.0.copyload_16_32 #x00000000ffffffff))
  (= and8.i17.i_16_93
   (bvand src_reg1.sroa.22.0.copyload_16_33 #x00000000ffffffff))
  (ite (= cmp.i15.i_16_89 #b1)
     (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91)
     (= src_reg1.sroa.17.0_16_95 #x0000000000000000))
  (ite (= cmp.i15.i_16_89 #b1)
     (= storemerge.i20.i_16_97 and8.i17.i_16_93)
     (= storemerge.i20.i_16_97 #x00000000ffffffff))
  (ite (= and6.i.i6.i_16_86 #x0000000000000000)
     (= tobool.not.i.i_16_99 #b1)
     (= tobool.not.i.i_16_99 #b0))
  (ite (= and6.i.i.i_16_39 #x0000000000000000)
     (= tobool.not.i25.i_16_101 #b1)
     (= tobool.not.i25.i_16_101 #b0))
  (=> (= cmp.i.i_16_44 #b1)
    (and (= #x00000001 src_reg_16_64)
         (= src_reg_16_15 src_reg_16_65)
         (= src_reg_16_16 src_reg_16_66)
         (= src_reg_16_17 src_reg_16_67)
         (= src_reg_16_18 src_reg_16_68)
         (= src_reg_16_19 src_reg_16_69)
         (= src_reg_16_20 src_reg_16_70)
         (= src_reg_16_21 src_reg_16_71)
         (= src_reg_16_22 src_reg_16_72)
         (= src_reg_16_23 src_reg_16_73)
         (= src_reg_16_24 src_reg_16_74)
         (= src_reg_16_25 src_reg_16_75)
         (= src_reg_16_26 src_reg_16_76)
         (= src_reg_16_27 src_reg_16_77)
         (= #x00000001 dst_reg_16_50)
         (= dst_reg_16_1 dst_reg_16_51)
         (= dst_reg_16_2 dst_reg_16_52)
         (= dst_reg_16_3 dst_reg_16_53)
         (= and.i.i.i_16_37 dst_reg_16_54)
         (= and6.i.i.i_16_39 dst_reg_16_55)
         (= dst_reg_16_6 dst_reg_16_56)
         (= dst_reg_16_7 dst_reg_16_57)
         (= and6.i.i_16_46 dst_reg_16_58)
         (= dst_reg_16_9 dst_reg_16_59)
         (= dst_reg_16_10 dst_reg_16_60)
         (= dst_reg_16_11 dst_reg_16_61)
         (= dst_reg_16_12 dst_reg_16_62)
         (= dst_reg_16_13 dst_reg_16_63)))
  (=> (= cmp.i.i_16_44 #b0)
    (and (= #x00000001 src_reg_16_64)
         (= src_reg_16_15 src_reg_16_65)
         (= src_reg_16_16 src_reg_16_66)
         (= src_reg_16_17 src_reg_16_67)
         (= src_reg_16_18 src_reg_16_68)
         (= src_reg_16_19 src_reg_16_69)
         (= src_reg_16_20 src_reg_16_70)
         (= src_reg_16_21 src_reg_16_71)
         (= src_reg_16_22 src_reg_16_72)
         (= src_reg_16_23 src_reg_16_73)
         (= src_reg_16_24 src_reg_16_74)
         (= src_reg_16_25 src_reg_16_75)
         (= src_reg_16_26 src_reg_16_76)
         (= src_reg_16_27 src_reg_16_77)
         (= #x00000001 dst_reg_16_50)
         (= dst_reg_16_1 dst_reg_16_51)
         (= dst_reg_16_2 dst_reg_16_52)
         (= dst_reg_16_3 dst_reg_16_53)
         (= and.i.i.i_16_37 dst_reg_16_54)
         (= and6.i.i.i_16_39 dst_reg_16_55)
         (= dst_reg_16_6 dst_reg_16_56)
         (= dst_reg_16_7 dst_reg_16_57)
         (= #x0000000000000000 dst_reg_16_58)
         (= dst_reg_16_9 dst_reg_16_59)
         (= dst_reg_16_10 dst_reg_16_60)
         (= dst_reg_16_11 dst_reg_16_61)
         (= dst_reg_16_12 dst_reg_16_62)
         (= dst_reg_16_13 dst_reg_16_63)))
  (= if.else.i.i_coerce_reg_to_size.exit.i_16_78 (= cmp.i.i_16_44 #b0))
  (= if.then.i.i_coerce_reg_to_size.exit.i_16_79 (= cmp.i.i_16_44 #b1))
BasicBlock: adjust_scalar_min_max_vals.exit, Size:31
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_16_226 #b0) a!3)
          (and (= cmp.i.i.i.i_16_226 #b1) a!3))
      (and (= src_reg_16_205 src_reg_16_308)
           (= src_reg_16_206 src_reg_16_309)
           (= src_reg_16_207 src_reg_16_310)
           (= src_reg_16_208 src_reg_16_311)
           (= src_reg_16_209 src_reg_16_312)
           (= src_reg_16_210 src_reg_16_313)
           (= src_reg_16_211 src_reg_16_314)
           (= src_reg_16_212 src_reg_16_315)
           (= src_reg_16_213 src_reg_16_316)
           (= src_reg_16_214 src_reg_16_317)
           (= src_reg_16_215 src_reg_16_318)
           (= src_reg_16_216 src_reg_16_319)
           (= src_reg_16_217 src_reg_16_320)
           (= src_reg_16_218 src_reg_16_321)
           (= dst_reg_16_191 dst_reg_16_294)
           (= dst_reg_16_192 dst_reg_16_295)
           (= dst_reg_16_193 dst_reg_16_296)
           (= dst_reg_16_194 dst_reg_16_297)
           (= and4.i.i.i_16_293 dst_reg_16_298)
           (= and.i1.i.i_16_290 dst_reg_16_299)
           (= i27.i317.i_16_223 dst_reg_16_300)
           (= storemerge.i316.i_16_221 dst_reg_16_301)
           (= dst_reg_16_199 dst_reg_16_302)
           (= storemerge.i316.i_16_221 dst_reg_16_303)
           (= dst_reg_16_201 dst_reg_16_304)
           (= dst_reg_16_202 dst_reg_16_305)
           (= dst_reg_16_203 dst_reg_16_306)
           (= dst_reg_16_204 dst_reg_16_307))))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> (and (= tobool.not.i.i_16_99 #b0) a!1)
      (and (= src_reg_16_64 src_reg_16_308)
           (= src_reg_16_65 src_reg_16_309)
           (= src_reg_16_66 src_reg_16_310)
           (= src_reg_16_67 src_reg_16_311)
           (= src_reg_16_68 src_reg_16_312)
           (= src_reg_16_69 src_reg_16_313)
           (= src_reg_16_70 src_reg_16_314)
           (= src_reg_16_71 src_reg_16_315)
           (= src_reg_16_72 src_reg_16_316)
           (= src_reg_16_73 src_reg_16_317)
           (= src_reg_16_74 src_reg_16_318)
           (= src_reg_16_75 src_reg_16_319)
           (= src_reg_16_76 src_reg_16_320)
           (= src_reg_16_77 src_reg_16_321)
           (= #x00000001 dst_reg_16_294)
           (= dst_reg_16_51 dst_reg_16_295)
           (= dst_reg_16_52 dst_reg_16_296)
           (= dst_reg_16_53 dst_reg_16_297)
           (= #x0000000000000000 dst_reg_16_298)
           (= #xffffffffffffffff dst_reg_16_299)
           (= #x8000000000000000 dst_reg_16_300)
           (= #x7fffffffffffffff dst_reg_16_301)
           (= #x0000000000000000 dst_reg_16_302)
           (= #xffffffffffffffff dst_reg_16_303)
           (= #x00000000 dst_reg_16_304)
           (= dst_reg_16_61 dst_reg_16_305)
           (= dst_reg_16_62 dst_reg_16_306)
           (= dst_reg_16_63 dst_reg_16_307))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b1)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b0)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> a!1
      (and (= src_reg_16_64 src_reg_16_308)
           (= src_reg_16_65 src_reg_16_309)
           (= src_reg_16_66 src_reg_16_310)
           (= src_reg_16_67 src_reg_16_311)
           (= src_reg_16_68 src_reg_16_312)
           (= src_reg_16_69 src_reg_16_313)
           (= src_reg_16_70 src_reg_16_314)
           (= src_reg_16_71 src_reg_16_315)
           (= src_reg_16_72 src_reg_16_316)
           (= src_reg_16_73 src_reg_16_317)
           (= src_reg_16_74 src_reg_16_318)
           (= src_reg_16_75 src_reg_16_319)
           (= src_reg_16_76 src_reg_16_320)
           (= src_reg_16_77 src_reg_16_321)
           (= #x00000001 dst_reg_16_294)
           (= dst_reg_16_51 dst_reg_16_295)
           (= dst_reg_16_52 dst_reg_16_296)
           (= dst_reg_16_53 dst_reg_16_297)
           (= #x0000000000000000 dst_reg_16_298)
           (= #xffffffffffffffff dst_reg_16_299)
           (= #x8000000000000000 dst_reg_16_300)
           (= #x7fffffffffffffff dst_reg_16_301)
           (= #x0000000000000000 dst_reg_16_302)
           (= #xffffffffffffffff dst_reg_16_303)
           (= #x00000000 dst_reg_16_304)
           (= dst_reg_16_61 dst_reg_16_305)
           (= dst_reg_16_62 dst_reg_16_306)
           (= dst_reg_16_63 dst_reg_16_307))))
  (= dst_reg_16_294 dst_reg_16_322)
  (= dst_reg_16_295 dst_reg_16_323)
  (= dst_reg_16_296 dst_reg_16_324)
  (= dst_reg_16_297 dst_reg_16_325)
  (= dst_reg_16_298 dst_reg_16_326)
  (= dst_reg_16_299 dst_reg_16_327)
  (= dst_reg_16_300 dst_reg_16_328)
  (= dst_reg_16_301 dst_reg_16_329)
  (= dst_reg_16_302 dst_reg_16_330)
  (= dst_reg_16_303 dst_reg_16_331)
  (= dst_reg_16_304 dst_reg_16_332)
  (= dst_reg_16_305 dst_reg_16_333)
  (= dst_reg_16_306 dst_reg_16_334)
  (= dst_reg_16_307 dst_reg_16_335)
  (= src_reg_16_308 src_reg_16_336)
  (= src_reg_16_309 src_reg_16_337)
  (= src_reg_16_310 src_reg_16_338)
  (= src_reg_16_311 src_reg_16_339)
  (= src_reg_16_312 src_reg_16_340)
  (= src_reg_16_313 src_reg_16_341)
  (= src_reg_16_314 src_reg_16_342)
  (= src_reg_16_315 src_reg_16_343)
  (= src_reg_16_316 src_reg_16_344)
  (= src_reg_16_317 src_reg_16_345)
  (= src_reg_16_318 src_reg_16_346)
  (= src_reg_16_319 src_reg_16_347)
  (= src_reg_16_320 src_reg_16_348)
  (= src_reg_16_321 src_reg_16_349)
BasicBlock: land.lhs.true.i, Size:1
  (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp18.not.i.not_16_102 #b1)
     (= cmp18.not.i.not_16_102 #b0))
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97)
     (= cmp24.old.i_16_103 #b1)
     (= cmp24.old.i_16_103 #b0))
BasicBlock: coerce_reg_to_size.exit320.i, Size:9
  (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
    (= storemerge.i316.i_16_221 #x00000000ffffffff))
  (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
    (= storemerge.i316.i_16_221 and8.i313.i_16_189))
  (= dst_reg_16_199 i27.i317.i_16_223)
  (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))
  (ite (= xor.i.i.i_16_224 #x0000000000000000)
     (= cmp.i.i.i.i_16_226 #b1)
     (= cmp.i.i.i.i_16_226 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (=> (and (= cmp.i311.i_16_185 #b1) a!2)
      (and (= src_reg_16_158 src_reg_16_205)
           (= src_reg_16_159 src_reg_16_206)
           (= src_reg_16_160 src_reg_16_207)
           (= src_reg_16_161 src_reg_16_208)
           (= src_reg_16_162 src_reg_16_209)
           (= src_reg_16_163 src_reg_16_210)
           (= src_reg_16_164 src_reg_16_211)
           (= src_reg_16_165 src_reg_16_212)
           (= src_reg_16_166 src_reg_16_213)
           (= src_reg_16_167 src_reg_16_214)
           (= src_reg_16_168 src_reg_16_215)
           (= src_reg_16_169 src_reg_16_216)
           (= src_reg_16_170 src_reg_16_217)
           (= src_reg_16_171 src_reg_16_218)
           (= dst_reg_16_144 dst_reg_16_191)
           (= dst_reg_16_145 dst_reg_16_192)
           (= dst_reg_16_146 dst_reg_16_193)
           (= dst_reg_16_147 dst_reg_16_194)
           (= and.i.i301.i_16_178 dst_reg_16_195)
           (= and6.i.i302.i_16_180 dst_reg_16_196)
           (= dst_reg_16_150 dst_reg_16_197)
           (= dst_reg_16_151 dst_reg_16_198)
           (= and6.i312.i_16_187 dst_reg_16_199)
           (= storemerge_16_174 dst_reg_16_200)
           (= dst_reg_16_154 dst_reg_16_201)
           (= dst_reg_16_155 dst_reg_16_202)
           (= dst_reg_16_156 dst_reg_16_203)
           (= dst_reg_16_157 dst_reg_16_204)))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (=> (and (= cmp.i311.i_16_185 #b0) a!2)
      (and (= src_reg_16_158 src_reg_16_205)
           (= src_reg_16_159 src_reg_16_206)
           (= src_reg_16_160 src_reg_16_207)
           (= src_reg_16_161 src_reg_16_208)
           (= src_reg_16_162 src_reg_16_209)
           (= src_reg_16_163 src_reg_16_210)
           (= src_reg_16_164 src_reg_16_211)
           (= src_reg_16_165 src_reg_16_212)
           (= src_reg_16_166 src_reg_16_213)
           (= src_reg_16_167 src_reg_16_214)
           (= src_reg_16_168 src_reg_16_215)
           (= src_reg_16_169 src_reg_16_216)
           (= src_reg_16_170 src_reg_16_217)
           (= src_reg_16_171 src_reg_16_218)
           (= dst_reg_16_144 dst_reg_16_191)
           (= dst_reg_16_145 dst_reg_16_192)
           (= dst_reg_16_146 dst_reg_16_193)
           (= dst_reg_16_147 dst_reg_16_194)
           (= and.i.i301.i_16_178 dst_reg_16_195)
           (= and6.i.i302.i_16_180 dst_reg_16_196)
           (= dst_reg_16_150 dst_reg_16_197)
           (= dst_reg_16_151 dst_reg_16_198)
           (= #x0000000000000000 dst_reg_16_199)
           (= storemerge_16_174 dst_reg_16_200)
           (= dst_reg_16_154 dst_reg_16_201)
           (= dst_reg_16_155 dst_reg_16_202)
           (= dst_reg_16_156 dst_reg_16_203)
           (= dst_reg_16_157 dst_reg_16_204)))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (= if.else.i315.i_coerce_reg_to_size.exit320.i_16_219
     (and (= cmp.i311.i_16_185 #b0) a!2))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (= if.then.i314.i_coerce_reg_to_size.exit320.i_16_220
     (and (= cmp.i311.i_16_185 #b1) a!2))))
BasicBlock: if.then26.i, Size:0
BasicBlock: sw.bb201.i, Size:1
  (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))
BasicBlock: if.then41.i, Size:0
BasicBlock: if.then207.i, Size:0
BasicBlock: if.end212.i, Size:18
  (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))
  (= neg.i155.i_16_124 (bvxor or.i_16_120 #xffffffffffffffff))
  (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))
  (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95)
     (= cmp220.i_16_126 #b1)
     (= cmp220.i_16_126 #b0))
  (ite (= cmp220.i_16_126 #b1)
     (= cond225.i_16_127 i27.i.i_16_82)
     (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))
  (= or230.i_16_128 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvslt i27.i.i_16_82 #x0000000000000000)
     (= cmp233.i_16_130 #b1)
     (= cmp233.i_16_130 #b0))
  (ite (= cmp233.i_16_130 #b1)
     (= .cond225.i_16_132 #x8000000000000000)
     (= .cond225.i_16_132 cond225.i_16_127))
  (ite (= cmp233.i_16_130 #b1)
     (= .or230.i_16_134 #x7fffffffffffffff)
     (= .or230.i_16_134 or230.i_16_128))
  (ite (bvsgt .cond225.i_16_132 or.i_16_120)
     (= cmp.i167.i_16_135 #b1)
     (= cmp.i167.i_16_135 #b0))
  (ite (= cmp.i167.i_16_135 #b1)
     (= cond.i168.i_16_136 .cond225.i_16_132)
     (= cond.i168.i_16_136 or.i_16_120))
  (= or8.i172.i_16_137 (bvor or3.i154.i_16_122 or.i_16_120))
  (ite (bvult .or230.i_16_134 or8.i172.i_16_137)
     (= cmp10.i173.i_16_138 #b1)
     (= cmp10.i173.i_16_138 #b0))
  (ite (= cmp10.i173.i_16_138 #b1)
     (= cond14.i174.i_16_139 .or230.i_16_134)
     (= cond14.i174.i_16_139 or8.i172.i_16_137))
  (ite (bvugt cond225.i_16_127 or.i_16_120)
     (= cmp19.i177.i_16_140 #b1)
     (= cmp19.i177.i_16_140 #b0))
  (ite (= cmp19.i177.i_16_140 #b1)
     (= cond23.i178.i_16_141 cond225.i_16_127)
     (= cond23.i178.i_16_141 or.i_16_120))
  (ite (bvult or230.i_16_128 or8.i172.i_16_137)
     (= cmp31.i182.i_16_142 #b1)
     (= cmp31.i182.i_16_142 #b0))
  (ite (= cmp31.i182.i_16_142 #b1)
     (= cond35.i183.i_16_143 or230.i_16_128)
     (= cond35.i183.i_16_143 or8.i172.i_16_137))
BasicBlock: if.then308.i, Size:14
  (=> if.end212.i_if.then308.i_16_172 (= storemerge_16_174 cond35.i183.i_16_143))
  (=> if.then207.i_if.then308.i_16_173 (= storemerge_16_174 or.i_16_120))
  (= dst_reg_16_148 i18.i298.i_16_175)
  (= dst_reg_16_149 i20.i300.i_16_176)
  (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 #x00000000ffffffff))
  (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 #x00000000ffffffff))
  (= dst_reg_16_152 i23.i306.i_16_181)
  (= storemerge_16_174 i24.i308.i_16_182)
  (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))
  (ite (bvult i25.i309.i_16_183 #x0000000100000000)
     (= cmp.i311.i_16_185 #b1)
     (= cmp.i311.i_16_185 #b0))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1)
      (and (= src_reg_16_64 src_reg_16_158)
           (= src_reg_16_65 src_reg_16_159)
           (= src_reg_16_66 src_reg_16_160)
           (= src_reg_16_67 src_reg_16_161)
           (= src_reg_16_68 src_reg_16_162)
           (= src_reg_16_69 src_reg_16_163)
           (= src_reg_16_70 src_reg_16_164)
           (= src_reg_16_71 src_reg_16_165)
           (= src_reg_16_72 src_reg_16_166)
           (= src_reg_16_73 src_reg_16_167)
           (= src_reg_16_74 src_reg_16_168)
           (= src_reg_16_75 src_reg_16_169)
           (= src_reg_16_76 src_reg_16_170)
           (= src_reg_16_77 src_reg_16_171)
           (= dst_reg_16_50 dst_reg_16_144)
           (= dst_reg_16_51 dst_reg_16_145)
           (= dst_reg_16_52 dst_reg_16_146)
           (= dst_reg_16_53 dst_reg_16_147)
           (= or.i_16_120 dst_reg_16_148)
           (= #x0000000000000000 dst_reg_16_149)
           (= or.i_16_120 dst_reg_16_150)
           (= or.i_16_120 dst_reg_16_151)
           (= or.i_16_120 dst_reg_16_152)
           (= storemerge.i.i_16_80 dst_reg_16_153)
           (= dst_reg_16_60 dst_reg_16_154)
           (= dst_reg_16_61 dst_reg_16_155)
           (= dst_reg_16_62 dst_reg_16_156)
           (= dst_reg_16_63 dst_reg_16_157))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (=> (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1)
      (and (= src_reg_16_64 src_reg_16_158)
           (= src_reg_16_65 src_reg_16_159)
           (= src_reg_16_66 src_reg_16_160)
           (= src_reg_16_67 src_reg_16_161)
           (= src_reg_16_68 src_reg_16_162)
           (= src_reg_16_69 src_reg_16_163)
           (= src_reg_16_70 src_reg_16_164)
           (= src_reg_16_71 src_reg_16_165)
           (= src_reg_16_72 src_reg_16_166)
           (= src_reg_16_73 src_reg_16_167)
           (= src_reg_16_74 src_reg_16_168)
           (= src_reg_16_75 src_reg_16_169)
           (= src_reg_16_76 src_reg_16_170)
           (= src_reg_16_77 src_reg_16_171)
           (= dst_reg_16_50 dst_reg_16_144)
           (= dst_reg_16_51 dst_reg_16_145)
           (= dst_reg_16_52 dst_reg_16_146)
           (= dst_reg_16_53 dst_reg_16_147)
           (= or.i_16_120 dst_reg_16_148)
           (= and.i156.i_16_125 dst_reg_16_149)
           (= cond.i168.i_16_136 dst_reg_16_150)
           (= cond14.i174.i_16_139 dst_reg_16_151)
           (= cond23.i178.i_16_141 dst_reg_16_152)
           (= or230.i_16_128 dst_reg_16_153)
           (= dst_reg_16_60 dst_reg_16_154)
           (= dst_reg_16_61 dst_reg_16_155)
           (= dst_reg_16_62 dst_reg_16_156)
           (= dst_reg_16_63 dst_reg_16_157))))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (= if.end212.i_if.then308.i_16_172
     (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1)))
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (= if.then207.i_if.then308.i_16_173
     (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1)))

[encodeFunctionBody] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!3) (and (= cmp.i.i.i.i_16_226 #b1) a!3)))))
if.else.i315.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
if.then.i314.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
if.then.i.i
  (= cmp.i.i_16_44 #b1)
if.end27.i
  (or (and (= cmp24.old.i_16_103 #b0)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b1)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
if.else.i.i
  (= cmp.i.i_16_44 #b0)
coerce_reg_to_size.exit.i
  (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))
lor.lhs.false20.i
  (and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
coerce_reg_to_size.exit320.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (or (and (= cmp.i311.i_16_185 #b0) a!2) (and (= cmp.i311.i_16_185 #b1) a!2))))
if.then26.i
  (or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
sw.bb201.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
land.lhs.true.i
  (and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (and (= tobool.not.i.i_16_99 #b0)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
      (a!2 (and (= tobool.not.i.i_16_99 #b1)
                (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))))
(let ((a!3 (or (and (= cmp24.old.i_16_103 #b0) a!1)
               (and (= cmp18.not.i.not_16_102 #b1) a!2))))
(let ((a!4 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!3))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!3)))))
(let ((a!5 (or (and (= cmp.i311.i_16_185 #b0) a!4)
               (and (= cmp.i311.i_16_185 #b1) a!4))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!5)
      (and (= cmp.i.i.i.i_16_226 #b1) a!5)
      (and (= tobool.not.i.i_16_99 #b0) a!3)
      (and (= cmp24.old.i_16_103 #b1) a!1)
      (and (= cmp18.not.i.not_16_102 #b0) a!2))))))
if.then41.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
if.then207.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
if.end212.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
if.then308.i
  (let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (or (and (= tobool.not.i25.i_16_101 #b0)
           (and (= tobool.not.i.i_16_99 #b1) a!1))
      (and (= tobool.not.i25.i_16_101 #b1)
           (and (= tobool.not.i.i_16_99 #b1) a!1))))
[encodeFunctionBody] EdgeAssertionsMap:
<coerce_reg_to_size.exit320.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.then308.i, if.else.i315.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<if.end212.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<sw.bb201.i, if.end212.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b0) (= tobool.not.i.i_16_99 #b1) a!1))
<entry, if.then.i.i> :(= cmp.i.i_16_44 #b1)
<if.then41.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
<entry, if.else.i.i> :(= cmp.i.i_16_44 #b0)
<if.then.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b1)
<if.then308.i, if.then.i314.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.else.i.i, coerce_reg_to_size.exit.i> :(= cmp.i.i_16_44 #b0)
<if.else.i315.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b0) a!2)))
<coerce_reg_to_size.exit.i, land.lhs.true.i> :(and (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= cmp24.old.i_16_103 #b1)
         (= tobool.not.i.i_16_99 #b0)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
    (and (= cmp18.not.i.not_16_102 #b0)
         (= tobool.not.i.i_16_99 #b1)
         (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))
<coerce_reg_to_size.exit320.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b1)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<coerce_reg_to_size.exit.i, lor.lhs.false20.i> :(and (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<sw.bb201.i, if.then207.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.then26.i> :(and (= cmp18.not.i.not_16_102 #b0)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.then207.i, if.then308.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i25.i_16_101 #b1) (= tobool.not.i.i_16_99 #b1) a!1))
<land.lhs.true.i, if.end27.i> :(and (= cmp18.not.i.not_16_102 #b1)
     (= tobool.not.i.i_16_99 #b1)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<lor.lhs.false20.i, if.then26.i> :(and (= cmp24.old.i_16_103 #b1)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
(let ((a!3 (or (and (= cmp.i311.i_16_185 #b0) a!2)
               (and (= cmp.i311.i_16_185 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_16_226 #b0) a!3) (and (= cmp.i.i.i.i_16_226 #b1) a!3)))))
<lor.lhs.false20.i, if.end27.i> :(and (= cmp24.old.i_16_103 #b0)
     (= tobool.not.i.i_16_99 #b0)
     (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i.i.i.i_16_226 #b0)
       (or (and (= cmp.i311.i_16_185 #b0) a!2)
           (and (= cmp.i311.i_16_185 #b1) a!2)))))
<if.end27.i, sw.bb201.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b1) a!1))
<if.then.i314.i, coerce_reg_to_size.exit320.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
(let ((a!2 (or (and (= tobool.not.i25.i_16_101 #b0)
                    (and (= tobool.not.i.i_16_99 #b1) a!1))
               (and (= tobool.not.i25.i_16_101 #b1)
                    (and (= tobool.not.i.i_16_99 #b1) a!1)))))
  (and (= cmp.i311.i_16_185 #b1) a!2)))
<if.end27.i, if.then41.i> :(let ((a!1 (or (and (= cmp24.old.i_16_103 #b0)
                    (= tobool.not.i.i_16_99 #b0)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1)))
               (and (= cmp18.not.i.not_16_102 #b1)
                    (= tobool.not.i.i_16_99 #b1)
                    (or (= cmp.i.i_16_44 #b0) (= cmp.i.i_16_44 #b1))))))
  (and (= tobool.not.i.i_16_99 #b0) a!1))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
51 = MemoryDef(50) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
49 = MemoryDef(48) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
48 = MemoryDef(47) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
52 = MemoryDef(51) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ and4.i.i.i_16_293 ] [ and.i1.i.i_16_290 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
47 = MemoryDef(46) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
46 = MemoryDef(45) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
54 = MemoryPhi({if.then.i314.i,43},{if.else.i315.i,44}) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ dst_reg_16_200 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
44 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ #x0000000000000000 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
43 = MemoryDef(42) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ and6.i312.i_16_187 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
45 = MemoryDef(54) : {
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ dst_reg_16_197 ] [ dst_reg_16_198 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
}
42 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ and6.i.i302.i_16_180 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
41 = MemoryDef(40) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ and.i.i301.i_16_178 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
40 = MemoryDef(55) : {
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ storemerge_16_174 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
}
55 = MemoryPhi({if.then207.i,30},{if.end212.i,39}) : {
- src_reg: [ [ src_reg_16_158 ] [ ] [ src_reg_16_159 ] [ src_reg_16_160 ] [ src_reg_16_161 ] [ [ src_reg_16_162 ] [ src_reg_16_163 ] ] [ src_reg_16_164 ] [ src_reg_16_165 ] [ src_reg_16_166 ] [ src_reg_16_167 ] [ ] [ src_reg_16_168 ] [ src_reg_16_169 ] [ src_reg_16_170 ] [ src_reg_16_171 ] ] 
- dst_reg: [ [ dst_reg_16_144 ] [ ] [ dst_reg_16_145 ] [ dst_reg_16_146 ] [ dst_reg_16_147 ] [ [ dst_reg_16_148 ] [ dst_reg_16_149 ] ] [ dst_reg_16_150 ] [ dst_reg_16_151 ] [ dst_reg_16_152 ] [ dst_reg_16_153 ] [ ] [ dst_reg_16_154 ] [ dst_reg_16_155 ] [ dst_reg_16_156 ] [ dst_reg_16_157 ] ] 
}
39 = MemoryDef(38) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond23.i178.i_16_141 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
38 = MemoryDef(37) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ cond14.i174.i_16_139 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
37 = MemoryDef(36) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ cond.i168.i_16_136 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
7 = MemoryDef(56) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
6 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ #x0000000000000000 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
11 = MemoryDef(10) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
50 = MemoryDef(49) : {
- src_reg: [ [ src_reg_16_205 ] [ ] [ src_reg_16_206 ] [ src_reg_16_207 ] [ src_reg_16_208 ] [ [ src_reg_16_209 ] [ src_reg_16_210 ] ] [ src_reg_16_211 ] [ src_reg_16_212 ] [ src_reg_16_213 ] [ src_reg_16_214 ] [ ] [ src_reg_16_215 ] [ src_reg_16_216 ] [ src_reg_16_217 ] [ src_reg_16_218 ] ] 
- dst_reg: [ [ dst_reg_16_191 ] [ ] [ dst_reg_16_192 ] [ dst_reg_16_193 ] [ dst_reg_16_194 ] [ [ dst_reg_16_195 ] [ dst_reg_16_196 ] ] [ i27.i317.i_16_223 ] [ storemerge.i316.i_16_221 ] [ dst_reg_16_199 ] [ storemerge.i316.i_16_221 ] [ ] [ dst_reg_16_201 ] [ dst_reg_16_202 ] [ dst_reg_16_203 ] [ dst_reg_16_204 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ and6.i.i_16_46 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ .or230.i_16_134 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
31 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
26 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
53 = MemoryPhi({__reg_bound_offset.exit.i,52},{if.then41.i,25},{if.then26.i,17}) : {
- src_reg: [ [ src_reg_16_308 ] [ ] [ src_reg_16_309 ] [ src_reg_16_310 ] [ src_reg_16_311 ] [ [ src_reg_16_312 ] [ src_reg_16_313 ] ] [ src_reg_16_314 ] [ src_reg_16_315 ] [ src_reg_16_316 ] [ src_reg_16_317 ] [ ] [ src_reg_16_318 ] [ src_reg_16_319 ] [ src_reg_16_320 ] [ src_reg_16_321 ] ] 
- dst_reg: [ [ dst_reg_16_294 ] [ ] [ dst_reg_16_295 ] [ dst_reg_16_296 ] [ dst_reg_16_297 ] [ [ dst_reg_16_298 ] [ dst_reg_16_299 ] ] [ dst_reg_16_300 ] [ dst_reg_16_301 ] [ dst_reg_16_302 ] [ dst_reg_16_303 ] [ ] [ dst_reg_16_304 ] [ dst_reg_16_305 ] [ dst_reg_16_306 ] [ dst_reg_16_307 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
56 = MemoryPhi({if.then.i.i,5},{if.else.i.i,6}) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ dst_reg_16_56 ] [ dst_reg_16_57 ] [ dst_reg_16_58 ] [ dst_reg_16_59 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
33 = MemoryDef(32) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
18 = MemoryDef(9) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ dst_reg_16_54 ] [ dst_reg_16_55 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
34 = MemoryDef(33) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ .cond225.i_16_132 ] [ storemerge.i.i_16_80 ] [ cond225.i_16_127 ] [ or230.i_16_128 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ or.i_16_120 ] [ or.i_16_120 ] [ or.i_16_120 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
32 = MemoryDef(31) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ and.i156.i_16_125 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ and.i.i.i_16_37 ] [ and6.i.i.i_16_39 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
}
17 = MemoryDef(16) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ #x00000000 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
}
27 = MemoryDef(26) : {
- dst_reg: [ [ dst_reg_16_50 ] [ ] [ dst_reg_16_51 ] [ dst_reg_16_52 ] [ dst_reg_16_53 ] [ [ or.i_16_120 ] [ #x0000000000000000 ] ] [ i27.i.i_16_82 ] [ storemerge.i.i_16_80 ] [ dst_reg_16_58 ] [ storemerge.i.i_16_80 ] [ ] [ dst_reg_16_60 ] [ dst_reg_16_61 ] [ dst_reg_16_62 ] [ dst_reg_16_63 ] ] 
- src_reg: [ [ src_reg_16_64 ] [ ] [ src_reg_16_65 ] [ src_reg_16_66 ] [ src_reg_16_67 ] [ [ src_reg_16_68 ] [ src_reg_16_69 ] ] [ src_reg_16_70 ] [ src_reg_16_71 ] [ src_reg_16_72 ] [ src_reg_16_73 ] [ ] [ src_reg_16_74 ] [ src_reg_16_75 ] [ src_reg_16_76 ] [ src_reg_16_77 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_16_0 ] [ ] [ dst_reg_16_1 ] [ dst_reg_16_2 ] [ dst_reg_16_3 ] [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] [ dst_reg_16_6 ] [ dst_reg_16_7 ] [ dst_reg_16_8 ] [ dst_reg_16_9 ] [ ] [ dst_reg_16_10 ] [ dst_reg_16_11 ] [ dst_reg_16_12 ] [ dst_reg_16_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_16_4 ] [ dst_reg_16_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_4",
	"dst_reg_16_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3",
	[
		"dst_reg_16_4",
		"dst_reg_16_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3",
	[
		"dst_reg_16_4",
		"dst_reg_16_5"
	],
	"dst_reg_16_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3",
	[
		"dst_reg_16_4",
		"dst_reg_16_5"
	],
	"dst_reg_16_6",
	"dst_reg_16_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3",
	[
		"dst_reg_16_4",
		"dst_reg_16_5"
	],
	"dst_reg_16_6",
	"dst_reg_16_7",
	"dst_reg_16_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3",
	[
		"dst_reg_16_4",
		"dst_reg_16_5"
	],
	"dst_reg_16_6",
	"dst_reg_16_7",
	"dst_reg_16_8",
	"dst_reg_16_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3",
	[
		"dst_reg_16_4",
		"dst_reg_16_5"
	],
	"dst_reg_16_6",
	"dst_reg_16_7",
	"dst_reg_16_8",
	"dst_reg_16_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3",
	[
		"dst_reg_16_4",
		"dst_reg_16_5"
	],
	"dst_reg_16_6",
	"dst_reg_16_7",
	"dst_reg_16_8",
	"dst_reg_16_9",
	"",
	"",
	"dst_reg_16_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3",
	[
		"dst_reg_16_4",
		"dst_reg_16_5"
	],
	"dst_reg_16_6",
	"dst_reg_16_7",
	"dst_reg_16_8",
	"dst_reg_16_9",
	"",
	"",
	"dst_reg_16_10",
	"dst_reg_16_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_16_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_0",
	[
		""
	],
	"dst_reg_16_1",
	"dst_reg_16_2",
	"dst_reg_16_3",
	[
		"dst_reg_16_4",
		"dst_reg_16_5"
	],
	"dst_reg_16_6",
	"dst_reg_16_7",
	"dst_reg_16_8",
	"dst_reg_16_9",
	"",
	"",
	"dst_reg_16_10",
	"dst_reg_16_11",
	"dst_reg_16_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_16_14 ] [ ] [ src_reg_16_15 ] [ src_reg_16_16 ] [ src_reg_16_17 ] [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] [ src_reg_16_20 ] [ src_reg_16_21 ] [ src_reg_16_22 ] [ src_reg_16_23 ] [ ] [ src_reg_16_24 ] [ src_reg_16_25 ] [ src_reg_16_26 ] [ src_reg_16_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_16_18 ] [ src_reg_16_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_16_18 ] [ src_reg_16_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_18",
	"src_reg_16_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17",
	[
		"src_reg_16_18",
		"src_reg_16_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17",
	[
		"src_reg_16_18",
		"src_reg_16_19"
	],
	"src_reg_16_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17",
	[
		"src_reg_16_18",
		"src_reg_16_19"
	],
	"src_reg_16_20",
	"src_reg_16_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17",
	[
		"src_reg_16_18",
		"src_reg_16_19"
	],
	"src_reg_16_20",
	"src_reg_16_21",
	"src_reg_16_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17",
	[
		"src_reg_16_18",
		"src_reg_16_19"
	],
	"src_reg_16_20",
	"src_reg_16_21",
	"src_reg_16_22",
	"src_reg_16_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17",
	[
		"src_reg_16_18",
		"src_reg_16_19"
	],
	"src_reg_16_20",
	"src_reg_16_21",
	"src_reg_16_22",
	"src_reg_16_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17",
	[
		"src_reg_16_18",
		"src_reg_16_19"
	],
	"src_reg_16_20",
	"src_reg_16_21",
	"src_reg_16_22",
	"src_reg_16_23",
	"",
	"",
	"src_reg_16_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17",
	[
		"src_reg_16_18",
		"src_reg_16_19"
	],
	"src_reg_16_20",
	"src_reg_16_21",
	"src_reg_16_22",
	"src_reg_16_23",
	"",
	"",
	"src_reg_16_24",
	"src_reg_16_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_16_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_14",
	[
		""
	],
	"src_reg_16_15",
	"src_reg_16_16",
	"src_reg_16_17",
	[
		"src_reg_16_18",
		"src_reg_16_19"
	],
	"src_reg_16_20",
	"src_reg_16_21",
	"src_reg_16_22",
	"src_reg_16_23",
	"",
	"",
	"src_reg_16_24",
	"src_reg_16_25",
	"src_reg_16_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_16_336 ] [ ] [ src_reg_16_337 ] [ src_reg_16_338 ] [ src_reg_16_339 ] [ [ src_reg_16_340 ] [ src_reg_16_341 ] ] [ src_reg_16_342 ] [ src_reg_16_343 ] [ src_reg_16_344 ] [ src_reg_16_345 ] [ ] [ src_reg_16_346 ] [ src_reg_16_347 ] [ src_reg_16_348 ] [ src_reg_16_349 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_16_336 ] [ ] [ src_reg_16_337 ] [ src_reg_16_338 ] [ src_reg_16_339 ] [ [ src_reg_16_340 ] [ src_reg_16_341 ] ] [ src_reg_16_342 ] [ src_reg_16_343 ] [ src_reg_16_344 ] [ src_reg_16_345 ] [ ] [ src_reg_16_346 ] [ src_reg_16_347 ] [ src_reg_16_348 ] [ src_reg_16_349 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_336 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_337 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_338 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_339 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_16_340 ] [ src_reg_16_341 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_16_340 ] [ src_reg_16_341 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_340 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_340"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_341 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_340",
	"src_reg_16_341"
]

[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339",
	[
		"src_reg_16_340",
		"src_reg_16_341"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_342 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339",
	[
		"src_reg_16_340",
		"src_reg_16_341"
	],
	"src_reg_16_342"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_343 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339",
	[
		"src_reg_16_340",
		"src_reg_16_341"
	],
	"src_reg_16_342",
	"src_reg_16_343"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_344 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339",
	[
		"src_reg_16_340",
		"src_reg_16_341"
	],
	"src_reg_16_342",
	"src_reg_16_343",
	"src_reg_16_344"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_16_345 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339",
	[
		"src_reg_16_340",
		"src_reg_16_341"
	],
	"src_reg_16_342",
	"src_reg_16_343",
	"src_reg_16_344",
	"src_reg_16_345"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339",
	[
		"src_reg_16_340",
		"src_reg_16_341"
	],
	"src_reg_16_342",
	"src_reg_16_343",
	"src_reg_16_344",
	"src_reg_16_345",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_346 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339",
	[
		"src_reg_16_340",
		"src_reg_16_341"
	],
	"src_reg_16_342",
	"src_reg_16_343",
	"src_reg_16_344",
	"src_reg_16_345",
	"",
	"",
	"src_reg_16_346"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_16_347 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339",
	[
		"src_reg_16_340",
		"src_reg_16_341"
	],
	"src_reg_16_342",
	"src_reg_16_343",
	"src_reg_16_344",
	"src_reg_16_345",
	"",
	"",
	"src_reg_16_346",
	"src_reg_16_347"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_16_348 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_16_336",
	[
		""
	],
	"src_reg_16_337",
	"src_reg_16_338",
	"src_reg_16_339",
	[
		"src_reg_16_340",
		"src_reg_16_341"
	],
	"src_reg_16_342",
	"src_reg_16_343",
	"src_reg_16_344",
	"src_reg_16_345",
	"",
	"",
	"src_reg_16_346",
	"src_reg_16_347",
	"src_reg_16_348"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_16_322 ] [ ] [ dst_reg_16_323 ] [ dst_reg_16_324 ] [ dst_reg_16_325 ] [ [ dst_reg_16_326 ] [ dst_reg_16_327 ] ] [ dst_reg_16_328 ] [ dst_reg_16_329 ] [ dst_reg_16_330 ] [ dst_reg_16_331 ] [ ] [ dst_reg_16_332 ] [ dst_reg_16_333 ] [ dst_reg_16_334 ] [ dst_reg_16_335 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_16_322 ] [ ] [ dst_reg_16_323 ] [ dst_reg_16_324 ] [ dst_reg_16_325 ] [ [ dst_reg_16_326 ] [ dst_reg_16_327 ] ] [ dst_reg_16_328 ] [ dst_reg_16_329 ] [ dst_reg_16_330 ] [ dst_reg_16_331 ] [ ] [ dst_reg_16_332 ] [ dst_reg_16_333 ] [ dst_reg_16_334 ] [ dst_reg_16_335 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_322 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_323 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_324 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_325 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_16_326 ] [ dst_reg_16_327 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_16_326 ] [ dst_reg_16_327 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_326 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_326"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_327 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_326",
	"dst_reg_16_327"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325",
	[
		"dst_reg_16_326",
		"dst_reg_16_327"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_328 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325",
	[
		"dst_reg_16_326",
		"dst_reg_16_327"
	],
	"dst_reg_16_328"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_329 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325",
	[
		"dst_reg_16_326",
		"dst_reg_16_327"
	],
	"dst_reg_16_328",
	"dst_reg_16_329"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_330 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325",
	[
		"dst_reg_16_326",
		"dst_reg_16_327"
	],
	"dst_reg_16_328",
	"dst_reg_16_329",
	"dst_reg_16_330"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_16_331 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325",
	[
		"dst_reg_16_326",
		"dst_reg_16_327"
	],
	"dst_reg_16_328",
	"dst_reg_16_329",
	"dst_reg_16_330",
	"dst_reg_16_331"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325",
	[
		"dst_reg_16_326",
		"dst_reg_16_327"
	],
	"dst_reg_16_328",
	"dst_reg_16_329",
	"dst_reg_16_330",
	"dst_reg_16_331",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_332 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325",
	[
		"dst_reg_16_326",
		"dst_reg_16_327"
	],
	"dst_reg_16_328",
	"dst_reg_16_329",
	"dst_reg_16_330",
	"dst_reg_16_331",
	"",
	"",
	"dst_reg_16_332"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_16_333 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325",
	[
		"dst_reg_16_326",
		"dst_reg_16_327"
	],
	"dst_reg_16_328",
	"dst_reg_16_329",
	"dst_reg_16_330",
	"dst_reg_16_331",
	"",
	"",
	"dst_reg_16_332",
	"dst_reg_16_333"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_16_334 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_16_322",
	[
		""
	],
	"dst_reg_16_323",
	"dst_reg_16_324",
	"dst_reg_16_325",
	[
		"dst_reg_16_326",
		"dst_reg_16_327"
	],
	"dst_reg_16_328",
	"dst_reg_16_329",
	"dst_reg_16_330",
	"dst_reg_16_331",
	"",
	"",
	"dst_reg_16_332",
	"dst_reg_16_333",
	"dst_reg_16_334"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_OR_32
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_16_0",
      [ "" ],
      "dst_reg_16_1",
      "dst_reg_16_2",
      "dst_reg_16_3",
      [ "dst_reg_16_4", "dst_reg_16_5" ],
      "dst_reg_16_6",
      "dst_reg_16_7",
      "dst_reg_16_8",
      "dst_reg_16_9",
      "",
      "",
      "dst_reg_16_10",
      "dst_reg_16_11",
      "dst_reg_16_12"
   ],
   "src_reg" : [
      "src_reg_16_14",
      [ "" ],
      "src_reg_16_15",
      "src_reg_16_16",
      "src_reg_16_17",
      [ "src_reg_16_18", "src_reg_16_19" ],
      "src_reg_16_20",
      "src_reg_16_21",
      "src_reg_16_22",
      "src_reg_16_23",
      "",
      "",
      "src_reg_16_24",
      "src_reg_16_25",
      "src_reg_16_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_16_322",
      [ "" ],
      "dst_reg_16_323",
      "dst_reg_16_324",
      "dst_reg_16_325",
      [ "dst_reg_16_326", "dst_reg_16_327" ],
      "dst_reg_16_328",
      "dst_reg_16_329",
      "dst_reg_16_330",
      "dst_reg_16_331",
      "",
      "",
      "dst_reg_16_332",
      "dst_reg_16_333",
      "dst_reg_16_334"
   ],
   "src_reg" : [
      "src_reg_16_336",
      [ "" ],
      "src_reg_16_337",
      "src_reg_16_338",
      "src_reg_16_339",
      [ "src_reg_16_340", "src_reg_16_341" ],
      "src_reg_16_342",
      "src_reg_16_343",
      "src_reg_16_344",
      "src_reg_16_345",
      "",
      "",
      "src_reg_16_346",
      "src_reg_16_347",
      "src_reg_16_348"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun cmp.i.i_16_44 () (_ BitVec 1))
(declare-fun tobool.not.i.i_16_99 () (_ BitVec 1))
(declare-fun cmp18.not.i.not_16_102 () (_ BitVec 1))
(declare-fun cmp24.old.i_16_103 () (_ BitVec 1))
(declare-fun tobool.not.i25.i_16_101 () (_ BitVec 1))
(declare-fun if.then207.i_if.then308.i_16_173 () Bool)
(declare-fun if.end212.i_if.then308.i_16_172 () Bool)
(declare-fun dst_reg_16_157 () (_ BitVec 8))
(declare-fun dst_reg_16_63 () (_ BitVec 8))
(declare-fun dst_reg_16_156 () (_ BitVec 32))
(declare-fun dst_reg_16_62 () (_ BitVec 32))
(declare-fun dst_reg_16_155 () (_ BitVec 32))
(declare-fun dst_reg_16_61 () (_ BitVec 32))
(declare-fun dst_reg_16_154 () (_ BitVec 32))
(declare-fun dst_reg_16_60 () (_ BitVec 32))
(declare-fun dst_reg_16_153 () (_ BitVec 64))
(declare-fun or230.i_16_128 () (_ BitVec 64))
(declare-fun dst_reg_16_152 () (_ BitVec 64))
(declare-fun cond23.i178.i_16_141 () (_ BitVec 64))
(declare-fun dst_reg_16_151 () (_ BitVec 64))
(declare-fun cond14.i174.i_16_139 () (_ BitVec 64))
(declare-fun dst_reg_16_150 () (_ BitVec 64))
(declare-fun cond.i168.i_16_136 () (_ BitVec 64))
(declare-fun dst_reg_16_149 () (_ BitVec 64))
(declare-fun and.i156.i_16_125 () (_ BitVec 64))
(declare-fun dst_reg_16_148 () (_ BitVec 64))
(declare-fun or.i_16_120 () (_ BitVec 64))
(declare-fun dst_reg_16_147 () (_ BitVec 32))
(declare-fun dst_reg_16_53 () (_ BitVec 32))
(declare-fun dst_reg_16_146 () (_ BitVec 32))
(declare-fun dst_reg_16_52 () (_ BitVec 32))
(declare-fun dst_reg_16_145 () (_ BitVec 32))
(declare-fun dst_reg_16_51 () (_ BitVec 32))
(declare-fun dst_reg_16_144 () (_ BitVec 32))
(declare-fun dst_reg_16_50 () (_ BitVec 32))
(declare-fun src_reg_16_171 () (_ BitVec 8))
(declare-fun src_reg_16_77 () (_ BitVec 8))
(declare-fun src_reg_16_170 () (_ BitVec 32))
(declare-fun src_reg_16_76 () (_ BitVec 32))
(declare-fun src_reg_16_169 () (_ BitVec 32))
(declare-fun src_reg_16_75 () (_ BitVec 32))
(declare-fun src_reg_16_168 () (_ BitVec 32))
(declare-fun src_reg_16_74 () (_ BitVec 32))
(declare-fun src_reg_16_167 () (_ BitVec 64))
(declare-fun src_reg_16_73 () (_ BitVec 64))
(declare-fun src_reg_16_166 () (_ BitVec 64))
(declare-fun src_reg_16_72 () (_ BitVec 64))
(declare-fun src_reg_16_165 () (_ BitVec 64))
(declare-fun src_reg_16_71 () (_ BitVec 64))
(declare-fun src_reg_16_164 () (_ BitVec 64))
(declare-fun src_reg_16_70 () (_ BitVec 64))
(declare-fun src_reg_16_163 () (_ BitVec 64))
(declare-fun src_reg_16_69 () (_ BitVec 64))
(declare-fun src_reg_16_162 () (_ BitVec 64))
(declare-fun src_reg_16_68 () (_ BitVec 64))
(declare-fun src_reg_16_161 () (_ BitVec 32))
(declare-fun src_reg_16_67 () (_ BitVec 32))
(declare-fun src_reg_16_160 () (_ BitVec 32))
(declare-fun src_reg_16_66 () (_ BitVec 32))
(declare-fun src_reg_16_159 () (_ BitVec 32))
(declare-fun src_reg_16_65 () (_ BitVec 32))
(declare-fun src_reg_16_158 () (_ BitVec 32))
(declare-fun src_reg_16_64 () (_ BitVec 32))
(declare-fun storemerge.i.i_16_80 () (_ BitVec 64))
(declare-fun cmp.i311.i_16_185 () (_ BitVec 1))
(declare-fun i25.i309.i_16_183 () (_ BitVec 64))
(declare-fun i23.i306.i_16_181 () (_ BitVec 64))
(declare-fun i24.i308.i_16_182 () (_ BitVec 64))
(declare-fun storemerge_16_174 () (_ BitVec 64))
(declare-fun i20.i300.i_16_176 () (_ BitVec 64))
(declare-fun and6.i.i302.i_16_180 () (_ BitVec 64))
(declare-fun i18.i298.i_16_175 () (_ BitVec 64))
(declare-fun and.i.i301.i_16_178 () (_ BitVec 64))
(declare-fun cond35.i183.i_16_143 () (_ BitVec 64))
(declare-fun or8.i172.i_16_137 () (_ BitVec 64))
(declare-fun cmp31.i182.i_16_142 () (_ BitVec 1))
(declare-fun cond225.i_16_127 () (_ BitVec 64))
(declare-fun cmp19.i177.i_16_140 () (_ BitVec 1))
(declare-fun .or230.i_16_134 () (_ BitVec 64))
(declare-fun cmp10.i173.i_16_138 () (_ BitVec 1))
(declare-fun or3.i154.i_16_122 () (_ BitVec 64))
(declare-fun .cond225.i_16_132 () (_ BitVec 64))
(declare-fun cmp.i167.i_16_135 () (_ BitVec 1))
(declare-fun cmp233.i_16_130 () (_ BitVec 1))
(declare-fun i27.i.i_16_82 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0_16_95 () (_ BitVec 64))
(declare-fun cmp220.i_16_126 () (_ BitVec 1))
(declare-fun neg.i155.i_16_124 () (_ BitVec 64))
(declare-fun and6.i.i6.i_16_86 () (_ BitVec 64))
(declare-fun and6.i.i.i_16_39 () (_ BitVec 64))
(declare-fun and.i.i5.i_16_84 () (_ BitVec 64))
(declare-fun and.i.i.i_16_37 () (_ BitVec 64))
(declare-fun if.then.i314.i_coerce_reg_to_size.exit320.i_16_220 () Bool)
(declare-fun if.else.i315.i_coerce_reg_to_size.exit320.i_16_219 () Bool)
(declare-fun dst_reg_16_204 () (_ BitVec 8))
(declare-fun dst_reg_16_203 () (_ BitVec 32))
(declare-fun dst_reg_16_202 () (_ BitVec 32))
(declare-fun dst_reg_16_201 () (_ BitVec 32))
(declare-fun dst_reg_16_200 () (_ BitVec 64))
(declare-fun dst_reg_16_199 () (_ BitVec 64))
(declare-fun dst_reg_16_198 () (_ BitVec 64))
(declare-fun dst_reg_16_197 () (_ BitVec 64))
(declare-fun dst_reg_16_196 () (_ BitVec 64))
(declare-fun dst_reg_16_195 () (_ BitVec 64))
(declare-fun dst_reg_16_194 () (_ BitVec 32))
(declare-fun dst_reg_16_193 () (_ BitVec 32))
(declare-fun dst_reg_16_192 () (_ BitVec 32))
(declare-fun dst_reg_16_191 () (_ BitVec 32))
(declare-fun src_reg_16_218 () (_ BitVec 8))
(declare-fun src_reg_16_217 () (_ BitVec 32))
(declare-fun src_reg_16_216 () (_ BitVec 32))
(declare-fun src_reg_16_215 () (_ BitVec 32))
(declare-fun src_reg_16_214 () (_ BitVec 64))
(declare-fun src_reg_16_213 () (_ BitVec 64))
(declare-fun src_reg_16_212 () (_ BitVec 64))
(declare-fun src_reg_16_211 () (_ BitVec 64))
(declare-fun src_reg_16_210 () (_ BitVec 64))
(declare-fun src_reg_16_209 () (_ BitVec 64))
(declare-fun src_reg_16_208 () (_ BitVec 32))
(declare-fun src_reg_16_207 () (_ BitVec 32))
(declare-fun src_reg_16_206 () (_ BitVec 32))
(declare-fun src_reg_16_205 () (_ BitVec 32))
(declare-fun and6.i312.i_16_187 () (_ BitVec 64))
(declare-fun cmp.i.i.i.i_16_226 () (_ BitVec 1))
(declare-fun xor.i.i.i_16_224 () (_ BitVec 64))
(declare-fun storemerge.i316.i_16_221 () (_ BitVec 64))
(declare-fun i27.i317.i_16_223 () (_ BitVec 64))
(declare-fun and8.i313.i_16_189 () (_ BitVec 64))
(declare-fun storemerge.i20.i_16_97 () (_ BitVec 64))
(declare-fun src_reg_16_349 () (_ BitVec 8))
(declare-fun src_reg_16_321 () (_ BitVec 8))
(declare-fun src_reg_16_348 () (_ BitVec 32))
(declare-fun src_reg_16_320 () (_ BitVec 32))
(declare-fun src_reg_16_347 () (_ BitVec 32))
(declare-fun src_reg_16_319 () (_ BitVec 32))
(declare-fun src_reg_16_346 () (_ BitVec 32))
(declare-fun src_reg_16_318 () (_ BitVec 32))
(declare-fun src_reg_16_345 () (_ BitVec 64))
(declare-fun src_reg_16_317 () (_ BitVec 64))
(declare-fun src_reg_16_344 () (_ BitVec 64))
(declare-fun src_reg_16_316 () (_ BitVec 64))
(declare-fun src_reg_16_343 () (_ BitVec 64))
(declare-fun src_reg_16_315 () (_ BitVec 64))
(declare-fun src_reg_16_342 () (_ BitVec 64))
(declare-fun src_reg_16_314 () (_ BitVec 64))
(declare-fun src_reg_16_341 () (_ BitVec 64))
(declare-fun src_reg_16_313 () (_ BitVec 64))
(declare-fun src_reg_16_340 () (_ BitVec 64))
(declare-fun src_reg_16_312 () (_ BitVec 64))
(declare-fun src_reg_16_339 () (_ BitVec 32))
(declare-fun src_reg_16_311 () (_ BitVec 32))
(declare-fun src_reg_16_338 () (_ BitVec 32))
(declare-fun src_reg_16_310 () (_ BitVec 32))
(declare-fun src_reg_16_337 () (_ BitVec 32))
(declare-fun src_reg_16_309 () (_ BitVec 32))
(declare-fun src_reg_16_336 () (_ BitVec 32))
(declare-fun src_reg_16_308 () (_ BitVec 32))
(declare-fun dst_reg_16_335 () (_ BitVec 8))
(declare-fun dst_reg_16_307 () (_ BitVec 8))
(declare-fun dst_reg_16_334 () (_ BitVec 32))
(declare-fun dst_reg_16_306 () (_ BitVec 32))
(declare-fun dst_reg_16_333 () (_ BitVec 32))
(declare-fun dst_reg_16_305 () (_ BitVec 32))
(declare-fun dst_reg_16_332 () (_ BitVec 32))
(declare-fun dst_reg_16_304 () (_ BitVec 32))
(declare-fun dst_reg_16_331 () (_ BitVec 64))
(declare-fun dst_reg_16_303 () (_ BitVec 64))
(declare-fun dst_reg_16_330 () (_ BitVec 64))
(declare-fun dst_reg_16_302 () (_ BitVec 64))
(declare-fun dst_reg_16_329 () (_ BitVec 64))
(declare-fun dst_reg_16_301 () (_ BitVec 64))
(declare-fun dst_reg_16_328 () (_ BitVec 64))
(declare-fun dst_reg_16_300 () (_ BitVec 64))
(declare-fun dst_reg_16_327 () (_ BitVec 64))
(declare-fun dst_reg_16_299 () (_ BitVec 64))
(declare-fun dst_reg_16_326 () (_ BitVec 64))
(declare-fun dst_reg_16_298 () (_ BitVec 64))
(declare-fun dst_reg_16_325 () (_ BitVec 32))
(declare-fun dst_reg_16_297 () (_ BitVec 32))
(declare-fun dst_reg_16_324 () (_ BitVec 32))
(declare-fun dst_reg_16_296 () (_ BitVec 32))
(declare-fun dst_reg_16_323 () (_ BitVec 32))
(declare-fun dst_reg_16_295 () (_ BitVec 32))
(declare-fun dst_reg_16_322 () (_ BitVec 32))
(declare-fun dst_reg_16_294 () (_ BitVec 32))
(declare-fun and.i1.i.i_16_290 () (_ BitVec 64))
(declare-fun and4.i.i.i_16_293 () (_ BitVec 64))
(declare-fun if.then.i.i_coerce_reg_to_size.exit.i_16_79 () Bool)
(declare-fun if.else.i.i_coerce_reg_to_size.exit.i_16_78 () Bool)
(declare-fun dst_reg_16_13 () (_ BitVec 8))
(declare-fun dst_reg_16_12 () (_ BitVec 32))
(declare-fun dst_reg_16_11 () (_ BitVec 32))
(declare-fun dst_reg_16_10 () (_ BitVec 32))
(declare-fun dst_reg_16_59 () (_ BitVec 64))
(declare-fun dst_reg_16_9 () (_ BitVec 64))
(declare-fun dst_reg_16_58 () (_ BitVec 64))
(declare-fun dst_reg_16_57 () (_ BitVec 64))
(declare-fun dst_reg_16_7 () (_ BitVec 64))
(declare-fun dst_reg_16_56 () (_ BitVec 64))
(declare-fun dst_reg_16_6 () (_ BitVec 64))
(declare-fun dst_reg_16_55 () (_ BitVec 64))
(declare-fun dst_reg_16_54 () (_ BitVec 64))
(declare-fun dst_reg_16_3 () (_ BitVec 32))
(declare-fun dst_reg_16_2 () (_ BitVec 32))
(declare-fun dst_reg_16_1 () (_ BitVec 32))
(declare-fun src_reg_16_27 () (_ BitVec 8))
(declare-fun src_reg_16_26 () (_ BitVec 32))
(declare-fun src_reg_16_25 () (_ BitVec 32))
(declare-fun src_reg_16_24 () (_ BitVec 32))
(declare-fun src_reg_16_23 () (_ BitVec 64))
(declare-fun src_reg_16_22 () (_ BitVec 64))
(declare-fun src_reg_16_21 () (_ BitVec 64))
(declare-fun src_reg_16_20 () (_ BitVec 64))
(declare-fun src_reg_16_19 () (_ BitVec 64))
(declare-fun src_reg_16_18 () (_ BitVec 64))
(declare-fun src_reg_16_17 () (_ BitVec 32))
(declare-fun src_reg_16_16 () (_ BitVec 32))
(declare-fun src_reg_16_15 () (_ BitVec 32))
(declare-fun and6.i.i_16_46 () (_ BitVec 64))
(declare-fun and8.i17.i_16_93 () (_ BitVec 64))
(declare-fun cmp.i15.i_16_89 () (_ BitVec 1))
(declare-fun and6.i16.i_16_91 () (_ BitVec 64))
(declare-fun src_reg1.sroa.22.0.copyload_16_33 () (_ BitVec 64))
(declare-fun src_reg1.sroa.17.0.copyload_16_32 () (_ BitVec 64))
(declare-fun i25.i13.i_16_87 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_16_31 () (_ BitVec 64))
(declare-fun src_reg1.sroa.3.0.copyload_16_30 () (_ BitVec 64))
(declare-fun and8.i.i_16_48 () (_ BitVec 64))
(declare-fun i24.i.i_16_41 () (_ BitVec 64))
(declare-fun i23.i.i_16_40 () (_ BitVec 64))
(declare-fun i25.i.i_16_42 () (_ BitVec 64))
(declare-fun dst_reg_16_8 () (_ BitVec 64))
(declare-fun i20.i.i_16_35 () (_ BitVec 64))
(declare-fun i18.i.i_16_34 () (_ BitVec 64))
(declare-fun dst_reg_16_5 () (_ BitVec 64))
(declare-fun dst_reg_16_4 () (_ BitVec 64))
(declare-fun src_reg_16_14 () (_ BitVec 32))
(declare-fun dst_reg_16_0 () (_ BitVec 32))
(declare-fun add.i.i.i335.i_16_270 () (_ BitVec 32))
(declare-fun phi.bo_16_272 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_16_269 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_16_266 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_16_268 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_16_265 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_16_258 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_16_262 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_16_260 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_16_257 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_16_264 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_16_250 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_16_254 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_16_252 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_16_249 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_16_256 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_16_242 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_16_246 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_16_244 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_16_241 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_16_248 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_16_234 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_16_238 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_16_236 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_16_231 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_16_240 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_16_228 () (_ BitVec 1))
(declare-fun shl.i.i.i.i.i_16_230 () (_ BitVec 64))
(declare-fun coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_16_273 () Bool)
(declare-fun neg.i.i.i_16_292 () (_ BitVec 64))
(declare-fun or.i.i.i_16_289 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_16_288 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_16_286 () (_ BitVec 64))
(declare-fun sub.i.i.i_16_283 () (_ BitVec 64))
(declare-fun cmp.i.i.i_16_278 () (_ BitVec 1))
(declare-fun and.i.i336.i_16_284 () (_ BitVec 64))
(declare-fun notmask.i.i.i_16_281 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_16_279 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_16_275 () (_ BitVec 32))
(assert
 (let (($x94 (= cmp.i.i_16_44 (_ bv1 1))))
 (let (($x92 (= cmp.i.i_16_44 (_ bv0 1))))
 (let (($x715 (or $x92 $x94)))
 (let (($x200 (= tobool.not.i.i_16_99 (_ bv1 1))))
 (let (($x716 (and $x200 $x715)))
 (let (($x210 (= cmp18.not.i.not_16_102 (_ bv1 1))))
 (let (($x718 (and $x210 $x716)))
 (let (($x199 (= tobool.not.i.i_16_99 (_ bv0 1))))
 (let (($x717 (and $x199 $x715)))
 (let (($x214 (= cmp24.old.i_16_103 (_ bv0 1))))
 (let (($x721 (and $x214 $x717)))
 (let (($x723 (or $x721 $x718)))
 (let (($x724 (and $x200 $x723)))
 (let (($x205 (= tobool.not.i25.i_16_101 (_ bv1 1))))
 (let (($x727 (and $x205 $x724)))
 (let (($x748 (= if.then207.i_if.then308.i_16_173 $x727)))
 (let (($x204 (= tobool.not.i25.i_16_101 (_ bv0 1))))
 (let (($x728 (and $x204 $x724)))
 (let (($x747 (= if.end212.i_if.then308.i_16_172 $x728)))
 (let (($x351 (= dst_reg_16_63 dst_reg_16_157)))
 (let (($x350 (= dst_reg_16_62 dst_reg_16_156)))
 (let (($x349 (= dst_reg_16_61 dst_reg_16_155)))
 (let (($x348 (= dst_reg_16_60 dst_reg_16_154)))
 (let (($x356 (= or230.i_16_128 dst_reg_16_153)))
 (let (($x355 (= cond23.i178.i_16_141 dst_reg_16_152)))
 (let (($x354 (= cond14.i174.i_16_139 dst_reg_16_151)))
 (let (($x353 (= cond.i168.i_16_136 dst_reg_16_150)))
 (let (($x352 (= and.i156.i_16_125 dst_reg_16_149)))
 (let (($x342 (= or.i_16_120 dst_reg_16_148)))
 (let (($x341 (= dst_reg_16_53 dst_reg_16_147)))
 (let (($x340 (= dst_reg_16_52 dst_reg_16_146)))
 (let (($x339 (= dst_reg_16_51 dst_reg_16_145)))
 (let (($x338 (= dst_reg_16_50 dst_reg_16_144)))
 (let (($x337 (= src_reg_16_77 src_reg_16_171)))
 (let (($x336 (= src_reg_16_76 src_reg_16_170)))
 (let (($x335 (= src_reg_16_75 src_reg_16_169)))
 (let (($x334 (= src_reg_16_74 src_reg_16_168)))
 (let (($x333 (= src_reg_16_73 src_reg_16_167)))
 (let (($x332 (= src_reg_16_72 src_reg_16_166)))
 (let (($x331 (= src_reg_16_71 src_reg_16_165)))
 (let (($x330 (= src_reg_16_70 src_reg_16_164)))
 (let (($x329 (= src_reg_16_69 src_reg_16_163)))
 (let (($x328 (= src_reg_16_68 src_reg_16_162)))
 (let (($x327 (= src_reg_16_67 src_reg_16_161)))
 (let (($x326 (= src_reg_16_66 src_reg_16_160)))
 (let (($x325 (= src_reg_16_65 src_reg_16_159)))
 (let (($x324 (= src_reg_16_64 src_reg_16_158)))
 (let (($x745 (and $x324 $x325 $x326 $x327 $x328 $x329 $x330 $x331 $x332 $x333 $x334 $x335 $x336 $x337 $x338 $x339 $x340 $x341 $x342 $x352 $x353 $x354 $x355 $x356 $x348 $x349 $x350 $x351)))
 (let (($x746 (=> $x728 $x745)))
 (let (($x347 (= storemerge.i.i_16_80 dst_reg_16_153)))
 (let (($x346 (= or.i_16_120 dst_reg_16_152)))
 (let (($x345 (= or.i_16_120 dst_reg_16_151)))
 (let (($x344 (= or.i_16_120 dst_reg_16_150)))
 (let (($x343 (= (_ bv0 64) dst_reg_16_149)))
 (let (($x743 (and $x324 $x325 $x326 $x327 $x328 $x329 $x330 $x331 $x332 $x333 $x334 $x335 $x336 $x337 $x338 $x339 $x340 $x341 $x342 $x343 $x344 $x345 $x346 $x347 $x348 $x349 $x350 $x351)))
 (let (($x744 (=> $x727 $x743)))
 (let (($x383 (= cmp.i311.i_16_185 (_ bv0 1))))
 (let (($x384 (= cmp.i311.i_16_185 (_ bv1 1))))
 (let (($x385 (ite (bvult i25.i309.i_16_183 (_ bv4294967296 64)) $x384 $x383)))
 (let (($x380 (= i25.i309.i_16_183 (bvxor i24.i308.i_16_182 i23.i306.i_16_181))))
 (let (($x377 (= storemerge_16_174 i24.i308.i_16_182)))
 (let (($x375 (= dst_reg_16_152 i23.i306.i_16_181)))
 (let (($x373 (= and6.i.i302.i_16_180 (bvand i20.i300.i_16_176 (_ bv4294967295 64)))))
 (let (($x370 (= and.i.i301.i_16_178 (bvand i18.i298.i_16_175 (_ bv4294967295 64)))))
 (let (($x367 (= dst_reg_16_149 i20.i300.i_16_176)))
 (let (($x365 (= dst_reg_16_148 i18.i298.i_16_175)))
 (let (($x362 (= storemerge_16_174 or.i_16_120)))
 (let (($x363 (=> if.then207.i_if.then308.i_16_173 $x362)))
 (let (($x360 (= storemerge_16_174 cond35.i183.i_16_143)))
 (let (($x361 (=> if.end212.i_if.then308.i_16_172 $x360)))
 (let (($x840 (and $x361 $x363 $x365 $x367 $x370 $x373 $x375 $x377 $x380 $x385 $x744 $x746 $x747 $x748)))
 (let (($x729 (or $x728 $x727)))
 (let (($x841 (=> $x729 $x840)))
 (let (($x290 (= cmp31.i182.i_16_142 (_ bv1 1))))
 (let (($x295 (ite $x290 (= cond35.i183.i_16_143 or230.i_16_128) (= cond35.i183.i_16_143 or8.i172.i_16_137))))
 (let (($x289 (= cmp31.i182.i_16_142 (_ bv0 1))))
 (let (($x291 (ite (bvult or230.i_16_128 or8.i172.i_16_137) $x290 $x289)))
 (let (($x281 (= cmp19.i177.i_16_140 (_ bv1 1))))
 (let (($x286 (ite $x281 (= cond23.i178.i_16_141 cond225.i_16_127) (= cond23.i178.i_16_141 or.i_16_120))))
 (let (($x280 (= cmp19.i177.i_16_140 (_ bv0 1))))
 (let (($x282 (ite (bvugt cond225.i_16_127 or.i_16_120) $x281 $x280)))
 (let (($x272 (= cmp10.i173.i_16_138 (_ bv1 1))))
 (let (($x277 (ite $x272 (= cond14.i174.i_16_139 .or230.i_16_134) (= cond14.i174.i_16_139 or8.i172.i_16_137))))
 (let (($x271 (= cmp10.i173.i_16_138 (_ bv0 1))))
 (let (($x273 (ite (bvult .or230.i_16_134 or8.i172.i_16_137) $x272 $x271)))
 (let ((?x243 (bvor or3.i154.i_16_122 or.i_16_120)))
 (let (($x268 (= or8.i172.i_16_137 ?x243)))
 (let (($x261 (= cmp.i167.i_16_135 (_ bv1 1))))
 (let (($x266 (ite $x261 (= cond.i168.i_16_136 .cond225.i_16_132) (= cond.i168.i_16_136 or.i_16_120))))
 (let (($x260 (= cmp.i167.i_16_135 (_ bv0 1))))
 (let (($x262 (ite (bvsgt .cond225.i_16_132 or.i_16_120) $x261 $x260)))
 (let (($x248 (= cmp233.i_16_130 (_ bv1 1))))
 (let (($x257 (ite $x248 (= .or230.i_16_134 (_ bv9223372036854775807 64)) (= .or230.i_16_134 or230.i_16_128))))
 (let (($x253 (ite $x248 (= .cond225.i_16_132 (_ bv9223372036854775808 64)) (= .cond225.i_16_132 cond225.i_16_127))))
 (let (($x247 (= cmp233.i_16_130 (_ bv0 1))))
 (let (($x249 (ite (bvslt i27.i.i_16_82 (_ bv0 64)) $x248 $x247)))
 (let (($x244 (= or230.i_16_128 ?x243)))
 (let (($x236 (= cmp220.i_16_126 (_ bv1 1))))
 (let (($x241 (ite $x236 (= cond225.i_16_127 i27.i.i_16_82) (= cond225.i_16_127 src_reg1.sroa.17.0_16_95))))
 (let (($x235 (= cmp220.i_16_126 (_ bv0 1))))
 (let (($x237 (ite (bvugt i27.i.i_16_82 src_reg1.sroa.17.0_16_95) $x236 $x235)))
 (let (($x232 (= and.i156.i_16_125 (bvand or3.i154.i_16_122 neg.i155.i_16_124))))
 (let (($x229 (= neg.i155.i_16_124 (bvxor or.i_16_120 (_ bv18446744073709551615 64)))))
 (let (($x226 (= or3.i154.i_16_122 (bvor and6.i.i.i_16_39 and6.i.i6.i_16_86))))
 (let (($x838 (and $x226 $x229 $x232 $x237 $x241 $x244 $x249 $x253 $x257 $x262 $x266 $x268 $x273 $x277 $x282 $x286 $x291 $x295)))
 (let (($x839 (=> $x728 $x838)))
 (let (($x837 (=> $x724 (and (= or.i_16_120 (bvor and.i.i.i_16_37 and.i.i5.i_16_84))))))
 (let (($x730 (and $x384 $x729)))
 (let (($x754 (= if.then.i314.i_coerce_reg_to_size.exit320.i_16_220 $x730)))
 (let (($x731 (and $x383 $x729)))
 (let (($x753 (= if.else.i315.i_coerce_reg_to_size.exit320.i_16_219 $x731)))
 (let (($x447 (= dst_reg_16_157 dst_reg_16_204)))
 (let (($x446 (= dst_reg_16_156 dst_reg_16_203)))
 (let (($x445 (= dst_reg_16_155 dst_reg_16_202)))
 (let (($x444 (= dst_reg_16_154 dst_reg_16_201)))
 (let (($x443 (= storemerge_16_174 dst_reg_16_200)))
 (let (($x448 (= (_ bv0 64) dst_reg_16_199)))
 (let (($x441 (= dst_reg_16_151 dst_reg_16_198)))
 (let (($x440 (= dst_reg_16_150 dst_reg_16_197)))
 (let (($x439 (= and6.i.i302.i_16_180 dst_reg_16_196)))
 (let (($x438 (= and.i.i301.i_16_178 dst_reg_16_195)))
 (let (($x437 (= dst_reg_16_147 dst_reg_16_194)))
 (let (($x436 (= dst_reg_16_146 dst_reg_16_193)))
 (let (($x435 (= dst_reg_16_145 dst_reg_16_192)))
 (let (($x434 (= dst_reg_16_144 dst_reg_16_191)))
 (let (($x433 (= src_reg_16_171 src_reg_16_218)))
 (let (($x432 (= src_reg_16_170 src_reg_16_217)))
 (let (($x431 (= src_reg_16_169 src_reg_16_216)))
 (let (($x430 (= src_reg_16_168 src_reg_16_215)))
 (let (($x429 (= src_reg_16_167 src_reg_16_214)))
 (let (($x428 (= src_reg_16_166 src_reg_16_213)))
 (let (($x427 (= src_reg_16_165 src_reg_16_212)))
 (let (($x426 (= src_reg_16_164 src_reg_16_211)))
 (let (($x425 (= src_reg_16_163 src_reg_16_210)))
 (let (($x424 (= src_reg_16_162 src_reg_16_209)))
 (let (($x423 (= src_reg_16_161 src_reg_16_208)))
 (let (($x422 (= src_reg_16_160 src_reg_16_207)))
 (let (($x421 (= src_reg_16_159 src_reg_16_206)))
 (let (($x420 (= src_reg_16_158 src_reg_16_205)))
 (let (($x751 (and $x420 $x421 $x422 $x423 $x424 $x425 $x426 $x427 $x428 $x429 $x430 $x431 $x432 $x433 $x434 $x435 $x436 $x437 $x438 $x439 $x440 $x441 $x448 $x443 $x444 $x445 $x446 $x447)))
 (let (($x752 (=> $x731 $x751)))
 (let (($x442 (= and6.i312.i_16_187 dst_reg_16_199)))
 (let (($x749 (and $x420 $x421 $x422 $x423 $x424 $x425 $x426 $x427 $x428 $x429 $x430 $x431 $x432 $x433 $x434 $x435 $x436 $x437 $x438 $x439 $x440 $x441 $x442 $x443 $x444 $x445 $x446 $x447)))
 (let (($x750 (=> $x730 $x749)))
 (let (($x463 (= cmp.i.i.i.i_16_226 (_ bv0 1))))
 (let (($x464 (= cmp.i.i.i.i_16_226 (_ bv1 1))))
 (let (($x465 (ite (= xor.i.i.i_16_224 (_ bv0 64)) $x464 $x463)))
 (let (($x460 (= xor.i.i.i_16_224 (bvxor i27.i317.i_16_223 storemerge.i316.i_16_221))))
 (let (($x457 (= dst_reg_16_199 i27.i317.i_16_223)))
 (let (($x454 (= storemerge.i316.i_16_221 and8.i313.i_16_189)))
 (let (($x455 (=> if.then.i314.i_coerce_reg_to_size.exit320.i_16_220 $x454)))
 (let (($x452 (= storemerge.i316.i_16_221 (_ bv4294967295 64))))
 (let (($x453 (=> if.else.i315.i_coerce_reg_to_size.exit320.i_16_219 $x452)))
 (let (($x732 (or $x731 $x730)))
 (let (($x835 (=> $x732 (and $x453 $x455 $x457 $x460 $x465 $x750 $x752 $x753 $x754))))
 (let (($x215 (= cmp24.old.i_16_103 (_ bv1 1))))
 (let (($x216 (ite (bvugt src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97) $x215 $x214)))
 (let (($x833 (=> $x717 (and $x216))))
 (let (($x209 (= cmp18.not.i.not_16_102 (_ bv0 1))))
 (let (($x211 (ite (= src_reg1.sroa.17.0_16_95 storemerge.i20.i_16_97) $x210 $x209)))
 (let (($x831 (=> $x716 (and $x211))))
 (let (($x817 (= src_reg_16_321 src_reg_16_349)))
 (let (($x816 (= src_reg_16_320 src_reg_16_348)))
 (let (($x815 (= src_reg_16_319 src_reg_16_347)))
 (let (($x814 (= src_reg_16_318 src_reg_16_346)))
 (let (($x813 (= src_reg_16_317 src_reg_16_345)))
 (let (($x812 (= src_reg_16_316 src_reg_16_344)))
 (let (($x811 (= src_reg_16_315 src_reg_16_343)))
 (let (($x810 (= src_reg_16_314 src_reg_16_342)))
 (let (($x809 (= src_reg_16_313 src_reg_16_341)))
 (let (($x808 (= src_reg_16_312 src_reg_16_340)))
 (let (($x807 (= src_reg_16_311 src_reg_16_339)))
 (let (($x806 (= src_reg_16_310 src_reg_16_338)))
 (let (($x805 (= src_reg_16_309 src_reg_16_337)))
 (let (($x804 (= src_reg_16_308 src_reg_16_336)))
 (let (($x789 (= dst_reg_16_307 dst_reg_16_335)))
 (let (($x788 (= dst_reg_16_306 dst_reg_16_334)))
 (let (($x787 (= dst_reg_16_305 dst_reg_16_333)))
 (let (($x786 (= dst_reg_16_304 dst_reg_16_332)))
 (let (($x785 (= dst_reg_16_303 dst_reg_16_331)))
 (let (($x784 (= dst_reg_16_302 dst_reg_16_330)))
 (let (($x783 (= dst_reg_16_301 dst_reg_16_329)))
 (let (($x782 (= dst_reg_16_300 dst_reg_16_328)))
 (let (($x781 (= dst_reg_16_299 dst_reg_16_327)))
 (let (($x780 (= dst_reg_16_298 dst_reg_16_326)))
 (let (($x779 (= dst_reg_16_297 dst_reg_16_325)))
 (let (($x778 (= dst_reg_16_296 dst_reg_16_324)))
 (let (($x777 (= dst_reg_16_295 dst_reg_16_323)))
 (let (($x776 (= dst_reg_16_294 dst_reg_16_322)))
 (let (($x714 (= dst_reg_16_63 dst_reg_16_307)))
 (let (($x713 (= dst_reg_16_62 dst_reg_16_306)))
 (let (($x712 (= dst_reg_16_61 dst_reg_16_305)))
 (let (($x711 (= (_ bv0 32) dst_reg_16_304)))
 (let (($x710 (= (_ bv18446744073709551615 64) dst_reg_16_303)))
 (let (($x709 (= (_ bv0 64) dst_reg_16_302)))
 (let (($x708 (= (_ bv9223372036854775807 64) dst_reg_16_301)))
 (let (($x707 (= (_ bv9223372036854775808 64) dst_reg_16_300)))
 (let (($x706 (= (_ bv18446744073709551615 64) dst_reg_16_299)))
 (let (($x705 (= (_ bv0 64) dst_reg_16_298)))
 (let (($x704 (= dst_reg_16_53 dst_reg_16_297)))
 (let (($x703 (= dst_reg_16_52 dst_reg_16_296)))
 (let (($x702 (= dst_reg_16_51 dst_reg_16_295)))
 (let (($x701 (= (_ bv1 32) dst_reg_16_294)))
 (let (($x700 (= src_reg_16_77 src_reg_16_321)))
 (let (($x699 (= src_reg_16_76 src_reg_16_320)))
 (let (($x698 (= src_reg_16_75 src_reg_16_319)))
 (let (($x697 (= src_reg_16_74 src_reg_16_318)))
 (let (($x696 (= src_reg_16_73 src_reg_16_317)))
 (let (($x695 (= src_reg_16_72 src_reg_16_316)))
 (let (($x694 (= src_reg_16_71 src_reg_16_315)))
 (let (($x693 (= src_reg_16_70 src_reg_16_314)))
 (let (($x692 (= src_reg_16_69 src_reg_16_313)))
 (let (($x691 (= src_reg_16_68 src_reg_16_312)))
 (let (($x690 (= src_reg_16_67 src_reg_16_311)))
 (let (($x689 (= src_reg_16_66 src_reg_16_310)))
 (let (($x688 (= src_reg_16_65 src_reg_16_309)))
 (let (($x687 (= src_reg_16_64 src_reg_16_308)))
 (let (($x759 (and $x687 $x688 $x689 $x690 $x691 $x692 $x693 $x694 $x695 $x696 $x697 $x698 $x699 $x700 $x701 $x702 $x703 $x704 $x705 $x706 $x707 $x708 $x709 $x710 $x711 $x712 $x713 $x714)))
 (let (($x719 (and $x209 $x716)))
 (let (($x720 (and $x215 $x717)))
 (let (($x722 (or $x720 $x719)))
 (let (($x761 (=> $x722 $x759)))
 (let (($x725 (and $x199 $x723)))
 (let (($x760 (=> $x725 $x759)))
 (let (($x686 (= dst_reg_16_204 dst_reg_16_307)))
 (let (($x685 (= dst_reg_16_203 dst_reg_16_306)))
 (let (($x684 (= dst_reg_16_202 dst_reg_16_305)))
 (let (($x683 (= dst_reg_16_201 dst_reg_16_304)))
 (let (($x682 (= storemerge.i316.i_16_221 dst_reg_16_303)))
 (let (($x681 (= dst_reg_16_199 dst_reg_16_302)))
 (let (($x680 (= storemerge.i316.i_16_221 dst_reg_16_301)))
 (let (($x679 (= i27.i317.i_16_223 dst_reg_16_300)))
 (let (($x678 (= and.i1.i.i_16_290 dst_reg_16_299)))
 (let (($x677 (= and4.i.i.i_16_293 dst_reg_16_298)))
 (let (($x676 (= dst_reg_16_194 dst_reg_16_297)))
 (let (($x675 (= dst_reg_16_193 dst_reg_16_296)))
 (let (($x674 (= dst_reg_16_192 dst_reg_16_295)))
 (let (($x673 (= dst_reg_16_191 dst_reg_16_294)))
 (let (($x672 (= src_reg_16_218 src_reg_16_321)))
 (let (($x671 (= src_reg_16_217 src_reg_16_320)))
 (let (($x670 (= src_reg_16_216 src_reg_16_319)))
 (let (($x669 (= src_reg_16_215 src_reg_16_318)))
 (let (($x668 (= src_reg_16_214 src_reg_16_317)))
 (let (($x667 (= src_reg_16_213 src_reg_16_316)))
 (let (($x666 (= src_reg_16_212 src_reg_16_315)))
 (let (($x665 (= src_reg_16_211 src_reg_16_314)))
 (let (($x664 (= src_reg_16_210 src_reg_16_313)))
 (let (($x663 (= src_reg_16_209 src_reg_16_312)))
 (let (($x662 (= src_reg_16_208 src_reg_16_311)))
 (let (($x661 (= src_reg_16_207 src_reg_16_310)))
 (let (($x660 (= src_reg_16_206 src_reg_16_309)))
 (let (($x659 (= src_reg_16_205 src_reg_16_308)))
 (let (($x757 (and $x659 $x660 $x661 $x662 $x663 $x664 $x665 $x666 $x667 $x668 $x669 $x670 $x671 $x672 $x673 $x674 $x675 $x676 $x677 $x678 $x679 $x680 $x681 $x682 $x683 $x684 $x685 $x686)))
 (let (($x733 (and $x464 $x732)))
 (let (($x734 (and $x463 $x732)))
 (let (($x735 (or $x734 $x733)))
 (let (($x758 (=> $x735 $x757)))
 (let (($x828 (and $x758 $x760 $x761 $x776 $x777 $x778 $x779 $x780 $x781 $x782 $x783 $x784 $x785 $x786 $x787 $x788 $x789 $x804 $x805 $x806 $x807 $x808 $x809 $x810 $x811 $x812 $x813 $x814 $x815 $x816 $x817)))
 (let (($x736 (or $x735 (or $x725 $x722))))
 (let (($x829 (=> $x736 $x828)))
 (let (($x742 (= if.then.i.i_coerce_reg_to_size.exit.i_16_79 $x94)))
 (let (($x741 (= if.else.i.i_coerce_reg_to_size.exit.i_16_78 $x92)))
 (let (($x158 (= dst_reg_16_13 dst_reg_16_63)))
 (let (($x157 (= dst_reg_16_12 dst_reg_16_62)))
 (let (($x156 (= dst_reg_16_11 dst_reg_16_61)))
 (let (($x155 (= dst_reg_16_10 dst_reg_16_60)))
 (let (($x154 (= dst_reg_16_9 dst_reg_16_59)))
 (let (($x159 (= (_ bv0 64) dst_reg_16_58)))
 (let (($x152 (= dst_reg_16_7 dst_reg_16_57)))
 (let (($x151 (= dst_reg_16_6 dst_reg_16_56)))
 (let (($x150 (= and6.i.i.i_16_39 dst_reg_16_55)))
 (let (($x149 (= and.i.i.i_16_37 dst_reg_16_54)))
 (let (($x148 (= dst_reg_16_3 dst_reg_16_53)))
 (let (($x147 (= dst_reg_16_2 dst_reg_16_52)))
 (let (($x146 (= dst_reg_16_1 dst_reg_16_51)))
 (let (($x145 (= (_ bv1 32) dst_reg_16_50)))
 (let (($x144 (= src_reg_16_27 src_reg_16_77)))
 (let (($x143 (= src_reg_16_26 src_reg_16_76)))
 (let (($x142 (= src_reg_16_25 src_reg_16_75)))
 (let (($x141 (= src_reg_16_24 src_reg_16_74)))
 (let (($x140 (= src_reg_16_23 src_reg_16_73)))
 (let (($x139 (= src_reg_16_22 src_reg_16_72)))
 (let (($x138 (= src_reg_16_21 src_reg_16_71)))
 (let (($x137 (= src_reg_16_20 src_reg_16_70)))
 (let (($x136 (= src_reg_16_19 src_reg_16_69)))
 (let (($x135 (= src_reg_16_18 src_reg_16_68)))
 (let (($x134 (= src_reg_16_17 src_reg_16_67)))
 (let (($x133 (= src_reg_16_16 src_reg_16_66)))
 (let (($x132 (= src_reg_16_15 src_reg_16_65)))
 (let (($x131 (= (_ bv1 32) src_reg_16_64)))
 (let (($x739 (and $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x151 $x152 $x159 $x154 $x155 $x156 $x157 $x158)))
 (let (($x740 (=> $x92 $x739)))
 (let (($x153 (= and6.i.i_16_46 dst_reg_16_58)))
 (let (($x737 (and $x131 $x132 $x133 $x134 $x135 $x136 $x137 $x138 $x139 $x140 $x141 $x142 $x143 $x144 $x145 $x146 $x147 $x148 $x149 $x150 $x151 $x152 $x153 $x154 $x155 $x156 $x157 $x158)))
 (let (($x738 (=> $x94 $x737)))
 (let (($x206 (ite (= and6.i.i.i_16_39 (_ bv0 64)) $x205 $x204)))
 (let (($x201 (ite (= and6.i.i6.i_16_86 (_ bv0 64)) $x200 $x199)))
 (let (($x181 (= cmp.i15.i_16_89 (_ bv1 1))))
 (let (($x196 (ite $x181 (= storemerge.i20.i_16_97 and8.i17.i_16_93) (= storemerge.i20.i_16_97 (_ bv4294967295 64)))))
 (let (($x192 (ite $x181 (= src_reg1.sroa.17.0_16_95 and6.i16.i_16_91) (= src_reg1.sroa.17.0_16_95 (_ bv0 64)))))
 (let (($x188 (= and8.i17.i_16_93 (bvand src_reg1.sroa.22.0.copyload_16_33 (_ bv4294967295 64)))))
 (let (($x185 (= and6.i16.i_16_91 (bvand src_reg1.sroa.17.0.copyload_16_32 (_ bv4294967295 64)))))
 (let (($x180 (= cmp.i15.i_16_89 (_ bv0 1))))
 (let (($x182 (ite (bvult i25.i13.i_16_87 (_ bv4294967296 64)) $x181 $x180)))
 (let ((?x176 (bvxor src_reg1.sroa.22.0.copyload_16_33 src_reg1.sroa.17.0.copyload_16_32)))
 (let (($x177 (= i25.i13.i_16_87 ?x176)))
 (let (($x174 (= and6.i.i6.i_16_86 (bvand src_reg1.sroa.10.0.copyload_16_31 (_ bv4294967295 64)))))
 (let (($x171 (= and.i.i5.i_16_84 (bvand src_reg1.sroa.3.0.copyload_16_30 (_ bv4294967295 64)))))
 (let (($x168 (= dst_reg_16_58 i27.i.i_16_82)))
 (let (($x165 (= storemerge.i.i_16_80 and8.i.i_16_48)))
 (let (($x166 (=> if.then.i.i_coerce_reg_to_size.exit.i_16_79 $x165)))
 (let (($x163 (= storemerge.i.i_16_80 (_ bv4294967295 64))))
 (let (($x164 (=> if.else.i.i_coerce_reg_to_size.exit.i_16_78 $x163)))
 (let (($x826 (and $x164 $x166 $x168 $x171 $x174 $x177 $x182 $x185 $x188 $x192 $x196 $x201 $x206 $x738 $x740 $x741 $x742)))
 (let (($x827 (=> $x715 $x826)))
 (let (($x101 (= and8.i.i_16_48 (bvand i24.i.i_16_41 (_ bv4294967295 64)))))
 (let (($x98 (= and6.i.i_16_46 (bvand i23.i.i_16_40 (_ bv4294967295 64)))))
 (let (($x825 (=> $x94 (and $x98 $x101))))
 (let (($x95 (ite (bvult i25.i.i_16_42 (_ bv4294967296 64)) $x94 $x92)))
 (let (($x87 (= i25.i.i_16_42 (bvxor i24.i.i_16_41 i23.i.i_16_40))))
 (let (($x84 (= dst_reg_16_9 i24.i.i_16_41)))
 (let (($x82 (= dst_reg_16_8 i23.i.i_16_40)))
 (let (($x80 (= and6.i.i.i_16_39 (bvand i20.i.i_16_35 (_ bv4294967295 64)))))
 (let (($x77 (= and.i.i.i_16_37 (bvand i18.i.i_16_34 (_ bv4294967295 64)))))
 (let (($x73 (= dst_reg_16_5 i20.i.i_16_35)))
 (let (($x71 (= dst_reg_16_4 i18.i.i_16_34)))
 (let (($x69 (= src_reg_16_23 src_reg1.sroa.22.0.copyload_16_33)))
 (let (($x67 (= src_reg_16_22 src_reg1.sroa.17.0.copyload_16_32)))
 (let (($x65 (= src_reg_16_19 src_reg1.sroa.10.0.copyload_16_31)))
 (let (($x63 (= src_reg_16_18 src_reg1.sroa.3.0.copyload_16_30)))
 (let (($x60 (= src_reg_16_27 src_reg_16_27)))
 (let (($x59 (= src_reg_16_26 src_reg_16_26)))
 (let (($x58 (= src_reg_16_25 src_reg_16_25)))
 (let (($x57 (= src_reg_16_24 src_reg_16_24)))
 (let (($x56 (= src_reg_16_23 src_reg_16_23)))
 (let (($x55 (= src_reg_16_22 src_reg_16_22)))
 (let (($x54 (= src_reg_16_21 src_reg_16_21)))
 (let (($x53 (= src_reg_16_20 src_reg_16_20)))
 (let (($x52 (= src_reg_16_19 src_reg_16_19)))
 (let (($x51 (= src_reg_16_18 src_reg_16_18)))
 (let (($x50 (= src_reg_16_17 src_reg_16_17)))
 (let (($x49 (= src_reg_16_16 src_reg_16_16)))
 (let (($x48 (= src_reg_16_15 src_reg_16_15)))
 (let (($x47 (= src_reg_16_14 src_reg_16_14)))
 (let (($x32 (= dst_reg_16_13 dst_reg_16_13)))
 (let (($x31 (= dst_reg_16_12 dst_reg_16_12)))
 (let (($x30 (= dst_reg_16_11 dst_reg_16_11)))
 (let (($x29 (= dst_reg_16_10 dst_reg_16_10)))
 (let (($x28 (= dst_reg_16_9 dst_reg_16_9)))
 (let (($x27 (= dst_reg_16_8 dst_reg_16_8)))
 (let (($x26 (= dst_reg_16_7 dst_reg_16_7)))
 (let (($x25 (= dst_reg_16_6 dst_reg_16_6)))
 (let (($x24 (= dst_reg_16_5 dst_reg_16_5)))
 (let (($x23 (= dst_reg_16_4 dst_reg_16_4)))
 (let (($x22 (= dst_reg_16_3 dst_reg_16_3)))
 (let (($x21 (= dst_reg_16_2 dst_reg_16_2)))
 (let (($x20 (= dst_reg_16_1 dst_reg_16_1)))
 (let (($x19 (= dst_reg_16_0 dst_reg_16_0)))
 (let (($x391 (= and8.i313.i_16_189 (bvand i24.i308.i_16_182 (_ bv4294967295 64)))))
 (let (($x388 (= and6.i312.i_16_187 (bvand i23.i306.i_16_181 (_ bv4294967295 64)))))
 (let (($x823 (=> $x730 (and $x388 $x391))))
 (let (($x586 (= phi.bo_16_272 (bvand add.i.i.i335.i_16_270 (_ bv255 32)))))
 (let (($x582 (= add.i.i.i335.i_16_270 (bvadd num.4.i.i.i.i.i_16_266 i.i.i.i.i.i.neg_16_269))))
 (let (($x579 (= i.i.i.i.i.i.neg_16_269 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_16_268))))
 (let (($x576 (= word.addr.4.lobit.i.i.i.i.i.neg_16_268 (bvlshr word.addr.4.i.i.i.i.i_16_265 (_ bv63 64)))))
 (let (($x555 (= tobool20.not.i.i.i.i.i_16_260 (_ bv1 1))))
 (let (($x572 (ite $x555 (= num.4.i.i.i.i.i_16_266 sub22.i.i.i.i.i_16_262) (= num.4.i.i.i.i.i_16_266 num.3.i.i.i.i.i_16_258))))
 (let (($x568 (ite $x555 (= word.addr.4.i.i.i.i.i_16_265 shl23.i.i.i.i.i_16_264) (= word.addr.4.i.i.i.i.i_16_265 word.addr.3.i.i.i.i.i_16_257))))
 (let (($x564 (= shl23.i.i.i.i.i_16_264 (bvshl word.addr.3.i.i.i.i.i_16_257 (_ bv2 64)))))
 (let (($x560 (= sub22.i.i.i.i.i_16_262 (bvadd num.3.i.i.i.i.i_16_258 (_ bv254 32)))))
 (let (($x554 (= tobool20.not.i.i.i.i.i_16_260 (_ bv0 1))))
 (let (($x556 (ite (bvult word.addr.3.i.i.i.i.i_16_257 (_ bv4611686018427387904 64)) $x555 $x554)))
 (let (($x533 (= tobool14.not.i.i.i.i.i_16_252 (_ bv1 1))))
 (let (($x550 (ite $x533 (= num.3.i.i.i.i.i_16_258 sub16.i.i.i.i.i_16_254) (= num.3.i.i.i.i.i_16_258 num.2.i.i.i.i.i_16_250))))
 (let (($x546 (ite $x533 (= word.addr.3.i.i.i.i.i_16_257 shl17.i.i.i.i.i_16_256) (= word.addr.3.i.i.i.i.i_16_257 word.addr.2.i.i.i.i.i_16_249))))
 (let (($x542 (= shl17.i.i.i.i.i_16_256 (bvshl word.addr.2.i.i.i.i.i_16_249 (_ bv4 64)))))
 (let (($x538 (= sub16.i.i.i.i.i_16_254 (bvadd num.2.i.i.i.i.i_16_250 (_ bv4294967292 32)))))
 (let (($x532 (= tobool14.not.i.i.i.i.i_16_252 (_ bv0 1))))
 (let (($x534 (ite (bvult word.addr.2.i.i.i.i.i_16_249 (_ bv1152921504606846976 64)) $x533 $x532)))
 (let (($x511 (= tobool8.not.i.i.i.i.i_16_244 (_ bv1 1))))
 (let (($x528 (ite $x511 (= num.2.i.i.i.i.i_16_250 sub10.i.i.i.i.i_16_246) (= num.2.i.i.i.i.i_16_250 num.1.i.i.i.i.i_16_242))))
 (let (($x524 (ite $x511 (= word.addr.2.i.i.i.i.i_16_249 shl11.i.i.i.i.i_16_248) (= word.addr.2.i.i.i.i.i_16_249 word.addr.1.i.i.i.i.i_16_241))))
 (let (($x520 (= shl11.i.i.i.i.i_16_248 (bvshl word.addr.1.i.i.i.i.i_16_241 (_ bv8 64)))))
 (let (($x516 (= sub10.i.i.i.i.i_16_246 (bvadd num.1.i.i.i.i.i_16_242 (_ bv4294967288 32)))))
 (let (($x510 (= tobool8.not.i.i.i.i.i_16_244 (_ bv0 1))))
 (let (($x512 (ite (bvult word.addr.1.i.i.i.i.i_16_241 (_ bv72057594037927936 64)) $x511 $x510)))
 (let (($x489 (= tobool2.not.i.i.i.i.i_16_236 (_ bv1 1))))
 (let (($x506 (ite $x489 (= num.1.i.i.i.i.i_16_242 sub4.i.i.i.i.i_16_238) (= num.1.i.i.i.i.i_16_242 spec.select17.i.i.i.i.i_16_234))))
 (let (($x502 (ite $x489 (= word.addr.1.i.i.i.i.i_16_241 shl5.i.i.i.i.i_16_240) (= word.addr.1.i.i.i.i.i_16_241 spec.select.i.i.i.i.i_16_231))))
 (let (($x498 (= shl5.i.i.i.i.i_16_240 (bvshl spec.select.i.i.i.i.i_16_231 (_ bv16 64)))))
 (let (($x494 (= sub4.i.i.i.i.i_16_238 (bvadd spec.select17.i.i.i.i.i_16_234 (_ bv4294967280 32)))))
 (let (($x488 (= tobool2.not.i.i.i.i.i_16_236 (_ bv0 1))))
 (let (($x490 (ite (bvult spec.select.i.i.i.i.i_16_231 (_ bv281474976710656 64)) $x489 $x488)))
 (let (($x469 (= tobool.not.i.i.i.i.i_16_228 (_ bv1 1))))
 (let (($x484 (ite $x469 (= spec.select17.i.i.i.i.i_16_234 (_ bv31 32)) (= spec.select17.i.i.i.i.i_16_234 (_ bv63 32)))))
 (let (($x478 (ite $x469 (= spec.select.i.i.i.i.i_16_231 shl.i.i.i.i.i_16_230) (= spec.select.i.i.i.i.i_16_231 xor.i.i.i_16_224))))
 (let (($x474 (= shl.i.i.i.i.i_16_230 (bvshl xor.i.i.i_16_224 (_ bv32 64)))))
 (let (($x468 (= tobool.not.i.i.i.i.i_16_228 (_ bv0 1))))
 (let (($x470 (ite (bvult xor.i.i.i_16_224 (_ bv4294967296 64)) $x469 $x468)))
 (let (($x820 (and $x470 $x474 $x478 $x484 $x490 $x494 $x498 $x502 $x506 $x512 $x516 $x520 $x524 $x528 $x534 $x538 $x542 $x546 $x550 $x556 $x560 $x564 $x568 $x572 $x576 $x579 $x582 $x586)))
 (let (($x821 (=> $x734 $x820)))
 (let (($x756 (= coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274 $x733)))
 (let (($x755 (= if.end.i.i.i.i___reg_bound_offset.exit.i_16_273 $x734)))
 (let (($x630 (= and4.i.i.i_16_293 (bvand or.i.i.i_16_289 neg.i.i.i_16_292))))
 (let (($x627 (= neg.i.i.i_16_292 (bvxor and.i1.i.i_16_290 (_ bv18446744073709551615 64)))))
 (let (($x624 (= and.i1.i.i_16_290 (bvand retval.sroa.3.0.i.i.i_16_288 and6.i.i302.i_16_180))))
 (let (($x621 (= or.i.i.i_16_289 (bvor retval.sroa.0.0.i.i.i_16_286 and.i.i301.i_16_178))))
 (let (($x597 (= cmp.i.i.i_16_278 (_ bv1 1))))
 (let (($x618 (ite $x597 (= retval.sroa.3.0.i.i.i_16_288 (_ bv4294967295 64)) (= retval.sroa.3.0.i.i.i_16_288 sub.i.i.i_16_283))))
 (let (($x614 (ite $x597 (= retval.sroa.0.0.i.i.i_16_286 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_16_286 and.i.i336.i_16_284))))
 (let (($x610 (= and.i.i336.i_16_284 (bvand notmask.i.i.i_16_281 i27.i317.i_16_223))))
 (let (($x607 (= sub.i.i.i_16_283 (bvxor notmask.i.i.i_16_281 (_ bv18446744073709551615 64)))))
 (let (($x604 (= notmask.i.i.i_16_281 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_16_279))))
 (let (($x601 (= sh_prom.i.i.i_16_279 ((_ zero_extend 32) retval.0.i.i.i.i_16_275))))
 (let (($x596 (= cmp.i.i.i_16_278 (_ bv0 1))))
 (let (($x598 (ite (bvugt retval.0.i.i.i.i_16_275 (_ bv63 32)) $x597 $x596)))
 (let (($x592 (= retval.0.i.i.i.i_16_275 (_ bv0 32))))
 (let (($x593 (=> coerce_reg_to_size.exit320.i___reg_bound_offset.exit.i_16_274 $x592)))
 (let (($x590 (= retval.0.i.i.i.i_16_275 phi.bo_16_272)))
 (let (($x591 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_16_273 $x590)))
 (let (($x818 (and $x591 $x593 $x598 $x601 $x604 $x607 $x610 $x614 $x618 $x621 $x624 $x627 $x630 $x755 $x756)))
 (let (($x819 (=> $x735 $x818)))
 (and $x819 $x821 $x823 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x73 $x77 $x80 $x82 $x84 $x87 $x95 $x825 $x827 $x829 $x831 $x833 $x835 $x837 $x839 $x841))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32/BPF_OR_32.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_OR_32 BPF_OR_32.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_OR_32 16 BPF_OR_32.smt2

Finished llvm_to_smt_pass
