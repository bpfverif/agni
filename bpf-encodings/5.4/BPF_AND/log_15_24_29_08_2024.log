Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ll

Finished running opt
--------------------------------------
build ForceFunctionEarlyExit pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build
Consolidate compiler generated dependencies of target ForceFunctionEarlyExit
[100%] Built target ForceFunctionEarlyExit
--------------------------------------
running pass force-function-early-exit
--------------------------------------
FUNCTIONS_EARLY_RETVALUE_MAP_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/config.json
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/ForceFunctionEarlyExit/build/libForceFunctionEarlyExit.so --passes="force-function-early-exit" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.ll && /usr/bin/opt --verify /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.ll.ll && mv /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.ll.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.ll
7
func: sanitize_val_alu, retValue: 0
func: can_skip_alu_sanitation, retValue: 1
func: update_alu_sanitation_state, retValue: 0
func: reg_is_pkt_pointer_any, retValue: 0
func: __is_pointer_value, retValue: 0
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @__is_pointer_value(i1 noundef zeroext %allow_ptr_leaks, %struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  br i1 %allow_ptr_leaks, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp ne i32 %i, 1
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i1 [ %cmp, %if.end ], [ false, %entry ]
  ret i1 %retval.0
}

retInst (old):   ret i1 %retval.0
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @reg_is_pkt_pointer_any(%struct.bpf_reg_state* nocapture noundef readonly %reg) unnamed_addr #7 {
entry:
  %call = call fastcc zeroext i1 @reg_is_pkt_pointer(%struct.bpf_reg_state* noundef %reg) #22
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %reg, i64 0, i32 0
  %i = load i32, i32* %type, align 8
  %cmp = icmp eq i32 %i, 9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i2 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i2
}

retInst (old):   ret i1 %i2
retTypeIntBitWidth: 1
i32zeroi1 false
newEntryBB
newentry:
  ret i1 false

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* nocapture noundef %aux, i32 noundef %alu_state, i32 noundef %alu_limit) unnamed_addr #10 {
entry:
  %alu_state1 = getelementptr inbounds %struct.bpf_insn_aux_data, %struct.bpf_insn_aux_data* %aux, i64 0, i32 5
  %i = load i8, i8* %alu_state1, align 2
  %tobool.not = icmp eq i8 %i, 0
  br i1 %tobool.not, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %conv = zext i8 %i to i32
  %cmp.not = icmp eq i32 %conv, %alu_state
  br i1 %cmp.not, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %alu_limit5 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  %i7 = load i32, i32* %alu_limit5, align 8
  %cmp6.not = icmp eq i32 %i7, %alu_limit
  br i1 %cmp6.not, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %conv8 = trunc i32 %alu_state to i8
  store i8 %conv8, i8* %alu_state1, align 2
  %alu_limit10 = bitcast %struct.bpf_insn_aux_data* %aux to i32*
  store i32 %alu_limit, i32* %alu_limit10, align 8
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ -13, %lor.lhs.false ], [ -13, %land.lhs.true ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid readonly sspstrong willreturn
define internal fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #7 {
entry:
  %allow_ptr_leaks = getelementptr inbounds %struct.bpf_verifier_env, %struct.bpf_verifier_env* %env, i64 0, i32 14
  %i = load i8, i8* %allow_ptr_leaks, align 8
  %i1 = and i8 %i, 1
  %tobool.not = icmp eq i8 %i1, 0
  br i1 %tobool.not, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %entry
  %code = getelementptr inbounds %struct.bpf_insn, %struct.bpf_insn* %insn, i64 0, i32 0
  %i2 = load i8, i8* %code, align 4
  %i3 = and i8 %i2, 8
  %cmp = icmp eq i8 %i3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %i4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %i4
}

retInst (old):   ret i1 %i4
retTypeIntBitWidth: 1
i32zeroi1 true
newEntryBB
newentry:
  ret i1 true

--------------------
--------------------
Changing return statement in function: ; Function Attrs: mustprogress nofree noinline norecurse noredzone nosync nounwind null_pointer_is_valid sspstrong willreturn
define internal fastcc i32 @sanitize_val_alu(%struct.bpf_verifier_env* nocapture noundef readonly %env, %struct.bpf_insn* nocapture noundef readonly %insn) unnamed_addr #10 {
entry:
  %call1 = call fastcc zeroext i1 @can_skip_alu_sanitation(%struct.bpf_verifier_env* noundef %env, %struct.bpf_insn* noundef %insn) #22
  br i1 %call1, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call fastcc %struct.bpf_insn_aux_data* @cur_aux(%struct.bpf_verifier_env* noundef %env) #22
  %call2 = call fastcc i32 @update_alu_sanitation_state(%struct.bpf_insn_aux_data* noundef %call, i32 noundef 8, i32 noundef 0) #22
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %call2, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

retInst (old):   ret i32 %retval.0
retTypeIntBitWidth: 32
i32zeroi32 0
newEntryBB
newentry:
  ret i32 0

--------------------
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.ll
--------------------------------------
Running force_function_early_exit_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/force_functions_early_exit.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ll /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND BPF_AND.O1.ffee.ll

Finished force_function_early_exit_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.ll

Finished running opt
--------------------------------------
build RemoveFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build
Consolidate compiler generated dependencies of target RemoveFunctionCalls
[100%] Built target RemoveFunctionCalls
--------------------------------------
running pass remove-func-calls
--------------------------------------
FUNCTIONS_TO_REMOVE_TXT: /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/config.json
FUNCTION_TO_START_REMOVE: adjust_scalar_min_max_vals_wrapper_BPF_AND
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/RemoveFunctionCalls/build/libRemoveFunctionCalls.so --passes="remove-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.ll
Number of functions:11
verbose
verbose_invalid_scalar
verbose_linfo
print_verifier_state
print_liveness
print_verification_stats
bpf_verifier_log_write
bpf_vlog_reset
bpf_log
bpf_verifier_vlog
print_bpf_insn
[initfunctionsToRemoveCallsInstsFrom] functionToStartRemovingCallInstsFrom: adjust_scalar_min_max_vals_wrapper_BPF_AND
[initfunctionsToRemoveCallsInstsFrom] callGraphNode: 0xeb8d10
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_AND'<<0xeb8d10>>  #uses=1
  CS<0xd3ef30> calls function 'adjust_scalar_min_max_vals'

--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.ll
--------------------------------------
Running remove_functions_calls_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/remove_func_calls.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_AND /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND BPF_AND.O1.ffee.O1.rfc.ll

Finished remove_functions_calls_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_AND
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_AND'<<0x272b390>>  #uses=1
  CS<0x258df80> calls function 'adjust_scalar_min_max_vals'

---------------------------
Functions to Inline:
tnum_cast
coerce_reg_to_size
tnum_is_const
__mark_reg_unbounded
__mark_reg_unknown
signed_add_overflows
tnum_add
signed_sub_overflows
tnum_sub
hma
tnum_mul
__update_reg_bounds
tnum_const
__mark_reg_known
tnum_and
tnum_or
mark_reg_unknown___
tnum_lshift
tnum_rshift
tnum_arshift
__reg_deduce_bounds
generic___fls___
fls64___
tnum_range
tnum_intersect
__reg_bound_offset
adjust_scalar_min_max_vals
adjust_scalar_min_max_vals_wrapper_BPF_AND
---------------------------
********
tnum_cast
********
********
coerce_reg_to_size
********
  %call = call { i64, i64 } @tnum_cast(i64 %i18, i64 %i20, i8 noundef zeroext %conv) #21
1
********
tnum_is_const
********
********
__mark_reg_unbounded
********
********
__mark_reg_unknown
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
signed_add_overflows
********
********
tnum_add
********
********
signed_sub_overflows
********
********
tnum_sub
********
********
hma
********
  %call = call { i64, i64 } @tnum_add(i64 %acc.sroa.0.09, i64 %acc.sroa.4.010, i64 0, i64 %value.addr.08) #21
1
********
tnum_mul
********
  %call = call fastcc { i64, i64 } @hma(i64 %mul, i64 0, i64 noundef %a.coerce1, i64 noundef %or) #21
1
  %call8 = call fastcc { i64, i64 } @hma(i64 %i, i64 %i5, i64 noundef %b.coerce1, i64 noundef %a.coerce0) #21
1
********
__update_reg_bounds
********
********
tnum_const
********
********
__mark_reg_known
********
  %call = call { i64, i64 } @tnum_const(i64 noundef %imm) #21
1
********
tnum_and
********
********
tnum_or
********
********
mark_reg_unknown___
********
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false)
0
********
tnum_lshift
********
********
tnum_rshift
********
********
tnum_arshift
********
********
__reg_deduce_bounds
********
********
generic___fls___
********
********
fls64___
********
  %call = call fastcc i32 @generic___fls___(i64 noundef %x) #21
1
********
tnum_range
********
  %call = call fastcc i32 @fls64___(i64 noundef %xor) #21
1
********
tnum_intersect
********
********
__reg_bound_offset
********
  %call = call { i64, i64 } @tnum_range(i64 noundef %i, i64 noundef %i5) #21
1
  %call2 = call { i64, i64 } @tnum_intersect(i64 %i9, i64 %i11, i64 %i6, i64 %i7) #21
1
********
adjust_scalar_min_max_vals
********
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #21
1
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %src_reg, i32 noundef 4) #21
1
  %call11 = call fastcc zeroext i1 @tnum_is_const(i64 %i212) #21
1
  %call13 = call fastcc zeroext i1 @tnum_is_const(i64 %i215) #21
1
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #21
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @__mark_reg_unknown(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call50 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i219, i64 noundef %i206) #22
1
  %call54 = call fastcc zeroext i1 @signed_add_overflows(i64 noundef %i220, i64 noundef %i207) #22
1
  %call84 = call { i64, i64 } @tnum_add(i64 %i224, i64 %i215, i64 %i226, i64 %i212) #22
1
  %call92 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i230, i64 noundef %i207) #22
1
  %call96 = call fastcc zeroext i1 @signed_sub_overflows(i64 noundef %i231, i64 noundef %i206) #22
1
  %call122 = call { i64, i64 } @tnum_sub(i64 %i234, i64 %i215, i64 %i236, i64 %i212) #22
1
  %call128 = call { i64, i64 } @tnum_mul(i64 %i239, i64 %i215, i64 %i240, i64 %i212) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_unbounded(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %and170) #22
1
  %call176 = call { i64, i64 } @tnum_and(i64 %i247, i64 %i215, i64 %i248, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__mark_reg_known(%struct.bpf_reg_state* noundef %dst_reg, i64 noundef %or) #22
1
  %call217 = call { i64, i64 } @tnum_or(i64 %i254, i64 %i215, i64 %i255, i64 %i212) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call271 = call { i64, i64 } @tnum_lshift(i64 %i263, i64 %i215, i8 noundef zeroext %conv270) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call283 = call { i64, i64 } @tnum_rshift(i64 %i266, i64 %i215, i8 noundef zeroext %conv282) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  %call300 = call { i64, i64 } @tnum_arshift(i64 %i273, i64 %i215, i8 noundef zeroext %conv299) #22
1
  call fastcc void @__update_reg_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @mark_reg_unknown___(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
0
  call fastcc void @coerce_reg_to_size(%struct.bpf_reg_state* noundef %dst_reg, i32 noundef 4) #22
1
  call fastcc void @__reg_deduce_bounds(%struct.bpf_reg_state* noundef %dst_reg) #22
1
  call fastcc void @__reg_bound_offset(%struct.bpf_reg_state* noundef %dst_reg) #22
1
********
adjust_scalar_min_max_vals_wrapper_BPF_AND
********
  call fastcc void @adjust_scalar_min_max_vals(%struct.bpf_insn* noundef nonnull %tmpcast, %struct.bpf_reg_state* noundef %dst_reg, %struct.bpf_reg_state* noundef byval(%struct.bpf_reg_state) align 8 %src_reg) #21
1
  call void @llvm.lifetime.start.p0i8(i64 104, i8* %0)
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 104, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i29.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i186.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i220.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i255.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i292.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #22
0
  call void @llvm.lifetime.end.p0i8(i64 104, i8* %3)
0
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_AND /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND BPF_AND.O1.ffee.O1.rfc.O1.ivf.ll

Finished inline_verifier_func_pass
Running opt -O1
/usr/bin/opt -O1 --strip-debug --instnamer --stats -S  /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
build PromoteMemcpy pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build
Consolidate compiler generated dependencies of target PromoteMemcpy
[100%] Built target PromoteMemcpy
FUNCTION_TO_PROMOTE_MEMCPY: adjust_scalar_min_max_vals_wrapper_BPF_AND
--------------------------------------
running pass promote-memcpy
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/PromoteMemcpy/build/libPromoteMemcpy.so --passes="promote-memcpy" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

############## Start Promote Memcpy ###################
Visiting: 
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
DstAlign: 1
SrcAlign: 8
@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8
  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5

Src:	@tnum_unknown = dso_local local_unnamed_addr constant %struct.tnum { i64 0, i64 -1 }, align 8	%struct.tnum*
Dst:	  %var_off.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5	%struct.tnum*
New load-store:
	  %tnum_unknown.pmcpy = load %struct.tnum, %struct.tnum* @tnum_unknown, align 8
	  store %struct.tnum %tnum_unknown.pmcpy, %struct.tnum* %var_off.i.i, align 8
Removing dead memcpys in adjust_scalar_min_max_vals_wrapper_BPF_AND:

	  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef align 8 dereferenceable(16) %i.i26.i, i8* noundef align 8 dereferenceable(16) bitcast (%struct.tnum* @tnum_unknown to i8*), i64 16, i1 false) #21
		deleting:	  %i.i26.i = bitcast %struct.tnum* %var_off.i.i to i8*
############## End Promote Memcpy ###################
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll
--------------------------------------
Running promote_memcpy_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/promote_memcpy.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.ll adjust_scalar_min_max_vals_wrapper_BPF_AND /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll

Finished promote_memcpy_pass
Running opt -O0
/usr/bin/opt -S --instnamer --sroa --adce --bdce --dce --globaldce --deadargelim --unreachableblockelim --lowerswitch --function-attrs --argpromotion --instcombine /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll

Finished running opt
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
build LowerFunnelShifts pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build
Consolidate compiler generated dependencies of target LowerFunnelShifts
[100%] Built target LowerFunnelShifts
FUNCTION_TO_LOWER_FUNNEL_SHIFTS: adjust_scalar_min_max_vals_wrapper_BPF_AND
--------------------------------------
running pass lower-funnel-shifts
--------------------------------------
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LowerFunnelShifts/build/libLowerFunnelShifts.so --passes="lower-funnel-shifts" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
[substituteIntrinsicCalls] lowered fshl in function: is_branch_taken
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max
[substituteIntrinsicCalls] lowered fshl in function: reg_set_min_max_inv
[substituteIntrinsicCalls] lowered fshl in function: convert_ctx_accesses
[substituteIntrinsicCalls] lowered fshl in function: check_mem_access
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll
--------------------------------------
Running lower_funnel_shifts_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/lower_funnel_shifts.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.ll adjust_scalar_min_max_vals_wrapper_BPF_AND /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll

Finished lower_funnel_shifts_pass
outfile_final /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
build InlineFunctionCalls pass
--------------------------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build && export CC=/usr/bin/clang && export CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build
Consolidate compiler generated dependencies of target InlineFunctionCalls
[100%] Built target InlineFunctionCalls
--------------------------------------
running pass inline-func-calls
--------------------------------------
FUNCTION_TO_INLINE: adjust_scalar_min_max_vals_wrapper_BPF_AND
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/InlineFunctionCalls/build/libInlineFunctionCalls.so --passes="inline-func-calls" /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll -S -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
Call graph node for function: 'adjust_scalar_min_max_vals_wrapper_BPF_AND'<<0x12a15b0>>  #uses=1

---------------------------
Functions to Inline:
adjust_scalar_min_max_vals_wrapper_BPF_AND
---------------------------
********
adjust_scalar_min_max_vals_wrapper_BPF_AND
********
--------------------------------------
done. output file: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll
--------------------------------------
Running inline_verifier_func_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/inline_verifier_func.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ll adjust_scalar_min_max_vals_wrapper_BPF_AND /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll

Finished inline_verifier_func_pass
Running llvm-extract
/usr/bin/llvm-extract --func=adjust_scalar_min_max_vals_wrapper_BPF_AND -S /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ll -o /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll

Finished running llvm-extract
------------------
compile llvm-to-smt pass
------------------
mkdir -p /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && cd /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build && CC=/usr/bin/clang && CXX=/usr/bin/clang++ && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DLT_LLVM_INSTALL_DIR=/usr /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT && make
-- Configuring done
-- Generating done
-- Build files have been written to: /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build
Consolidate compiler generated dependencies of target LLVMToSMT
[100%] Built target LLVMToSMT
-------------------------------------------
cd back
-------------------------------------------
-------------------------------------------
running llvm pass on file 
-------------------------------------------
SMT2LIB_OUTPUT_FILEPATH: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.smt2
FUNCTION_UNDER_EVAL: adjust_scalar_min_max_vals_wrapper_BPF_AND
GLOBAL_BITVECTOR_SUFFIX: 5
/usr/bin/opt -load-pass-plugin /home/pchaigno/agni/llvm-to-smt/llvm-passes/LLVMToSMT/build/libLLVMToSMT.so --passes="print<llvm-to-smt>" --disable-output /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Setup input BVTrees 
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[buildSMT] currentBB:entry
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_0
[lookInsideStruct] singleValueType:dst_reg_5_0
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_1
[lookInsideStruct] singleValueType:dst_reg_5_1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_2
[lookInsideStruct] singleValueType:dst_reg_5_2
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_3
[lookInsideStruct] singleValueType:dst_reg_5_3
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_4
[lookInsideStruct] singleValueType:dst_reg_5_4
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_5
[lookInsideStruct] singleValueType:dst_reg_5_5
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_6
[lookInsideStruct] singleValueType:dst_reg_5_6
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_7
[lookInsideStruct] singleValueType:dst_reg_5_7
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_8
[lookInsideStruct] singleValueType:dst_reg_5_8
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_9
[lookInsideStruct] singleValueType:dst_reg_5_9
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_10
[lookInsideStruct] singleValueType:dst_reg_5_10
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_11
[lookInsideStruct] singleValueType:dst_reg_5_11
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_12
[lookInsideStruct] singleValueType:dst_reg_5_12
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_13
[lookInsideStruct] singleValueType:dst_reg_5_13
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_14
[lookInsideStruct] singleValueType:src_reg_5_14
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_15
[lookInsideStruct] singleValueType:src_reg_5_15
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_16
[lookInsideStruct] singleValueType:src_reg_5_16
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_17
[lookInsideStruct] singleValueType:src_reg_5_17
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_18
[lookInsideStruct] singleValueType:src_reg_5_18
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_19
[lookInsideStruct] singleValueType:src_reg_5_19
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_20
[lookInsideStruct] singleValueType:src_reg_5_20
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_21
[lookInsideStruct] singleValueType:src_reg_5_21
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_22
[lookInsideStruct] singleValueType:src_reg_5_22
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_23
[lookInsideStruct] singleValueType:src_reg_5_23
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_24
[lookInsideStruct] singleValueType:src_reg_5_24
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_25
[lookInsideStruct] singleValueType:src_reg_5_25
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_26
[lookInsideStruct] singleValueType:src_reg_5_26
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_27
[lookInsideStruct] singleValueType:src_reg_5_27
[setupBVTreeForArg] returning BVTree: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #1 populateBBAssertionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] definingMemoryAccess: 0 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_0 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 0
[handleGEPInst] GEPMap: 
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  store i32 1, i32* %type1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] definingMemoryAccess: 1 = MemoryDef(liveOnEntry)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %src_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: src_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ src_reg_5_14 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.3.0.copyload_5_30
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_5_30
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleLoadInst] (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
[printBBAssertionsMap] 
BasicBlock: entry, Size:29
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)

-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.10.0.copyload_5_31
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_5_31
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleLoadInst] (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
[printBBAssertionsMap] 
BasicBlock: entry, Size:30
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)

-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.13.0.copyload_5_32
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_5_32
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleLoadInst] (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
[printBBAssertionsMap] 
BasicBlock: entry, Size:31
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)

-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.15.0.copyload_5_33
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_5_33
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleLoadInst] (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
[printBBAssertionsMap] 
BasicBlock: entry, Size:32
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)

-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.17.0.copyload_5_34
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_5_34
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleLoadInst] (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
[printBBAssertionsMap] 
BasicBlock: entry, Size:33
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)

-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %src_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[handleLoadInst] pointerValue:   %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 1 = MemoryDef(liveOnEntry)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg1.sroa.22.0.copyload_5_35
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_5_35
[handleLoadInst] oldValueBVTreeMap:
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 

[handleLoadInst] GEPMapValue: src_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleLoadInst] (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
[printBBAssertionsMap] 
BasicBlock: entry, Size:34
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)

-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_5_31
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i_5_37
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i_5_37
[handleICmpInst] (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
[printBBAssertionsMap] 
BasicBlock: entry, Size:35
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))

-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i215.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i215.i_5_38
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i215.i_5_38
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleLoadInst] (= dst_reg_5_5 i215.i_5_38)
[printBBAssertionsMap] 
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
land.lhs.true.i
=========================
-------------------
  %tobool.not.i25.i = icmp eq i64 %i215.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_5_38
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %tobool.not.i25.i = icmp eq i64 %i215.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i25.i_5_40
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i25.i_5_40
[handleICmpInst] (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:1
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_5_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_5_33
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.not.i_5_41
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.not.i_5_41
[handleICmpInst] (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:2
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_5_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_5_35
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp18.not.i_5_42
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp18.not.i_5_42
[handleICmpInst] (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:3
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleSelectInst]SelectMap:
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.not.i_5_41
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp18.not.i_5_42
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond197.i_5_44
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond197.i_5_44
[handleSelectInst] z3ExprSelectOp1: cmp16.not.i_5_41
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp18.not.i_5_42
[handleSelectInst] z3ExprRes: or.cond197.i_5_44
[handleSelectInst](ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_5_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_5_33
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.i_5_45
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.i_5_45
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:5
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[handleBinaryOperatorInst] op1Val:   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[handleBinaryOperatorInst] opResVal:   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType]   %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.i_5_45
[getBitVecSingValType]   %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond197.i_5_44
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond198.i_5_46
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond198.i_5_46
[handleBinaryOperatorInst] OR instruction
(= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_5_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_5_35
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.i_5_47
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.i_5_47
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
[printBBAssertionsMap] 
BasicBlock: land.lhs.true.i, Size:7
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleSelectInst]SelectMap:
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond198.i_5_46
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.i_5_47
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond199.i_5_49
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond199.i_5_49
[handleSelectInst] z3ExprSelectOp1: or.cond198.i_5_46
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.i_5_47
[handleSelectInst] z3ExprRes: or.cond199.i_5_49
[handleSelectInst](ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_5_32
[getBitVecSingValType]   %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.15.0.copyload_5_33
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp21.old.i_5_50
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp21.old.i_5_50
[handleICmpInst] (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:1
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.17.0.copyload_5_34
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_5_35
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp24.old.i_5_51
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp24.old.i_5_51
[handleICmpInst] (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
[printBBAssertionsMap] 
BasicBlock: lor.lhs.false20.i, Size:2
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 2 = MemoryDef(1)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleSelectInst]SelectMap:
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp21.old.i_5_50
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp24.old.i_5_51
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond200.i_5_53
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond200.i_5_53
[handleSelectInst] z3ExprSelectOp1: cmp21.old.i_5_50
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp24.old.i_5_51
[handleSelectInst] z3ExprRes: or.cond200.i_5_53
[handleSelectInst](ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 1
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000001
[handleStoreInst] BVToStore: #x00000001
[handleStoreInst] destPointerValue:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreInst] storeMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000001 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 0
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] definingMemoryAccess: 3 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:4
[populateGEPIndices] 
[populateGEPIndices] idx0: 5, idx1: 1
[handleGEPInst] GEPMap: 
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] definingMemoryAccess: 4 = MemoryDef(3)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 11
[handleGEPInst] GEPMap: 
frameno.i.i, dst_reg, [11]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
type1, src_reg, [0]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type, dst_reg, [0]
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handleStoreInst] BVToStore: #x00000000
[handleStoreInst] destPointerValue:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreInst] storeMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] definingMemoryAccess: 5 = MemoryDef(4)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
[handleStoreToGEPPtr] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 11 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_10 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x00000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[handleStoreInst] BVToStore: #x8000000000000000
[handleStoreInst] destPointerValue:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] definingMemoryAccess: 6 = MemoryDef(5)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x8000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[handleStoreInst] BVToStore: #x7fffffffffffffff
[handleStoreInst] destPointerValue:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] definingMemoryAccess: 7 = MemoryDef(6)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x7fffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] definingMemoryAccess: 8 = MemoryDef(7)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[handleStoreInst] BVToStore: #xffffffffffffffff
[handleStoreInst] destPointerValue:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 10 = MemoryDef(9)
[handleStoreInst] definingMemoryAccess: 9 = MemoryDef(8)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #xffffffffffffffff ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end27.i
=========================
-------------------
  %i246.i = phi i1 [ false, %lor.lhs.false20.i ], [ %tobool.not.i25.i, %land.lhs.true.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %i246.i = phi i1 [ false, %lor.lhs.false20.i ], [ %tobool.not.i25.i, %land.lhs.true.i ]
[handlePhiNodeSetupBitVecs] valueI: i1 false
[getBool] returning unique bool w/ prefix: lor.lhs.false20.i_if.end27.i_5_62
[handlePhiNodeSetupBitVecs] phiConditionBoolI: lor.lhs.false20.i_if.end27.i_5_62
[handlePhiNodeSetupBitVecs] valueI:   %tobool.not.i25.i = icmp eq i64 %i215.i, 0
[getBool] returning unique bool w/ prefix: land.lhs.true.i_if.end27.i_5_63
[handlePhiNodeSetupBitVecs] phiConditionBoolI: land.lhs.true.i_if.end27.i_5_63
[handlePhiNodeSetupBitVecs] printPhiMap: 
i246.i : [<, lor.lhs.false20.i>, <tobool.not.i25.i, land.lhs.true.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<land.lhs.true.i, if.end27.i>: land.lhs.true.i_if.end27.i_5_63
<lor.lhs.false20.i, if.end27.i>: lor.lhs.false20.i_if.end27.i_5_62
[getBitVecSingValType]   %i246.i = phi i1 [ false, %lor.lhs.false20.i ], [ %tobool.not.i25.i, %land.lhs.true.i ]
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: i246.i_5_64
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i246.i_5_64
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType] i1 false
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b0
[handlePhiNodeSetupBitVecs] phiConditionBoolI: lor.lhs.false20.i_if.end27.i_5_62
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
[getBitVecSingValType]   %tobool.not.i25.i = icmp eq i64 %i215.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i25.i_5_40
[handlePhiNodeSetupBitVecs] phiConditionBoolI: land.lhs.true.i_if.end27.i_5_63
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))

-------------------
  %i247.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i247.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i247.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i247.i_5_66
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i247.i_5_66
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleLoadInst] (= dst_reg_5_4 i247.i_5_66)
[printBBAssertionsMap] 
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  br i1 %i246.i, label %if.then166.i, label %if.end171.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then166.i
=========================
-------------------
  %and170.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i247.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] opResVal:   %and170.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType]   %i247.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i247.i_5_66
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_5_30
[getBitVecSingValType]   %and170.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and170.i_5_67
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and170.i_5_67
[handleBinaryOperatorInst] AND instruction
(= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
-------------------
  store i64 %and170.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and170.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_5_67
[handleStoreInst] BVToStore: and170.i_5_67
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and170.i_5_67 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  store i64 0, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[handleStoreInst] BVToStore: #x0000000000000000
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] definingMemoryAccess: 11 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ #x0000000000000000 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %smin_value.i111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %and170.i, i64* %smin_value.i111.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and170.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_5_67
[handleStoreInst] BVToStore: and170.i_5_67
[handleStoreInst] destPointerValue:   %smin_value.i111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] definingMemoryAccess: 12 = MemoryDef(11)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and170.i_5_67 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %smax_value.i112.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i112.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %and170.i, i64* %smax_value.i112.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and170.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_5_67
[handleStoreInst] BVToStore: and170.i_5_67
[handleStoreInst] destPointerValue:   %smax_value.i112.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] definingMemoryAccess: 13 = MemoryDef(12)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i112.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and170.i_5_67 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %umin_value.i113.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i113.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %and170.i, i64* %umin_value.i113.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and170.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_5_67
[handleStoreInst] BVToStore: and170.i_5_67
[handleStoreInst] destPointerValue:   %umin_value.i113.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] definingMemoryAccess: 14 = MemoryDef(13)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i113.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and170.i_5_67 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %umax_value.i114.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i114.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %and170.i, i64* %umax_value.i114.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and170.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and170.i_5_67
[handleStoreInst] BVToStore: and170.i_5_67
[handleStoreInst] destPointerValue:   %umax_value.i114.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 16 = MemoryDef(15)
[handleStoreInst] definingMemoryAccess: 15 = MemoryDef(14)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i114.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and170.i_5_67 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end171.i
=========================
-------------------
  %or.i115.i = or i64 %i247.i, %i215.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i247.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] op1Val:   %i215.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] opResVal:   %or.i115.i = or i64 %i247.i, %i215.i
[getBitVecSingValType]   %i247.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i247.i_5_66
[getBitVecSingValType]   %i215.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i215.i_5_38
[getBitVecSingValType]   %or.i115.i = or i64 %i247.i, %i215.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i115.i_5_69
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i115.i_5_69
[handleBinaryOperatorInst] OR instruction
(= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
-------------------
  %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] opResVal:   %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType]   %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.10.0.copyload_5_31
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_5_30
[getBitVecSingValType]   %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or3.i.i_5_70
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or3.i.i_5_70
[handleBinaryOperatorInst] OR instruction
(= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
-------------------
  %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i247.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] op1Val:   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[handleBinaryOperatorInst] opResVal:   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType]   %i247.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i247.i_5_66
[getBitVecSingValType]   %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.3.0.copyload_5_30
[getBitVecSingValType]   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i116.i_5_71
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i116.i_5_71
[handleBinaryOperatorInst] AND instruction
(= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
-------------------
  %and8.i117.i = and i64 %or.i115.i, %or3.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i115.i = or i64 %i247.i, %i215.i
[handleBinaryOperatorInst] op1Val:   %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType]   %or.i115.i = or i64 %i247.i, %i215.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i115.i_5_69
[getBitVecSingValType]   %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or3.i.i_5_70
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and8.i117.i_5_72
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and8.i117.i_5_72
[handleBinaryOperatorInst] AND instruction
(= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
-------------------
  %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[handleBinaryOperatorInst] op1Val:   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i117.i_5_72
[getBitVecSingValType]   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_5_71
[getBitVecSingValType]   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and9.i.i_5_73
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and9.i.i_5_73
[handleBinaryOperatorInst] XOR instruction
(= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
-------------------
  store i64 %and.i116.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_5_71
[handleStoreInst] BVToStore: and.i116.i_5_71
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 17 = MemoryDef(2)
[handleStoreInst] definingMemoryAccess: 2 = MemoryDef(1)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_4 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i116.i_5_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  store i64 %and9.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and9.i.i_5_73
[handleStoreInst] BVToStore: and9.i.i_5_73
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 18 = MemoryDef(17)
[handleStoreInst] definingMemoryAccess: 17 = MemoryDef(2)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_5 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and9.i.i_5_73 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %umin_value179.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value179.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %and.i116.i, i64* %umin_value179.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_5_71
[handleStoreInst] BVToStore: and.i116.i_5_71
[handleStoreInst] destPointerValue:   %umin_value179.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] definingMemoryAccess: 18 = MemoryDef(17)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value179.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_8 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i116.i_5_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %umax_value180.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value180.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  %i251.i = load i64, i64* %umax_value180.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i251.i = load i64, i64* %umax_value180.i, align 8
[handleLoadInst] pointerValue:   %umax_value180.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i251.i = load i64, i64* %umax_value180.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i251.i_5_74
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i251.i_5_74
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleLoadInst] (= dst_reg_5_9 i251.i_5_74)
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:6
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp182.i = icmp ult i64 %i251.i, %src_reg1.sroa.22.0.copyload
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i251.i = load i64, i64* %umax_value180.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i251.i_5_74
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_5_35
[getBitVecSingValType]   %cmp182.i = icmp ult i64 %i251.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp182.i_5_75
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp182.i_5_75
[handleICmpInst] (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:7
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cond184.i = select i1 %cmp182.i, i64 %i251.i, i64 %src_reg1.sroa.22.0.copyload
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 19 = MemoryDef(18)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 

[handleSelectInst]SelectMap:
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp182.i = icmp ult i64 %i251.i, %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp182.i_5_75
[getBitVecSingValType]   %i251.i = load i64, i64* %umax_value180.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i251.i_5_74
[getBitVecSingValType]   %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.22.0.copyload_5_35
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %i251.i, i64 %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond184.i_5_76
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond184.i_5_76
[handleSelectInst] z3ExprSelectOp1: cmp182.i_5_75
[handleSelectInst] z3ExprSelectOp2: i251.i_5_74
[handleSelectInst] z3ExprSelectOp3: src_reg1.sroa.22.0.copyload_5_35
[handleSelectInst] z3ExprRes: cond184.i_5_76
[handleSelectInst](ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
-------------------
  store i64 %cond184.i, i64* %umax_value180.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %i251.i, i64 %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond184.i_5_76
[handleStoreInst] BVToStore: cond184.i_5_76
[handleStoreInst] destPointerValue:   %umax_value180.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] definingMemoryAccess: 19 = MemoryDef(18)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value180.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_9 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond184.i_5_76 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %smin_value186.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value186.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  %i252.i = load i64, i64* %smin_value186.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i252.i = load i64, i64* %smin_value186.i, align 8
[handleLoadInst] pointerValue:   %smin_value186.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 2 = MemoryDef(1)
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i252.i = load i64, i64* %smin_value186.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i252.i_5_77
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i252.i_5_77
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleLoadInst] (= dst_reg_5_6 i252.i_5_77)
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:9
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp187.i = icmp slt i64 %i252.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i252.i = load i64, i64* %smin_value186.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i252.i_5_77
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp187.i = icmp slt i64 %i252.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp187.i_5_79
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp187.i_5_79
[handleICmpInst] (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:10
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp190.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] src_reg1.sroa.13.0.copyload_5_32
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp190.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp190.i_5_81
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp190.i_5_81
[handleICmpInst] (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:11
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %or.cond3.i = select i1 %cmp187.i, i1 true, i1 %cmp190.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 20 = MemoryDef(19)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleSelectInst]SelectMap:
or.cond3.i,,cmp190.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp187.i = icmp slt i64 %i252.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp187.i_5_79
[getBitVecSingValType] i1 true
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #b1
[getBitVecSingValType]   %cmp190.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp190.i_5_81
[getBitVecSingValType]   %or.cond3.i = select i1 %cmp187.i, i1 true, i1 %cmp190.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: or.cond3.i_5_83
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.cond3.i_5_83
[handleSelectInst] z3ExprSelectOp1: cmp187.i_5_79
[handleSelectInst] z3ExprSelectOp2: #b1
[handleSelectInst] z3ExprSelectOp3: cmp190.i_5_81
[handleSelectInst] z3ExprRes: or.cond3.i_5_83
[handleSelectInst](ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
-------------------
  %..i = select i1 %or.cond3.i, i64 -9223372036854775808, i64 %and.i116.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 20 = MemoryDef(19)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleSelectInst]SelectMap:
..i,,and.i116.i
or.cond3.i,,cmp190.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond3.i = select i1 %cmp187.i, i1 true, i1 %cmp190.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond3.i_5_83
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_5_71
[getBitVecSingValType]   %..i = select i1 %or.cond3.i, i64 -9223372036854775808, i64 %and.i116.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: ..i_5_85
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] ..i_5_85
[handleSelectInst] z3ExprSelectOp1: or.cond3.i_5_83
[handleSelectInst] z3ExprSelectOp2: #x8000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i116.i_5_71
[handleSelectInst] z3ExprRes: ..i_5_85
[handleSelectInst](ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
-------------------
  %.cond184.i = select i1 %or.cond3.i, i64 9223372036854775807, i64 %cond184.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 20 = MemoryDef(19)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleSelectInst]SelectMap:
.cond184.i,,cond184.i
..i,,and.i116.i
or.cond3.i,,cmp190.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %or.cond3.i = select i1 %cmp187.i, i1 true, i1 %cmp190.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond3.i_5_83
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %i251.i, i64 %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond184.i_5_76
[getBitVecSingValType]   %.cond184.i = select i1 %or.cond3.i, i64 9223372036854775807, i64 %cond184.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: .cond184.i_5_87
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] .cond184.i_5_87
[handleSelectInst] z3ExprSelectOp1: or.cond3.i_5_83
[handleSelectInst] z3ExprSelectOp2: #x7fffffffffffffff
[handleSelectInst] z3ExprSelectOp3: cond184.i_5_76
[handleSelectInst] z3ExprRes: .cond184.i_5_87
[handleSelectInst](ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
-------------------
  store i64 %..i, i64* %smin_value186.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %..i = select i1 %or.cond3.i, i64 -9223372036854775808, i64 %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] ..i_5_85
[handleStoreInst] BVToStore: ..i_5_85
[handleStoreInst] destPointerValue:   %smin_value186.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] definingMemoryAccess: 20 = MemoryDef(19)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value186.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_6 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ ..i_5_85 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %smax_value199.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value199.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value199.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  store i64 %.cond184.i, i64* %smax_value199.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %.cond184.i = select i1 %or.cond3.i, i64 9223372036854775807, i64 %cond184.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond184.i_5_87
[handleStoreInst] BVToStore: .cond184.i_5_87
[handleStoreInst] destPointerValue:   %smax_value199.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] definingMemoryAccess: 21 = MemoryDef(20)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value199.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_7 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ .cond184.i_5_87 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %and.i126.i = and i64 %and9.i.i, -9223372036854775808
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[handleBinaryOperatorInst] op1Val: i64 -9223372036854775808
[handleBinaryOperatorInst] opResVal:   %and.i126.i = and i64 %and9.i.i, -9223372036854775808
[getBitVecSingValType]   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and9.i.i_5_73
[getBitVecSingValType] i64 -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x8000000000000000
[getBitVecSingValType]   %and.i126.i = and i64 %and9.i.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i126.i_5_89
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i126.i_5_89
[handleBinaryOperatorInst] AND instruction
(= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
-------------------
  %or.i127.i = or i64 %and.i126.i, %and.i116.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i126.i = and i64 %and9.i.i, -9223372036854775808
[handleBinaryOperatorInst] op1Val:   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %or.i127.i = or i64 %and.i126.i, %and.i116.i
[getBitVecSingValType]   %and.i126.i = and i64 %and9.i.i, -9223372036854775808
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i126.i_5_89
[getBitVecSingValType]   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_5_71
[getBitVecSingValType]   %or.i127.i = or i64 %and.i126.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i127.i_5_90
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i127.i_5_90
[handleBinaryOperatorInst] OR instruction
(= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
-------------------
  %cmp.i128.i = icmp sgt i64 %..i, %or.i127.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %..i = select i1 %or.cond3.i, i64 -9223372036854775808, i64 %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] ..i_5_85
[getBitVecSingValType]   %or.i127.i = or i64 %and.i126.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i127.i_5_90
[getBitVecSingValType]   %cmp.i128.i = icmp sgt i64 %..i, %or.i127.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i128.i_5_91
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i128.i_5_91
[handleICmpInst] (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:17
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cond.i129.i = select i1 %cmp.i128.i, i64 %..i, i64 %or.i127.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 22 = MemoryDef(21)
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleSelectInst]SelectMap:
cond.i129.i,..i,or.i127.i
.cond184.i,,cond184.i
..i,,and.i116.i
or.cond3.i,,cmp190.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i128.i = icmp sgt i64 %..i, %or.i127.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i128.i_5_91
[getBitVecSingValType]   %..i = select i1 %or.cond3.i, i64 -9223372036854775808, i64 %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] ..i_5_85
[getBitVecSingValType]   %or.i127.i = or i64 %and.i126.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i127.i_5_90
[getBitVecSingValType]   %cond.i129.i = select i1 %cmp.i128.i, i64 %..i, i64 %or.i127.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i129.i_5_92
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i129.i_5_92
[handleSelectInst] z3ExprSelectOp1: cmp.i128.i_5_91
[handleSelectInst] z3ExprSelectOp2: ..i_5_85
[handleSelectInst] z3ExprSelectOp3: or.i127.i_5_90
[handleSelectInst] z3ExprRes: cond.i129.i_5_92
[handleSelectInst](ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
-------------------
  store i64 %cond.i129.i, i64* %smin_value186.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i129.i = select i1 %cmp.i128.i, i64 %..i, i64 %or.i127.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i129.i_5_92
[handleStoreInst] BVToStore: cond.i129.i_5_92
[handleStoreInst] destPointerValue:   %smin_value186.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] definingMemoryAccess: 22 = MemoryDef(21)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value186.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ ..i_5_85 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i129.i_5_92 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %and7.i132.i = and i64 %and9.i.i, 9223372036854775807
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[handleBinaryOperatorInst] op1Val: i64 9223372036854775807
[handleBinaryOperatorInst] opResVal:   %and7.i132.i = and i64 %and9.i.i, 9223372036854775807
[getBitVecSingValType]   %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and9.i.i_5_73
[getBitVecSingValType] i64 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x7fffffffffffffff
[getBitVecSingValType]   %and7.i132.i = and i64 %and9.i.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and7.i132.i_5_94
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and7.i132.i_5_94
[handleBinaryOperatorInst] AND instruction
(= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
-------------------
  %or8.i133.i = or i64 %and7.i132.i, %and.i116.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and7.i132.i = and i64 %and9.i.i, 9223372036854775807
[handleBinaryOperatorInst] op1Val:   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[handleBinaryOperatorInst] opResVal:   %or8.i133.i = or i64 %and7.i132.i, %and.i116.i
[getBitVecSingValType]   %and7.i132.i = and i64 %and9.i.i, 9223372036854775807
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and7.i132.i_5_94
[getBitVecSingValType]   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_5_71
[getBitVecSingValType]   %or8.i133.i = or i64 %and7.i132.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or8.i133.i_5_95
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or8.i133.i_5_95
[handleBinaryOperatorInst] OR instruction
(= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
-------------------
  %cmp10.i134.i = icmp slt i64 %.cond184.i, %or8.i133.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %.cond184.i = select i1 %or.cond3.i, i64 9223372036854775807, i64 %cond184.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond184.i_5_87
[getBitVecSingValType]   %or8.i133.i = or i64 %and7.i132.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i133.i_5_95
[getBitVecSingValType]   %cmp10.i134.i = icmp slt i64 %.cond184.i, %or8.i133.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp10.i134.i_5_96
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp10.i134.i_5_96
[handleICmpInst] (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:21
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cond14.i135.i = select i1 %cmp10.i134.i, i64 %.cond184.i, i64 %or8.i133.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 23 = MemoryDef(22)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 

[handleSelectInst]SelectMap:
cond.i129.i,..i,or.i127.i
.cond184.i,,cond184.i
..i,,and.i116.i
or.cond3.i,,cmp190.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond14.i135.i,.cond184.i,or8.i133.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp10.i134.i = icmp slt i64 %.cond184.i, %or8.i133.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp10.i134.i_5_96
[getBitVecSingValType]   %.cond184.i = select i1 %or.cond3.i, i64 9223372036854775807, i64 %cond184.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] .cond184.i_5_87
[getBitVecSingValType]   %or8.i133.i = or i64 %and7.i132.i, %and.i116.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or8.i133.i_5_95
[getBitVecSingValType]   %cond14.i135.i = select i1 %cmp10.i134.i, i64 %.cond184.i, i64 %or8.i133.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond14.i135.i_5_97
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond14.i135.i_5_97
[handleSelectInst] z3ExprSelectOp1: cmp10.i134.i_5_96
[handleSelectInst] z3ExprSelectOp2: .cond184.i_5_87
[handleSelectInst] z3ExprSelectOp3: or8.i133.i_5_95
[handleSelectInst] z3ExprRes: cond14.i135.i_5_97
[handleSelectInst](ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
-------------------
  store i64 %cond14.i135.i, i64* %smax_value199.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond14.i135.i = select i1 %cmp10.i134.i, i64 %.cond184.i, i64 %or8.i133.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond14.i135.i_5_97
[handleStoreInst] BVToStore: cond14.i135.i_5_97
[handleStoreInst] destPointerValue:   %smax_value199.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] definingMemoryAccess: 23 = MemoryDef(22)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value199.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ .cond184.i_5_87 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond14.i135.i_5_97 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  store i64 %and.i116.i, i64* %umin_value179.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i116.i_5_71
[handleStoreInst] BVToStore: and.i116.i_5_71
[handleStoreInst] destPointerValue:   %umin_value179.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] definingMemoryAccess: 24 = MemoryDef(23)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value179.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ and.i116.i_5_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i116.i_5_71 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  %cmp31.i143.i = icmp ult i64 %cond184.i, %and8.i117.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %i251.i, i64 %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond184.i_5_76
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i117.i_5_72
[getBitVecSingValType]   %cmp31.i143.i = icmp ult i64 %cond184.i, %and8.i117.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i143.i_5_98
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i143.i_5_98
[handleICmpInst] (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:23
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cond35.i144.i = select i1 %cmp31.i143.i, i64 %cond184.i, i64 %and8.i117.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 25 = MemoryDef(24)
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 

[handleSelectInst]SelectMap:
cond35.i144.i,cond184.i,and8.i117.i
cond.i129.i,..i,or.i127.i
.cond184.i,,cond184.i
..i,,and.i116.i
or.cond3.i,,cmp190.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond14.i135.i,.cond184.i,or8.i133.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp31.i143.i = icmp ult i64 %cond184.i, %and8.i117.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i143.i_5_98
[getBitVecSingValType]   %cond184.i = select i1 %cmp182.i, i64 %i251.i, i64 %src_reg1.sroa.22.0.copyload
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond184.i_5_76
[getBitVecSingValType]   %and8.i117.i = and i64 %or.i115.i, %or3.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and8.i117.i_5_72
[getBitVecSingValType]   %cond35.i144.i = select i1 %cmp31.i143.i, i64 %cond184.i, i64 %and8.i117.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond35.i144.i_5_99
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond35.i144.i_5_99
[handleSelectInst] z3ExprSelectOp1: cmp31.i143.i_5_98
[handleSelectInst] z3ExprSelectOp2: cond184.i_5_76
[handleSelectInst] z3ExprSelectOp3: and8.i117.i_5_72
[handleSelectInst] z3ExprRes: cond35.i144.i_5_99
[handleSelectInst](ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
-------------------
  store i64 %cond35.i144.i, i64* %umax_value180.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond35.i144.i = select i1 %cmp31.i143.i, i64 %cond184.i, i64 %and8.i117.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond35.i144.i_5_99
[handleStoreInst] BVToStore: cond35.i144.i_5_99
[handleStoreInst] destPointerValue:   %umax_value180.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 26 = MemoryDef(25)
[handleStoreInst] definingMemoryAccess: 25 = MemoryDef(24)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value180.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ cond184.i_5_76 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond35.i144.i_5_99 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end309.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_100
[lookInsideStruct] singleValueType:dst_reg_5_100
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_101
[lookInsideStruct] singleValueType:dst_reg_5_101
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_102
[lookInsideStruct] singleValueType:dst_reg_5_102
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_103
[lookInsideStruct] singleValueType:dst_reg_5_103
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_104
[lookInsideStruct] singleValueType:dst_reg_5_104
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_105
[lookInsideStruct] singleValueType:dst_reg_5_105
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_106
[lookInsideStruct] singleValueType:dst_reg_5_106
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_107
[lookInsideStruct] singleValueType:dst_reg_5_107
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_108
[lookInsideStruct] singleValueType:dst_reg_5_108
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_109
[lookInsideStruct] singleValueType:dst_reg_5_109
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_110
[lookInsideStruct] singleValueType:dst_reg_5_110
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_111
[lookInsideStruct] singleValueType:dst_reg_5_111
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_112
[lookInsideStruct] singleValueType:dst_reg_5_112
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_113
[lookInsideStruct] singleValueType:dst_reg_5_113
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_114
[lookInsideStruct] singleValueType:src_reg_5_114
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_115
[lookInsideStruct] singleValueType:src_reg_5_115
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_116
[lookInsideStruct] singleValueType:src_reg_5_116
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_117
[lookInsideStruct] singleValueType:src_reg_5_117
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_118
[lookInsideStruct] singleValueType:src_reg_5_118
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_119
[lookInsideStruct] singleValueType:src_reg_5_119
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_120
[lookInsideStruct] singleValueType:src_reg_5_120
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_121
[lookInsideStruct] singleValueType:src_reg_5_121
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_122
[lookInsideStruct] singleValueType:src_reg_5_122
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_123
[lookInsideStruct] singleValueType:src_reg_5_123
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_124
[lookInsideStruct] singleValueType:src_reg_5_124
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_125
[lookInsideStruct] singleValueType:src_reg_5_125
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_126
[lookInsideStruct] singleValueType:src_reg_5_126
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_127
[lookInsideStruct] singleValueType:src_reg_5_127
[setupBVTreeForArg] returning BVTree: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then166.i
[handleMemoryPhiNode] incomingAccessI: 16 = MemoryDef(15)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_5_114)
(= src_reg_5_15 src_reg_5_115)
(= src_reg_5_16 src_reg_5_116)
(= src_reg_5_17 src_reg_5_117)
(= src_reg_5_18 src_reg_5_118)
(= src_reg_5_19 src_reg_5_119)
(= src_reg_5_20 src_reg_5_120)
(= src_reg_5_21 src_reg_5_121)
(= src_reg_5_22 src_reg_5_122)
(= src_reg_5_23 src_reg_5_123)
(= src_reg_5_24 src_reg_5_124)
(= src_reg_5_25 src_reg_5_125)
(= src_reg_5_26 src_reg_5_126)
(= src_reg_5_27 src_reg_5_127)
(= #x00000001 dst_reg_5_100)
(= dst_reg_5_1 dst_reg_5_101)
(= dst_reg_5_2 dst_reg_5_102)
(= dst_reg_5_3 dst_reg_5_103)
(= and170.i_5_67 dst_reg_5_104)
(= #x0000000000000000 dst_reg_5_105)
(= and170.i_5_67 dst_reg_5_106)
(= and170.i_5_67 dst_reg_5_107)
(= and170.i_5_67 dst_reg_5_108)
(= and170.i_5_67 dst_reg_5_109)
(= dst_reg_5_10 dst_reg_5_110)
(= dst_reg_5_11 dst_reg_5_111)
(= dst_reg_5_12 dst_reg_5_112)
(= dst_reg_5_13 dst_reg_5_113)
]
[handleMemoryPhiNode] incomingBBI: if.end171.i
[handleMemoryPhiNode] incomingAccessI: 26 = MemoryDef(25)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_5_114)
(= src_reg_5_15 src_reg_5_115)
(= src_reg_5_16 src_reg_5_116)
(= src_reg_5_17 src_reg_5_117)
(= src_reg_5_18 src_reg_5_118)
(= src_reg_5_19 src_reg_5_119)
(= src_reg_5_20 src_reg_5_120)
(= src_reg_5_21 src_reg_5_121)
(= src_reg_5_22 src_reg_5_122)
(= src_reg_5_23 src_reg_5_123)
(= src_reg_5_24 src_reg_5_124)
(= src_reg_5_25 src_reg_5_125)
(= src_reg_5_26 src_reg_5_126)
(= src_reg_5_27 src_reg_5_127)
(= #x00000001 dst_reg_5_100)
(= dst_reg_5_1 dst_reg_5_101)
(= dst_reg_5_2 dst_reg_5_102)
(= dst_reg_5_3 dst_reg_5_103)
(= and.i116.i_5_71 dst_reg_5_104)
(= and9.i.i_5_73 dst_reg_5_105)
(= cond.i129.i_5_92 dst_reg_5_106)
(= cond14.i135.i_5_97 dst_reg_5_107)
(= and.i116.i_5_71 dst_reg_5_108)
(= cond35.i144.i_5_99 dst_reg_5_109)
(= dst_reg_5_10 dst_reg_5_110)
(= dst_reg_5_11 dst_reg_5_111)
(= dst_reg_5_12 dst_reg_5_112)
(= dst_reg_5_13 dst_reg_5_113)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.end171.i, if.end309.i> :
  (= #x00000001 src_reg_5_114)
  (= src_reg_5_15 src_reg_5_115)
  (= src_reg_5_16 src_reg_5_116)
  (= src_reg_5_17 src_reg_5_117)
  (= src_reg_5_18 src_reg_5_118)
  (= src_reg_5_19 src_reg_5_119)
  (= src_reg_5_20 src_reg_5_120)
  (= src_reg_5_21 src_reg_5_121)
  (= src_reg_5_22 src_reg_5_122)
  (= src_reg_5_23 src_reg_5_123)
  (= src_reg_5_24 src_reg_5_124)
  (= src_reg_5_25 src_reg_5_125)
  (= src_reg_5_26 src_reg_5_126)
  (= src_reg_5_27 src_reg_5_127)
  (= #x00000001 dst_reg_5_100)
  (= dst_reg_5_1 dst_reg_5_101)
  (= dst_reg_5_2 dst_reg_5_102)
  (= dst_reg_5_3 dst_reg_5_103)
  (= and.i116.i_5_71 dst_reg_5_104)
  (= and9.i.i_5_73 dst_reg_5_105)
  (= cond.i129.i_5_92 dst_reg_5_106)
  (= cond14.i135.i_5_97 dst_reg_5_107)
  (= and.i116.i_5_71 dst_reg_5_108)
  (= cond35.i144.i_5_99 dst_reg_5_109)
  (= dst_reg_5_10 dst_reg_5_110)
  (= dst_reg_5_11 dst_reg_5_111)
  (= dst_reg_5_12 dst_reg_5_112)
  (= dst_reg_5_13 dst_reg_5_113)
<if.then166.i, if.end309.i> :
  (= #x00000001 src_reg_5_114)
  (= src_reg_5_15 src_reg_5_115)
  (= src_reg_5_16 src_reg_5_116)
  (= src_reg_5_17 src_reg_5_117)
  (= src_reg_5_18 src_reg_5_118)
  (= src_reg_5_19 src_reg_5_119)
  (= src_reg_5_20 src_reg_5_120)
  (= src_reg_5_21 src_reg_5_121)
  (= src_reg_5_22 src_reg_5_122)
  (= src_reg_5_23 src_reg_5_123)
  (= src_reg_5_24 src_reg_5_124)
  (= src_reg_5_25 src_reg_5_125)
  (= src_reg_5_26 src_reg_5_126)
  (= src_reg_5_27 src_reg_5_127)
  (= #x00000001 dst_reg_5_100)
  (= dst_reg_5_1 dst_reg_5_101)
  (= dst_reg_5_2 dst_reg_5_102)
  (= dst_reg_5_3 dst_reg_5_103)
  (= and170.i_5_67 dst_reg_5_104)
  (= #x0000000000000000 dst_reg_5_105)
  (= and170.i_5_67 dst_reg_5_106)
  (= and170.i_5_67 dst_reg_5_107)
  (= and170.i_5_67 dst_reg_5_108)
  (= and170.i_5_67 dst_reg_5_109)
  (= dst_reg_5_10 dst_reg_5_110)
  (= dst_reg_5_11 dst_reg_5_111)
  (= dst_reg_5_12 dst_reg_5_112)
  (= dst_reg_5_13 dst_reg_5_113)
-------------------
  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 6
[handleGEPInst] GEPMap: 
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value199.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[handleLoadInst] pointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value199.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i322.i_5_128
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i322.i_5_128
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 6 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleLoadInst] (= dst_reg_5_106 i.i322.i_5_128)
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:1
  (= dst_reg_5_106 i.i322.i_5_128)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_5_128
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i323.i_5_130
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i323.i_5_130
[handleICmpInst] (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value.i324.i, dst_reg, [7]
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value199.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[handleLoadInst] pointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i324.i, dst_reg, [7]
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value199.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i33.i.i_5_131
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i33.i.i_5_131
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleLoadInst] (= dst_reg_5_107 i33.i.i_5_131)
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:1
  (= dst_reg_5_107 i33.i.i_5_131)
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_5_131
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp1.i325.i_5_133
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp1.i325.i_5_133
[handleICmpInst] (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then.i329.i
=========================
-------------------
  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
smax_value.i324.i, dst_reg, [7]
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value199.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value.i324.i, dst_reg, [7]
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value199.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i34.i.i_5_134
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i34.i.i_5_134
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleLoadInst] (= dst_reg_5_108 i34.i.i_5_134)
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:1
  (= dst_reg_5_108 i34.i.i_5_134)
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_5_128
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_5_134
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp3.i.i_5_135
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp3.i.i_5_135
[handleICmpInst] (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:2
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleSelectInst]SelectMap:
cond.i327.i,i.i322.i,i34.i.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i129.i,..i,or.i127.i
.cond184.i,,cond184.i
..i,,and.i116.i
or.cond3.i,,cmp190.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond14.i135.i,.cond184.i,or8.i133.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp3.i.i_5_135
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_5_128
[getBitVecSingValType]   %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i34.i.i_5_134
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond.i327.i_5_136
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond.i327.i_5_136
[handleSelectInst] z3ExprSelectOp1: cmp3.i.i_5_135
[handleSelectInst] z3ExprSelectOp2: i.i322.i_5_128
[handleSelectInst] z3ExprSelectOp3: i34.i.i_5_134
[handleSelectInst] z3ExprRes: cond.i327.i_5_136
[handleSelectInst](ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_5_136
[handleStoreInst] BVToStore: cond.i327.i_5_136
[handleStoreInst] destPointerValue:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 27 = MemoryDef(41)
[handleStoreInst] definingMemoryAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_108 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_5_136 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}

-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond.i327.i_5_136
[handleStoreInst] BVToStore: cond.i327.i_5_136
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] definingMemoryAccess: 27 = MemoryDef(41)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_106 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond.i327.i_5_136 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 7
[handleGEPInst] GEPMap: 
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value199.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[handleLoadInst] pointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
smax_value6.i.i, dst_reg, [7]
smax_value.i324.i, dst_reg, [7]
smin_value186.i, dst_reg, [6]
umax_value.i114.i, dst_reg, [9]
umin_value.i113.i, dst_reg, [8]
smax_value.i112.i, dst_reg, [7]
smin_value.i111.i, dst_reg, [6]
umax_value.i.i.i, dst_reg, [9]
umin_value179.i, dst_reg, [8]
umin_value.i.i.i, dst_reg, [8]
smin_value.i321.i, dst_reg, [6]
smax_value.i.i.i, dst_reg, [7]
type, dst_reg, [0]
umax_value180.i, dst_reg, [9]
smin_value.i.i.i, dst_reg, [6]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
type1, src_reg, [0]
var_off.i.i.repack, dst_reg, [5, 0]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smax_value199.i, dst_reg, [7]
i214.i, dst_reg, [5, 1]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
i213.i, dst_reg, [5, 0]
umin_value.i326.i, dst_reg, [8]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
var_off.i.i.repack1, dst_reg, [5, 1]
frameno.i.i, dst_reg, [11]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i35.i.i_5_137
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i35.i.i_5_137
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 7 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleLoadInst] (= dst_reg_5_107 i35.i.i_5_137)
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:4
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i36.i.i_5_138
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i36.i.i_5_138
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleLoadInst] (= dst_reg_5_109 i36.i.i_5_138)
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:5
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_5_137
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_5_138
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp8.i.i_5_139
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp8.i.i_5_139
[handleICmpInst] (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then.i329.i, Size:6
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 28 = MemoryDef(27)
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleSelectInst]SelectMap:
cond.i327.i,i.i322.i,i34.i.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i129.i,..i,or.i127.i
cond12.i.i,i35.i.i,i36.i.i
.cond184.i,,cond184.i
..i,,and.i116.i
or.cond3.i,,cmp190.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond14.i135.i,.cond184.i,or8.i133.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp8.i.i_5_139
[getBitVecSingValType]   %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i35.i.i_5_137
[getBitVecSingValType]   %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i36.i.i_5_138
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond12.i.i_5_140
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond12.i.i_5_140
[handleSelectInst] z3ExprSelectOp1: cmp8.i.i_5_139
[handleSelectInst] z3ExprSelectOp2: i35.i.i_5_137
[handleSelectInst] z3ExprSelectOp3: i36.i.i_5_138
[handleSelectInst] z3ExprRes: cond12.i.i_5_140
[handleSelectInst](ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_5_140
[handleStoreInst] BVToStore: cond12.i.i_5_140
[handleStoreInst] destPointerValue:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] definingMemoryAccess: 28 = MemoryDef(27)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_109 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_5_140 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond12.i.i_5_140
[handleStoreInst] BVToStore: cond12.i.i_5_140
[handleStoreInst] destPointerValue:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 30 = MemoryDef(29)
[handleStoreInst] definingMemoryAccess: 29 = MemoryDef(28)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_107 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond12.i.i_5_140 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[handleLoadInst] pointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i37.i.i_5_141
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i37.i.i_5_141
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleLoadInst] (= dst_reg_5_109 i37.i.i_5_141)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:1
  (= dst_reg_5_109 i37.i.i_5_141)
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_5_141
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp16.i.i_5_143
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp16.i.i_5_143
[handleICmpInst] (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:2
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
-------------------
  %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[handleLoadInst] pointerValue:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i38.i.i_5_144
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i38.i.i_5_144
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleLoadInst] (= dst_reg_5_108 i38.i.i_5_144)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_5_144
[handleStoreInst] BVToStore: i38.i.i_5_144
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 31 = MemoryDef(41)
[handleStoreInst] definingMemoryAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_106 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i38.i.i_5_144 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_5_131
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_5_141
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp23.i.i_5_145
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp23.i.i_5_145
[handleICmpInst] (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: if.then17.i.i, Size:1
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 31 = MemoryDef(41)
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 

[handleSelectInst]SelectMap:
cond.i327.i,i.i322.i,i34.i.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i129.i,..i,or.i127.i
cond12.i.i,i35.i.i,i36.i.i
.cond184.i,,cond184.i
..i,,and.i116.i
or.cond3.i,,cmp190.i
cond27.i.i,i33.i.i,i37.i.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond14.i135.i,.cond184.i,or8.i133.i
or.cond199.i,,cmp24.i
or.cond197.i,,cmp18.not.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp23.i.i_5_145
[getBitVecSingValType]   %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i33.i.i_5_131
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_5_141
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond27.i.i_5_146
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond27.i.i_5_146
[handleSelectInst] z3ExprSelectOp1: cmp23.i.i_5_145
[handleSelectInst] z3ExprSelectOp2: i33.i.i_5_131
[handleSelectInst] z3ExprSelectOp3: i37.i.i_5_141
[handleSelectInst] z3ExprRes: cond27.i.i_5_146
[handleSelectInst](ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_5_146
[handleStoreInst] BVToStore: cond27.i.i_5_146
[handleStoreInst] destPointerValue:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreInst] storeMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] definingMemoryAccess: 31 = MemoryDef(41)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleStoreToGEPPtr] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 9 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_109 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_5_146 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond27.i.i_5_146
[handleStoreInst] BVToStore: cond27.i.i_5_146
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 33 = MemoryDef(32)
[handleStoreInst] definingMemoryAccess: 32 = MemoryDef(31)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_107 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond27.i.i_5_146 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_5_144
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp31.i330.i_5_148
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp31.i330.i_5_148
[handleICmpInst] (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: if.then26.i, Size:0
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)

-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
[handleICmpInst]
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_5_128
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_5_144
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp36.i.i_5_149
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp36.i.i_5_149
[handleICmpInst] (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:1
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 33 = MemoryDef(32)
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 

[handleSelectInst]SelectMap:
or.cond199.i,,cmp24.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp36.i.i_5_149
[getBitVecSingValType]   %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i322.i_5_128
[getBitVecSingValType]   %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i38.i.i_5_144
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: cond40.i.i_5_150
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cond40.i.i_5_150
[handleSelectInst] z3ExprSelectOp1: cmp36.i.i_5_149
[handleSelectInst] z3ExprSelectOp2: i.i322.i_5_128
[handleSelectInst] z3ExprSelectOp3: i38.i.i_5_144
[handleSelectInst] z3ExprRes: cond40.i.i_5_150
[handleSelectInst](ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_5_150
[handleStoreInst] BVToStore: cond40.i.i_5_150
[handleStoreInst] destPointerValue:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreInst] storeMemoryAccess: 34 = MemoryDef(41)
[handleStoreInst] definingMemoryAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleStoreToGEPPtr] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 8 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_108 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_5_150 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
34 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cond40.i.i_5_150
[handleStoreInst] BVToStore: cond40.i.i_5_150
[handleStoreInst] destPointerValue:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreInst] storeMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] definingMemoryAccess: 34 = MemoryDef(41)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
[handleStoreToGEPPtr] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 6 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_106 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ cond40.i.i_5_150 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
34 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i37.i.i_5_141
[handleStoreInst] BVToStore: i37.i.i_5_141
[handleStoreInst] destPointerValue:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreInst] storeMemoryAccess: 36 = MemoryDef(35)
[handleStoreInst] definingMemoryAccess: 35 = MemoryDef(34)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
[handleStoreToGEPPtr] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 7 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_107 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ i37.i.i_5_141 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ i37.i.i_5_141 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
34 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_151
[lookInsideStruct] singleValueType:dst_reg_5_151
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_152
[lookInsideStruct] singleValueType:dst_reg_5_152
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_153
[lookInsideStruct] singleValueType:dst_reg_5_153
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_154
[lookInsideStruct] singleValueType:dst_reg_5_154
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_155
[lookInsideStruct] singleValueType:dst_reg_5_155
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_156
[lookInsideStruct] singleValueType:dst_reg_5_156
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_157
[lookInsideStruct] singleValueType:dst_reg_5_157
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_158
[lookInsideStruct] singleValueType:dst_reg_5_158
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_159
[lookInsideStruct] singleValueType:dst_reg_5_159
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_160
[lookInsideStruct] singleValueType:dst_reg_5_160
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_161
[lookInsideStruct] singleValueType:dst_reg_5_161
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_162
[lookInsideStruct] singleValueType:dst_reg_5_162
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_163
[lookInsideStruct] singleValueType:dst_reg_5_163
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_164
[lookInsideStruct] singleValueType:dst_reg_5_164
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_165
[lookInsideStruct] singleValueType:src_reg_5_165
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_166
[lookInsideStruct] singleValueType:src_reg_5_166
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_167
[lookInsideStruct] singleValueType:src_reg_5_167
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_168
[lookInsideStruct] singleValueType:src_reg_5_168
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_169
[lookInsideStruct] singleValueType:src_reg_5_169
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_170
[lookInsideStruct] singleValueType:src_reg_5_170
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_171
[lookInsideStruct] singleValueType:src_reg_5_171
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_172
[lookInsideStruct] singleValueType:src_reg_5_172
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_173
[lookInsideStruct] singleValueType:src_reg_5_173
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_174
[lookInsideStruct] singleValueType:src_reg_5_174
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_175
[lookInsideStruct] singleValueType:src_reg_5_175
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_176
[lookInsideStruct] singleValueType:src_reg_5_176
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_177
[lookInsideStruct] singleValueType:src_reg_5_177
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_178
[lookInsideStruct] singleValueType:src_reg_5_178
[setupBVTreeForArg] returning BVTree: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then.i329.i
[handleMemoryPhiNode] incomingAccessI: 30 = MemoryDef(29)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_5_114 src_reg_5_165)
(= src_reg_5_115 src_reg_5_166)
(= src_reg_5_116 src_reg_5_167)
(= src_reg_5_117 src_reg_5_168)
(= src_reg_5_118 src_reg_5_169)
(= src_reg_5_119 src_reg_5_170)
(= src_reg_5_120 src_reg_5_171)
(= src_reg_5_121 src_reg_5_172)
(= src_reg_5_122 src_reg_5_173)
(= src_reg_5_123 src_reg_5_174)
(= src_reg_5_124 src_reg_5_175)
(= src_reg_5_125 src_reg_5_176)
(= src_reg_5_126 src_reg_5_177)
(= src_reg_5_127 src_reg_5_178)
(= dst_reg_5_100 dst_reg_5_151)
(= dst_reg_5_101 dst_reg_5_152)
(= dst_reg_5_102 dst_reg_5_153)
(= dst_reg_5_103 dst_reg_5_154)
(= dst_reg_5_104 dst_reg_5_155)
(= dst_reg_5_105 dst_reg_5_156)
(= cond.i327.i_5_136 dst_reg_5_157)
(= cond12.i.i_5_140 dst_reg_5_158)
(= cond.i327.i_5_136 dst_reg_5_159)
(= cond12.i.i_5_140 dst_reg_5_160)
(= dst_reg_5_110 dst_reg_5_161)
(= dst_reg_5_111 dst_reg_5_162)
(= dst_reg_5_112 dst_reg_5_163)
(= dst_reg_5_113 dst_reg_5_164)
]
[handleMemoryPhiNode] incomingBBI: if.then17.i.i
[handleMemoryPhiNode] incomingAccessI: 33 = MemoryDef(32)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_5_114 src_reg_5_165)
(= src_reg_5_115 src_reg_5_166)
(= src_reg_5_116 src_reg_5_167)
(= src_reg_5_117 src_reg_5_168)
(= src_reg_5_118 src_reg_5_169)
(= src_reg_5_119 src_reg_5_170)
(= src_reg_5_120 src_reg_5_171)
(= src_reg_5_121 src_reg_5_172)
(= src_reg_5_122 src_reg_5_173)
(= src_reg_5_123 src_reg_5_174)
(= src_reg_5_124 src_reg_5_175)
(= src_reg_5_125 src_reg_5_176)
(= src_reg_5_126 src_reg_5_177)
(= src_reg_5_127 src_reg_5_178)
(= dst_reg_5_100 dst_reg_5_151)
(= dst_reg_5_101 dst_reg_5_152)
(= dst_reg_5_102 dst_reg_5_153)
(= dst_reg_5_103 dst_reg_5_154)
(= dst_reg_5_104 dst_reg_5_155)
(= dst_reg_5_105 dst_reg_5_156)
(= i38.i.i_5_144 dst_reg_5_157)
(= cond27.i.i_5_146 dst_reg_5_158)
(= dst_reg_5_108 dst_reg_5_159)
(= cond27.i.i_5_146 dst_reg_5_160)
(= dst_reg_5_110 dst_reg_5_161)
(= dst_reg_5_111 dst_reg_5_162)
(= dst_reg_5_112 dst_reg_5_163)
(= dst_reg_5_113 dst_reg_5_164)
]
[handleMemoryPhiNode] incomingBBI: if.else.i331.i
[handleMemoryPhiNode] incomingAccessI: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_5_114 src_reg_5_165)
(= src_reg_5_115 src_reg_5_166)
(= src_reg_5_116 src_reg_5_167)
(= src_reg_5_117 src_reg_5_168)
(= src_reg_5_118 src_reg_5_169)
(= src_reg_5_119 src_reg_5_170)
(= src_reg_5_120 src_reg_5_171)
(= src_reg_5_121 src_reg_5_172)
(= src_reg_5_122 src_reg_5_173)
(= src_reg_5_123 src_reg_5_174)
(= src_reg_5_124 src_reg_5_175)
(= src_reg_5_125 src_reg_5_176)
(= src_reg_5_126 src_reg_5_177)
(= src_reg_5_127 src_reg_5_178)
(= dst_reg_5_100 dst_reg_5_151)
(= dst_reg_5_101 dst_reg_5_152)
(= dst_reg_5_102 dst_reg_5_153)
(= dst_reg_5_103 dst_reg_5_154)
(= dst_reg_5_104 dst_reg_5_155)
(= dst_reg_5_105 dst_reg_5_156)
(= dst_reg_5_106 dst_reg_5_157)
(= dst_reg_5_107 dst_reg_5_158)
(= dst_reg_5_108 dst_reg_5_159)
(= dst_reg_5_109 dst_reg_5_160)
(= dst_reg_5_110 dst_reg_5_161)
(= dst_reg_5_111 dst_reg_5_162)
(= dst_reg_5_112 dst_reg_5_163)
(= dst_reg_5_113 dst_reg_5_164)
]
[handleMemoryPhiNode] incomingBBI: if.then32.i.i
[handleMemoryPhiNode] incomingAccessI: 36 = MemoryDef(35)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ i37.i.i_5_141 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ i37.i.i_5_141 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_5_114 src_reg_5_165)
(= src_reg_5_115 src_reg_5_166)
(= src_reg_5_116 src_reg_5_167)
(= src_reg_5_117 src_reg_5_168)
(= src_reg_5_118 src_reg_5_169)
(= src_reg_5_119 src_reg_5_170)
(= src_reg_5_120 src_reg_5_171)
(= src_reg_5_121 src_reg_5_172)
(= src_reg_5_122 src_reg_5_173)
(= src_reg_5_123 src_reg_5_174)
(= src_reg_5_124 src_reg_5_175)
(= src_reg_5_125 src_reg_5_176)
(= src_reg_5_126 src_reg_5_177)
(= src_reg_5_127 src_reg_5_178)
(= dst_reg_5_100 dst_reg_5_151)
(= dst_reg_5_101 dst_reg_5_152)
(= dst_reg_5_102 dst_reg_5_153)
(= dst_reg_5_103 dst_reg_5_154)
(= dst_reg_5_104 dst_reg_5_155)
(= dst_reg_5_105 dst_reg_5_156)
(= cond40.i.i_5_150 dst_reg_5_157)
(= i37.i.i_5_141 dst_reg_5_158)
(= cond40.i.i_5_150 dst_reg_5_159)
(= dst_reg_5_109 dst_reg_5_160)
(= dst_reg_5_110 dst_reg_5_161)
(= dst_reg_5_111 dst_reg_5_162)
(= dst_reg_5_112 dst_reg_5_163)
(= dst_reg_5_113 dst_reg_5_164)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_5_114 src_reg_5_165)
  (= src_reg_5_115 src_reg_5_166)
  (= src_reg_5_116 src_reg_5_167)
  (= src_reg_5_117 src_reg_5_168)
  (= src_reg_5_118 src_reg_5_169)
  (= src_reg_5_119 src_reg_5_170)
  (= src_reg_5_120 src_reg_5_171)
  (= src_reg_5_121 src_reg_5_172)
  (= src_reg_5_122 src_reg_5_173)
  (= src_reg_5_123 src_reg_5_174)
  (= src_reg_5_124 src_reg_5_175)
  (= src_reg_5_125 src_reg_5_176)
  (= src_reg_5_126 src_reg_5_177)
  (= src_reg_5_127 src_reg_5_178)
  (= dst_reg_5_100 dst_reg_5_151)
  (= dst_reg_5_101 dst_reg_5_152)
  (= dst_reg_5_102 dst_reg_5_153)
  (= dst_reg_5_103 dst_reg_5_154)
  (= dst_reg_5_104 dst_reg_5_155)
  (= dst_reg_5_105 dst_reg_5_156)
  (= cond40.i.i_5_150 dst_reg_5_157)
  (= i37.i.i_5_141 dst_reg_5_158)
  (= cond40.i.i_5_150 dst_reg_5_159)
  (= dst_reg_5_109 dst_reg_5_160)
  (= dst_reg_5_110 dst_reg_5_161)
  (= dst_reg_5_111 dst_reg_5_162)
  (= dst_reg_5_112 dst_reg_5_163)
  (= dst_reg_5_113 dst_reg_5_164)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_5_114 src_reg_5_165)
  (= src_reg_5_115 src_reg_5_166)
  (= src_reg_5_116 src_reg_5_167)
  (= src_reg_5_117 src_reg_5_168)
  (= src_reg_5_118 src_reg_5_169)
  (= src_reg_5_119 src_reg_5_170)
  (= src_reg_5_120 src_reg_5_171)
  (= src_reg_5_121 src_reg_5_172)
  (= src_reg_5_122 src_reg_5_173)
  (= src_reg_5_123 src_reg_5_174)
  (= src_reg_5_124 src_reg_5_175)
  (= src_reg_5_125 src_reg_5_176)
  (= src_reg_5_126 src_reg_5_177)
  (= src_reg_5_127 src_reg_5_178)
  (= dst_reg_5_100 dst_reg_5_151)
  (= dst_reg_5_101 dst_reg_5_152)
  (= dst_reg_5_102 dst_reg_5_153)
  (= dst_reg_5_103 dst_reg_5_154)
  (= dst_reg_5_104 dst_reg_5_155)
  (= dst_reg_5_105 dst_reg_5_156)
  (= i38.i.i_5_144 dst_reg_5_157)
  (= cond27.i.i_5_146 dst_reg_5_158)
  (= dst_reg_5_108 dst_reg_5_159)
  (= cond27.i.i_5_146 dst_reg_5_160)
  (= dst_reg_5_110 dst_reg_5_161)
  (= dst_reg_5_111 dst_reg_5_162)
  (= dst_reg_5_112 dst_reg_5_163)
  (= dst_reg_5_113 dst_reg_5_164)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_5_114 src_reg_5_165)
  (= src_reg_5_115 src_reg_5_166)
  (= src_reg_5_116 src_reg_5_167)
  (= src_reg_5_117 src_reg_5_168)
  (= src_reg_5_118 src_reg_5_169)
  (= src_reg_5_119 src_reg_5_170)
  (= src_reg_5_120 src_reg_5_171)
  (= src_reg_5_121 src_reg_5_172)
  (= src_reg_5_122 src_reg_5_173)
  (= src_reg_5_123 src_reg_5_174)
  (= src_reg_5_124 src_reg_5_175)
  (= src_reg_5_125 src_reg_5_176)
  (= src_reg_5_126 src_reg_5_177)
  (= src_reg_5_127 src_reg_5_178)
  (= dst_reg_5_100 dst_reg_5_151)
  (= dst_reg_5_101 dst_reg_5_152)
  (= dst_reg_5_102 dst_reg_5_153)
  (= dst_reg_5_103 dst_reg_5_154)
  (= dst_reg_5_104 dst_reg_5_155)
  (= dst_reg_5_105 dst_reg_5_156)
  (= cond.i327.i_5_136 dst_reg_5_157)
  (= cond12.i.i_5_140 dst_reg_5_158)
  (= cond.i327.i_5_136 dst_reg_5_159)
  (= cond12.i.i_5_140 dst_reg_5_160)
  (= dst_reg_5_110 dst_reg_5_161)
  (= dst_reg_5_111 dst_reg_5_162)
  (= dst_reg_5_112 dst_reg_5_163)
  (= dst_reg_5_113 dst_reg_5_164)
<if.end171.i, if.end309.i> :
  (= #x00000001 src_reg_5_114)
  (= src_reg_5_15 src_reg_5_115)
  (= src_reg_5_16 src_reg_5_116)
  (= src_reg_5_17 src_reg_5_117)
  (= src_reg_5_18 src_reg_5_118)
  (= src_reg_5_19 src_reg_5_119)
  (= src_reg_5_20 src_reg_5_120)
  (= src_reg_5_21 src_reg_5_121)
  (= src_reg_5_22 src_reg_5_122)
  (= src_reg_5_23 src_reg_5_123)
  (= src_reg_5_24 src_reg_5_124)
  (= src_reg_5_25 src_reg_5_125)
  (= src_reg_5_26 src_reg_5_126)
  (= src_reg_5_27 src_reg_5_127)
  (= #x00000001 dst_reg_5_100)
  (= dst_reg_5_1 dst_reg_5_101)
  (= dst_reg_5_2 dst_reg_5_102)
  (= dst_reg_5_3 dst_reg_5_103)
  (= and.i116.i_5_71 dst_reg_5_104)
  (= and9.i.i_5_73 dst_reg_5_105)
  (= cond.i129.i_5_92 dst_reg_5_106)
  (= cond14.i135.i_5_97 dst_reg_5_107)
  (= and.i116.i_5_71 dst_reg_5_108)
  (= cond35.i144.i_5_99 dst_reg_5_109)
  (= dst_reg_5_10 dst_reg_5_110)
  (= dst_reg_5_11 dst_reg_5_111)
  (= dst_reg_5_12 dst_reg_5_112)
  (= dst_reg_5_13 dst_reg_5_113)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_5_114 src_reg_5_165)
  (= src_reg_5_115 src_reg_5_166)
  (= src_reg_5_116 src_reg_5_167)
  (= src_reg_5_117 src_reg_5_168)
  (= src_reg_5_118 src_reg_5_169)
  (= src_reg_5_119 src_reg_5_170)
  (= src_reg_5_120 src_reg_5_171)
  (= src_reg_5_121 src_reg_5_172)
  (= src_reg_5_122 src_reg_5_173)
  (= src_reg_5_123 src_reg_5_174)
  (= src_reg_5_124 src_reg_5_175)
  (= src_reg_5_125 src_reg_5_176)
  (= src_reg_5_126 src_reg_5_177)
  (= src_reg_5_127 src_reg_5_178)
  (= dst_reg_5_100 dst_reg_5_151)
  (= dst_reg_5_101 dst_reg_5_152)
  (= dst_reg_5_102 dst_reg_5_153)
  (= dst_reg_5_103 dst_reg_5_154)
  (= dst_reg_5_104 dst_reg_5_155)
  (= dst_reg_5_105 dst_reg_5_156)
  (= dst_reg_5_106 dst_reg_5_157)
  (= dst_reg_5_107 dst_reg_5_158)
  (= dst_reg_5_108 dst_reg_5_159)
  (= dst_reg_5_109 dst_reg_5_160)
  (= dst_reg_5_110 dst_reg_5_161)
  (= dst_reg_5_111 dst_reg_5_162)
  (= dst_reg_5_112 dst_reg_5_163)
  (= dst_reg_5_113 dst_reg_5_164)
<if.then166.i, if.end309.i> :
  (= #x00000001 src_reg_5_114)
  (= src_reg_5_15 src_reg_5_115)
  (= src_reg_5_16 src_reg_5_116)
  (= src_reg_5_17 src_reg_5_117)
  (= src_reg_5_18 src_reg_5_118)
  (= src_reg_5_19 src_reg_5_119)
  (= src_reg_5_20 src_reg_5_120)
  (= src_reg_5_21 src_reg_5_121)
  (= src_reg_5_22 src_reg_5_122)
  (= src_reg_5_23 src_reg_5_123)
  (= src_reg_5_24 src_reg_5_124)
  (= src_reg_5_25 src_reg_5_125)
  (= src_reg_5_26 src_reg_5_126)
  (= src_reg_5_27 src_reg_5_127)
  (= #x00000001 dst_reg_5_100)
  (= dst_reg_5_1 dst_reg_5_101)
  (= dst_reg_5_2 dst_reg_5_102)
  (= dst_reg_5_3 dst_reg_5_103)
  (= and170.i_5_67 dst_reg_5_104)
  (= #x0000000000000000 dst_reg_5_105)
  (= and170.i_5_67 dst_reg_5_106)
  (= and170.i_5_67 dst_reg_5_107)
  (= and170.i_5_67 dst_reg_5_108)
  (= and170.i_5_67 dst_reg_5_109)
  (= dst_reg_5_10 dst_reg_5_110)
  (= dst_reg_5_11 dst_reg_5_111)
  (= dst_reg_5_12 dst_reg_5_112)
  (= dst_reg_5_13 dst_reg_5_113)
-------------------
  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 8
[handleGEPInst] GEPMap: 
umin_value.i332.i, dst_reg, [8]
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
-------------------
  %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleLoadInst] pointerValue:   %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umin_value.i332.i, dst_reg, [8]
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i.i333.i_5_179
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i333.i_5_179
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 8 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
[handleLoadInst] (= dst_reg_5_159 i.i333.i_5_179)
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:1
  (= dst_reg_5_159 i.i333.i_5_179)
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
[handleGEPInst] 
[handleGEPInst] GEPInstVal:  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleGEPInst] GEPInstArgVal: %struct.bpf_reg_state* %dst_reg
[handleGEPInst] getNumOperands:3
[populateGEPIndices] 
[populateGEPIndices] idx: 9
[handleGEPInst] GEPMap: 
umax_value.i334.i, dst_reg, [9]
umin_value.i332.i, dst_reg, [8]
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleLoadInst] pointerValue:   %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
umin_value.i332.i, dst_reg, [8]
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i5.i.i_5_180
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i5.i.i_5_180
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 9 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
[handleLoadInst] (= dst_reg_5_160 i5.i.i_5_180)
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:2
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleBinaryOperatorInst] opResVal:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType]   %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i5.i.i_5_180
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_5_179
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: xor.i.i.i_5_181
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] xor.i.i.i_5_181
[handleBinaryOperatorInst] XOR instruction
(= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_5_181
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i.i_5_183
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i.i_5_183
[handleICmpInst] (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
[printBBAssertionsMap] 
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
[handleICmpInst]
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_5_181
[getBitVecSingValType] i64 4294967296
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000100000000
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool.not.i.i.i.i.i_5_185
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_5_185
[handleICmpInst] (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:1
  (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[handleBinaryOperatorInst] op1Val: i64 32
[handleBinaryOperatorInst] opResVal:   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_5_181
[getBitVecSingValType] i64 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000020
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl.i.i.i.i.i_5_187
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl.i.i.i.i.i_5_187
[handleBinaryOperatorInst] SHL instruction
(= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 #x0000000000000020))
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
or.cond199.i,,cmp24.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_5_185
[getBitVecSingValType]   %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl.i.i.i.i.i_5_187
[getBitVecSingValType]   %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] xor.i.i.i_5_181
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: spec.select.i.i.i.i.i_5_188
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_5_188
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_5_185
[handleSelectInst] z3ExprSelectOp2: shl.i.i.i.i.i_5_187
[handleSelectInst] z3ExprSelectOp3: xor.i.i.i_5_181
[handleSelectInst] z3ExprRes: spec.select.i.i.i.i.i_5_188
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187)
     (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i.i.i.i_5_185
[getBitVecSingValType] i32 31
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000001f
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: spec.select17.i.i.i.i.i_5_191
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_5_191
[handleSelectInst] z3ExprSelectOp1: tobool.not.i.i.i.i.i_5_185
[handleSelectInst] z3ExprSelectOp2: #x0000001f
[handleSelectInst] z3ExprSelectOp3: #x0000003f
[handleSelectInst] z3ExprRes: spec.select17.i.i.i.i.i_5_191
[handleSelectInst](ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select17.i.i.i.i.i_5_191 #x0000001f)
     (= spec.select17.i.i.i.i.i_5_191 #x0000003f))
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
[handleICmpInst]
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_5_188
[getBitVecSingValType] i64 281474976710656
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0001000000000000
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool2.not.i.i.i.i.i_5_193
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_5_193
[handleICmpInst] (ite (bvult spec.select.i.i.i.i.i_5_188 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= tobool2.not.i.i.i.i.i_5_193 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:5
  (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
  (= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187)
     (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select17.i.i.i.i.i_5_191 #x0000001f)
     (= spec.select17.i.i.i.i.i_5_191 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_5_188 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= tobool2.not.i.i.i.i.i_5_193 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[handleBinaryOperatorInst] op1Val: i32 -16
[handleBinaryOperatorInst] opResVal:   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_5_191
[getBitVecSingValType] i32 -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff0
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub4.i.i.i.i.i_5_195
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub4.i.i.i.i.i_5_195
[handleBinaryOperatorInst] ADD instruction
(= sub4.i.i.i.i.i_5_195 (bvadd spec.select17.i.i.i.i.i_5_191 #xfffffff0))
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[handleBinaryOperatorInst] op1Val: i64 16
[handleBinaryOperatorInst] opResVal:   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_5_188
[getBitVecSingValType] i64 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000010
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl5.i.i.i.i.i_5_197
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl5.i.i.i.i.i_5_197
[handleBinaryOperatorInst] SHL instruction
(= shl5.i.i.i.i.i_5_197 (bvshl spec.select.i.i.i.i.i_5_188 #x0000000000000010))
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_5_193
[getBitVecSingValType]   %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl5.i.i.i.i.i_5_197
[getBitVecSingValType]   %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select.i.i.i.i.i_5_188
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.1.i.i.i.i.i_5_198
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_5_198
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_5_193
[handleSelectInst] z3ExprSelectOp2: shl5.i.i.i.i.i_5_197
[handleSelectInst] z3ExprSelectOp3: spec.select.i.i.i.i.i_5_188
[handleSelectInst] z3ExprRes: word.addr.1.i.i.i.i.i_5_198
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= word.addr.1.i.i.i.i.i_5_198 shl5.i.i.i.i.i_5_197)
     (= word.addr.1.i.i.i.i.i_5_198 spec.select.i.i.i.i.i_5_188))
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool2.not.i.i.i.i.i_5_193
[getBitVecSingValType]   %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub4.i.i.i.i.i_5_195
[getBitVecSingValType]   %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] spec.select17.i.i.i.i.i_5_191
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.1.i.i.i.i.i_5_199
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.1.i.i.i.i.i_5_199
[handleSelectInst] z3ExprSelectOp1: tobool2.not.i.i.i.i.i_5_193
[handleSelectInst] z3ExprSelectOp2: sub4.i.i.i.i.i_5_195
[handleSelectInst] z3ExprSelectOp3: spec.select17.i.i.i.i.i_5_191
[handleSelectInst] z3ExprRes: num.1.i.i.i.i.i_5_199
[handleSelectInst](ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= num.1.i.i.i.i.i_5_199 sub4.i.i.i.i.i_5_195)
     (= num.1.i.i.i.i.i_5_199 spec.select17.i.i.i.i.i_5_191))
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_5_198
[getBitVecSingValType] i64 72057594037927936
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0100000000000000
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool8.not.i.i.i.i.i_5_201
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_5_201
[handleICmpInst] (ite (bvult word.addr.1.i.i.i.i.i_5_198 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= tobool8.not.i.i.i.i.i_5_201 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:10
  (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
  (= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187)
     (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select17.i.i.i.i.i_5_191 #x0000001f)
     (= spec.select17.i.i.i.i.i_5_191 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_5_188 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= tobool2.not.i.i.i.i.i_5_193 #b0))
  (= sub4.i.i.i.i.i_5_195 (bvadd spec.select17.i.i.i.i.i_5_191 #xfffffff0))
  (= shl5.i.i.i.i.i_5_197 (bvshl spec.select.i.i.i.i.i_5_188 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= word.addr.1.i.i.i.i.i_5_198 shl5.i.i.i.i.i_5_197)
     (= word.addr.1.i.i.i.i.i_5_198 spec.select.i.i.i.i.i_5_188))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= num.1.i.i.i.i.i_5_199 sub4.i.i.i.i.i_5_195)
     (= num.1.i.i.i.i.i_5_199 spec.select17.i.i.i.i.i_5_191))
  (ite (bvult word.addr.1.i.i.i.i.i_5_198 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= tobool8.not.i.i.i.i.i_5_201 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -8
[handleBinaryOperatorInst] opResVal:   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_5_199
[getBitVecSingValType] i32 -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffff8
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub10.i.i.i.i.i_5_203
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub10.i.i.i.i.i_5_203
[handleBinaryOperatorInst] ADD instruction
(= sub10.i.i.i.i.i_5_203 (bvadd num.1.i.i.i.i.i_5_199 #xfffffff8))
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 8
[handleBinaryOperatorInst] opResVal:   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_5_198
[getBitVecSingValType] i64 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000008
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl11.i.i.i.i.i_5_205
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl11.i.i.i.i.i_5_205
[handleBinaryOperatorInst] SHL instruction
(= shl11.i.i.i.i.i_5_205 (bvshl word.addr.1.i.i.i.i.i_5_198 #x0000000000000008))
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_5_201
[getBitVecSingValType]   %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl11.i.i.i.i.i_5_205
[getBitVecSingValType]   %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.1.i.i.i.i.i_5_198
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.2.i.i.i.i.i_5_206
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_5_206
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_5_201
[handleSelectInst] z3ExprSelectOp2: shl11.i.i.i.i.i_5_205
[handleSelectInst] z3ExprSelectOp3: word.addr.1.i.i.i.i.i_5_198
[handleSelectInst] z3ExprRes: word.addr.2.i.i.i.i.i_5_206
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= word.addr.2.i.i.i.i.i_5_206 shl11.i.i.i.i.i_5_205)
     (= word.addr.2.i.i.i.i.i_5_206 word.addr.1.i.i.i.i.i_5_198))
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool8.not.i.i.i.i.i_5_201
[getBitVecSingValType]   %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub10.i.i.i.i.i_5_203
[getBitVecSingValType]   %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.1.i.i.i.i.i_5_199
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.2.i.i.i.i.i_5_207
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.2.i.i.i.i.i_5_207
[handleSelectInst] z3ExprSelectOp1: tobool8.not.i.i.i.i.i_5_201
[handleSelectInst] z3ExprSelectOp2: sub10.i.i.i.i.i_5_203
[handleSelectInst] z3ExprSelectOp3: num.1.i.i.i.i.i_5_199
[handleSelectInst] z3ExprRes: num.2.i.i.i.i.i_5_207
[handleSelectInst](ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= num.2.i.i.i.i.i_5_207 sub10.i.i.i.i.i_5_203)
     (= num.2.i.i.i.i.i_5_207 num.1.i.i.i.i.i_5_199))
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_5_206
[getBitVecSingValType] i64 1152921504606846976
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x1000000000000000
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool14.not.i.i.i.i.i_5_209
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_5_209
[handleICmpInst] (ite (bvult word.addr.2.i.i.i.i.i_5_206 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= tobool14.not.i.i.i.i.i_5_209 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:15
  (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
  (= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187)
     (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select17.i.i.i.i.i_5_191 #x0000001f)
     (= spec.select17.i.i.i.i.i_5_191 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_5_188 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= tobool2.not.i.i.i.i.i_5_193 #b0))
  (= sub4.i.i.i.i.i_5_195 (bvadd spec.select17.i.i.i.i.i_5_191 #xfffffff0))
  (= shl5.i.i.i.i.i_5_197 (bvshl spec.select.i.i.i.i.i_5_188 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= word.addr.1.i.i.i.i.i_5_198 shl5.i.i.i.i.i_5_197)
     (= word.addr.1.i.i.i.i.i_5_198 spec.select.i.i.i.i.i_5_188))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= num.1.i.i.i.i.i_5_199 sub4.i.i.i.i.i_5_195)
     (= num.1.i.i.i.i.i_5_199 spec.select17.i.i.i.i.i_5_191))
  (ite (bvult word.addr.1.i.i.i.i.i_5_198 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= tobool8.not.i.i.i.i.i_5_201 #b0))
  (= sub10.i.i.i.i.i_5_203 (bvadd num.1.i.i.i.i.i_5_199 #xfffffff8))
  (= shl11.i.i.i.i.i_5_205 (bvshl word.addr.1.i.i.i.i.i_5_198 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= word.addr.2.i.i.i.i.i_5_206 shl11.i.i.i.i.i_5_205)
     (= word.addr.2.i.i.i.i.i_5_206 word.addr.1.i.i.i.i.i_5_198))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= num.2.i.i.i.i.i_5_207 sub10.i.i.i.i.i_5_203)
     (= num.2.i.i.i.i.i_5_207 num.1.i.i.i.i.i_5_199))
  (ite (bvult word.addr.2.i.i.i.i.i_5_206 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= tobool14.not.i.i.i.i.i_5_209 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 -4
[handleBinaryOperatorInst] opResVal:   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_5_207
[getBitVecSingValType] i32 -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xfffffffc
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub16.i.i.i.i.i_5_211
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub16.i.i.i.i.i_5_211
[handleBinaryOperatorInst] ADD instruction
(= sub16.i.i.i.i.i_5_211 (bvadd num.2.i.i.i.i.i_5_207 #xfffffffc))
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 4
[handleBinaryOperatorInst] opResVal:   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_5_206
[getBitVecSingValType] i64 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000004
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl17.i.i.i.i.i_5_213
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl17.i.i.i.i.i_5_213
[handleBinaryOperatorInst] SHL instruction
(= shl17.i.i.i.i.i_5_213 (bvshl word.addr.2.i.i.i.i.i_5_206 #x0000000000000004))
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_5_209
[getBitVecSingValType]   %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl17.i.i.i.i.i_5_213
[getBitVecSingValType]   %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.2.i.i.i.i.i_5_206
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.3.i.i.i.i.i_5_214
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_5_214
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_5_209
[handleSelectInst] z3ExprSelectOp2: shl17.i.i.i.i.i_5_213
[handleSelectInst] z3ExprSelectOp3: word.addr.2.i.i.i.i.i_5_206
[handleSelectInst] z3ExprRes: word.addr.3.i.i.i.i.i_5_214
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= word.addr.3.i.i.i.i.i_5_214 shl17.i.i.i.i.i_5_213)
     (= word.addr.3.i.i.i.i.i_5_214 word.addr.2.i.i.i.i.i_5_206))
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool14.not.i.i.i.i.i_5_209
[getBitVecSingValType]   %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub16.i.i.i.i.i_5_211
[getBitVecSingValType]   %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.2.i.i.i.i.i_5_207
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.3.i.i.i.i.i_5_215
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.3.i.i.i.i.i_5_215
[handleSelectInst] z3ExprSelectOp1: tobool14.not.i.i.i.i.i_5_209
[handleSelectInst] z3ExprSelectOp2: sub16.i.i.i.i.i_5_211
[handleSelectInst] z3ExprSelectOp3: num.2.i.i.i.i.i_5_207
[handleSelectInst] z3ExprRes: num.3.i.i.i.i.i_5_215
[handleSelectInst](ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= num.3.i.i.i.i.i_5_215 sub16.i.i.i.i.i_5_211)
     (= num.3.i.i.i.i.i_5_215 num.2.i.i.i.i.i_5_207))
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
[handleICmpInst]
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_5_214
[getBitVecSingValType] i64 4611686018427387904
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x4000000000000000
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: tobool20.not.i.i.i.i.i_5_217
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_5_217
[handleICmpInst] (ite (bvult word.addr.3.i.i.i.i.i_5_214 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= tobool20.not.i.i.i.i.i_5_217 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:20
  (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
  (= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187)
     (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select17.i.i.i.i.i_5_191 #x0000001f)
     (= spec.select17.i.i.i.i.i_5_191 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_5_188 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= tobool2.not.i.i.i.i.i_5_193 #b0))
  (= sub4.i.i.i.i.i_5_195 (bvadd spec.select17.i.i.i.i.i_5_191 #xfffffff0))
  (= shl5.i.i.i.i.i_5_197 (bvshl spec.select.i.i.i.i.i_5_188 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= word.addr.1.i.i.i.i.i_5_198 shl5.i.i.i.i.i_5_197)
     (= word.addr.1.i.i.i.i.i_5_198 spec.select.i.i.i.i.i_5_188))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= num.1.i.i.i.i.i_5_199 sub4.i.i.i.i.i_5_195)
     (= num.1.i.i.i.i.i_5_199 spec.select17.i.i.i.i.i_5_191))
  (ite (bvult word.addr.1.i.i.i.i.i_5_198 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= tobool8.not.i.i.i.i.i_5_201 #b0))
  (= sub10.i.i.i.i.i_5_203 (bvadd num.1.i.i.i.i.i_5_199 #xfffffff8))
  (= shl11.i.i.i.i.i_5_205 (bvshl word.addr.1.i.i.i.i.i_5_198 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= word.addr.2.i.i.i.i.i_5_206 shl11.i.i.i.i.i_5_205)
     (= word.addr.2.i.i.i.i.i_5_206 word.addr.1.i.i.i.i.i_5_198))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= num.2.i.i.i.i.i_5_207 sub10.i.i.i.i.i_5_203)
     (= num.2.i.i.i.i.i_5_207 num.1.i.i.i.i.i_5_199))
  (ite (bvult word.addr.2.i.i.i.i.i_5_206 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= tobool14.not.i.i.i.i.i_5_209 #b0))
  (= sub16.i.i.i.i.i_5_211 (bvadd num.2.i.i.i.i.i_5_207 #xfffffffc))
  (= shl17.i.i.i.i.i_5_213 (bvshl word.addr.2.i.i.i.i.i_5_206 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= word.addr.3.i.i.i.i.i_5_214 shl17.i.i.i.i.i_5_213)
     (= word.addr.3.i.i.i.i.i_5_214 word.addr.2.i.i.i.i.i_5_206))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= num.3.i.i.i.i.i_5_215 sub16.i.i.i.i.i_5_211)
     (= num.3.i.i.i.i.i_5_215 num.2.i.i.i.i.i_5_207))
  (ite (bvult word.addr.3.i.i.i.i.i_5_214 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= tobool20.not.i.i.i.i.i_5_217 #b0))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i32 254
[handleBinaryOperatorInst] opResVal:   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_5_215
[getBitVecSingValType] i32 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000fe
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: sub22.i.i.i.i.i_5_219
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub22.i.i.i.i.i_5_219
[handleBinaryOperatorInst] ADD instruction
(= sub22.i.i.i.i.i_5_219 (bvadd num.3.i.i.i.i.i_5_215 #x000000fe))
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 2
[handleBinaryOperatorInst] opResVal:   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_5_214
[getBitVecSingValType] i64 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000002
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: shl23.i.i.i.i.i_5_221
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] shl23.i.i.i.i.i_5_221
[handleBinaryOperatorInst] SHL instruction
(= shl23.i.i.i.i.i_5_221 (bvshl word.addr.3.i.i.i.i.i_5_214 #x0000000000000002))
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_5_217
[getBitVecSingValType]   %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] shl23.i.i.i.i.i_5_221
[getBitVecSingValType]   %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.3.i.i.i.i.i_5_214
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.i.i.i.i.i_5_222
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_5_222
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_5_217
[handleSelectInst] z3ExprSelectOp2: shl23.i.i.i.i.i_5_221
[handleSelectInst] z3ExprSelectOp3: word.addr.3.i.i.i.i.i_5_214
[handleSelectInst] z3ExprRes: word.addr.4.i.i.i.i.i_5_222
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= word.addr.4.i.i.i.i.i_5_222 shl23.i.i.i.i.i_5_221)
     (= word.addr.4.i.i.i.i.i_5_222 word.addr.3.i.i.i.i.i_5_214))
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool20.not.i.i.i.i.i_5_217
[getBitVecSingValType]   %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub22.i.i.i.i.i_5_219
[getBitVecSingValType]   %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.3.i.i.i.i.i_5_215
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: num.4.i.i.i.i.i_5_223
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] num.4.i.i.i.i.i_5_223
[handleSelectInst] z3ExprSelectOp1: tobool20.not.i.i.i.i.i_5_217
[handleSelectInst] z3ExprSelectOp2: sub22.i.i.i.i.i_5_219
[handleSelectInst] z3ExprSelectOp3: num.3.i.i.i.i.i_5_215
[handleSelectInst] z3ExprRes: num.4.i.i.i.i.i_5_223
[handleSelectInst](ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= num.4.i.i.i.i.i_5_223 sub22.i.i.i.i.i_5_219)
     (= num.4.i.i.i.i.i_5_223 num.3.i.i.i.i.i_5_215))
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val: i64 63
[handleBinaryOperatorInst] opResVal:   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType]   %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.i.i.i.i.i_5_222
[getBitVecSingValType] i64 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000000000003f
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: word.addr.4.lobit.i.i.i.i.i.neg_5_225
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_5_225
[handleBinaryOperatorInst] LSHR instruction
(= word.addr.4.lobit.i.i.i.i.i.neg_5_225
   (bvlshr word.addr.4.i.i.i.i.i_5_222 #x000000000000003f))
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
[handleCastInst]
[getBitVecSingValType]   %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] word.addr.4.lobit.i.i.i.i.i.neg_5_225
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: i.i.i.i.i.i.neg_5_226
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_5_226
[handleCastInst] TRUNC instruction
(= i.i.i.i.i.i.neg_5_226
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_5_225))
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[handleBinaryOperatorInst] opResVal:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType]   %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] num.4.i.i.i.i.i_5_223
[getBitVecSingValType]   %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i.i.i.i.i.neg_5_226
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: add.i.i.i335.i_5_227
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] add.i.i.i335.i_5_227
[handleBinaryOperatorInst] ADD instruction
(= add.i.i.i335.i_5_227 (bvadd num.4.i.i.i.i.i_5_223 i.i.i.i.i.i.neg_5_226))
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[handleBinaryOperatorInst] op1Val: i32 255
[handleBinaryOperatorInst] opResVal:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType]   %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] add.i.i.i335.i_5_227
[getBitVecSingValType] i32 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x000000ff
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: phi.bo_5_229
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] phi.bo_5_229
[handleBinaryOperatorInst] AND instruction
(= phi.bo_5_229 (bvand add.i.i.i335.i_5_227 #x000000ff))
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 1
[handlePhiNodeSetupBitVecs]phiInstValue:  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[handlePhiNodeSetupBitVecs] valueI:   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBool] returning unique bool w/ prefix: if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
[handlePhiNodeSetupBitVecs] valueI: i32 0
[getBool] returning unique bool w/ prefix: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
[handlePhiNodeSetupBitVecs] printPhiMap: 
retval.0.i.i.i.i : [<phi.bo, if.end.i.i.i.i>, <, __reg_deduce_bounds.exit.i>, ]
i246.i : [<, lor.lhs.false20.i>, <tobool.not.i25.i, land.lhs.true.i>, ]
[handlePhiNodeSetupBitVecs] PhiResolutionMap: 
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
<if.end.i.i.i.i, __reg_bound_offset.exit.i>: if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
<land.lhs.true.i, if.end27.i>: land.lhs.true.i_if.end27.i_5_63
<lor.lhs.false20.i, if.end27.i>: lor.lhs.false20.i_if.end27.i_5_62
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVec] returning unique bitvector w/ prefix: retval.0.i.i.i.i_5_232
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.0.i.i.i.i_5_232
[handlePhiNodeSetupBitVecs] phi is a not a pointer value type: 
[getBitVecSingValType]   %phi.bo = and i32 %add.i.i.i335.i, 255
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] phi.bo_5_229
[handlePhiNodeSetupBitVecs] phiConditionBoolI: if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
    (= retval.0.i.i.i.i_5_232 phi.bo_5_229))
[getBitVecSingValType] i32 0
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x00000000
[handlePhiNodeSetupBitVecs] phiConditionBoolI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
[handlePhiNodeSetupBitVecs] phiEncodingI: (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
    (= retval.0.i.i.i.i_5_232 #x00000000))
[handlePhiNodeSetupBitVecs] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
    (= retval.0.i.i.i.i_5_232 phi.bo_5_229))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
    (= retval.0.i.i.i.i_5_232 #x00000000))

-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
[handleICmpInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_5_232
[getBitVecSingValType] i32 63
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000003f
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVec] returning unique bitvector w/ prefix: cmp.i.i.i_5_235
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] cmp.i.i.i_5_235
[handleICmpInst] (ite (bvugt retval.0.i.i.i.i_5_232 #x0000003f)
     (= cmp.i.i.i_5_235 #b1)
     (= cmp.i.i.i_5_235 #b0))
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
  (= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187)
     (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select17.i.i.i.i.i_5_191 #x0000001f)
     (= spec.select17.i.i.i.i.i_5_191 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_5_188 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= tobool2.not.i.i.i.i.i_5_193 #b0))
  (= sub4.i.i.i.i.i_5_195 (bvadd spec.select17.i.i.i.i.i_5_191 #xfffffff0))
  (= shl5.i.i.i.i.i_5_197 (bvshl spec.select.i.i.i.i.i_5_188 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= word.addr.1.i.i.i.i.i_5_198 shl5.i.i.i.i.i_5_197)
     (= word.addr.1.i.i.i.i.i_5_198 spec.select.i.i.i.i.i_5_188))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= num.1.i.i.i.i.i_5_199 sub4.i.i.i.i.i_5_195)
     (= num.1.i.i.i.i.i_5_199 spec.select17.i.i.i.i.i_5_191))
  (ite (bvult word.addr.1.i.i.i.i.i_5_198 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= tobool8.not.i.i.i.i.i_5_201 #b0))
  (= sub10.i.i.i.i.i_5_203 (bvadd num.1.i.i.i.i.i_5_199 #xfffffff8))
  (= shl11.i.i.i.i.i_5_205 (bvshl word.addr.1.i.i.i.i.i_5_198 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= word.addr.2.i.i.i.i.i_5_206 shl11.i.i.i.i.i_5_205)
     (= word.addr.2.i.i.i.i.i_5_206 word.addr.1.i.i.i.i.i_5_198))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= num.2.i.i.i.i.i_5_207 sub10.i.i.i.i.i_5_203)
     (= num.2.i.i.i.i.i_5_207 num.1.i.i.i.i.i_5_199))
  (ite (bvult word.addr.2.i.i.i.i.i_5_206 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= tobool14.not.i.i.i.i.i_5_209 #b0))
  (= sub16.i.i.i.i.i_5_211 (bvadd num.2.i.i.i.i.i_5_207 #xfffffffc))
  (= shl17.i.i.i.i.i_5_213 (bvshl word.addr.2.i.i.i.i.i_5_206 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= word.addr.3.i.i.i.i.i_5_214 shl17.i.i.i.i.i_5_213)
     (= word.addr.3.i.i.i.i.i_5_214 word.addr.2.i.i.i.i.i_5_206))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= num.3.i.i.i.i.i_5_215 sub16.i.i.i.i.i_5_211)
     (= num.3.i.i.i.i.i_5_215 num.2.i.i.i.i.i_5_207))
  (ite (bvult word.addr.3.i.i.i.i.i_5_214 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= tobool20.not.i.i.i.i.i_5_217 #b0))
  (= sub22.i.i.i.i.i_5_219 (bvadd num.3.i.i.i.i.i_5_215 #x000000fe))
  (= shl23.i.i.i.i.i_5_221 (bvshl word.addr.3.i.i.i.i.i_5_214 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= word.addr.4.i.i.i.i.i_5_222 shl23.i.i.i.i.i_5_221)
     (= word.addr.4.i.i.i.i.i_5_222 word.addr.3.i.i.i.i.i_5_214))
  (ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= num.4.i.i.i.i.i_5_223 sub22.i.i.i.i.i_5_219)
     (= num.4.i.i.i.i.i_5_223 num.3.i.i.i.i.i_5_215))
  (= word.addr.4.lobit.i.i.i.i.i.neg_5_225
   (bvlshr word.addr.4.i.i.i.i.i_5_222 #x000000000000003f))
  (= i.i.i.i.i.i.neg_5_226
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_5_225))
  (= add.i.i.i335.i_5_227 (bvadd num.4.i.i.i.i.i_5_223 i.i.i.i.i.i.neg_5_226))
  (= phi.bo_5_229 (bvand add.i.i.i335.i_5_227 #x000000ff))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: __reg_bound_offset.exit.i, Size:3
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
    (= retval.0.i.i.i.i_5_232 phi.bo_5_229))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
    (= retval.0.i.i.i.i_5_232 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_5_232 #x0000003f)
     (= cmp.i.i.i_5_235 #b1)
     (= cmp.i.i.i_5_235 #b0))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
[handleCastInst]
[getBitVecSingValType]   %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
[getBitVecSingValType] type: i32
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.0.i.i.i.i_5_232
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sh_prom.i.i.i_5_236
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sh_prom.i.i.i_5_236
[handleCastInst]ZEXT instruction
(= sh_prom.i.i.i_5_236 ((_ zero_extend 32) retval.0.i.i.i.i_5_232))
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val: i64 -1
[handleBinaryOperatorInst] op1Val:   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[handleBinaryOperatorInst] opResVal:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sh_prom.i.i.i_5_236
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: notmask.i.i.i_5_238
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] notmask.i.i.i_5_238
[handleBinaryOperatorInst] SHL instruction
(= notmask.i.i.i_5_238 (bvshl #xffffffffffffffff sh_prom.i.i.i_5_236))
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_5_238
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: sub.i.i.i_5_240
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] sub.i.i.i_5_240
[handleBinaryOperatorInst] XOR instruction
(= sub.i.i.i_5_240 (bvxor notmask.i.i.i_5_238 #xffffffffffffffff))
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[handleBinaryOperatorInst] op1Val:   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType]   %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] notmask.i.i.i_5_238
[getBitVecSingValType]   %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i.i333.i_5_179
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i.i336.i_5_241
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i.i336.i_5_241
[handleBinaryOperatorInst] AND instruction
(= and.i.i336.i_5_241 (bvand notmask.i.i.i_5_238 i.i333.i_5_179))
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_5_235
[getBitVecSingValType] i64 0
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #x0000000000000000
[getBitVecSingValType]   %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i.i336.i_5_241
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.0.0.i.i.i_5_243
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_5_243
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_5_235
[handleSelectInst] z3ExprSelectOp2: #x0000000000000000
[handleSelectInst] z3ExprSelectOp3: and.i.i336.i_5_241
[handleSelectInst] z3ExprRes: retval.sroa.0.0.i.i.i_5_243
[handleSelectInst](ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.0.0.i.i.i_5_243 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_5_243 and.i.i336.i_5_241))
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
[handleSelectInst]
[handleSelectInst]mostRecentMemoryDef: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleSelectInst]SelectMap:
num.3.i.i.i.i.i,sub16.i.i.i.i.i,num.2.i.i.i.i.i
num.2.i.i.i.i.i,sub10.i.i.i.i.i,num.1.i.i.i.i.i
word.addr.1.i.i.i.i.i,shl5.i.i.i.i.i,spec.select.i.i.i.i.i
spec.select.i.i.i.i.i,shl.i.i.i.i.i,xor.i.i.i
spec.select17.i.i.i.i.i,,
or.cond199.i,,cmp24.i
word.addr.2.i.i.i.i.i,shl11.i.i.i.i.i,word.addr.1.i.i.i.i.i
cond14.i135.i,.cond184.i,or8.i133.i
cond184.i,i251.i,src_reg1.sroa.22.0.copyload
retval.sroa.3.0.i.i.i,,sub.i.i.i
num.4.i.i.i.i.i,sub22.i.i.i.i.i,num.3.i.i.i.i.i
word.addr.3.i.i.i.i.i,shl17.i.i.i.i.i,word.addr.2.i.i.i.i.i
or.cond200.i,,cmp24.old.i
cond27.i.i,i33.i.i,i37.i.i
or.cond3.i,,cmp190.i
..i,,and.i116.i
retval.sroa.0.0.i.i.i,,and.i.i336.i
word.addr.4.i.i.i.i.i,shl23.i.i.i.i.i,word.addr.3.i.i.i.i.i
.cond184.i,,cond184.i
cond12.i.i,i35.i.i,i36.i.i
num.1.i.i.i.i.i,sub4.i.i.i.i.i,spec.select17.i.i.i.i.i
cond.i129.i,..i,or.i127.i
cond40.i.i,i.i322.i,i38.i.i
or.cond197.i,,cmp18.not.i
cond35.i144.i,cond184.i,and8.i117.i
cond.i327.i,i.i322.i,i34.i.i
[handleSelectInst]select instruction is not a pointer type:
[getBitVecSingValType]   %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i_5_235
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %sub.i.i.i = xor i64 %notmask.i.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] sub.i.i.i_5_240
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: retval.sroa.3.0.i.i.i_5_245
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_5_245
[handleSelectInst] z3ExprSelectOp1: cmp.i.i.i_5_235
[handleSelectInst] z3ExprSelectOp2: #xffffffffffffffff
[handleSelectInst] z3ExprSelectOp3: sub.i.i.i_5_240
[handleSelectInst] z3ExprRes: retval.sroa.3.0.i.i.i_5_245
[handleSelectInst](ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.3.0.i.i.i_5_245 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_5_245 sub.i.i.i_5_240))
-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleLoadInst] pointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
umin_value.i332.i, dst_reg, [8]
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i9.i.i_5_246
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i9.i.i_5_246
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 0 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleLoadInst] (= dst_reg_5_104 i9.i.i_5_246)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
  (= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187)
     (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select17.i.i.i.i.i_5_191 #x0000001f)
     (= spec.select17.i.i.i.i.i_5_191 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_5_188 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= tobool2.not.i.i.i.i.i_5_193 #b0))
  (= sub4.i.i.i.i.i_5_195 (bvadd spec.select17.i.i.i.i.i_5_191 #xfffffff0))
  (= shl5.i.i.i.i.i_5_197 (bvshl spec.select.i.i.i.i.i_5_188 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= word.addr.1.i.i.i.i.i_5_198 shl5.i.i.i.i.i_5_197)
     (= word.addr.1.i.i.i.i.i_5_198 spec.select.i.i.i.i.i_5_188))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= num.1.i.i.i.i.i_5_199 sub4.i.i.i.i.i_5_195)
     (= num.1.i.i.i.i.i_5_199 spec.select17.i.i.i.i.i_5_191))
  (ite (bvult word.addr.1.i.i.i.i.i_5_198 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= tobool8.not.i.i.i.i.i_5_201 #b0))
  (= sub10.i.i.i.i.i_5_203 (bvadd num.1.i.i.i.i.i_5_199 #xfffffff8))
  (= shl11.i.i.i.i.i_5_205 (bvshl word.addr.1.i.i.i.i.i_5_198 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= word.addr.2.i.i.i.i.i_5_206 shl11.i.i.i.i.i_5_205)
     (= word.addr.2.i.i.i.i.i_5_206 word.addr.1.i.i.i.i.i_5_198))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= num.2.i.i.i.i.i_5_207 sub10.i.i.i.i.i_5_203)
     (= num.2.i.i.i.i.i_5_207 num.1.i.i.i.i.i_5_199))
  (ite (bvult word.addr.2.i.i.i.i.i_5_206 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= tobool14.not.i.i.i.i.i_5_209 #b0))
  (= sub16.i.i.i.i.i_5_211 (bvadd num.2.i.i.i.i.i_5_207 #xfffffffc))
  (= shl17.i.i.i.i.i_5_213 (bvshl word.addr.2.i.i.i.i.i_5_206 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= word.addr.3.i.i.i.i.i_5_214 shl17.i.i.i.i.i_5_213)
     (= word.addr.3.i.i.i.i.i_5_214 word.addr.2.i.i.i.i.i_5_206))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= num.3.i.i.i.i.i_5_215 sub16.i.i.i.i.i_5_211)
     (= num.3.i.i.i.i.i_5_215 num.2.i.i.i.i.i_5_207))
  (ite (bvult word.addr.3.i.i.i.i.i_5_214 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= tobool20.not.i.i.i.i.i_5_217 #b0))
  (= sub22.i.i.i.i.i_5_219 (bvadd num.3.i.i.i.i.i_5_215 #x000000fe))
  (= shl23.i.i.i.i.i_5_221 (bvshl word.addr.3.i.i.i.i.i_5_214 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= word.addr.4.i.i.i.i.i_5_222 shl23.i.i.i.i.i_5_221)
     (= word.addr.4.i.i.i.i.i_5_222 word.addr.3.i.i.i.i.i_5_214))
  (ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= num.4.i.i.i.i.i_5_223 sub22.i.i.i.i.i_5_219)
     (= num.4.i.i.i.i.i_5_223 num.3.i.i.i.i.i_5_215))
  (= word.addr.4.lobit.i.i.i.i.i.neg_5_225
   (bvlshr word.addr.4.i.i.i.i.i_5_222 #x000000000000003f))
  (= i.i.i.i.i.i.neg_5_226
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_5_225))
  (= add.i.i.i335.i_5_227 (bvadd num.4.i.i.i.i.i_5_223 i.i.i.i.i.i.neg_5_226))
  (= phi.bo_5_229 (bvand add.i.i.i335.i_5_227 #x000000ff))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: __reg_bound_offset.exit.i, Size:10
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
    (= retval.0.i.i.i.i_5_232 phi.bo_5_229))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
    (= retval.0.i.i.i.i_5_232 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_5_232 #x0000003f)
     (= cmp.i.i.i_5_235 #b1)
     (= cmp.i.i.i_5_235 #b0))
  (= sh_prom.i.i.i_5_236 ((_ zero_extend 32) retval.0.i.i.i.i_5_232))
  (= notmask.i.i.i_5_238 (bvshl #xffffffffffffffff sh_prom.i.i.i_5_236))
  (= sub.i.i.i_5_240 (bvxor notmask.i.i.i_5_238 #xffffffffffffffff))
  (= and.i.i336.i_5_241 (bvand notmask.i.i.i_5_238 i.i333.i_5_179))
  (ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.0.0.i.i.i_5_243 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_5_243 and.i.i336.i_5_241))
  (ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.3.0.i.i.i_5_245 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_5_245 sub.i.i.i_5_240))
  (= dst_reg_5_104 i9.i.i_5_246)
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
[handleLoadInst] 
[handleLoadInst] loadInstValue:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleLoadInst] pointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleLoadInst] pointerType: i64*
[handleLoadInst] pointerBaseType: i64
[handleLoadInst] definingAccess: 41 = MemoryPhi({if.then166.i,16},{if.end171.i,26})
[handleLoadInst] load pointer came from a GEP
[handleLoadInst] GEPMap:
umax_value.i334.i, dst_reg, [9]
umin_value.i332.i, dst_reg, [8]
umin_value18.i.i, dst_reg, [8]
umax_value15.i.i, dst_reg, [9]
umax_value.i328.i, dst_reg, [9]
frameno.i.i, dst_reg, [11]
var_off.i.i.repack1, dst_reg, [5, 1]
src_reg1.sroa.15.0..sroa_idx9, src_reg, [7]
i213.i, dst_reg, [5, 0]
i214.i, dst_reg, [5, 1]
smax_value199.i, dst_reg, [7]
src_reg1.sroa.13.0..sroa_idx7, src_reg, [6]
src_reg1.sroa.17.0..sroa_idx11, src_reg, [8]
var_off.i.i.repack, dst_reg, [5, 0]
type1, src_reg, [0]
src_reg1.sroa.10.0..sroa_idx5, src_reg, [5, 1]
smin_value.i.i.i, dst_reg, [6]
type, dst_reg, [0]
smax_value.i.i.i, dst_reg, [7]
smin_value.i321.i, dst_reg, [6]
umin_value.i.i.i, dst_reg, [8]
umin_value179.i, dst_reg, [8]
umax_value.i.i.i, dst_reg, [9]
src_reg1.sroa.22.0..sroa_idx13, src_reg, [9]
smin_value.i111.i, dst_reg, [6]
smax_value.i112.i, dst_reg, [7]
umin_value.i113.i, dst_reg, [8]
src_reg1.sroa.3.0..sroa_idx3, src_reg, [5, 0]
umax_value.i114.i, dst_reg, [9]
umin_value.i326.i, dst_reg, [8]
umax_value180.i, dst_reg, [9]
smin_value186.i, dst_reg, [6]
smax_value.i324.i, dst_reg, [7]
smax_value6.i.i, dst_reg, [7]
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: i11.i.i_5_247
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] i11.i.i_5_247
[handleLoadInst] oldValueBVTreeMap:
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 

[handleLoadInst] GEPMapValue: dst_reg
[handleLoadInst] GEPMapIndices: [ 5 1 ]
[handleLoadInst] parentBVTree: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
[handleLoadInst] (= dst_reg_5_105 i11.i.i_5_247)
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
  (= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187)
     (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select17.i.i.i.i.i_5_191 #x0000001f)
     (= spec.select17.i.i.i.i.i_5_191 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_5_188 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= tobool2.not.i.i.i.i.i_5_193 #b0))
  (= sub4.i.i.i.i.i_5_195 (bvadd spec.select17.i.i.i.i.i_5_191 #xfffffff0))
  (= shl5.i.i.i.i.i_5_197 (bvshl spec.select.i.i.i.i.i_5_188 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= word.addr.1.i.i.i.i.i_5_198 shl5.i.i.i.i.i_5_197)
     (= word.addr.1.i.i.i.i.i_5_198 spec.select.i.i.i.i.i_5_188))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= num.1.i.i.i.i.i_5_199 sub4.i.i.i.i.i_5_195)
     (= num.1.i.i.i.i.i_5_199 spec.select17.i.i.i.i.i_5_191))
  (ite (bvult word.addr.1.i.i.i.i.i_5_198 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= tobool8.not.i.i.i.i.i_5_201 #b0))
  (= sub10.i.i.i.i.i_5_203 (bvadd num.1.i.i.i.i.i_5_199 #xfffffff8))
  (= shl11.i.i.i.i.i_5_205 (bvshl word.addr.1.i.i.i.i.i_5_198 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= word.addr.2.i.i.i.i.i_5_206 shl11.i.i.i.i.i_5_205)
     (= word.addr.2.i.i.i.i.i_5_206 word.addr.1.i.i.i.i.i_5_198))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= num.2.i.i.i.i.i_5_207 sub10.i.i.i.i.i_5_203)
     (= num.2.i.i.i.i.i_5_207 num.1.i.i.i.i.i_5_199))
  (ite (bvult word.addr.2.i.i.i.i.i_5_206 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= tobool14.not.i.i.i.i.i_5_209 #b0))
  (= sub16.i.i.i.i.i_5_211 (bvadd num.2.i.i.i.i.i_5_207 #xfffffffc))
  (= shl17.i.i.i.i.i_5_213 (bvshl word.addr.2.i.i.i.i.i_5_206 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= word.addr.3.i.i.i.i.i_5_214 shl17.i.i.i.i.i_5_213)
     (= word.addr.3.i.i.i.i.i_5_214 word.addr.2.i.i.i.i.i_5_206))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= num.3.i.i.i.i.i_5_215 sub16.i.i.i.i.i_5_211)
     (= num.3.i.i.i.i.i_5_215 num.2.i.i.i.i.i_5_207))
  (ite (bvult word.addr.3.i.i.i.i.i_5_214 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= tobool20.not.i.i.i.i.i_5_217 #b0))
  (= sub22.i.i.i.i.i_5_219 (bvadd num.3.i.i.i.i.i_5_215 #x000000fe))
  (= shl23.i.i.i.i.i_5_221 (bvshl word.addr.3.i.i.i.i.i_5_214 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= word.addr.4.i.i.i.i.i_5_222 shl23.i.i.i.i.i_5_221)
     (= word.addr.4.i.i.i.i.i_5_222 word.addr.3.i.i.i.i.i_5_214))
  (ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= num.4.i.i.i.i.i_5_223 sub22.i.i.i.i.i_5_219)
     (= num.4.i.i.i.i.i_5_223 num.3.i.i.i.i.i_5_215))
  (= word.addr.4.lobit.i.i.i.i.i.neg_5_225
   (bvlshr word.addr.4.i.i.i.i.i_5_222 #x000000000000003f))
  (= i.i.i.i.i.i.neg_5_226
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_5_225))
  (= add.i.i.i335.i_5_227 (bvadd num.4.i.i.i.i.i_5_223 i.i.i.i.i.i.neg_5_226))
  (= phi.bo_5_229 (bvand add.i.i.i335.i_5_227 #x000000ff))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:4
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:2
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: __reg_bound_offset.exit.i, Size:11
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
    (= retval.0.i.i.i.i_5_232 phi.bo_5_229))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
    (= retval.0.i.i.i.i_5_232 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_5_232 #x0000003f)
     (= cmp.i.i.i_5_235 #b1)
     (= cmp.i.i.i_5_235 #b0))
  (= sh_prom.i.i.i_5_236 ((_ zero_extend 32) retval.0.i.i.i.i_5_232))
  (= notmask.i.i.i_5_238 (bvshl #xffffffffffffffff sh_prom.i.i.i_5_236))
  (= sub.i.i.i_5_240 (bvxor notmask.i.i.i_5_238 #xffffffffffffffff))
  (= and.i.i336.i_5_241 (bvand notmask.i.i.i_5_238 i.i333.i_5_179))
  (ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.0.0.i.i.i_5_243 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_5_243 and.i.i336.i_5_241))
  (ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.3.0.i.i.i_5_245 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_5_245 sub.i.i.i_5_240))
  (= dst_reg_5_104 i9.i.i_5_246)
  (= dst_reg_5_105 i11.i.i_5_247)
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:3
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[handleBinaryOperatorInst] op1Val:   %i9.i.i = load i64, i64* %i213.i, align 8
[handleBinaryOperatorInst] opResVal:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType]   %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.0.0.i.i.i_5_243
[getBitVecSingValType]   %i9.i.i = load i64, i64* %i213.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i9.i.i_5_246
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: or.i.i.i_5_248
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] or.i.i.i_5_248
[handleBinaryOperatorInst] OR instruction
(= or.i.i.i_5_248 (bvor retval.sroa.0.0.i.i.i_5_243 i9.i.i_5_246))
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[handleBinaryOperatorInst] op1Val:   %i11.i.i = load i64, i64* %i214.i, align 8
[handleBinaryOperatorInst] opResVal:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType]   %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] retval.sroa.3.0.i.i.i_5_245
[getBitVecSingValType]   %i11.i.i = load i64, i64* %i214.i, align 8
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i11.i.i_5_247
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and.i1.i.i_5_249
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and.i1.i.i_5_249
[handleBinaryOperatorInst] AND instruction
(= and.i1.i.i_5_249 (bvand retval.sroa.3.0.i.i.i_5_245 i11.i.i_5_247))
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[handleBinaryOperatorInst] op1Val: i64 -1
[handleBinaryOperatorInst] opResVal:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_5_249
[getBitVecSingValType] i64 -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning new constBV
[getBitVecSingValType] #xffffffffffffffff
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: neg.i.i.i_5_251
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] neg.i.i.i_5_251
[handleBinaryOperatorInst] XOR instruction
(= neg.i.i.i_5_251 (bvxor and.i1.i.i_5_249 #xffffffffffffffff))
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
[handleBinaryOperatorInst]
[handleBinaryOperatorInst] op0Val:   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[handleBinaryOperatorInst] op1Val:   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[handleBinaryOperatorInst] opResVal:   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType]   %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.i.i.i_5_248
[getBitVecSingValType]   %neg.i.i.i = xor i64 %and.i1.i.i, -1
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] neg.i.i.i_5_251
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVec] returning unique bitvector w/ prefix: and4.i.i.i_5_252
[getBitVecSingValType] returning new BV
 [getBitVecSingValType] and4.i.i.i_5_252
[handleBinaryOperatorInst] AND instruction
(= and4.i.i.i_5_252 (bvand or.i.i.i_5_248 neg.i.i.i_5_251))
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and4.i.i.i_5_252
[handleStoreInst] BVToStore: and4.i.i.i_5_252
[handleStoreInst] destPointerValue:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreInst] storeMemoryAccess: 37 = MemoryDef(39)
[handleStoreInst] definingMemoryAccess: 39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36})
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
[handleStoreToGEPPtr] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 0 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_155 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and4.i.i.i_5_252 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
37 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ i37.i.i_5_141 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
34 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36}) : {
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
[handleStoreInst] 
[getBitVecSingValType]   %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
[getBitVecSingValType] type: i64
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] and.i1.i.i_5_249
[handleStoreInst] BVToStore: and.i1.i.i_5_249
[handleStoreInst] destPointerValue:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreInst] storeMemoryAccess: 38 = MemoryDef(37)
[handleStoreInst] definingMemoryAccess: 37 = MemoryDef(39)
[handleStoreInst] newValueBVTreeMap (copied from oldValueBVTreeMap):
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
[handleStoreToGEPPtr] 
[handleStoreToGEPPtr] GEPInst:   %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
[handleStoreToGEPPtr] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtr] GEPargVal: %struct.bpf_reg_state* %dst_reg
[handleStoreToGEPPtr] Store pointer came from a GEP that (directly or indirectly) indexes into a function argument
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapValue: dst_reg
[handleStoreToGEPPtrDerivedFromFunctionArg] GEPMapIndices: [ 5 1 ]
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree: [ dst_reg_5_156 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] subTree updated: [ and.i1.i.i_5_249 ] 
[handleStoreToGEPPtrDerivedFromFunctionArg] MemoryAccessValueBVTreeMap:
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ and.i1.i.i_5_249 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
}
37 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ i37.i.i_5_141 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
34 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36}) : {
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 1
[handleBranchInst] nothing to do, returning...
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #1
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_253
[lookInsideStruct] singleValueType:dst_reg_5_253
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_254
[lookInsideStruct] singleValueType:dst_reg_5_254
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_255
[lookInsideStruct] singleValueType:dst_reg_5_255
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_256
[lookInsideStruct] singleValueType:dst_reg_5_256
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_257
[lookInsideStruct] singleValueType:dst_reg_5_257
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_258
[lookInsideStruct] singleValueType:dst_reg_5_258
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_259
[lookInsideStruct] singleValueType:dst_reg_5_259
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_260
[lookInsideStruct] singleValueType:dst_reg_5_260
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_261
[lookInsideStruct] singleValueType:dst_reg_5_261
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_262
[lookInsideStruct] singleValueType:dst_reg_5_262
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_263
[lookInsideStruct] singleValueType:dst_reg_5_263
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_264
[lookInsideStruct] singleValueType:dst_reg_5_264
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_265
[lookInsideStruct] singleValueType:dst_reg_5_265
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_266
[lookInsideStruct] singleValueType:dst_reg_5_266
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_5_253 ] [ ] [ dst_reg_5_254 ] [ dst_reg_5_255 ] [ dst_reg_5_256 ] [ [ dst_reg_5_257 ] [ dst_reg_5_258 ] ] [ dst_reg_5_259 ] [ dst_reg_5_260 ] [ dst_reg_5_261 ] [ dst_reg_5_262 ] [ ] [ dst_reg_5_263 ] [ dst_reg_5_264 ] [ dst_reg_5_265 ] [ dst_reg_5_266 ] ] 
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_267
[lookInsideStruct] singleValueType:src_reg_5_267
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_268
[lookInsideStruct] singleValueType:src_reg_5_268
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_269
[lookInsideStruct] singleValueType:src_reg_5_269
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_270
[lookInsideStruct] singleValueType:src_reg_5_270
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_271
[lookInsideStruct] singleValueType:src_reg_5_271
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_272
[lookInsideStruct] singleValueType:src_reg_5_272
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_273
[lookInsideStruct] singleValueType:src_reg_5_273
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_274
[lookInsideStruct] singleValueType:src_reg_5_274
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_275
[lookInsideStruct] singleValueType:src_reg_5_275
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_276
[lookInsideStruct] singleValueType:src_reg_5_276
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_277
[lookInsideStruct] singleValueType:src_reg_5_277
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_278
[lookInsideStruct] singleValueType:src_reg_5_278
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_279
[lookInsideStruct] singleValueType:src_reg_5_279
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_280
[lookInsideStruct] singleValueType:src_reg_5_280
[setupBVTreeForArg] returning BVTree: [ [ src_reg_5_267 ] [ ] [ src_reg_5_268 ] [ src_reg_5_269 ] [ src_reg_5_270 ] [ [ src_reg_5_271 ] [ src_reg_5_272 ] ] [ src_reg_5_273 ] [ src_reg_5_274 ] [ src_reg_5_275 ] [ src_reg_5_276 ] [ ] [ src_reg_5_277 ] [ src_reg_5_278 ] [ src_reg_5_279 ] [ src_reg_5_280 ] ] 
[handleMemoryPhiNode] phiBVTreeMap: 
- src_reg: [ [ src_reg_5_267 ] [ ] [ src_reg_5_268 ] [ src_reg_5_269 ] [ src_reg_5_270 ] [ [ src_reg_5_271 ] [ src_reg_5_272 ] ] [ src_reg_5_273 ] [ src_reg_5_274 ] [ src_reg_5_275 ] [ src_reg_5_276 ] [ ] [ src_reg_5_277 ] [ src_reg_5_278 ] [ src_reg_5_279 ] [ src_reg_5_280 ] ] 
- dst_reg: [ [ dst_reg_5_253 ] [ ] [ dst_reg_5_254 ] [ dst_reg_5_255 ] [ dst_reg_5_256 ] [ [ dst_reg_5_257 ] [ dst_reg_5_258 ] ] [ dst_reg_5_259 ] [ dst_reg_5_260 ] [ dst_reg_5_261 ] [ dst_reg_5_262 ] [ ] [ dst_reg_5_263 ] [ dst_reg_5_264 ] [ dst_reg_5_265 ] [ dst_reg_5_266 ] ] 

[handleMemoryPhiNode] incomingBBI: if.then26.i
[handleMemoryPhiNode] incomingAccessI: 10 = MemoryDef(9)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_5_267 ] [ ] [ src_reg_5_268 ] [ src_reg_5_269 ] [ src_reg_5_270 ] [ [ src_reg_5_271 ] [ src_reg_5_272 ] ] [ src_reg_5_273 ] [ src_reg_5_274 ] [ src_reg_5_275 ] [ src_reg_5_276 ] [ ] [ src_reg_5_277 ] [ src_reg_5_278 ] [ src_reg_5_279 ] [ src_reg_5_280 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_5_253 ] [ ] [ dst_reg_5_254 ] [ dst_reg_5_255 ] [ dst_reg_5_256 ] [ [ dst_reg_5_257 ] [ dst_reg_5_258 ] ] [ dst_reg_5_259 ] [ dst_reg_5_260 ] [ dst_reg_5_261 ] [ dst_reg_5_262 ] [ ] [ dst_reg_5_263 ] [ dst_reg_5_264 ] [ dst_reg_5_265 ] [ dst_reg_5_266 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= #x00000001 src_reg_5_267)
(= src_reg_5_15 src_reg_5_268)
(= src_reg_5_16 src_reg_5_269)
(= src_reg_5_17 src_reg_5_270)
(= src_reg_5_18 src_reg_5_271)
(= src_reg_5_19 src_reg_5_272)
(= src_reg_5_20 src_reg_5_273)
(= src_reg_5_21 src_reg_5_274)
(= src_reg_5_22 src_reg_5_275)
(= src_reg_5_23 src_reg_5_276)
(= src_reg_5_24 src_reg_5_277)
(= src_reg_5_25 src_reg_5_278)
(= src_reg_5_26 src_reg_5_279)
(= src_reg_5_27 src_reg_5_280)
(= #x00000001 dst_reg_5_253)
(= dst_reg_5_1 dst_reg_5_254)
(= dst_reg_5_2 dst_reg_5_255)
(= dst_reg_5_3 dst_reg_5_256)
(= #x0000000000000000 dst_reg_5_257)
(= #xffffffffffffffff dst_reg_5_258)
(= #x8000000000000000 dst_reg_5_259)
(= #x7fffffffffffffff dst_reg_5_260)
(= #x0000000000000000 dst_reg_5_261)
(= #xffffffffffffffff dst_reg_5_262)
(= #x00000000 dst_reg_5_263)
(= dst_reg_5_11 dst_reg_5_264)
(= dst_reg_5_12 dst_reg_5_265)
(= dst_reg_5_13 dst_reg_5_266)
]
[handleMemoryPhiNode] incomingBBI: __reg_bound_offset.exit.i
[handleMemoryPhiNode] incomingAccessI: 38 = MemoryDef(37)
[handleMemoryPhiNode] oldVBVTreeMapI: 
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ and.i1.i.i_5_249 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 

[handleMemoryPhiNode] oldTreeArgI: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ src_reg_5_267 ] [ ] [ src_reg_5_268 ] [ src_reg_5_269 ] [ src_reg_5_270 ] [ [ src_reg_5_271 ] [ src_reg_5_272 ] ] [ src_reg_5_273 ] [ src_reg_5_274 ] [ src_reg_5_275 ] [ src_reg_5_276 ] [ ] [ src_reg_5_277 ] [ src_reg_5_278 ] [ src_reg_5_279 ] [ src_reg_5_280 ] ] 
[handleMemoryPhiNode] oldTreeArgI: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ and.i1.i.i_5_249 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
[handleMemoryPhiNode] phiTreeArgI: [ [ dst_reg_5_253 ] [ ] [ dst_reg_5_254 ] [ dst_reg_5_255 ] [ dst_reg_5_256 ] [ [ dst_reg_5_257 ] [ dst_reg_5_258 ] ] [ dst_reg_5_259 ] [ dst_reg_5_260 ] [ dst_reg_5_261 ] [ dst_reg_5_262 ] [ ] [ dst_reg_5_263 ] [ dst_reg_5_264 ] [ dst_reg_5_265 ] [ dst_reg_5_266 ] ] 
[handleMemoryPhiNode] getEquivVector: [(= src_reg_5_165 src_reg_5_267)
(= src_reg_5_166 src_reg_5_268)
(= src_reg_5_167 src_reg_5_269)
(= src_reg_5_168 src_reg_5_270)
(= src_reg_5_169 src_reg_5_271)
(= src_reg_5_170 src_reg_5_272)
(= src_reg_5_171 src_reg_5_273)
(= src_reg_5_172 src_reg_5_274)
(= src_reg_5_173 src_reg_5_275)
(= src_reg_5_174 src_reg_5_276)
(= src_reg_5_175 src_reg_5_277)
(= src_reg_5_176 src_reg_5_278)
(= src_reg_5_177 src_reg_5_279)
(= src_reg_5_178 src_reg_5_280)
(= dst_reg_5_151 dst_reg_5_253)
(= dst_reg_5_152 dst_reg_5_254)
(= dst_reg_5_153 dst_reg_5_255)
(= dst_reg_5_154 dst_reg_5_256)
(= and4.i.i.i_5_252 dst_reg_5_257)
(= and.i1.i.i_5_249 dst_reg_5_258)
(= dst_reg_5_157 dst_reg_5_259)
(= dst_reg_5_158 dst_reg_5_260)
(= dst_reg_5_159 dst_reg_5_261)
(= dst_reg_5_160 dst_reg_5_262)
(= dst_reg_5_161 dst_reg_5_263)
(= dst_reg_5_162 dst_reg_5_264)
(= dst_reg_5_163 dst_reg_5_265)
(= dst_reg_5_164 dst_reg_5_266)
]
[handleMemoryPhiNode] MemoryPhiResolutionMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :
  (= #x00000001 src_reg_5_267)
  (= src_reg_5_15 src_reg_5_268)
  (= src_reg_5_16 src_reg_5_269)
  (= src_reg_5_17 src_reg_5_270)
  (= src_reg_5_18 src_reg_5_271)
  (= src_reg_5_19 src_reg_5_272)
  (= src_reg_5_20 src_reg_5_273)
  (= src_reg_5_21 src_reg_5_274)
  (= src_reg_5_22 src_reg_5_275)
  (= src_reg_5_23 src_reg_5_276)
  (= src_reg_5_24 src_reg_5_277)
  (= src_reg_5_25 src_reg_5_278)
  (= src_reg_5_26 src_reg_5_279)
  (= src_reg_5_27 src_reg_5_280)
  (= #x00000001 dst_reg_5_253)
  (= dst_reg_5_1 dst_reg_5_254)
  (= dst_reg_5_2 dst_reg_5_255)
  (= dst_reg_5_3 dst_reg_5_256)
  (= #x0000000000000000 dst_reg_5_257)
  (= #xffffffffffffffff dst_reg_5_258)
  (= #x8000000000000000 dst_reg_5_259)
  (= #x7fffffffffffffff dst_reg_5_260)
  (= #x0000000000000000 dst_reg_5_261)
  (= #xffffffffffffffff dst_reg_5_262)
  (= #x00000000 dst_reg_5_263)
  (= dst_reg_5_11 dst_reg_5_264)
  (= dst_reg_5_12 dst_reg_5_265)
  (= dst_reg_5_13 dst_reg_5_266)
<if.then32.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_5_114 src_reg_5_165)
  (= src_reg_5_115 src_reg_5_166)
  (= src_reg_5_116 src_reg_5_167)
  (= src_reg_5_117 src_reg_5_168)
  (= src_reg_5_118 src_reg_5_169)
  (= src_reg_5_119 src_reg_5_170)
  (= src_reg_5_120 src_reg_5_171)
  (= src_reg_5_121 src_reg_5_172)
  (= src_reg_5_122 src_reg_5_173)
  (= src_reg_5_123 src_reg_5_174)
  (= src_reg_5_124 src_reg_5_175)
  (= src_reg_5_125 src_reg_5_176)
  (= src_reg_5_126 src_reg_5_177)
  (= src_reg_5_127 src_reg_5_178)
  (= dst_reg_5_100 dst_reg_5_151)
  (= dst_reg_5_101 dst_reg_5_152)
  (= dst_reg_5_102 dst_reg_5_153)
  (= dst_reg_5_103 dst_reg_5_154)
  (= dst_reg_5_104 dst_reg_5_155)
  (= dst_reg_5_105 dst_reg_5_156)
  (= cond40.i.i_5_150 dst_reg_5_157)
  (= i37.i.i_5_141 dst_reg_5_158)
  (= cond40.i.i_5_150 dst_reg_5_159)
  (= dst_reg_5_109 dst_reg_5_160)
  (= dst_reg_5_110 dst_reg_5_161)
  (= dst_reg_5_111 dst_reg_5_162)
  (= dst_reg_5_112 dst_reg_5_163)
  (= dst_reg_5_113 dst_reg_5_164)
<if.then17.i.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_5_114 src_reg_5_165)
  (= src_reg_5_115 src_reg_5_166)
  (= src_reg_5_116 src_reg_5_167)
  (= src_reg_5_117 src_reg_5_168)
  (= src_reg_5_118 src_reg_5_169)
  (= src_reg_5_119 src_reg_5_170)
  (= src_reg_5_120 src_reg_5_171)
  (= src_reg_5_121 src_reg_5_172)
  (= src_reg_5_122 src_reg_5_173)
  (= src_reg_5_123 src_reg_5_174)
  (= src_reg_5_124 src_reg_5_175)
  (= src_reg_5_125 src_reg_5_176)
  (= src_reg_5_126 src_reg_5_177)
  (= src_reg_5_127 src_reg_5_178)
  (= dst_reg_5_100 dst_reg_5_151)
  (= dst_reg_5_101 dst_reg_5_152)
  (= dst_reg_5_102 dst_reg_5_153)
  (= dst_reg_5_103 dst_reg_5_154)
  (= dst_reg_5_104 dst_reg_5_155)
  (= dst_reg_5_105 dst_reg_5_156)
  (= i38.i.i_5_144 dst_reg_5_157)
  (= cond27.i.i_5_146 dst_reg_5_158)
  (= dst_reg_5_108 dst_reg_5_159)
  (= cond27.i.i_5_146 dst_reg_5_160)
  (= dst_reg_5_110 dst_reg_5_161)
  (= dst_reg_5_111 dst_reg_5_162)
  (= dst_reg_5_112 dst_reg_5_163)
  (= dst_reg_5_113 dst_reg_5_164)
<if.then.i329.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_5_114 src_reg_5_165)
  (= src_reg_5_115 src_reg_5_166)
  (= src_reg_5_116 src_reg_5_167)
  (= src_reg_5_117 src_reg_5_168)
  (= src_reg_5_118 src_reg_5_169)
  (= src_reg_5_119 src_reg_5_170)
  (= src_reg_5_120 src_reg_5_171)
  (= src_reg_5_121 src_reg_5_172)
  (= src_reg_5_122 src_reg_5_173)
  (= src_reg_5_123 src_reg_5_174)
  (= src_reg_5_124 src_reg_5_175)
  (= src_reg_5_125 src_reg_5_176)
  (= src_reg_5_126 src_reg_5_177)
  (= src_reg_5_127 src_reg_5_178)
  (= dst_reg_5_100 dst_reg_5_151)
  (= dst_reg_5_101 dst_reg_5_152)
  (= dst_reg_5_102 dst_reg_5_153)
  (= dst_reg_5_103 dst_reg_5_154)
  (= dst_reg_5_104 dst_reg_5_155)
  (= dst_reg_5_105 dst_reg_5_156)
  (= cond.i327.i_5_136 dst_reg_5_157)
  (= cond12.i.i_5_140 dst_reg_5_158)
  (= cond.i327.i_5_136 dst_reg_5_159)
  (= cond12.i.i_5_140 dst_reg_5_160)
  (= dst_reg_5_110 dst_reg_5_161)
  (= dst_reg_5_111 dst_reg_5_162)
  (= dst_reg_5_112 dst_reg_5_163)
  (= dst_reg_5_113 dst_reg_5_164)
<if.end171.i, if.end309.i> :
  (= #x00000001 src_reg_5_114)
  (= src_reg_5_15 src_reg_5_115)
  (= src_reg_5_16 src_reg_5_116)
  (= src_reg_5_17 src_reg_5_117)
  (= src_reg_5_18 src_reg_5_118)
  (= src_reg_5_19 src_reg_5_119)
  (= src_reg_5_20 src_reg_5_120)
  (= src_reg_5_21 src_reg_5_121)
  (= src_reg_5_22 src_reg_5_122)
  (= src_reg_5_23 src_reg_5_123)
  (= src_reg_5_24 src_reg_5_124)
  (= src_reg_5_25 src_reg_5_125)
  (= src_reg_5_26 src_reg_5_126)
  (= src_reg_5_27 src_reg_5_127)
  (= #x00000001 dst_reg_5_100)
  (= dst_reg_5_1 dst_reg_5_101)
  (= dst_reg_5_2 dst_reg_5_102)
  (= dst_reg_5_3 dst_reg_5_103)
  (= and.i116.i_5_71 dst_reg_5_104)
  (= and9.i.i_5_73 dst_reg_5_105)
  (= cond.i129.i_5_92 dst_reg_5_106)
  (= cond14.i135.i_5_97 dst_reg_5_107)
  (= and.i116.i_5_71 dst_reg_5_108)
  (= cond35.i144.i_5_99 dst_reg_5_109)
  (= dst_reg_5_10 dst_reg_5_110)
  (= dst_reg_5_11 dst_reg_5_111)
  (= dst_reg_5_12 dst_reg_5_112)
  (= dst_reg_5_13 dst_reg_5_113)
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :
  (= src_reg_5_165 src_reg_5_267)
  (= src_reg_5_166 src_reg_5_268)
  (= src_reg_5_167 src_reg_5_269)
  (= src_reg_5_168 src_reg_5_270)
  (= src_reg_5_169 src_reg_5_271)
  (= src_reg_5_170 src_reg_5_272)
  (= src_reg_5_171 src_reg_5_273)
  (= src_reg_5_172 src_reg_5_274)
  (= src_reg_5_173 src_reg_5_275)
  (= src_reg_5_174 src_reg_5_276)
  (= src_reg_5_175 src_reg_5_277)
  (= src_reg_5_176 src_reg_5_278)
  (= src_reg_5_177 src_reg_5_279)
  (= src_reg_5_178 src_reg_5_280)
  (= dst_reg_5_151 dst_reg_5_253)
  (= dst_reg_5_152 dst_reg_5_254)
  (= dst_reg_5_153 dst_reg_5_255)
  (= dst_reg_5_154 dst_reg_5_256)
  (= and4.i.i.i_5_252 dst_reg_5_257)
  (= and.i1.i.i_5_249 dst_reg_5_258)
  (= dst_reg_5_157 dst_reg_5_259)
  (= dst_reg_5_158 dst_reg_5_260)
  (= dst_reg_5_159 dst_reg_5_261)
  (= dst_reg_5_160 dst_reg_5_262)
  (= dst_reg_5_161 dst_reg_5_263)
  (= dst_reg_5_162 dst_reg_5_264)
  (= dst_reg_5_163 dst_reg_5_265)
  (= dst_reg_5_164 dst_reg_5_266)
<if.else.i331.i, __reg_deduce_bounds.exit.i> :
  (= src_reg_5_114 src_reg_5_165)
  (= src_reg_5_115 src_reg_5_166)
  (= src_reg_5_116 src_reg_5_167)
  (= src_reg_5_117 src_reg_5_168)
  (= src_reg_5_118 src_reg_5_169)
  (= src_reg_5_119 src_reg_5_170)
  (= src_reg_5_120 src_reg_5_171)
  (= src_reg_5_121 src_reg_5_172)
  (= src_reg_5_122 src_reg_5_173)
  (= src_reg_5_123 src_reg_5_174)
  (= src_reg_5_124 src_reg_5_175)
  (= src_reg_5_125 src_reg_5_176)
  (= src_reg_5_126 src_reg_5_177)
  (= src_reg_5_127 src_reg_5_178)
  (= dst_reg_5_100 dst_reg_5_151)
  (= dst_reg_5_101 dst_reg_5_152)
  (= dst_reg_5_102 dst_reg_5_153)
  (= dst_reg_5_103 dst_reg_5_154)
  (= dst_reg_5_104 dst_reg_5_155)
  (= dst_reg_5_105 dst_reg_5_156)
  (= dst_reg_5_106 dst_reg_5_157)
  (= dst_reg_5_107 dst_reg_5_158)
  (= dst_reg_5_108 dst_reg_5_159)
  (= dst_reg_5_109 dst_reg_5_160)
  (= dst_reg_5_110 dst_reg_5_161)
  (= dst_reg_5_111 dst_reg_5_162)
  (= dst_reg_5_112 dst_reg_5_163)
  (= dst_reg_5_113 dst_reg_5_164)
<if.then166.i, if.end309.i> :
  (= #x00000001 src_reg_5_114)
  (= src_reg_5_15 src_reg_5_115)
  (= src_reg_5_16 src_reg_5_116)
  (= src_reg_5_17 src_reg_5_117)
  (= src_reg_5_18 src_reg_5_118)
  (= src_reg_5_19 src_reg_5_119)
  (= src_reg_5_20 src_reg_5_120)
  (= src_reg_5_21 src_reg_5_121)
  (= src_reg_5_22 src_reg_5_122)
  (= src_reg_5_23 src_reg_5_123)
  (= src_reg_5_24 src_reg_5_124)
  (= src_reg_5_25 src_reg_5_125)
  (= src_reg_5_26 src_reg_5_126)
  (= src_reg_5_27 src_reg_5_127)
  (= #x00000001 dst_reg_5_100)
  (= dst_reg_5_1 dst_reg_5_101)
  (= dst_reg_5_2 dst_reg_5_102)
  (= dst_reg_5_3 dst_reg_5_103)
  (= and170.i_5_67 dst_reg_5_104)
  (= #x0000000000000000 dst_reg_5_105)
  (= and170.i_5_67 dst_reg_5_106)
  (= and170.i_5_67 dst_reg_5_107)
  (= and170.i_5_67 dst_reg_5_108)
  (= and170.i_5_67 dst_reg_5_109)
  (= dst_reg_5_10 dst_reg_5_110)
  (= dst_reg_5_11 dst_reg_5_111)
  (= dst_reg_5_12 dst_reg_5_112)
  (= dst_reg_5_13 dst_reg_5_113)
-------------------
  ret void
-------------------
[handleReturnInst]
passID: 1
[handleReturnInst] nothing to do, returning...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #2 populatePathConditionsMap
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  %type = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %type1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 0
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
-------------------
  %src_reg1.sroa.3.0..sroa_idx3 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %src_reg1.sroa.3.0.copyload = load i64, i64* %src_reg1.sroa.3.0..sroa_idx3, align 1
-------------------
-------------------
  %src_reg1.sroa.10.0..sroa_idx5 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %src_reg1.sroa.10.0.copyload = load i64, i64* %src_reg1.sroa.10.0..sroa_idx5, align 1
-------------------
-------------------
  %src_reg1.sroa.13.0..sroa_idx7 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 6
-------------------
-------------------
  %src_reg1.sroa.13.0.copyload = load i64, i64* %src_reg1.sroa.13.0..sroa_idx7, align 1
-------------------
-------------------
  %src_reg1.sroa.15.0..sroa_idx9 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 7
-------------------
-------------------
  %src_reg1.sroa.15.0.copyload = load i64, i64* %src_reg1.sroa.15.0..sroa_idx9, align 1
-------------------
-------------------
  %src_reg1.sroa.17.0..sroa_idx11 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 8
-------------------
-------------------
  %src_reg1.sroa.17.0.copyload = load i64, i64* %src_reg1.sroa.17.0..sroa_idx11, align 1
-------------------
-------------------
  %src_reg1.sroa.22.0..sroa_idx13 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %src_reg, i64 0, i32 9
-------------------
-------------------
  %src_reg1.sroa.22.0.copyload = load i64, i64* %src_reg1.sroa.22.0..sroa_idx13, align 1
-------------------
-------------------
  %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
-------------------
-------------------
  %i213.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  %i214.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  %i215.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  br i1 %tobool.not.i.i, label %land.lhs.true.i, label %lor.lhs.false20.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
[handleBranchInst] PathConditionsMap:
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %tobool.not.i.i = icmp eq i64 %src_reg1.sroa.10.0.copyload, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] tobool.not.i.i_5_37
[handleBranchInst] Edge Assertions:
<entry, land.lhs.true.i>: (= tobool.not.i.i_5_37 #b1)
<entry, lor.lhs.false20.i>: (= tobool.not.i.i_5_37 #b0)
[handleBranchInst] Path Conditions:
[handleBranchInst] land.lhs.true.i: (= tobool.not.i.i_5_37 #b1)
[handleBranchInst] lor.lhs.false20.i: (= tobool.not.i.i_5_37 #b0)
[handleBranchInst] <entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] <entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
land.lhs.true.i
=========================
-------------------
  %tobool.not.i25.i = icmp eq i64 %i215.i, 0
-------------------
-------------------
  %cmp16.not.i = icmp ne i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp18.not.i = icmp ne i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond197.i = select i1 %cmp16.not.i, i1 true, i1 %cmp18.not.i
-------------------
-------------------
  %cmp21.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %or.cond198.i = or i1 %cmp21.i, %or.cond197.i
-------------------
-------------------
  %cmp24.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
-------------------
-------------------
  br i1 %or.cond199.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond199.i = select i1 %or.cond198.i, i1 true, i1 %cmp24.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond199.i_5_49
[handleBranchInst] Edge Assertions:
<land.lhs.true.i, if.then26.i>: (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.end27.i>: (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
[handleBranchInst] if.end27.i: (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
[handleBranchInst] <land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
[handleBranchInst] <land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
if.then26.i
  (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
lor.lhs.false20.i
=========================
-------------------
  %cmp21.old.i = icmp sgt i64 %src_reg1.sroa.13.0.copyload, %src_reg1.sroa.15.0.copyload
-------------------
-------------------
  %cmp24.old.i = icmp ugt i64 %src_reg1.sroa.17.0.copyload, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
-------------------
-------------------
  br i1 %or.cond200.i, label %if.then26.i, label %if.end27.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
if.then26.i
  (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %or.cond200.i = select i1 %cmp21.old.i, i1 true, i1 %cmp24.old.i
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] or.cond200.i_5_53
[handleBranchInst] Edge Assertions:
<lor.lhs.false20.i, if.then26.i>: (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i>: (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then26.i: (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
[handleBranchInst] if.end27.i: (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
[handleBranchInst] <lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
[handleBranchInst] <lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  %var_off.i.i.repack = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 0
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  %var_off.i.i.repack1 = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 5, i32 1
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  %frameno.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 11
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  %smin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  %smax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  %umin_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  %umax_value.i.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
[handleBranchInst] <if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
if.end27.i
=========================
-------------------
  %i246.i = phi i1 [ false, %lor.lhs.false20.i ], [ %tobool.not.i25.i, %land.lhs.true.i ]
-------------------
-------------------
  %i247.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  br i1 %i246.i, label %if.then166.i, label %if.end171.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %i246.i = phi i1 [ false, %lor.lhs.false20.i ], [ %tobool.not.i25.i, %land.lhs.true.i ]
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] i246.i_5_64
[handleBranchInst] Edge Assertions:
<if.end27.i, if.then166.i>: (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i>: (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then166.i: (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] if.end171.i: (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] <if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] <if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
if.then166.i
=========================
-------------------
  %and170.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
-------------------
-------------------
  store i64 %and170.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 0, i64* %i214.i, align 8
-------------------
-------------------
  %smin_value.i111.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  store i64 %and170.i, i64* %smin_value.i111.i, align 8
-------------------
-------------------
  %smax_value.i112.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 %and170.i, i64* %smax_value.i112.i, align 8
-------------------
-------------------
  %umin_value.i113.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 %and170.i, i64* %umin_value.i113.i, align 8
-------------------
-------------------
  %umax_value.i114.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  store i64 %and170.i, i64* %umax_value.i114.i, align 8
-------------------
-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end309.i
[handleBranchInst] newPathCond: (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] if.end309.i: (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] <if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
if.end171.i
=========================
-------------------
  %or.i115.i = or i64 %i247.i, %i215.i
-------------------
-------------------
  %or3.i.i = or i64 %src_reg1.sroa.10.0.copyload, %src_reg1.sroa.3.0.copyload
-------------------
-------------------
  %and.i116.i = and i64 %i247.i, %src_reg1.sroa.3.0.copyload
-------------------
-------------------
  %and8.i117.i = and i64 %or.i115.i, %or3.i.i
-------------------
-------------------
  %and9.i.i = xor i64 %and8.i117.i, %and.i116.i
-------------------
-------------------
  store i64 %and.i116.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and9.i.i, i64* %i214.i, align 8
-------------------
-------------------
  %umin_value179.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %umin_value179.i, align 8
-------------------
-------------------
  %umax_value180.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i251.i = load i64, i64* %umax_value180.i, align 8
-------------------
-------------------
  %cmp182.i = icmp ult i64 %i251.i, %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  %cond184.i = select i1 %cmp182.i, i64 %i251.i, i64 %src_reg1.sroa.22.0.copyload
-------------------
-------------------
  store i64 %cond184.i, i64* %umax_value180.i, align 8
-------------------
-------------------
  %smin_value186.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i252.i = load i64, i64* %smin_value186.i, align 8
-------------------
-------------------
  %cmp187.i = icmp slt i64 %i252.i, 0
-------------------
-------------------
  %cmp190.i = icmp slt i64 %src_reg1.sroa.13.0.copyload, 0
-------------------
-------------------
  %or.cond3.i = select i1 %cmp187.i, i1 true, i1 %cmp190.i
-------------------
-------------------
  %..i = select i1 %or.cond3.i, i64 -9223372036854775808, i64 %and.i116.i
-------------------
-------------------
  %.cond184.i = select i1 %or.cond3.i, i64 9223372036854775807, i64 %cond184.i
-------------------
-------------------
  store i64 %..i, i64* %smin_value186.i, align 8
-------------------
-------------------
  %smax_value199.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  store i64 %.cond184.i, i64* %smax_value199.i, align 8
-------------------
-------------------
  %and.i126.i = and i64 %and9.i.i, -9223372036854775808
-------------------
-------------------
  %or.i127.i = or i64 %and.i126.i, %and.i116.i
-------------------
-------------------
  %cmp.i128.i = icmp sgt i64 %..i, %or.i127.i
-------------------
-------------------
  %cond.i129.i = select i1 %cmp.i128.i, i64 %..i, i64 %or.i127.i
-------------------
-------------------
  store i64 %cond.i129.i, i64* %smin_value186.i, align 8
-------------------
-------------------
  %and7.i132.i = and i64 %and9.i.i, 9223372036854775807
-------------------
-------------------
  %or8.i133.i = or i64 %and7.i132.i, %and.i116.i
-------------------
-------------------
  %cmp10.i134.i = icmp slt i64 %.cond184.i, %or8.i133.i
-------------------
-------------------
  %cond14.i135.i = select i1 %cmp10.i134.i, i64 %.cond184.i, i64 %or8.i133.i
-------------------
-------------------
  store i64 %cond14.i135.i, i64* %smax_value199.i, align 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %umin_value179.i, align 8
-------------------
-------------------
  %cmp31.i143.i = icmp ult i64 %cond184.i, %and8.i117.i
-------------------
-------------------
  %cond35.i144.i = select i1 %cmp31.i143.i, i64 %cond184.i, i64 %and8.i117.i
-------------------
-------------------
  store i64 %cond35.i144.i, i64* %umax_value180.i, align 8
-------------------
-------------------
  br label %if.end309.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: if.end309.i
[handleBranchInst] newPathCond: (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] if.end309.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
[handleBranchInst] <if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
if.end309.i
=========================
-------------------
  %smin_value.i321.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 6
-------------------
-------------------
  %i.i322.i = load i64, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
-------------------
-------------------
  br i1 %cmp.i323.i, label %if.then.i329.i, label %lor.lhs.false.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i323.i = icmp sgt i64 %i.i322.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i323.i_5_130
[handleBranchInst] Edge Assertions:
<if.end309.i, if.then.i329.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] lor.lhs.false.i.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] <if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] <if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
lor.lhs.false.i.i
=========================
-------------------
  %smax_value.i324.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i33.i.i = load i64, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
-------------------
-------------------
  br i1 %cmp1.i325.i, label %if.then.i329.i, label %if.end.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
[handleBranchInst] PathConditionsMap:
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp1.i325.i = icmp slt i64 %i33.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp1.i325.i_5_133
[handleBranchInst] Edge Assertions:
<lor.lhs.false.i.i, if.then.i329.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.end.i.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then.i329.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
[handleBranchInst] if.end.i.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] <lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] <lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
if.then.i329.i
=========================
-------------------
  %umin_value.i326.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i34.i.i = load i64, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  %cmp3.i.i = icmp ugt i64 %i.i322.i, %i34.i.i
-------------------
-------------------
  %cond.i327.i = select i1 %cmp3.i.i, i64 %i.i322.i, i64 %i34.i.i
-------------------
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %smax_value6.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 7
-------------------
-------------------
  %i35.i.i = load i64, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  %umax_value.i328.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i36.i.i = load i64, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  %cmp8.i.i = icmp ult i64 %i35.i.i, %i36.i.i
-------------------
-------------------
  %cond12.i.i = select i1 %cmp8.i.i, i64 %i35.i.i, i64 %i36.i.i
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
[handleBranchInst] <if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
=========================
if.end.i.i
=========================
-------------------
  %umax_value15.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i37.i.i = load i64, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
-------------------
-------------------
  %umin_value18.i.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i38.i.i = load i64, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  br i1 %cmp16.i.i, label %if.then17.i.i, label %if.else.i331.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp16.i.i = icmp sgt i64 %i37.i.i, -1
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp16.i.i_5_143
[handleBranchInst] Edge Assertions:
<if.end.i.i, if.then17.i.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.else.i331.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then17.i.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] if.else.i331.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] <if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] <if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  %cmp23.i.i = icmp ult i64 %i33.i.i, %i37.i.i
-------------------
-------------------
  %cond27.i.i = select i1 %cmp23.i.i, i64 %i33.i.i, i64 %i37.i.i
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp16.i.i_5_143 #b1)
           (= cmp1.i325.i_5_133 #b0)
           (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2))))
[handleBranchInst] <if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp16.i.i_5_143 #b1)
           (= cmp1.i325.i_5_133 #b0)
           (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
=========================
if.else.i331.i
=========================
-------------------
  %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
-------------------
-------------------
  br i1 %cmp31.i330.i, label %if.then32.i.i, label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp16.i.i_5_143 #b1)
           (= cmp1.i325.i_5_133 #b0)
           (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp31.i330.i = icmp slt i64 %i38.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp31.i330.i_5_148
[handleBranchInst] Edge Assertions:
<if.else.i331.i, if.then32.i.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.else.i331.i, __reg_deduce_bounds.exit.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] Path Conditions:
[handleBranchInst] if.then32.i.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_5_148 #b0)
                (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
[handleBranchInst] <if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] <if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_5_148 #b0)
                (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
=========================
if.then32.i.i
=========================
-------------------
  %cmp36.i.i = icmp ugt i64 %i.i322.i, %i38.i.i
-------------------
-------------------
  %cond40.i.i = select i1 %cmp36.i.i, i64 %i.i322.i, i64 %i38.i.i
-------------------
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
-------------------
  br label %__reg_deduce_bounds.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp31.i330.i_5_148 #b0)
                (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or a!3
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_deduce_bounds.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] __reg_deduce_bounds.exit.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or (and (= cmp31.i330.i_5_148 #b1) a!3)
      (and (= cmp31.i330.i_5_148 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
[handleBranchInst] <if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or (and (= cmp31.i330.i_5_148 #b1) a!3)
      (and (= cmp31.i330.i_5_148 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
=========================
__reg_deduce_bounds.exit.i
=========================
-------------------
  %umin_value.i332.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 8
-------------------
-------------------
  %i.i333.i = load i64, i64* %umin_value.i332.i, align 8
-------------------
-------------------
  %umax_value.i334.i = getelementptr inbounds %struct.bpf_reg_state, %struct.bpf_reg_state* %dst_reg, i64 0, i32 9
-------------------
-------------------
  %i5.i.i = load i64, i64* %umax_value.i334.i, align 8
-------------------
-------------------
  %xor.i.i.i = xor i64 %i5.i.i, %i.i333.i
-------------------
-------------------
  %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
-------------------
-------------------
  br i1 %cmp.i.i.i.i, label %__reg_bound_offset.exit.i, label %if.end.i.i.i.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or (and (= cmp31.i330.i_5_148 #b1) a!3)
      (and (= cmp31.i330.i_5_148 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst]  conditional branch 
[getBitVecSingValType]   %cmp.i.i.i.i = icmp eq i64 %xor.i.i.i, 0
[getBitVecSingValType] type: i1
[getBitVecSingValType] returning existing BV
 [getBitVecSingValType] cmp.i.i.i.i_5_183
[handleBranchInst] Edge Assertions:
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i>: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
[handleBranchInst] Path Conditions:
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
[handleBranchInst] if.end.i.i.i.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
[handleBranchInst] <__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or (and (= cmp31.i330.i_5_148 #b1) a!3)
      (and (= cmp31.i330.i_5_148 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
=========================
if.end.i.i.i.i
=========================
-------------------
  %tobool.not.i.i.i.i.i = icmp ult i64 %xor.i.i.i, 4294967296
-------------------
-------------------
  %shl.i.i.i.i.i = shl i64 %xor.i.i.i, 32
-------------------
-------------------
  %spec.select.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i64 %shl.i.i.i.i.i, i64 %xor.i.i.i
-------------------
-------------------
  %spec.select17.i.i.i.i.i = select i1 %tobool.not.i.i.i.i.i, i32 31, i32 63
-------------------
-------------------
  %tobool2.not.i.i.i.i.i = icmp ult i64 %spec.select.i.i.i.i.i, 281474976710656
-------------------
-------------------
  %sub4.i.i.i.i.i = add nsw i32 %spec.select17.i.i.i.i.i, -16
-------------------
-------------------
  %shl5.i.i.i.i.i = shl i64 %spec.select.i.i.i.i.i, 16
-------------------
-------------------
  %word.addr.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i64 %shl5.i.i.i.i.i, i64 %spec.select.i.i.i.i.i
-------------------
-------------------
  %num.1.i.i.i.i.i = select i1 %tobool2.not.i.i.i.i.i, i32 %sub4.i.i.i.i.i, i32 %spec.select17.i.i.i.i.i
-------------------
-------------------
  %tobool8.not.i.i.i.i.i = icmp ult i64 %word.addr.1.i.i.i.i.i, 72057594037927936
-------------------
-------------------
  %sub10.i.i.i.i.i = add nsw i32 %num.1.i.i.i.i.i, -8
-------------------
-------------------
  %shl11.i.i.i.i.i = shl i64 %word.addr.1.i.i.i.i.i, 8
-------------------
-------------------
  %word.addr.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i64 %shl11.i.i.i.i.i, i64 %word.addr.1.i.i.i.i.i
-------------------
-------------------
  %num.2.i.i.i.i.i = select i1 %tobool8.not.i.i.i.i.i, i32 %sub10.i.i.i.i.i, i32 %num.1.i.i.i.i.i
-------------------
-------------------
  %tobool14.not.i.i.i.i.i = icmp ult i64 %word.addr.2.i.i.i.i.i, 1152921504606846976
-------------------
-------------------
  %sub16.i.i.i.i.i = add nsw i32 %num.2.i.i.i.i.i, -4
-------------------
-------------------
  %shl17.i.i.i.i.i = shl i64 %word.addr.2.i.i.i.i.i, 4
-------------------
-------------------
  %word.addr.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i64 %shl17.i.i.i.i.i, i64 %word.addr.2.i.i.i.i.i
-------------------
-------------------
  %num.3.i.i.i.i.i = select i1 %tobool14.not.i.i.i.i.i, i32 %sub16.i.i.i.i.i, i32 %num.2.i.i.i.i.i
-------------------
-------------------
  %tobool20.not.i.i.i.i.i = icmp ult i64 %word.addr.3.i.i.i.i.i, 4611686018427387904
-------------------
-------------------
  %sub22.i.i.i.i.i = add i32 %num.3.i.i.i.i.i, 254
-------------------
-------------------
  %shl23.i.i.i.i.i = shl i64 %word.addr.3.i.i.i.i.i, 2
-------------------
-------------------
  %word.addr.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i64 %shl23.i.i.i.i.i, i64 %word.addr.3.i.i.i.i.i
-------------------
-------------------
  %num.4.i.i.i.i.i = select i1 %tobool20.not.i.i.i.i.i, i32 %sub22.i.i.i.i.i, i32 %num.3.i.i.i.i.i
-------------------
-------------------
  %word.addr.4.lobit.i.i.i.i.i.neg = lshr i64 %word.addr.4.i.i.i.i.i, 63
-------------------
-------------------
  %i.i.i.i.i.i.neg = trunc i64 %word.addr.4.lobit.i.i.i.i.i.neg to i32
-------------------
-------------------
  %add.i.i.i335.i = add i32 %num.4.i.i.i.i.i, %i.i.i.i.i.i.neg
-------------------
-------------------
  %phi.bo = and i32 %add.i.i.i335.i, 255
-------------------
-------------------
  br label %__reg_bound_offset.exit.i
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or (and (= cmp31.i330.i_5_148 #b1) a!3)
      (and (= cmp31.i330.i_5_148 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: __reg_bound_offset.exit.i
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
[handleBranchInst] __reg_bound_offset.exit.i: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5) (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
[handleBranchInst] <if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5) (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or (and (= cmp31.i330.i_5_148 #b1) a!3)
      (and (= cmp31.i330.i_5_148 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
-------------------
  %cmp.i.i.i = icmp ugt i32 %retval.0.i.i.i.i, 63
-------------------
-------------------
  %sh_prom.i.i.i = zext i32 %retval.0.i.i.i.i to i64
-------------------
-------------------
  %notmask.i.i.i = shl nsw i64 -1, %sh_prom.i.i.i
-------------------
-------------------
  %sub.i.i.i = xor i64 %notmask.i.i.i, -1
-------------------
-------------------
  %and.i.i336.i = and i64 %notmask.i.i.i, %i.i333.i
-------------------
-------------------
  %retval.sroa.0.0.i.i.i = select i1 %cmp.i.i.i, i64 0, i64 %and.i.i336.i
-------------------
-------------------
  %retval.sroa.3.0.i.i.i = select i1 %cmp.i.i.i, i64 -1, i64 %sub.i.i.i
-------------------
-------------------
  %i9.i.i = load i64, i64* %i213.i, align 8
-------------------
-------------------
  %i11.i.i = load i64, i64* %i214.i, align 8
-------------------
-------------------
  %or.i.i.i = or i64 %retval.sroa.0.0.i.i.i, %i9.i.i
-------------------
-------------------
  %and.i1.i.i = and i64 %retval.sroa.3.0.i.i.i, %i11.i.i
-------------------
-------------------
  %neg.i.i.i = xor i64 %and.i1.i.i, -1
-------------------
-------------------
  %and4.i.i.i = and i64 %or.i.i.i, %neg.i.i.i
-------------------
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
-------------------
  br label %adjust_scalar_min_max_vals.exit
-------------------
[handleBranchInst]
passID: 2
[handleBranchInst] EdgeAssertionsMap:
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5) (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or (and (= cmp31.i330.i_5_148 #b1) a!3)
      (and (= cmp31.i330.i_5_148 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] unconditional branch 
[handleBranchInst] destBB: adjust_scalar_min_max_vals.exit
[handleBranchInst] newPathCond: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5) (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
[handleBranchInst] adjust_scalar_min_max_vals.exit: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5)
      (and (= cmp.i.i.i.i_5_183 #b1) a!5)
      (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
      (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))))))
[handleBranchInst] <__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5) (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
[handleBranchInst] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5) (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[handleBranchInst] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5) (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or (and (= cmp31.i330.i_5_148 #b1) a!3)
      (and (= cmp31.i330.i_5_148 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5)
      (and (= cmp.i.i.i.i_5_183 #b1) a!5)
      (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
      (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
=========================
adjust_scalar_min_max_vals.exit
=========================
-------------------
  ret void
-------------------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #3 handlePhiNodes
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
=========================
if.end27.i
=========================
-------------------
  %i246.i = phi i1 [ false, %lor.lhs.false20.i ], [ %tobool.not.i25.i, %land.lhs.true.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI lor.lhs.false20.i
[handlePhiNodeResolvePathConditions] phiConditionI: lor.lhs.false20.i_if.end27.i_5_62
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
[handlePhiNodeResolvePathConditions] phiResolveI: (= lor.lhs.false20.i_if.end27.i_5_62
   (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0)))
[handlePhiNodeResolvePathConditions] incomingBlockI land.lhs.true.i
[handlePhiNodeResolvePathConditions] phiConditionI: land.lhs.true.i_if.end27.i_5_63
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
[handlePhiNodeResolvePathConditions] phiResolveI: (= land.lhs.true.i_if.end27.i_5_63
   (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
  (= lor.lhs.false20.i_if.end27.i_5_62
   (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0)))
  (= land.lhs.true.i_if.end27.i_5_63
   (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))

=========================
if.then166.i
=========================
=========================
if.end171.i
=========================
=========================
if.end309.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (and (= i246.i_5_64 #b1)
                (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
                    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_5_114)
           (= src_reg_5_15 src_reg_5_115)
           (= src_reg_5_16 src_reg_5_116)
           (= src_reg_5_17 src_reg_5_117)
           (= src_reg_5_18 src_reg_5_118)
           (= src_reg_5_19 src_reg_5_119)
           (= src_reg_5_20 src_reg_5_120)
           (= src_reg_5_21 src_reg_5_121)
           (= src_reg_5_22 src_reg_5_122)
           (= src_reg_5_23 src_reg_5_123)
           (= src_reg_5_24 src_reg_5_124)
           (= src_reg_5_25 src_reg_5_125)
           (= src_reg_5_26 src_reg_5_126)
           (= src_reg_5_27 src_reg_5_127)
           (= #x00000001 dst_reg_5_100)
           (= dst_reg_5_1 dst_reg_5_101)
           (= dst_reg_5_2 dst_reg_5_102)
           (= dst_reg_5_3 dst_reg_5_103)
           (= and170.i_5_67 dst_reg_5_104)
           (= #x0000000000000000 dst_reg_5_105)
           (= and170.i_5_67 dst_reg_5_106)
           (= and170.i_5_67 dst_reg_5_107)
           (= and170.i_5_67 dst_reg_5_108)
           (= and170.i_5_67 dst_reg_5_109)
           (= dst_reg_5_10 dst_reg_5_110)
           (= dst_reg_5_11 dst_reg_5_111)
           (= dst_reg_5_12 dst_reg_5_112)
           (= dst_reg_5_13 dst_reg_5_113))))
phiResolveI (i=1) (let ((a!1 (and (= i246.i_5_64 #b0)
                (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
                    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_5_114)
           (= src_reg_5_15 src_reg_5_115)
           (= src_reg_5_16 src_reg_5_116)
           (= src_reg_5_17 src_reg_5_117)
           (= src_reg_5_18 src_reg_5_118)
           (= src_reg_5_19 src_reg_5_119)
           (= src_reg_5_20 src_reg_5_120)
           (= src_reg_5_21 src_reg_5_121)
           (= src_reg_5_22 src_reg_5_122)
           (= src_reg_5_23 src_reg_5_123)
           (= src_reg_5_24 src_reg_5_124)
           (= src_reg_5_25 src_reg_5_125)
           (= src_reg_5_26 src_reg_5_126)
           (= src_reg_5_27 src_reg_5_127)
           (= #x00000001 dst_reg_5_100)
           (= dst_reg_5_1 dst_reg_5_101)
           (= dst_reg_5_2 dst_reg_5_102)
           (= dst_reg_5_3 dst_reg_5_103)
           (= and.i116.i_5_71 dst_reg_5_104)
           (= and9.i.i_5_73 dst_reg_5_105)
           (= cond.i129.i_5_92 dst_reg_5_106)
           (= cond14.i135.i_5_97 dst_reg_5_107)
           (= and.i116.i_5_71 dst_reg_5_108)
           (= cond35.i144.i_5_99 dst_reg_5_109)
           (= dst_reg_5_10 dst_reg_5_110)
           (= dst_reg_5_11 dst_reg_5_111)
           (= dst_reg_5_12 dst_reg_5_112)
           (= dst_reg_5_13 dst_reg_5_113))))
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
=========================
__reg_deduce_bounds.exit.i
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (=> (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
          (and (= cmp.i323.i_5_130 #b1) a!2))
      (and (= src_reg_5_114 src_reg_5_165)
           (= src_reg_5_115 src_reg_5_166)
           (= src_reg_5_116 src_reg_5_167)
           (= src_reg_5_117 src_reg_5_168)
           (= src_reg_5_118 src_reg_5_169)
           (= src_reg_5_119 src_reg_5_170)
           (= src_reg_5_120 src_reg_5_171)
           (= src_reg_5_121 src_reg_5_172)
           (= src_reg_5_122 src_reg_5_173)
           (= src_reg_5_123 src_reg_5_174)
           (= src_reg_5_124 src_reg_5_175)
           (= src_reg_5_125 src_reg_5_176)
           (= src_reg_5_126 src_reg_5_177)
           (= src_reg_5_127 src_reg_5_178)
           (= dst_reg_5_100 dst_reg_5_151)
           (= dst_reg_5_101 dst_reg_5_152)
           (= dst_reg_5_102 dst_reg_5_153)
           (= dst_reg_5_103 dst_reg_5_154)
           (= dst_reg_5_104 dst_reg_5_155)
           (= dst_reg_5_105 dst_reg_5_156)
           (= cond.i327.i_5_136 dst_reg_5_157)
           (= cond12.i.i_5_140 dst_reg_5_158)
           (= cond.i327.i_5_136 dst_reg_5_159)
           (= cond12.i.i_5_140 dst_reg_5_160)
           (= dst_reg_5_110 dst_reg_5_161)
           (= dst_reg_5_111 dst_reg_5_162)
           (= dst_reg_5_112 dst_reg_5_163)
           (= dst_reg_5_113 dst_reg_5_164)))))
phiResolveI (i=1) (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (and (= cmp16.i.i_5_143 #b1)
                (= cmp1.i325.i_5_133 #b0)
                (= cmp.i323.i_5_130 #b0)
                (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_5_114 src_reg_5_165)
           (= src_reg_5_115 src_reg_5_166)
           (= src_reg_5_116 src_reg_5_167)
           (= src_reg_5_117 src_reg_5_168)
           (= src_reg_5_118 src_reg_5_169)
           (= src_reg_5_119 src_reg_5_170)
           (= src_reg_5_120 src_reg_5_171)
           (= src_reg_5_121 src_reg_5_172)
           (= src_reg_5_122 src_reg_5_173)
           (= src_reg_5_123 src_reg_5_174)
           (= src_reg_5_124 src_reg_5_175)
           (= src_reg_5_125 src_reg_5_176)
           (= src_reg_5_126 src_reg_5_177)
           (= src_reg_5_127 src_reg_5_178)
           (= dst_reg_5_100 dst_reg_5_151)
           (= dst_reg_5_101 dst_reg_5_152)
           (= dst_reg_5_102 dst_reg_5_153)
           (= dst_reg_5_103 dst_reg_5_154)
           (= dst_reg_5_104 dst_reg_5_155)
           (= dst_reg_5_105 dst_reg_5_156)
           (= i38.i.i_5_144 dst_reg_5_157)
           (= cond27.i.i_5_146 dst_reg_5_158)
           (= dst_reg_5_108 dst_reg_5_159)
           (= cond27.i.i_5_146 dst_reg_5_160)
           (= dst_reg_5_110 dst_reg_5_161)
           (= dst_reg_5_111 dst_reg_5_162)
           (= dst_reg_5_112 dst_reg_5_163)
           (= dst_reg_5_113 dst_reg_5_164)))))
phiResolveI (i=2) (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (and (= cmp31.i330.i_5_148 #b0)
                (= cmp16.i.i_5_143 #b0)
                (= cmp1.i325.i_5_133 #b0)
                (= cmp.i323.i_5_130 #b0)
                (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_5_114 src_reg_5_165)
           (= src_reg_5_115 src_reg_5_166)
           (= src_reg_5_116 src_reg_5_167)
           (= src_reg_5_117 src_reg_5_168)
           (= src_reg_5_118 src_reg_5_169)
           (= src_reg_5_119 src_reg_5_170)
           (= src_reg_5_120 src_reg_5_171)
           (= src_reg_5_121 src_reg_5_172)
           (= src_reg_5_122 src_reg_5_173)
           (= src_reg_5_123 src_reg_5_174)
           (= src_reg_5_124 src_reg_5_175)
           (= src_reg_5_125 src_reg_5_176)
           (= src_reg_5_126 src_reg_5_177)
           (= src_reg_5_127 src_reg_5_178)
           (= dst_reg_5_100 dst_reg_5_151)
           (= dst_reg_5_101 dst_reg_5_152)
           (= dst_reg_5_102 dst_reg_5_153)
           (= dst_reg_5_103 dst_reg_5_154)
           (= dst_reg_5_104 dst_reg_5_155)
           (= dst_reg_5_105 dst_reg_5_156)
           (= dst_reg_5_106 dst_reg_5_157)
           (= dst_reg_5_107 dst_reg_5_158)
           (= dst_reg_5_108 dst_reg_5_159)
           (= dst_reg_5_109 dst_reg_5_160)
           (= dst_reg_5_110 dst_reg_5_161)
           (= dst_reg_5_111 dst_reg_5_162)
           (= dst_reg_5_112 dst_reg_5_163)
           (= dst_reg_5_113 dst_reg_5_164)))))
phiResolveI (i=3) (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (and (= cmp31.i330.i_5_148 #b1)
                (= cmp16.i.i_5_143 #b0)
                (= cmp1.i325.i_5_133 #b0)
                (= cmp.i323.i_5_130 #b0)
                (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_5_114 src_reg_5_165)
           (= src_reg_5_115 src_reg_5_166)
           (= src_reg_5_116 src_reg_5_167)
           (= src_reg_5_117 src_reg_5_168)
           (= src_reg_5_118 src_reg_5_169)
           (= src_reg_5_119 src_reg_5_170)
           (= src_reg_5_120 src_reg_5_171)
           (= src_reg_5_121 src_reg_5_172)
           (= src_reg_5_122 src_reg_5_173)
           (= src_reg_5_123 src_reg_5_174)
           (= src_reg_5_124 src_reg_5_175)
           (= src_reg_5_125 src_reg_5_176)
           (= src_reg_5_126 src_reg_5_177)
           (= src_reg_5_127 src_reg_5_178)
           (= dst_reg_5_100 dst_reg_5_151)
           (= dst_reg_5_101 dst_reg_5_152)
           (= dst_reg_5_102 dst_reg_5_153)
           (= dst_reg_5_103 dst_reg_5_154)
           (= dst_reg_5_104 dst_reg_5_155)
           (= dst_reg_5_105 dst_reg_5_156)
           (= cond40.i.i_5_150 dst_reg_5_157)
           (= i37.i.i_5_141 dst_reg_5_158)
           (= cond40.i.i_5_150 dst_reg_5_159)
           (= dst_reg_5_109 dst_reg_5_160)
           (= dst_reg_5_110 dst_reg_5_161)
           (= dst_reg_5_111 dst_reg_5_162)
           (= dst_reg_5_112 dst_reg_5_163)
           (= dst_reg_5_113 dst_reg_5_164)))))
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  %retval.0.i.i.i.i = phi i32 [ %phi.bo, %if.end.i.i.i.i ], [ 0, %__reg_deduce_bounds.exit.i ]
-------------------
[handlePhiNode]
passID: 3
[handlePhiNodeResolvePathConditions] incomingBlockI if.end.i.i.i.i
[handlePhiNodeResolvePathConditions] phiConditionI: if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
     (and (= cmp.i.i.i.i_5_183 #b0) a!5))))))
[handlePhiNodeResolvePathConditions] incomingBlockI __reg_deduce_bounds.exit.i
[handlePhiNodeResolvePathConditions] phiConditionI: __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
[handlePhiNodeResolvePathConditions] path conditions for BBPairI from EdgeAssertionsMap: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
[handlePhiNodeResolvePathConditions] phiResolveI: (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
     (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
[handlePhiNodeResolvePathConditions] BBAssertionsMap: 
[printBBAssertionsMap] 
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
    (= retval.0.i.i.i.i_5_232 phi.bo_5_229))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
    (= retval.0.i.i.i.i_5_232 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_5_232 #x0000003f)
     (= cmp.i.i.i_5_235 #b1)
     (= cmp.i.i.i_5_235 #b0))
  (= sh_prom.i.i.i_5_236 ((_ zero_extend 32) retval.0.i.i.i.i_5_232))
  (= notmask.i.i.i_5_238 (bvshl #xffffffffffffffff sh_prom.i.i.i_5_236))
  (= sub.i.i.i_5_240 (bvxor notmask.i.i.i_5_238 #xffffffffffffffff))
  (= and.i.i336.i_5_241 (bvand notmask.i.i.i_5_238 i.i333.i_5_179))
  (ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.0.0.i.i.i_5_243 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_5_243 and.i.i336.i_5_241))
  (ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.3.0.i.i.i_5_245 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_5_245 sub.i.i.i_5_240))
  (= dst_reg_5_104 i9.i.i_5_246)
  (= dst_reg_5_105 i11.i.i_5_247)
  (= or.i.i.i_5_248 (bvor retval.sroa.0.0.i.i.i_5_243 i9.i.i_5_246))
  (= and.i1.i.i_5_249 (bvand retval.sroa.3.0.i.i.i_5_245 i11.i.i_5_247))
  (= neg.i.i.i_5_251 (bvxor and.i1.i.i_5_249 #xffffffffffffffff))
  (= and4.i.i.i_5_252 (bvand or.i.i.i_5_248 neg.i.i.i_5_251))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
     (and (= cmp.i.i.i.i_5_183 #b0) a!5))))))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
     (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))

=========================
adjust_scalar_min_max_vals.exit
=========================
[handleMemoryPhiNode] Pass #3
phiResolveI (i=0) (=> (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
        (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
    (and (= #x00000001 src_reg_5_267)
         (= src_reg_5_15 src_reg_5_268)
         (= src_reg_5_16 src_reg_5_269)
         (= src_reg_5_17 src_reg_5_270)
         (= src_reg_5_18 src_reg_5_271)
         (= src_reg_5_19 src_reg_5_272)
         (= src_reg_5_20 src_reg_5_273)
         (= src_reg_5_21 src_reg_5_274)
         (= src_reg_5_22 src_reg_5_275)
         (= src_reg_5_23 src_reg_5_276)
         (= src_reg_5_24 src_reg_5_277)
         (= src_reg_5_25 src_reg_5_278)
         (= src_reg_5_26 src_reg_5_279)
         (= src_reg_5_27 src_reg_5_280)
         (= #x00000001 dst_reg_5_253)
         (= dst_reg_5_1 dst_reg_5_254)
         (= dst_reg_5_2 dst_reg_5_255)
         (= dst_reg_5_3 dst_reg_5_256)
         (= #x0000000000000000 dst_reg_5_257)
         (= #xffffffffffffffff dst_reg_5_258)
         (= #x8000000000000000 dst_reg_5_259)
         (= #x7fffffffffffffff dst_reg_5_260)
         (= #x0000000000000000 dst_reg_5_261)
         (= #xffffffffffffffff dst_reg_5_262)
         (= #x00000000 dst_reg_5_263)
         (= dst_reg_5_11 dst_reg_5_264)
         (= dst_reg_5_12 dst_reg_5_265)
         (= dst_reg_5_13 dst_reg_5_266)))
phiResolveI (i=1) (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_5_183 #b0) a!5)
          (and (= cmp.i.i.i.i_5_183 #b1) a!5))
      (and (= src_reg_5_165 src_reg_5_267)
           (= src_reg_5_166 src_reg_5_268)
           (= src_reg_5_167 src_reg_5_269)
           (= src_reg_5_168 src_reg_5_270)
           (= src_reg_5_169 src_reg_5_271)
           (= src_reg_5_170 src_reg_5_272)
           (= src_reg_5_171 src_reg_5_273)
           (= src_reg_5_172 src_reg_5_274)
           (= src_reg_5_173 src_reg_5_275)
           (= src_reg_5_174 src_reg_5_276)
           (= src_reg_5_175 src_reg_5_277)
           (= src_reg_5_176 src_reg_5_278)
           (= src_reg_5_177 src_reg_5_279)
           (= src_reg_5_178 src_reg_5_280)
           (= dst_reg_5_151 dst_reg_5_253)
           (= dst_reg_5_152 dst_reg_5_254)
           (= dst_reg_5_153 dst_reg_5_255)
           (= dst_reg_5_154 dst_reg_5_256)
           (= and4.i.i.i_5_252 dst_reg_5_257)
           (= and.i1.i.i_5_249 dst_reg_5_258)
           (= dst_reg_5_157 dst_reg_5_259)
           (= dst_reg_5_158 dst_reg_5_260)
           (= dst_reg_5_159 dst_reg_5_261)
           (= dst_reg_5_160 dst_reg_5_262)
           (= dst_reg_5_161 dst_reg_5_263)
           (= dst_reg_5_162 dst_reg_5_264)
           (= dst_reg_5_163 dst_reg_5_265)
           (= dst_reg_5_164 dst_reg_5_266)))))))
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Pass #4 handleReturnInst
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
=========================
entry
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i32 1, i32* %type1, align 8
-------------------
=========================
land.lhs.true.i
=========================
=========================
lor.lhs.false20.i
=========================
=========================
if.then26.i
=========================
-------------------
  store i32 1, i32* %type, align 8
-------------------
-------------------
  store i64 0, i64* %var_off.i.i.repack, align 8
-------------------
-------------------
  store i64 -1, i64* %var_off.i.i.repack1, align 8
-------------------
-------------------
  store i32 0, i32* %frameno.i.i, align 8
-------------------
-------------------
  store i64 -9223372036854775808, i64* %smin_value.i.i.i, align 8
-------------------
-------------------
  store i64 9223372036854775807, i64* %smax_value.i.i.i, align 8
-------------------
-------------------
  store i64 0, i64* %umin_value.i.i.i, align 8
-------------------
-------------------
  store i64 -1, i64* %umax_value.i.i.i, align 8
-------------------
=========================
if.end27.i
=========================
=========================
if.then166.i
=========================
-------------------
  store i64 %and170.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 0, i64* %i214.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %smin_value.i111.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %smax_value.i112.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %umin_value.i113.i, align 8
-------------------
-------------------
  store i64 %and170.i, i64* %umax_value.i114.i, align 8
-------------------
=========================
if.end171.i
=========================
-------------------
  store i64 %and.i116.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and9.i.i, i64* %i214.i, align 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %umin_value179.i, align 8
-------------------
-------------------
  store i64 %cond184.i, i64* %umax_value180.i, align 8
-------------------
-------------------
  store i64 %..i, i64* %smin_value186.i, align 8
-------------------
-------------------
  store i64 %.cond184.i, i64* %smax_value199.i, align 8
-------------------
-------------------
  store i64 %cond.i129.i, i64* %smin_value186.i, align 8
-------------------
-------------------
  store i64 %cond14.i135.i, i64* %smax_value199.i, align 8
-------------------
-------------------
  store i64 %and.i116.i, i64* %umin_value179.i, align 8
-------------------
-------------------
  store i64 %cond35.i144.i, i64* %umax_value180.i, align 8
-------------------
=========================
if.end309.i
=========================
=========================
lor.lhs.false.i.i
=========================
=========================
if.then.i329.i
=========================
-------------------
  store i64 %cond.i327.i, i64* %umin_value.i326.i, align 8
-------------------
-------------------
  store i64 %cond.i327.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %umax_value.i328.i, align 8
-------------------
-------------------
  store i64 %cond12.i.i, i64* %smax_value6.i.i, align 8
-------------------
=========================
if.end.i.i
=========================
=========================
if.then17.i.i
=========================
-------------------
  store i64 %i38.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %umax_value15.i.i, align 8
-------------------
-------------------
  store i64 %cond27.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
if.else.i331.i
=========================
=========================
if.then32.i.i
=========================
-------------------
  store i64 %cond40.i.i, i64* %umin_value18.i.i, align 8
-------------------
-------------------
  store i64 %cond40.i.i, i64* %smin_value.i321.i, align 8
-------------------
-------------------
  store i64 %i37.i.i, i64* %smax_value.i324.i, align 8
-------------------
=========================
__reg_deduce_bounds.exit.i
=========================
=========================
if.end.i.i.i.i
=========================
=========================
__reg_bound_offset.exit.i
=========================
-------------------
  store i64 %and4.i.i.i, i64* %i213.i, align 8
-------------------
-------------------
  store i64 %and.i1.i.i, i64* %i214.i, align 8
-------------------
=========================
adjust_scalar_min_max_vals.exit
=========================
[handleReturnInst]
passID: 4
[handleReturnInst]return value: void
[handleReturnInst]allArgsReadOnlyAndNoCapture: 0
[handleReturnInst]mostRecentMemoryDef: 40 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,38})
[handleReturnInst]Function returns void
[functionHasPointerArguments]
[handleReturnInstPointerArgs] 
[handleReturnInstPointerArgs] currentBB: adjust_scalar_min_max_vals.exit
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ and.i1.i.i_5_249 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
}
37 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ i37.i.i_5_141 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
34 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
40 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,38}) : {
- src_reg: [ [ src_reg_5_267 ] [ ] [ src_reg_5_268 ] [ src_reg_5_269 ] [ src_reg_5_270 ] [ [ src_reg_5_271 ] [ src_reg_5_272 ] ] [ src_reg_5_273 ] [ src_reg_5_274 ] [ src_reg_5_275 ] [ src_reg_5_276 ] [ ] [ src_reg_5_277 ] [ src_reg_5_278 ] [ src_reg_5_279 ] [ src_reg_5_280 ] ] 
- dst_reg: [ [ dst_reg_5_253 ] [ ] [ dst_reg_5_254 ] [ dst_reg_5_255 ] [ dst_reg_5_256 ] [ [ dst_reg_5_257 ] [ dst_reg_5_258 ] ] [ dst_reg_5_259 ] [ dst_reg_5_260 ] [ dst_reg_5_261 ] [ dst_reg_5_262 ] [ ] [ dst_reg_5_263 ] [ dst_reg_5_264 ] [ dst_reg_5_265 ] [ dst_reg_5_266 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36}) : {
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

[handleReturnInstPointerArgs] mostRecentMemoryDef: 40 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,38})
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %dst_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_281
[lookInsideStruct] singleValueType:dst_reg_5_281
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_282
[lookInsideStruct] singleValueType:dst_reg_5_282
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_283
[lookInsideStruct] singleValueType:dst_reg_5_283
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_284
[lookInsideStruct] singleValueType:dst_reg_5_284
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_285
[lookInsideStruct] singleValueType:dst_reg_5_285
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_286
[lookInsideStruct] singleValueType:dst_reg_5_286
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_287
[lookInsideStruct] singleValueType:dst_reg_5_287
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_288
[lookInsideStruct] singleValueType:dst_reg_5_288
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_289
[lookInsideStruct] singleValueType:dst_reg_5_289
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_290
[lookInsideStruct] singleValueType:dst_reg_5_290
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_291
[lookInsideStruct] singleValueType:dst_reg_5_291
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_292
[lookInsideStruct] singleValueType:dst_reg_5_292
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_293
[lookInsideStruct] singleValueType:dst_reg_5_293
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: dst_reg_5_294
[lookInsideStruct] singleValueType:dst_reg_5_294
[setupBVTreeForArg] returning BVTree: [ [ dst_reg_5_281 ] [ ] [ dst_reg_5_282 ] [ dst_reg_5_283 ] [ dst_reg_5_284 ] [ [ dst_reg_5_285 ] [ dst_reg_5_286 ] ] [ dst_reg_5_287 ] [ dst_reg_5_288 ] [ dst_reg_5_289 ] [ dst_reg_5_290 ] [ ] [ dst_reg_5_291 ] [ dst_reg_5_292 ] [ dst_reg_5_293 ] [ dst_reg_5_294 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ dst_reg_5_253 ] [ ] [ dst_reg_5_254 ] [ dst_reg_5_255 ] [ dst_reg_5_256 ] [ [ dst_reg_5_257 ] [ dst_reg_5_258 ] ] [ dst_reg_5_259 ] [ dst_reg_5_260 ] [ dst_reg_5_261 ] [ dst_reg_5_262 ] [ ] [ dst_reg_5_263 ] [ dst_reg_5_264 ] [ dst_reg_5_265 ] [ dst_reg_5_266 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= dst_reg_5_253 dst_reg_5_281)
(= dst_reg_5_254 dst_reg_5_282)
(= dst_reg_5_255 dst_reg_5_283)
(= dst_reg_5_256 dst_reg_5_284)
(= dst_reg_5_257 dst_reg_5_285)
(= dst_reg_5_258 dst_reg_5_286)
(= dst_reg_5_259 dst_reg_5_287)
(= dst_reg_5_260 dst_reg_5_288)
(= dst_reg_5_261 dst_reg_5_289)
(= dst_reg_5_262 dst_reg_5_290)
(= dst_reg_5_263 dst_reg_5_291)
(= dst_reg_5_264 dst_reg_5_292)
(= dst_reg_5_265 dst_reg_5_293)
(= dst_reg_5_266 dst_reg_5_294)
[handleReturnInstPointerArgs] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argVal: %struct.bpf_reg_state* %src_reg
[setupBVTreeForArg] argType: %struct.bpf_reg_state*
[setupBVTreeForArg] argType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_295
[lookInsideStruct] singleValueType:src_reg_5_295
[convertAggregateTypeArgToBVTree] internalType: %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_296
[lookInsideStruct] singleValueType:src_reg_5_296
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_297
[lookInsideStruct] singleValueType:src_reg_5_297
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_298
[lookInsideStruct] singleValueType:src_reg_5_298
[convertAggregateTypeArgToBVTree] internalType: %struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_299
[lookInsideStruct] singleValueType:src_reg_5_299
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_300
[lookInsideStruct] singleValueType:src_reg_5_300
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_301
[lookInsideStruct] singleValueType:src_reg_5_301
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_302
[lookInsideStruct] singleValueType:src_reg_5_302
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_303
[lookInsideStruct] singleValueType:src_reg_5_303
[convertAggregateTypeArgToBVTree] internalType: i64
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_304
[lookInsideStruct] singleValueType:src_reg_5_304
[convertAggregateTypeArgToBVTree] internalType: %struct.bpf_reg_state*
[convertAggregateTypeArgToBVTree] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[convertAggregateTypeArgToBVTree] pointer to same type, continuing
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_305
[lookInsideStruct] singleValueType:src_reg_5_305
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_306
[lookInsideStruct] singleValueType:src_reg_5_306
[convertAggregateTypeArgToBVTree] internalType: i32
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_307
[lookInsideStruct] singleValueType:src_reg_5_307
[convertAggregateTypeArgToBVTree] internalType: i8
[getBitVec] returning unique bitvector w/ prefix: src_reg_5_308
[lookInsideStruct] singleValueType:src_reg_5_308
[setupBVTreeForArg] returning BVTree: [ [ src_reg_5_295 ] [ ] [ src_reg_5_296 ] [ src_reg_5_297 ] [ src_reg_5_298 ] [ [ src_reg_5_299 ] [ src_reg_5_300 ] ] [ src_reg_5_301 ] [ src_reg_5_302 ] [ src_reg_5_303 ] [ src_reg_5_304 ] [ ] [ src_reg_5_305 ] [ src_reg_5_306 ] [ src_reg_5_307 ] [ src_reg_5_308 ] ] 
[handleReturnInstPointerArgs] originalBVTreeForArg: [ [ src_reg_5_267 ] [ ] [ src_reg_5_268 ] [ src_reg_5_269 ] [ src_reg_5_270 ] [ [ src_reg_5_271 ] [ src_reg_5_272 ] ] [ src_reg_5_273 ] [ src_reg_5_274 ] [ src_reg_5_275 ] [ src_reg_5_276 ] [ ] [ src_reg_5_277 ] [ src_reg_5_278 ] [ src_reg_5_279 ] [ src_reg_5_280 ] ] 
[handleReturnInstPointerArgs] outputEqExprs:
(= src_reg_5_267 src_reg_5_295)
(= src_reg_5_268 src_reg_5_296)
(= src_reg_5_269 src_reg_5_297)
(= src_reg_5_270 src_reg_5_298)
(= src_reg_5_271 src_reg_5_299)
(= src_reg_5_272 src_reg_5_300)
(= src_reg_5_273 src_reg_5_301)
(= src_reg_5_274 src_reg_5_302)
(= src_reg_5_275 src_reg_5_303)
(= src_reg_5_276 src_reg_5_304)
(= src_reg_5_277 src_reg_5_305)
(= src_reg_5_278 src_reg_5_306)
(= src_reg_5_279 src_reg_5_307)
(= src_reg_5_280 src_reg_5_308)
[handleReturnInstPointerArgs] outputValueBVTreeMap updated: 
- src_reg: [ [ src_reg_5_295 ] [ ] [ src_reg_5_296 ] [ src_reg_5_297 ] [ src_reg_5_298 ] [ [ src_reg_5_299 ] [ src_reg_5_300 ] ] [ src_reg_5_301 ] [ src_reg_5_302 ] [ src_reg_5_303 ] [ src_reg_5_304 ] [ ] [ src_reg_5_305 ] [ src_reg_5_306 ] [ src_reg_5_307 ] [ src_reg_5_308 ] ] 
- dst_reg: [ [ dst_reg_5_281 ] [ ] [ dst_reg_5_282 ] [ dst_reg_5_283 ] [ dst_reg_5_284 ] [ [ dst_reg_5_285 ] [ dst_reg_5_286 ] ] [ dst_reg_5_287 ] [ dst_reg_5_288 ] [ dst_reg_5_289 ] [ dst_reg_5_290 ] [ ] [ dst_reg_5_291 ] [ dst_reg_5_292 ] [ dst_reg_5_293 ] [ dst_reg_5_294 ] ] 

[handleReturnInstPointerArgs] currentBB AssertionsMap updated: 
[printBBAssertionsMap] 
  (=> (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
        (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
    (and (= #x00000001 src_reg_5_267)
         (= src_reg_5_15 src_reg_5_268)
         (= src_reg_5_16 src_reg_5_269)
         (= src_reg_5_17 src_reg_5_270)
         (= src_reg_5_18 src_reg_5_271)
         (= src_reg_5_19 src_reg_5_272)
         (= src_reg_5_20 src_reg_5_273)
         (= src_reg_5_21 src_reg_5_274)
         (= src_reg_5_22 src_reg_5_275)
         (= src_reg_5_23 src_reg_5_276)
         (= src_reg_5_24 src_reg_5_277)
         (= src_reg_5_25 src_reg_5_278)
         (= src_reg_5_26 src_reg_5_279)
         (= src_reg_5_27 src_reg_5_280)
         (= #x00000001 dst_reg_5_253)
         (= dst_reg_5_1 dst_reg_5_254)
         (= dst_reg_5_2 dst_reg_5_255)
         (= dst_reg_5_3 dst_reg_5_256)
         (= #x0000000000000000 dst_reg_5_257)
         (= #xffffffffffffffff dst_reg_5_258)
         (= #x8000000000000000 dst_reg_5_259)
         (= #x7fffffffffffffff dst_reg_5_260)
         (= #x0000000000000000 dst_reg_5_261)
         (= #xffffffffffffffff dst_reg_5_262)
         (= #x00000000 dst_reg_5_263)
         (= dst_reg_5_11 dst_reg_5_264)
         (= dst_reg_5_12 dst_reg_5_265)
         (= dst_reg_5_13 dst_reg_5_266)))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_5_183 #b0) a!5)
          (and (= cmp.i.i.i.i_5_183 #b1) a!5))
      (and (= src_reg_5_165 src_reg_5_267)
           (= src_reg_5_166 src_reg_5_268)
           (= src_reg_5_167 src_reg_5_269)
           (= src_reg_5_168 src_reg_5_270)
           (= src_reg_5_169 src_reg_5_271)
           (= src_reg_5_170 src_reg_5_272)
           (= src_reg_5_171 src_reg_5_273)
           (= src_reg_5_172 src_reg_5_274)
           (= src_reg_5_173 src_reg_5_275)
           (= src_reg_5_174 src_reg_5_276)
           (= src_reg_5_175 src_reg_5_277)
           (= src_reg_5_176 src_reg_5_278)
           (= src_reg_5_177 src_reg_5_279)
           (= src_reg_5_178 src_reg_5_280)
           (= dst_reg_5_151 dst_reg_5_253)
           (= dst_reg_5_152 dst_reg_5_254)
           (= dst_reg_5_153 dst_reg_5_255)
           (= dst_reg_5_154 dst_reg_5_256)
           (= and4.i.i.i_5_252 dst_reg_5_257)
           (= and.i1.i.i_5_249 dst_reg_5_258)
           (= dst_reg_5_157 dst_reg_5_259)
           (= dst_reg_5_158 dst_reg_5_260)
           (= dst_reg_5_159 dst_reg_5_261)
           (= dst_reg_5_160 dst_reg_5_262)
           (= dst_reg_5_161 dst_reg_5_263)
           (= dst_reg_5_162 dst_reg_5_264)
           (= dst_reg_5_163 dst_reg_5_265)
           (= dst_reg_5_164 dst_reg_5_266)))))))
  (= dst_reg_5_253 dst_reg_5_281)
  (= dst_reg_5_254 dst_reg_5_282)
  (= dst_reg_5_255 dst_reg_5_283)
  (= dst_reg_5_256 dst_reg_5_284)
  (= dst_reg_5_257 dst_reg_5_285)
  (= dst_reg_5_258 dst_reg_5_286)
  (= dst_reg_5_259 dst_reg_5_287)
  (= dst_reg_5_260 dst_reg_5_288)
  (= dst_reg_5_261 dst_reg_5_289)
  (= dst_reg_5_262 dst_reg_5_290)
  (= dst_reg_5_263 dst_reg_5_291)
  (= dst_reg_5_264 dst_reg_5_292)
  (= dst_reg_5_265 dst_reg_5_293)
  (= dst_reg_5_266 dst_reg_5_294)
  (= src_reg_5_267 src_reg_5_295)
  (= src_reg_5_268 src_reg_5_296)
  (= src_reg_5_269 src_reg_5_297)
  (= src_reg_5_270 src_reg_5_298)
  (= src_reg_5_271 src_reg_5_299)
  (= src_reg_5_272 src_reg_5_300)
  (= src_reg_5_273 src_reg_5_301)
  (= src_reg_5_274 src_reg_5_302)
  (= src_reg_5_275 src_reg_5_303)
  (= src_reg_5_276 src_reg_5_304)
  (= src_reg_5_277 src_reg_5_305)
  (= src_reg_5_278 src_reg_5_306)
  (= src_reg_5_279 src_reg_5_307)
  (= src_reg_5_280 src_reg_5_308)

[encodeFunctionBody] BBAssertionsMap:
[printBBAssertionsMap] 
BasicBlock: if.end.i.i.i.i, Size:28
  (ite (bvult xor.i.i.i_5_181 #x0000000100000000)
     (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= tobool.not.i.i.i.i.i_5_185 #b0))
  (= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 #x0000000000000020))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187)
     (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))
  (ite (= tobool.not.i.i.i.i.i_5_185 #b1)
     (= spec.select17.i.i.i.i.i_5_191 #x0000001f)
     (= spec.select17.i.i.i.i.i_5_191 #x0000003f))
  (ite (bvult spec.select.i.i.i.i.i_5_188 #x0001000000000000)
     (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= tobool2.not.i.i.i.i.i_5_193 #b0))
  (= sub4.i.i.i.i.i_5_195 (bvadd spec.select17.i.i.i.i.i_5_191 #xfffffff0))
  (= shl5.i.i.i.i.i_5_197 (bvshl spec.select.i.i.i.i.i_5_188 #x0000000000000010))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= word.addr.1.i.i.i.i.i_5_198 shl5.i.i.i.i.i_5_197)
     (= word.addr.1.i.i.i.i.i_5_198 spec.select.i.i.i.i.i_5_188))
  (ite (= tobool2.not.i.i.i.i.i_5_193 #b1)
     (= num.1.i.i.i.i.i_5_199 sub4.i.i.i.i.i_5_195)
     (= num.1.i.i.i.i.i_5_199 spec.select17.i.i.i.i.i_5_191))
  (ite (bvult word.addr.1.i.i.i.i.i_5_198 #x0100000000000000)
     (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= tobool8.not.i.i.i.i.i_5_201 #b0))
  (= sub10.i.i.i.i.i_5_203 (bvadd num.1.i.i.i.i.i_5_199 #xfffffff8))
  (= shl11.i.i.i.i.i_5_205 (bvshl word.addr.1.i.i.i.i.i_5_198 #x0000000000000008))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= word.addr.2.i.i.i.i.i_5_206 shl11.i.i.i.i.i_5_205)
     (= word.addr.2.i.i.i.i.i_5_206 word.addr.1.i.i.i.i.i_5_198))
  (ite (= tobool8.not.i.i.i.i.i_5_201 #b1)
     (= num.2.i.i.i.i.i_5_207 sub10.i.i.i.i.i_5_203)
     (= num.2.i.i.i.i.i_5_207 num.1.i.i.i.i.i_5_199))
  (ite (bvult word.addr.2.i.i.i.i.i_5_206 #x1000000000000000)
     (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= tobool14.not.i.i.i.i.i_5_209 #b0))
  (= sub16.i.i.i.i.i_5_211 (bvadd num.2.i.i.i.i.i_5_207 #xfffffffc))
  (= shl17.i.i.i.i.i_5_213 (bvshl word.addr.2.i.i.i.i.i_5_206 #x0000000000000004))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= word.addr.3.i.i.i.i.i_5_214 shl17.i.i.i.i.i_5_213)
     (= word.addr.3.i.i.i.i.i_5_214 word.addr.2.i.i.i.i.i_5_206))
  (ite (= tobool14.not.i.i.i.i.i_5_209 #b1)
     (= num.3.i.i.i.i.i_5_215 sub16.i.i.i.i.i_5_211)
     (= num.3.i.i.i.i.i_5_215 num.2.i.i.i.i.i_5_207))
  (ite (bvult word.addr.3.i.i.i.i.i_5_214 #x4000000000000000)
     (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= tobool20.not.i.i.i.i.i_5_217 #b0))
  (= sub22.i.i.i.i.i_5_219 (bvadd num.3.i.i.i.i.i_5_215 #x000000fe))
  (= shl23.i.i.i.i.i_5_221 (bvshl word.addr.3.i.i.i.i.i_5_214 #x0000000000000002))
  (ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= word.addr.4.i.i.i.i.i_5_222 shl23.i.i.i.i.i_5_221)
     (= word.addr.4.i.i.i.i.i_5_222 word.addr.3.i.i.i.i.i_5_214))
  (ite (= tobool20.not.i.i.i.i.i_5_217 #b1)
     (= num.4.i.i.i.i.i_5_223 sub22.i.i.i.i.i_5_219)
     (= num.4.i.i.i.i.i_5_223 num.3.i.i.i.i.i_5_215))
  (= word.addr.4.lobit.i.i.i.i.i.neg_5_225
   (bvlshr word.addr.4.i.i.i.i.i_5_222 #x000000000000003f))
  (= i.i.i.i.i.i.neg_5_226
   ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_5_225))
  (= add.i.i.i335.i_5_227 (bvadd num.4.i.i.i.i.i_5_223 i.i.i.i.i.i.neg_5_226))
  (= phi.bo_5_229 (bvand add.i.i.i335.i_5_227 #x000000ff))
BasicBlock: if.then32.i.i, Size:2
  (ite (bvugt i.i322.i_5_128 i38.i.i_5_144)
     (= cmp36.i.i_5_149 #b1)
     (= cmp36.i.i_5_149 #b0))
  (ite (= cmp36.i.i_5_149 #b1)
     (= cond40.i.i_5_150 i.i322.i_5_128)
     (= cond40.i.i_5_150 i38.i.i_5_144))
BasicBlock: __reg_deduce_bounds.exit.i, Size:8
  (= dst_reg_5_159 i.i333.i_5_179)
  (= dst_reg_5_160 i5.i.i_5_180)
  (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))
  (ite (= xor.i.i.i_5_181 #x0000000000000000)
     (= cmp.i.i.i.i_5_183 #b1)
     (= cmp.i.i.i.i_5_183 #b0))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (=> (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
          (and (= cmp.i323.i_5_130 #b1) a!2))
      (and (= src_reg_5_114 src_reg_5_165)
           (= src_reg_5_115 src_reg_5_166)
           (= src_reg_5_116 src_reg_5_167)
           (= src_reg_5_117 src_reg_5_168)
           (= src_reg_5_118 src_reg_5_169)
           (= src_reg_5_119 src_reg_5_170)
           (= src_reg_5_120 src_reg_5_171)
           (= src_reg_5_121 src_reg_5_172)
           (= src_reg_5_122 src_reg_5_173)
           (= src_reg_5_123 src_reg_5_174)
           (= src_reg_5_124 src_reg_5_175)
           (= src_reg_5_125 src_reg_5_176)
           (= src_reg_5_126 src_reg_5_177)
           (= src_reg_5_127 src_reg_5_178)
           (= dst_reg_5_100 dst_reg_5_151)
           (= dst_reg_5_101 dst_reg_5_152)
           (= dst_reg_5_102 dst_reg_5_153)
           (= dst_reg_5_103 dst_reg_5_154)
           (= dst_reg_5_104 dst_reg_5_155)
           (= dst_reg_5_105 dst_reg_5_156)
           (= cond.i327.i_5_136 dst_reg_5_157)
           (= cond12.i.i_5_140 dst_reg_5_158)
           (= cond.i327.i_5_136 dst_reg_5_159)
           (= cond12.i.i_5_140 dst_reg_5_160)
           (= dst_reg_5_110 dst_reg_5_161)
           (= dst_reg_5_111 dst_reg_5_162)
           (= dst_reg_5_112 dst_reg_5_163)
           (= dst_reg_5_113 dst_reg_5_164)))))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (and (= cmp16.i.i_5_143 #b1)
                (= cmp1.i325.i_5_133 #b0)
                (= cmp.i323.i_5_130 #b0)
                (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_5_114 src_reg_5_165)
           (= src_reg_5_115 src_reg_5_166)
           (= src_reg_5_116 src_reg_5_167)
           (= src_reg_5_117 src_reg_5_168)
           (= src_reg_5_118 src_reg_5_169)
           (= src_reg_5_119 src_reg_5_170)
           (= src_reg_5_120 src_reg_5_171)
           (= src_reg_5_121 src_reg_5_172)
           (= src_reg_5_122 src_reg_5_173)
           (= src_reg_5_123 src_reg_5_174)
           (= src_reg_5_124 src_reg_5_175)
           (= src_reg_5_125 src_reg_5_176)
           (= src_reg_5_126 src_reg_5_177)
           (= src_reg_5_127 src_reg_5_178)
           (= dst_reg_5_100 dst_reg_5_151)
           (= dst_reg_5_101 dst_reg_5_152)
           (= dst_reg_5_102 dst_reg_5_153)
           (= dst_reg_5_103 dst_reg_5_154)
           (= dst_reg_5_104 dst_reg_5_155)
           (= dst_reg_5_105 dst_reg_5_156)
           (= i38.i.i_5_144 dst_reg_5_157)
           (= cond27.i.i_5_146 dst_reg_5_158)
           (= dst_reg_5_108 dst_reg_5_159)
           (= cond27.i.i_5_146 dst_reg_5_160)
           (= dst_reg_5_110 dst_reg_5_161)
           (= dst_reg_5_111 dst_reg_5_162)
           (= dst_reg_5_112 dst_reg_5_163)
           (= dst_reg_5_113 dst_reg_5_164)))))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (and (= cmp31.i330.i_5_148 #b0)
                (= cmp16.i.i_5_143 #b0)
                (= cmp1.i325.i_5_133 #b0)
                (= cmp.i323.i_5_130 #b0)
                (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_5_114 src_reg_5_165)
           (= src_reg_5_115 src_reg_5_166)
           (= src_reg_5_116 src_reg_5_167)
           (= src_reg_5_117 src_reg_5_168)
           (= src_reg_5_118 src_reg_5_169)
           (= src_reg_5_119 src_reg_5_170)
           (= src_reg_5_120 src_reg_5_171)
           (= src_reg_5_121 src_reg_5_172)
           (= src_reg_5_122 src_reg_5_173)
           (= src_reg_5_123 src_reg_5_174)
           (= src_reg_5_124 src_reg_5_175)
           (= src_reg_5_125 src_reg_5_176)
           (= src_reg_5_126 src_reg_5_177)
           (= src_reg_5_127 src_reg_5_178)
           (= dst_reg_5_100 dst_reg_5_151)
           (= dst_reg_5_101 dst_reg_5_152)
           (= dst_reg_5_102 dst_reg_5_153)
           (= dst_reg_5_103 dst_reg_5_154)
           (= dst_reg_5_104 dst_reg_5_155)
           (= dst_reg_5_105 dst_reg_5_156)
           (= dst_reg_5_106 dst_reg_5_157)
           (= dst_reg_5_107 dst_reg_5_158)
           (= dst_reg_5_108 dst_reg_5_159)
           (= dst_reg_5_109 dst_reg_5_160)
           (= dst_reg_5_110 dst_reg_5_161)
           (= dst_reg_5_111 dst_reg_5_162)
           (= dst_reg_5_112 dst_reg_5_163)
           (= dst_reg_5_113 dst_reg_5_164)))))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (and (= cmp31.i330.i_5_148 #b1)
                (= cmp16.i.i_5_143 #b0)
                (= cmp1.i325.i_5_133 #b0)
                (= cmp.i323.i_5_130 #b0)
                (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))))
  (=> a!2
      (and (= src_reg_5_114 src_reg_5_165)
           (= src_reg_5_115 src_reg_5_166)
           (= src_reg_5_116 src_reg_5_167)
           (= src_reg_5_117 src_reg_5_168)
           (= src_reg_5_118 src_reg_5_169)
           (= src_reg_5_119 src_reg_5_170)
           (= src_reg_5_120 src_reg_5_171)
           (= src_reg_5_121 src_reg_5_172)
           (= src_reg_5_122 src_reg_5_173)
           (= src_reg_5_123 src_reg_5_174)
           (= src_reg_5_124 src_reg_5_175)
           (= src_reg_5_125 src_reg_5_176)
           (= src_reg_5_126 src_reg_5_177)
           (= src_reg_5_127 src_reg_5_178)
           (= dst_reg_5_100 dst_reg_5_151)
           (= dst_reg_5_101 dst_reg_5_152)
           (= dst_reg_5_102 dst_reg_5_153)
           (= dst_reg_5_103 dst_reg_5_154)
           (= dst_reg_5_104 dst_reg_5_155)
           (= dst_reg_5_105 dst_reg_5_156)
           (= cond40.i.i_5_150 dst_reg_5_157)
           (= i37.i.i_5_141 dst_reg_5_158)
           (= cond40.i.i_5_150 dst_reg_5_159)
           (= dst_reg_5_109 dst_reg_5_160)
           (= dst_reg_5_110 dst_reg_5_161)
           (= dst_reg_5_111 dst_reg_5_162)
           (= dst_reg_5_112 dst_reg_5_163)
           (= dst_reg_5_113 dst_reg_5_164)))))
BasicBlock: entry, Size:36
  (= dst_reg_5_0 dst_reg_5_0)
  (= dst_reg_5_1 dst_reg_5_1)
  (= dst_reg_5_2 dst_reg_5_2)
  (= dst_reg_5_3 dst_reg_5_3)
  (= dst_reg_5_4 dst_reg_5_4)
  (= dst_reg_5_5 dst_reg_5_5)
  (= dst_reg_5_6 dst_reg_5_6)
  (= dst_reg_5_7 dst_reg_5_7)
  (= dst_reg_5_8 dst_reg_5_8)
  (= dst_reg_5_9 dst_reg_5_9)
  (= dst_reg_5_10 dst_reg_5_10)
  (= dst_reg_5_11 dst_reg_5_11)
  (= dst_reg_5_12 dst_reg_5_12)
  (= dst_reg_5_13 dst_reg_5_13)
  (= src_reg_5_14 src_reg_5_14)
  (= src_reg_5_15 src_reg_5_15)
  (= src_reg_5_16 src_reg_5_16)
  (= src_reg_5_17 src_reg_5_17)
  (= src_reg_5_18 src_reg_5_18)
  (= src_reg_5_19 src_reg_5_19)
  (= src_reg_5_20 src_reg_5_20)
  (= src_reg_5_21 src_reg_5_21)
  (= src_reg_5_22 src_reg_5_22)
  (= src_reg_5_23 src_reg_5_23)
  (= src_reg_5_24 src_reg_5_24)
  (= src_reg_5_25 src_reg_5_25)
  (= src_reg_5_26 src_reg_5_26)
  (= src_reg_5_27 src_reg_5_27)
  (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)
  (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)
  (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)
  (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)
  (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)
  (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)
  (ite (= src_reg1.sroa.10.0.copyload_5_31 #x0000000000000000)
     (= tobool.not.i.i_5_37 #b1)
     (= tobool.not.i.i_5_37 #b0))
  (= dst_reg_5_5 i215.i_5_38)
BasicBlock: land.lhs.true.i, Size:8
  (ite (= i215.i_5_38 #x0000000000000000)
     (= tobool.not.i25.i_5_40 #b1)
     (= tobool.not.i25.i_5_40 #b0))
  (ite (distinct src_reg1.sroa.13.0.copyload_5_32
               src_reg1.sroa.15.0.copyload_5_33)
     (= cmp16.not.i_5_41 #b1)
     (= cmp16.not.i_5_41 #b0))
  (ite (distinct src_reg1.sroa.17.0.copyload_5_34
               src_reg1.sroa.22.0.copyload_5_35)
     (= cmp18.not.i_5_42 #b1)
     (= cmp18.not.i_5_42 #b0))
  (ite (= cmp16.not.i_5_41 #b1)
     (= or.cond197.i_5_44 #b1)
     (= or.cond197.i_5_44 cmp18.not.i_5_42))
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.i_5_45 #b1)
     (= cmp21.i_5_45 #b0))
  (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.i_5_47 #b1)
     (= cmp24.i_5_47 #b0))
  (ite (= or.cond198.i_5_46 #b1)
     (= or.cond199.i_5_49 #b1)
     (= or.cond199.i_5_49 cmp24.i_5_47))
BasicBlock: if.end309.i, Size:4
  (= dst_reg_5_106 i.i322.i_5_128)
  (ite (bvsgt i.i322.i_5_128 #xffffffffffffffff)
     (= cmp.i323.i_5_130 #b1)
     (= cmp.i323.i_5_130 #b0))
  (let ((a!1 (and (= i246.i_5_64 #b1)
                (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
                    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_5_114)
           (= src_reg_5_15 src_reg_5_115)
           (= src_reg_5_16 src_reg_5_116)
           (= src_reg_5_17 src_reg_5_117)
           (= src_reg_5_18 src_reg_5_118)
           (= src_reg_5_19 src_reg_5_119)
           (= src_reg_5_20 src_reg_5_120)
           (= src_reg_5_21 src_reg_5_121)
           (= src_reg_5_22 src_reg_5_122)
           (= src_reg_5_23 src_reg_5_123)
           (= src_reg_5_24 src_reg_5_124)
           (= src_reg_5_25 src_reg_5_125)
           (= src_reg_5_26 src_reg_5_126)
           (= src_reg_5_27 src_reg_5_127)
           (= #x00000001 dst_reg_5_100)
           (= dst_reg_5_1 dst_reg_5_101)
           (= dst_reg_5_2 dst_reg_5_102)
           (= dst_reg_5_3 dst_reg_5_103)
           (= and170.i_5_67 dst_reg_5_104)
           (= #x0000000000000000 dst_reg_5_105)
           (= and170.i_5_67 dst_reg_5_106)
           (= and170.i_5_67 dst_reg_5_107)
           (= and170.i_5_67 dst_reg_5_108)
           (= and170.i_5_67 dst_reg_5_109)
           (= dst_reg_5_10 dst_reg_5_110)
           (= dst_reg_5_11 dst_reg_5_111)
           (= dst_reg_5_12 dst_reg_5_112)
           (= dst_reg_5_13 dst_reg_5_113))))
  (let ((a!1 (and (= i246.i_5_64 #b0)
                (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
                    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))))
  (=> a!1
      (and (= #x00000001 src_reg_5_114)
           (= src_reg_5_15 src_reg_5_115)
           (= src_reg_5_16 src_reg_5_116)
           (= src_reg_5_17 src_reg_5_117)
           (= src_reg_5_18 src_reg_5_118)
           (= src_reg_5_19 src_reg_5_119)
           (= src_reg_5_20 src_reg_5_120)
           (= src_reg_5_21 src_reg_5_121)
           (= src_reg_5_22 src_reg_5_122)
           (= src_reg_5_23 src_reg_5_123)
           (= src_reg_5_24 src_reg_5_124)
           (= src_reg_5_25 src_reg_5_125)
           (= src_reg_5_26 src_reg_5_126)
           (= src_reg_5_27 src_reg_5_127)
           (= #x00000001 dst_reg_5_100)
           (= dst_reg_5_1 dst_reg_5_101)
           (= dst_reg_5_2 dst_reg_5_102)
           (= dst_reg_5_3 dst_reg_5_103)
           (= and.i116.i_5_71 dst_reg_5_104)
           (= and9.i.i_5_73 dst_reg_5_105)
           (= cond.i129.i_5_92 dst_reg_5_106)
           (= cond14.i135.i_5_97 dst_reg_5_107)
           (= and.i116.i_5_71 dst_reg_5_108)
           (= cond35.i144.i_5_99 dst_reg_5_109)
           (= dst_reg_5_10 dst_reg_5_110)
           (= dst_reg_5_11 dst_reg_5_111)
           (= dst_reg_5_12 dst_reg_5_112)
           (= dst_reg_5_13 dst_reg_5_113))))
BasicBlock: if.then17.i.i, Size:2
  (ite (bvult i33.i.i_5_131 i37.i.i_5_141)
     (= cmp23.i.i_5_145 #b1)
     (= cmp23.i.i_5_145 #b0))
  (ite (= cmp23.i.i_5_145 #b1)
     (= cond27.i.i_5_146 i33.i.i_5_131)
     (= cond27.i.i_5_146 i37.i.i_5_141))
BasicBlock: if.then26.i, Size:0
BasicBlock: __reg_bound_offset.exit.i, Size:17
  (=> if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
    (= retval.0.i.i.i.i_5_232 phi.bo_5_229))
  (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
    (= retval.0.i.i.i.i_5_232 #x00000000))
  (ite (bvugt retval.0.i.i.i.i_5_232 #x0000003f)
     (= cmp.i.i.i_5_235 #b1)
     (= cmp.i.i.i_5_235 #b0))
  (= sh_prom.i.i.i_5_236 ((_ zero_extend 32) retval.0.i.i.i.i_5_232))
  (= notmask.i.i.i_5_238 (bvshl #xffffffffffffffff sh_prom.i.i.i_5_236))
  (= sub.i.i.i_5_240 (bvxor notmask.i.i.i_5_238 #xffffffffffffffff))
  (= and.i.i336.i_5_241 (bvand notmask.i.i.i_5_238 i.i333.i_5_179))
  (ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.0.0.i.i.i_5_243 #x0000000000000000)
     (= retval.sroa.0.0.i.i.i_5_243 and.i.i336.i_5_241))
  (ite (= cmp.i.i.i_5_235 #b1)
     (= retval.sroa.3.0.i.i.i_5_245 #xffffffffffffffff)
     (= retval.sroa.3.0.i.i.i_5_245 sub.i.i.i_5_240))
  (= dst_reg_5_104 i9.i.i_5_246)
  (= dst_reg_5_105 i11.i.i_5_247)
  (= or.i.i.i_5_248 (bvor retval.sroa.0.0.i.i.i_5_243 i9.i.i_5_246))
  (= and.i1.i.i_5_249 (bvand retval.sroa.3.0.i.i.i_5_245 i11.i.i_5_247))
  (= neg.i.i.i_5_251 (bvxor and.i1.i.i_5_249 #xffffffffffffffff))
  (= and4.i.i.i_5_252 (bvand or.i.i.i_5_248 neg.i.i.i_5_251))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (= if.end.i.i.i.i___reg_bound_offset.exit.i_5_230
     (and (= cmp.i.i.i.i_5_183 #b0) a!5))))))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231
     (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
BasicBlock: if.else.i331.i, Size:1
  (ite (bvslt i38.i.i_5_144 #x0000000000000000)
     (= cmp31.i330.i_5_148 #b1)
     (= cmp31.i330.i_5_148 #b0))
BasicBlock: if.end27.i, Size:5
  (=> lor.lhs.false20.i_if.end27.i_5_62 (= i246.i_5_64 #b0))
  (=> land.lhs.true.i_if.end27.i_5_63 (= i246.i_5_64 tobool.not.i25.i_5_40))
  (= dst_reg_5_4 i247.i_5_66)
  (= lor.lhs.false20.i_if.end27.i_5_62
   (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0)))
  (= land.lhs.true.i_if.end27.i_5_63
   (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
BasicBlock: lor.lhs.false.i.i, Size:2
  (= dst_reg_5_107 i33.i.i_5_131)
  (ite (bvslt i33.i.i_5_131 #x0000000000000000)
     (= cmp1.i325.i_5_133 #b1)
     (= cmp1.i325.i_5_133 #b0))
BasicBlock: lor.lhs.false20.i, Size:3
  (ite (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)
     (= cmp21.old.i_5_50 #b1)
     (= cmp21.old.i_5_50 #b0))
  (ite (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp24.old.i_5_51 #b1)
     (= cmp24.old.i_5_51 #b0))
  (ite (= cmp21.old.i_5_50 #b1)
     (= or.cond200.i_5_53 #b1)
     (= or.cond200.i_5_53 cmp24.old.i_5_51))
BasicBlock: if.then166.i, Size:1
  (= and170.i_5_67 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
BasicBlock: if.end171.i, Size:24
  (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))
  (= or3.i.i_5_70
   (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))
  (= and.i116.i_5_71 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30))
  (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))
  (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))
  (= dst_reg_5_9 i251.i_5_74)
  (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35)
     (= cmp182.i_5_75 #b1)
     (= cmp182.i_5_75 #b0))
  (ite (= cmp182.i_5_75 #b1)
     (= cond184.i_5_76 i251.i_5_74)
     (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))
  (= dst_reg_5_6 i252.i_5_77)
  (ite (bvslt i252.i_5_77 #x0000000000000000)
     (= cmp187.i_5_79 #b1)
     (= cmp187.i_5_79 #b0))
  (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 #x0000000000000000)
     (= cmp190.i_5_81 #b1)
     (= cmp190.i_5_81 #b0))
  (ite (= cmp187.i_5_79 #b1)
     (= or.cond3.i_5_83 #b1)
     (= or.cond3.i_5_83 cmp190.i_5_81))
  (ite (= or.cond3.i_5_83 #b1)
     (= ..i_5_85 #x8000000000000000)
     (= ..i_5_85 and.i116.i_5_71))
  (ite (= or.cond3.i_5_83 #b1)
     (= .cond184.i_5_87 #x7fffffffffffffff)
     (= .cond184.i_5_87 cond184.i_5_76))
  (= and.i126.i_5_89 (bvand and9.i.i_5_73 #x8000000000000000))
  (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))
  (ite (bvsgt ..i_5_85 or.i127.i_5_90)
     (= cmp.i128.i_5_91 #b1)
     (= cmp.i128.i_5_91 #b0))
  (ite (= cmp.i128.i_5_91 #b1)
     (= cond.i129.i_5_92 ..i_5_85)
     (= cond.i129.i_5_92 or.i127.i_5_90))
  (= and7.i132.i_5_94 (bvand and9.i.i_5_73 #x7fffffffffffffff))
  (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))
  (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95)
     (= cmp10.i134.i_5_96 #b1)
     (= cmp10.i134.i_5_96 #b0))
  (ite (= cmp10.i134.i_5_96 #b1)
     (= cond14.i135.i_5_97 .cond184.i_5_87)
     (= cond14.i135.i_5_97 or8.i133.i_5_95))
  (ite (bvult cond184.i_5_76 and8.i117.i_5_72)
     (= cmp31.i143.i_5_98 #b1)
     (= cmp31.i143.i_5_98 #b0))
  (ite (= cmp31.i143.i_5_98 #b1)
     (= cond35.i144.i_5_99 cond184.i_5_76)
     (= cond35.i144.i_5_99 and8.i117.i_5_72))
BasicBlock: if.then.i329.i, Size:7
  (= dst_reg_5_108 i34.i.i_5_134)
  (ite (bvugt i.i322.i_5_128 i34.i.i_5_134)
     (= cmp3.i.i_5_135 #b1)
     (= cmp3.i.i_5_135 #b0))
  (ite (= cmp3.i.i_5_135 #b1)
     (= cond.i327.i_5_136 i.i322.i_5_128)
     (= cond.i327.i_5_136 i34.i.i_5_134))
  (= dst_reg_5_107 i35.i.i_5_137)
  (= dst_reg_5_109 i36.i.i_5_138)
  (ite (bvult i35.i.i_5_137 i36.i.i_5_138)
     (= cmp8.i.i_5_139 #b1)
     (= cmp8.i.i_5_139 #b0))
  (ite (= cmp8.i.i_5_139 #b1)
     (= cond12.i.i_5_140 i35.i.i_5_137)
     (= cond12.i.i_5_140 i36.i.i_5_138))
BasicBlock: adjust_scalar_min_max_vals.exit, Size:30
  (=> (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
        (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
    (and (= #x00000001 src_reg_5_267)
         (= src_reg_5_15 src_reg_5_268)
         (= src_reg_5_16 src_reg_5_269)
         (= src_reg_5_17 src_reg_5_270)
         (= src_reg_5_18 src_reg_5_271)
         (= src_reg_5_19 src_reg_5_272)
         (= src_reg_5_20 src_reg_5_273)
         (= src_reg_5_21 src_reg_5_274)
         (= src_reg_5_22 src_reg_5_275)
         (= src_reg_5_23 src_reg_5_276)
         (= src_reg_5_24 src_reg_5_277)
         (= src_reg_5_25 src_reg_5_278)
         (= src_reg_5_26 src_reg_5_279)
         (= src_reg_5_27 src_reg_5_280)
         (= #x00000001 dst_reg_5_253)
         (= dst_reg_5_1 dst_reg_5_254)
         (= dst_reg_5_2 dst_reg_5_255)
         (= dst_reg_5_3 dst_reg_5_256)
         (= #x0000000000000000 dst_reg_5_257)
         (= #xffffffffffffffff dst_reg_5_258)
         (= #x8000000000000000 dst_reg_5_259)
         (= #x7fffffffffffffff dst_reg_5_260)
         (= #x0000000000000000 dst_reg_5_261)
         (= #xffffffffffffffff dst_reg_5_262)
         (= #x00000000 dst_reg_5_263)
         (= dst_reg_5_11 dst_reg_5_264)
         (= dst_reg_5_12 dst_reg_5_265)
         (= dst_reg_5_13 dst_reg_5_266)))
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (=> (or (and (= cmp.i.i.i.i_5_183 #b0) a!5)
          (and (= cmp.i.i.i.i_5_183 #b1) a!5))
      (and (= src_reg_5_165 src_reg_5_267)
           (= src_reg_5_166 src_reg_5_268)
           (= src_reg_5_167 src_reg_5_269)
           (= src_reg_5_168 src_reg_5_270)
           (= src_reg_5_169 src_reg_5_271)
           (= src_reg_5_170 src_reg_5_272)
           (= src_reg_5_171 src_reg_5_273)
           (= src_reg_5_172 src_reg_5_274)
           (= src_reg_5_173 src_reg_5_275)
           (= src_reg_5_174 src_reg_5_276)
           (= src_reg_5_175 src_reg_5_277)
           (= src_reg_5_176 src_reg_5_278)
           (= src_reg_5_177 src_reg_5_279)
           (= src_reg_5_178 src_reg_5_280)
           (= dst_reg_5_151 dst_reg_5_253)
           (= dst_reg_5_152 dst_reg_5_254)
           (= dst_reg_5_153 dst_reg_5_255)
           (= dst_reg_5_154 dst_reg_5_256)
           (= and4.i.i.i_5_252 dst_reg_5_257)
           (= and.i1.i.i_5_249 dst_reg_5_258)
           (= dst_reg_5_157 dst_reg_5_259)
           (= dst_reg_5_158 dst_reg_5_260)
           (= dst_reg_5_159 dst_reg_5_261)
           (= dst_reg_5_160 dst_reg_5_262)
           (= dst_reg_5_161 dst_reg_5_263)
           (= dst_reg_5_162 dst_reg_5_264)
           (= dst_reg_5_163 dst_reg_5_265)
           (= dst_reg_5_164 dst_reg_5_266)))))))
  (= dst_reg_5_253 dst_reg_5_281)
  (= dst_reg_5_254 dst_reg_5_282)
  (= dst_reg_5_255 dst_reg_5_283)
  (= dst_reg_5_256 dst_reg_5_284)
  (= dst_reg_5_257 dst_reg_5_285)
  (= dst_reg_5_258 dst_reg_5_286)
  (= dst_reg_5_259 dst_reg_5_287)
  (= dst_reg_5_260 dst_reg_5_288)
  (= dst_reg_5_261 dst_reg_5_289)
  (= dst_reg_5_262 dst_reg_5_290)
  (= dst_reg_5_263 dst_reg_5_291)
  (= dst_reg_5_264 dst_reg_5_292)
  (= dst_reg_5_265 dst_reg_5_293)
  (= dst_reg_5_266 dst_reg_5_294)
  (= src_reg_5_267 src_reg_5_295)
  (= src_reg_5_268 src_reg_5_296)
  (= src_reg_5_269 src_reg_5_297)
  (= src_reg_5_270 src_reg_5_298)
  (= src_reg_5_271 src_reg_5_299)
  (= src_reg_5_272 src_reg_5_300)
  (= src_reg_5_273 src_reg_5_301)
  (= src_reg_5_274 src_reg_5_302)
  (= src_reg_5_275 src_reg_5_303)
  (= src_reg_5_276 src_reg_5_304)
  (= src_reg_5_277 src_reg_5_305)
  (= src_reg_5_278 src_reg_5_306)
  (= src_reg_5_279 src_reg_5_307)
  (= src_reg_5_280 src_reg_5_308)
BasicBlock: if.end.i.i, Size:3
  (= dst_reg_5_109 i37.i.i_5_141)
  (ite (bvsgt i37.i.i_5_141 #xffffffffffffffff)
     (= cmp16.i.i_5_143 #b1)
     (= cmp16.i.i_5_143 #b0))
  (= dst_reg_5_108 i38.i.i_5_144)

[encodeFunctionBody] PathConditionsMap:
if.end.i.i.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
if.then32.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
land.lhs.true.i
  (= tobool.not.i.i_5_37 #b1)
if.end309.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1)))
if.then17.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.then26.i
  (or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
__reg_bound_offset.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5) (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
if.else.i331.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
if.end27.i
  (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))
if.end171.i
  (and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
if.then.i329.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
__reg_deduce_bounds.exit.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
  (or (and (= cmp31.i330.i_5_148 #b1) a!3)
      (and (= cmp31.i330.i_5_148 #b0) a!3)
      a!4
      (and (= cmp1.i325.i_5_133 #b1) (and (= cmp.i323.i_5_130 #b0) a!2))
      (and (= cmp.i323.i_5_130 #b1) a!2)))))
lor.lhs.false20.i
  (= tobool.not.i.i_5_37 #b0)
if.then166.i
  (and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
lor.lhs.false.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
adjust_scalar_min_max_vals.exit
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5)
      (and (= cmp.i.i.i.i_5_183 #b1) a!5)
      (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
      (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))))))
if.end.i.i
  (let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[encodeFunctionBody] EdgeAssertionsMap:
<__reg_bound_offset.exit.i, adjust_scalar_min_max_vals.exit> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (or (and (= cmp.i.i.i.i_5_183 #b0) a!5) (and (= cmp.i.i.i.i_5_183 #b1) a!5))))))
<if.end.i.i.i.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b0)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, if.end.i.i.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b0) a!5)))))
<if.else.i331.i, if.then32.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.then17.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end.i.i, if.then17.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b1)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<lor.lhs.false.i.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b1)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, land.lhs.true.i> :(= tobool.not.i.i_5_37 #b1)
<if.end.i.i, if.else.i331.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<entry, lor.lhs.false20.i> :(= tobool.not.i.i_5_37 #b0)
<land.lhs.true.i, if.then26.i> :(and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false.i.i, if.end.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<land.lhs.true.i, if.end27.i> :(and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))
<lor.lhs.false20.i, if.then26.i> :(and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
<lor.lhs.false20.i, if.end27.i> :(and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
<if.end171.i, if.end309.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then26.i, adjust_scalar_min_max_vals.exit> :(or (and (= or.cond200.i_5_53 #b1) (= tobool.not.i.i_5_37 #b0))
    (and (= or.cond199.i_5_49 #b1) (= tobool.not.i.i_5_37 #b1)))
<if.end27.i, if.then166.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.end27.i, if.end171.i> :(and (= i246.i_5_64 #b0)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then.i329.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
  (or (and (= cmp1.i325.i_5_133 #b1) (= cmp.i323.i_5_130 #b0) a!2)
      (and (= cmp.i323.i_5_130 #b1) a!2))))
<if.then166.i, if.end309.i> :(and (= i246.i_5_64 #b1)
     (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
         (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1))))
<if.then32.i.i, __reg_deduce_bounds.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp31.i330.i_5_148 #b1)
       (= cmp16.i.i_5_143 #b0)
       (= cmp1.i325.i_5_133 #b0)
       (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<if.end309.i, if.then.i329.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b1)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
<__reg_deduce_bounds.exit.i, __reg_bound_offset.exit.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
(let ((a!2 (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
(let ((a!3 (and (= cmp16.i.i_5_143 #b0)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2))))
      (a!4 (and (= cmp16.i.i_5_143 #b1)
                (and (= cmp1.i325.i_5_133 #b0)
                     (and (= cmp.i323.i_5_130 #b0) a!2)))))
(let ((a!5 (or (and (= cmp31.i330.i_5_148 #b1) a!3)
               (and (= cmp31.i330.i_5_148 #b0) a!3)
               a!4
               (and (= cmp1.i325.i_5_133 #b1)
                    (and (= cmp.i323.i_5_130 #b0) a!2))
               (and (= cmp.i323.i_5_130 #b1) a!2))))
  (and (= cmp.i.i.i.i_5_183 #b1) a!5)))))
<if.end309.i, lor.lhs.false.i.i> :(let ((a!1 (or (and (= or.cond200.i_5_53 #b0) (= tobool.not.i.i_5_37 #b0))
               (and (= or.cond199.i_5_49 #b0) (= tobool.not.i.i_5_37 #b1)))))
  (and (= cmp.i323.i_5_130 #b0)
       (or (and (= i246.i_5_64 #b0) a!1) (and (= i246.i_5_64 #b1) a!1))))
[encodeFunctionBody] MemoryAccessValueBVTreeMap:
38 = MemoryDef(37) : {
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ and.i1.i.i_5_249 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
}
37 = MemoryDef(39) : {
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ and4.i.i.i_5_252 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
}
36 = MemoryDef(35) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ i37.i.i_5_141 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
35 = MemoryDef(34) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond40.i.i_5_150 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
34 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond40.i.i_5_150 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
33 = MemoryDef(32) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ cond27.i.i_5_146 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
32 = MemoryDef(31) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ cond27.i.i_5_146 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
28 = MemoryDef(27) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
40 = MemoryPhi({if.then26.i,10},{__reg_bound_offset.exit.i,38}) : {
- src_reg: [ [ src_reg_5_267 ] [ ] [ src_reg_5_268 ] [ src_reg_5_269 ] [ src_reg_5_270 ] [ [ src_reg_5_271 ] [ src_reg_5_272 ] ] [ src_reg_5_273 ] [ src_reg_5_274 ] [ src_reg_5_275 ] [ src_reg_5_276 ] [ ] [ src_reg_5_277 ] [ src_reg_5_278 ] [ src_reg_5_279 ] [ src_reg_5_280 ] ] 
- dst_reg: [ [ dst_reg_5_253 ] [ ] [ dst_reg_5_254 ] [ dst_reg_5_255 ] [ dst_reg_5_256 ] [ [ dst_reg_5_257 ] [ dst_reg_5_258 ] ] [ dst_reg_5_259 ] [ dst_reg_5_260 ] [ dst_reg_5_261 ] [ dst_reg_5_262 ] [ ] [ dst_reg_5_263 ] [ dst_reg_5_264 ] [ dst_reg_5_265 ] [ dst_reg_5_266 ] ] 
}
20 = MemoryDef(19) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
0 = MemoryDef(liveOnEntry) : {
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
27 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
30 = MemoryDef(29) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}
6 = MemoryDef(5) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
29 = MemoryDef(28) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ cond.i327.i_5_136 ] [ dst_reg_5_107 ] [ cond.i327.i_5_136 ] [ cond12.i.i_5_140 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
5 = MemoryDef(4) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
23 = MemoryDef(22) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
4 = MemoryDef(3) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
12 = MemoryDef(11) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
3 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
8 = MemoryDef(7) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
31 = MemoryDef(41) : {
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ i38.i.i_5_144 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
}
1 = MemoryDef(liveOnEntry) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
15 = MemoryDef(14) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
11 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
16 = MemoryDef(15) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
17 = MemoryDef(2) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
9 = MemoryDef(8) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
13 = MemoryDef(12) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
18 = MemoryDef(17) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
10 = MemoryDef(9) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ #x7fffffffffffffff ] [ #x0000000000000000 ] [ #xffffffffffffffff ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
14 = MemoryDef(13) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and170.i_5_67 ] [ #x0000000000000000 ] ] [ and170.i_5_67 ] [ and170.i_5_67 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
19 = MemoryDef(18) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
21 = MemoryDef(20) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ dst_reg_5_7 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
22 = MemoryDef(21) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ ..i_5_85 ] [ .cond184.i_5_87 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
39 = MemoryPhi({if.then.i329.i,30},{if.then17.i.i,33},{if.else.i331.i,41},{if.then32.i.i,36}) : {
- src_reg: [ [ src_reg_5_165 ] [ ] [ src_reg_5_166 ] [ src_reg_5_167 ] [ src_reg_5_168 ] [ [ src_reg_5_169 ] [ src_reg_5_170 ] ] [ src_reg_5_171 ] [ src_reg_5_172 ] [ src_reg_5_173 ] [ src_reg_5_174 ] [ ] [ src_reg_5_175 ] [ src_reg_5_176 ] [ src_reg_5_177 ] [ src_reg_5_178 ] ] 
- dst_reg: [ [ dst_reg_5_151 ] [ ] [ dst_reg_5_152 ] [ dst_reg_5_153 ] [ dst_reg_5_154 ] [ [ dst_reg_5_155 ] [ dst_reg_5_156 ] ] [ dst_reg_5_157 ] [ dst_reg_5_158 ] [ dst_reg_5_159 ] [ dst_reg_5_160 ] [ ] [ dst_reg_5_161 ] [ dst_reg_5_162 ] [ dst_reg_5_163 ] [ dst_reg_5_164 ] ] 
}
24 = MemoryDef(23) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
25 = MemoryDef(24) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond184.i_5_76 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
2 = MemoryDef(1) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
26 = MemoryDef(25) : {
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ and.i116.i_5_71 ] [ and9.i.i_5_73 ] ] [ cond.i129.i_5_92 ] [ cond14.i135.i_5_97 ] [ and.i116.i_5_71 ] [ cond35.i144.i_5_99 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
}
7 = MemoryDef(6) : {
- dst_reg: [ [ #x00000001 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ #x0000000000000000 ] [ #xffffffffffffffff ] ] [ #x8000000000000000 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ #x00000000 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
- src_reg: [ [ #x00000001 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
}
41 = MemoryPhi({if.then166.i,16},{if.end171.i,26}) : {
- src_reg: [ [ src_reg_5_114 ] [ ] [ src_reg_5_115 ] [ src_reg_5_116 ] [ src_reg_5_117 ] [ [ src_reg_5_118 ] [ src_reg_5_119 ] ] [ src_reg_5_120 ] [ src_reg_5_121 ] [ src_reg_5_122 ] [ src_reg_5_123 ] [ ] [ src_reg_5_124 ] [ src_reg_5_125 ] [ src_reg_5_126 ] [ src_reg_5_127 ] ] 
- dst_reg: [ [ dst_reg_5_100 ] [ ] [ dst_reg_5_101 ] [ dst_reg_5_102 ] [ dst_reg_5_103 ] [ [ dst_reg_5_104 ] [ dst_reg_5_105 ] ] [ dst_reg_5_106 ] [ dst_reg_5_107 ] [ dst_reg_5_108 ] [ dst_reg_5_109 ] [ ] [ dst_reg_5_110 ] [ dst_reg_5_111 ] [ dst_reg_5_112 ] [ dst_reg_5_113 ] ] 
}

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Creating formula...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Finalizing JSON input and output dictionaries...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
[populateInputAndOutputJsonDict] Populating input json dict
[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %dst_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_5_0 ] [ ] [ dst_reg_5_1 ] [ dst_reg_5_2 ] [ dst_reg_5_3 ] [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] [ dst_reg_5_6 ] [ dst_reg_5_7 ] [ dst_reg_5_8 ] [ dst_reg_5_9 ] [ ] [ dst_reg_5_10 ] [ dst_reg_5_11 ] [ dst_reg_5_12 ] [ dst_reg_5_13 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_0 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_1 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_2 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_3 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_5_4 ] [ dst_reg_5_5 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_4 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_4"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_5 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_4",
	"dst_reg_5_5"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3",
	[
		"dst_reg_5_4",
		"dst_reg_5_5"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_6 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3",
	[
		"dst_reg_5_4",
		"dst_reg_5_5"
	],
	"dst_reg_5_6"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_7 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3",
	[
		"dst_reg_5_4",
		"dst_reg_5_5"
	],
	"dst_reg_5_6",
	"dst_reg_5_7"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_8 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3",
	[
		"dst_reg_5_4",
		"dst_reg_5_5"
	],
	"dst_reg_5_6",
	"dst_reg_5_7",
	"dst_reg_5_8"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_9 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3",
	[
		"dst_reg_5_4",
		"dst_reg_5_5"
	],
	"dst_reg_5_6",
	"dst_reg_5_7",
	"dst_reg_5_8",
	"dst_reg_5_9"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3",
	[
		"dst_reg_5_4",
		"dst_reg_5_5"
	],
	"dst_reg_5_6",
	"dst_reg_5_7",
	"dst_reg_5_8",
	"dst_reg_5_9",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_10 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3",
	[
		"dst_reg_5_4",
		"dst_reg_5_5"
	],
	"dst_reg_5_6",
	"dst_reg_5_7",
	"dst_reg_5_8",
	"dst_reg_5_9",
	"",
	"",
	"dst_reg_5_10"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_11 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3",
	[
		"dst_reg_5_4",
		"dst_reg_5_5"
	],
	"dst_reg_5_6",
	"dst_reg_5_7",
	"dst_reg_5_8",
	"dst_reg_5_9",
	"",
	"",
	"dst_reg_5_10",
	"dst_reg_5_11"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_5_12 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_0",
	[
		""
	],
	"dst_reg_5_1",
	"dst_reg_5_2",
	"dst_reg_5_3",
	[
		"dst_reg_5_4",
		"dst_reg_5_5"
	],
	"dst_reg_5_6",
	"dst_reg_5_7",
	"dst_reg_5_8",
	"dst_reg_5_9",
	"",
	"",
	"dst_reg_5_10",
	"dst_reg_5_11",
	"dst_reg_5_12"
]

[populateInputAndOutputJsonDict] argVal: %struct.bpf_reg_state* %src_reg
[populateInputAndOutputJsonDict] argValInputBVTree: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_5_14 ] [ ] [ src_reg_5_15 ] [ src_reg_5_16 ] [ src_reg_5_17 ] [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] [ src_reg_5_20 ] [ src_reg_5_21 ] [ src_reg_5_22 ] [ src_reg_5_23 ] [ ] [ src_reg_5_24 ] [ src_reg_5_25 ] [ src_reg_5_26 ] [ src_reg_5_27 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_14 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_15 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_16 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_17 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_5_18 ] [ src_reg_5_19 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_5_18 ] [ src_reg_5_19 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_18 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_18"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_19 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_18",
	"src_reg_5_19"
]

[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17",
	[
		"src_reg_5_18",
		"src_reg_5_19"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_20 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17",
	[
		"src_reg_5_18",
		"src_reg_5_19"
	],
	"src_reg_5_20"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_21 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17",
	[
		"src_reg_5_18",
		"src_reg_5_19"
	],
	"src_reg_5_20",
	"src_reg_5_21"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_22 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17",
	[
		"src_reg_5_18",
		"src_reg_5_19"
	],
	"src_reg_5_20",
	"src_reg_5_21",
	"src_reg_5_22"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_23 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17",
	[
		"src_reg_5_18",
		"src_reg_5_19"
	],
	"src_reg_5_20",
	"src_reg_5_21",
	"src_reg_5_22",
	"src_reg_5_23"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17",
	[
		"src_reg_5_18",
		"src_reg_5_19"
	],
	"src_reg_5_20",
	"src_reg_5_21",
	"src_reg_5_22",
	"src_reg_5_23",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_24 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17",
	[
		"src_reg_5_18",
		"src_reg_5_19"
	],
	"src_reg_5_20",
	"src_reg_5_21",
	"src_reg_5_22",
	"src_reg_5_23",
	"",
	"",
	"src_reg_5_24"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_25 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17",
	[
		"src_reg_5_18",
		"src_reg_5_19"
	],
	"src_reg_5_20",
	"src_reg_5_21",
	"src_reg_5_22",
	"src_reg_5_23",
	"",
	"",
	"src_reg_5_24",
	"src_reg_5_25"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_5_26 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_14",
	[
		""
	],
	"src_reg_5_15",
	"src_reg_5_16",
	"src_reg_5_17",
	[
		"src_reg_5_18",
		"src_reg_5_19"
	],
	"src_reg_5_20",
	"src_reg_5_21",
	"src_reg_5_22",
	"src_reg_5_23",
	"",
	"",
	"src_reg_5_24",
	"src_reg_5_25",
	"src_reg_5_26"
]

[populateInputAndOutputJsonDict] Populating output json dict
[populateInputAndOutputJsonDict] outputBVTree: [ [ src_reg_5_295 ] [ ] [ src_reg_5_296 ] [ src_reg_5_297 ] [ src_reg_5_298 ] [ [ src_reg_5_299 ] [ src_reg_5_300 ] ] [ src_reg_5_301 ] [ src_reg_5_302 ] [ src_reg_5_303 ] [ src_reg_5_304 ] [ ] [ src_reg_5_305 ] [ src_reg_5_306 ] [ src_reg_5_307 ] [ src_reg_5_308 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_5_295 ] [ ] [ src_reg_5_296 ] [ src_reg_5_297 ] [ src_reg_5_298 ] [ [ src_reg_5_299 ] [ src_reg_5_300 ] ] [ src_reg_5_301 ] [ src_reg_5_302 ] [ src_reg_5_303 ] [ src_reg_5_304 ] [ ] [ src_reg_5_305 ] [ src_reg_5_306 ] [ src_reg_5_307 ] [ src_reg_5_308 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_295 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_296 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_297 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_298 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ src_reg_5_299 ] [ src_reg_5_300 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ src_reg_5_299 ] [ src_reg_5_300 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_299 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_299"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_300 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_299",
	"src_reg_5_300"
]

[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298",
	[
		"src_reg_5_299",
		"src_reg_5_300"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_301 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298",
	[
		"src_reg_5_299",
		"src_reg_5_300"
	],
	"src_reg_5_301"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_302 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298",
	[
		"src_reg_5_299",
		"src_reg_5_300"
	],
	"src_reg_5_301",
	"src_reg_5_302"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_303 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298",
	[
		"src_reg_5_299",
		"src_reg_5_300"
	],
	"src_reg_5_301",
	"src_reg_5_302",
	"src_reg_5_303"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ src_reg_5_304 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298",
	[
		"src_reg_5_299",
		"src_reg_5_300"
	],
	"src_reg_5_301",
	"src_reg_5_302",
	"src_reg_5_303",
	"src_reg_5_304"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298",
	[
		"src_reg_5_299",
		"src_reg_5_300"
	],
	"src_reg_5_301",
	"src_reg_5_302",
	"src_reg_5_303",
	"src_reg_5_304",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_305 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298",
	[
		"src_reg_5_299",
		"src_reg_5_300"
	],
	"src_reg_5_301",
	"src_reg_5_302",
	"src_reg_5_303",
	"src_reg_5_304",
	"",
	"",
	"src_reg_5_305"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ src_reg_5_306 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298",
	[
		"src_reg_5_299",
		"src_reg_5_300"
	],
	"src_reg_5_301",
	"src_reg_5_302",
	"src_reg_5_303",
	"src_reg_5_304",
	"",
	"",
	"src_reg_5_305",
	"src_reg_5_306"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ src_reg_5_307 ] 
[JsonRecursive] jsonRoot:[
	"src_reg_5_295",
	[
		""
	],
	"src_reg_5_296",
	"src_reg_5_297",
	"src_reg_5_298",
	[
		"src_reg_5_299",
		"src_reg_5_300"
	],
	"src_reg_5_301",
	"src_reg_5_302",
	"src_reg_5_303",
	"src_reg_5_304",
	"",
	"",
	"src_reg_5_305",
	"src_reg_5_306",
	"src_reg_5_307"
]

[populateInputAndOutputJsonDict] outputBVTree: [ [ dst_reg_5_281 ] [ ] [ dst_reg_5_282 ] [ dst_reg_5_283 ] [ dst_reg_5_284 ] [ [ dst_reg_5_285 ] [ dst_reg_5_286 ] ] [ dst_reg_5_287 ] [ dst_reg_5_288 ] [ dst_reg_5_289 ] [ dst_reg_5_290 ] [ ] [ dst_reg_5_291 ] [ dst_reg_5_292 ] [ dst_reg_5_293 ] [ dst_reg_5_294 ] ] 
[getJsonDictFromValueBVTree] type: %struct.bpf_reg_state*
[getJsonDictFromValueBVTree] type (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[isRelevantStruct] struct.bpf_reg_state 1
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_5_281 ] [ ] [ dst_reg_5_282 ] [ dst_reg_5_283 ] [ dst_reg_5_284 ] [ [ dst_reg_5_285 ] [ dst_reg_5_286 ] ] [ dst_reg_5_287 ] [ dst_reg_5_288 ] [ dst_reg_5_289 ] [ dst_reg_5_290 ] [ ] [ dst_reg_5_291 ] [ dst_reg_5_292 ] [ dst_reg_5_293 ] [ dst_reg_5_294 ] ] 
[JsonRecursive] baseStructType: struct.bpf_reg_state
[JsonRecursive] recursionDepth: 0
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_281 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281"
]

[JsonRecursive] internalType: %union.anon.147 = type { %struct.bpf_map* }
[JsonRecursive] internalStructType:%union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] %union.anon.147 = type { %struct.bpf_map* }
[isRelevantStruct] union.anon.147 0
[JsonRecursive] opaque or not relevant
[JsonRecursive] childJsonValue:[
	""
]

[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	]
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_282 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_283 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_284 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284"
]

[JsonRecursive] internalType: %struct.tnum = type { i64, i64 }
[JsonRecursive] internalStructType:%struct.tnum = type { i64, i64 }
[isRelevantStruct] %struct.tnum = type { i64, i64 }
[isRelevantStruct] struct.tnum 1
[JsonRecursive] relevant
[JsonRecursive] childBVTree:[ [ dst_reg_5_285 ] [ dst_reg_5_286 ] ] 
[JsonRecursive] jsonRoot: []

[JsonRecursive] bvTreeRoot: [ [ dst_reg_5_285 ] [ dst_reg_5_286 ] ] 
[JsonRecursive] baseStructType: struct.tnum
[JsonRecursive] recursionDepth: 1
[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_285 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_285"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_286 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_285",
	"dst_reg_5_286"
]

[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284",
	[
		"dst_reg_5_285",
		"dst_reg_5_286"
	]
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_287 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284",
	[
		"dst_reg_5_285",
		"dst_reg_5_286"
	],
	"dst_reg_5_287"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_288 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284",
	[
		"dst_reg_5_285",
		"dst_reg_5_286"
	],
	"dst_reg_5_287",
	"dst_reg_5_288"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_289 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284",
	[
		"dst_reg_5_285",
		"dst_reg_5_286"
	],
	"dst_reg_5_287",
	"dst_reg_5_288",
	"dst_reg_5_289"
]

[JsonRecursive] internalType: i64
[JsonRecursive] isIntegerTy:i64
[JsonRecursive] internalBVTree:[ dst_reg_5_290 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284",
	[
		"dst_reg_5_285",
		"dst_reg_5_286"
	],
	"dst_reg_5_287",
	"dst_reg_5_288",
	"dst_reg_5_289",
	"dst_reg_5_290"
]

[JsonRecursive] internalType: %struct.bpf_reg_state*
[JsonRecursive] internalType (updated): %struct.bpf_reg_state = type { i32, %union.anon.147, i32, i32, i32, %struct.tnum, i64, i64, i64, i64, %struct.bpf_reg_state*, i32, i32, i32, i8 }
[JsonRecursive] pointer to same type (i.e. linked list), continuing
[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284",
	[
		"dst_reg_5_285",
		"dst_reg_5_286"
	],
	"dst_reg_5_287",
	"dst_reg_5_288",
	"dst_reg_5_289",
	"dst_reg_5_290",
	"",
	""
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_291 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284",
	[
		"dst_reg_5_285",
		"dst_reg_5_286"
	],
	"dst_reg_5_287",
	"dst_reg_5_288",
	"dst_reg_5_289",
	"dst_reg_5_290",
	"",
	"",
	"dst_reg_5_291"
]

[JsonRecursive] internalType: i32
[JsonRecursive] isIntegerTy:i32
[JsonRecursive] internalBVTree:[ dst_reg_5_292 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284",
	[
		"dst_reg_5_285",
		"dst_reg_5_286"
	],
	"dst_reg_5_287",
	"dst_reg_5_288",
	"dst_reg_5_289",
	"dst_reg_5_290",
	"",
	"",
	"dst_reg_5_291",
	"dst_reg_5_292"
]

[JsonRecursive] internalType: i8
[JsonRecursive] isIntegerTy:i8
[JsonRecursive] internalBVTree:[ dst_reg_5_293 ] 
[JsonRecursive] jsonRoot:[
	"dst_reg_5_281",
	[
		""
	],
	"dst_reg_5_282",
	"dst_reg_5_283",
	"dst_reg_5_284",
	[
		"dst_reg_5_285",
		"dst_reg_5_286"
	],
	"dst_reg_5_287",
	"dst_reg_5_288",
	"dst_reg_5_289",
	"dst_reg_5_290",
	"",
	"",
	"dst_reg_5_291",
	"dst_reg_5_292",
	"dst_reg_5_293"
]

<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Printing Encoding...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
---------
Function: adjust_scalar_min_max_vals_wrapper_BPF_AND
---------
---------
Inputs: 
{
   "dst_reg" : [
      "dst_reg_5_0",
      [ "" ],
      "dst_reg_5_1",
      "dst_reg_5_2",
      "dst_reg_5_3",
      [ "dst_reg_5_4", "dst_reg_5_5" ],
      "dst_reg_5_6",
      "dst_reg_5_7",
      "dst_reg_5_8",
      "dst_reg_5_9",
      "",
      "",
      "dst_reg_5_10",
      "dst_reg_5_11",
      "dst_reg_5_12"
   ],
   "src_reg" : [
      "src_reg_5_14",
      [ "" ],
      "src_reg_5_15",
      "src_reg_5_16",
      "src_reg_5_17",
      [ "src_reg_5_18", "src_reg_5_19" ],
      "src_reg_5_20",
      "src_reg_5_21",
      "src_reg_5_22",
      "src_reg_5_23",
      "",
      "",
      "src_reg_5_24",
      "src_reg_5_25",
      "src_reg_5_26"
   ]
}

---------

---------
Outputs: 
{
   "dst_reg" : [
      "dst_reg_5_281",
      [ "" ],
      "dst_reg_5_282",
      "dst_reg_5_283",
      "dst_reg_5_284",
      [ "dst_reg_5_285", "dst_reg_5_286" ],
      "dst_reg_5_287",
      "dst_reg_5_288",
      "dst_reg_5_289",
      "dst_reg_5_290",
      "",
      "",
      "dst_reg_5_291",
      "dst_reg_5_292",
      "dst_reg_5_293"
   ],
   "src_reg" : [
      "src_reg_5_295",
      [ "" ],
      "src_reg_5_296",
      "src_reg_5_297",
      "src_reg_5_298",
      [ "src_reg_5_299", "src_reg_5_300" ],
      "src_reg_5_301",
      "src_reg_5_302",
      "src_reg_5_303",
      "src_reg_5_304",
      "",
      "",
      "src_reg_5_305",
      "src_reg_5_306",
      "src_reg_5_307"
   ]
}


---------
Solver: 
; 
(set-info :status unknown)
(declare-fun i38.i.i_5_144 () (_ BitVec 64))
(declare-fun dst_reg_5_108 () (_ BitVec 64))
(declare-fun cmp16.i.i_5_143 () (_ BitVec 1))
(declare-fun i37.i.i_5_141 () (_ BitVec 64))
(declare-fun dst_reg_5_109 () (_ BitVec 64))
(declare-fun tobool.not.i.i_5_37 () (_ BitVec 1))
(declare-fun or.cond199.i_5_49 () (_ BitVec 1))
(declare-fun or.cond200.i_5_53 () (_ BitVec 1))
(declare-fun i246.i_5_64 () (_ BitVec 1))
(declare-fun cmp.i323.i_5_130 () (_ BitVec 1))
(declare-fun cmp1.i325.i_5_133 () (_ BitVec 1))
(declare-fun src_reg_5_308 () (_ BitVec 8))
(declare-fun src_reg_5_280 () (_ BitVec 8))
(declare-fun src_reg_5_307 () (_ BitVec 32))
(declare-fun src_reg_5_279 () (_ BitVec 32))
(declare-fun src_reg_5_306 () (_ BitVec 32))
(declare-fun src_reg_5_278 () (_ BitVec 32))
(declare-fun src_reg_5_305 () (_ BitVec 32))
(declare-fun src_reg_5_277 () (_ BitVec 32))
(declare-fun src_reg_5_304 () (_ BitVec 64))
(declare-fun src_reg_5_276 () (_ BitVec 64))
(declare-fun src_reg_5_303 () (_ BitVec 64))
(declare-fun src_reg_5_275 () (_ BitVec 64))
(declare-fun src_reg_5_302 () (_ BitVec 64))
(declare-fun src_reg_5_274 () (_ BitVec 64))
(declare-fun src_reg_5_301 () (_ BitVec 64))
(declare-fun src_reg_5_273 () (_ BitVec 64))
(declare-fun src_reg_5_300 () (_ BitVec 64))
(declare-fun src_reg_5_272 () (_ BitVec 64))
(declare-fun src_reg_5_299 () (_ BitVec 64))
(declare-fun src_reg_5_271 () (_ BitVec 64))
(declare-fun src_reg_5_298 () (_ BitVec 32))
(declare-fun src_reg_5_270 () (_ BitVec 32))
(declare-fun src_reg_5_297 () (_ BitVec 32))
(declare-fun src_reg_5_269 () (_ BitVec 32))
(declare-fun src_reg_5_296 () (_ BitVec 32))
(declare-fun src_reg_5_268 () (_ BitVec 32))
(declare-fun src_reg_5_295 () (_ BitVec 32))
(declare-fun src_reg_5_267 () (_ BitVec 32))
(declare-fun dst_reg_5_294 () (_ BitVec 8))
(declare-fun dst_reg_5_266 () (_ BitVec 8))
(declare-fun dst_reg_5_293 () (_ BitVec 32))
(declare-fun dst_reg_5_265 () (_ BitVec 32))
(declare-fun dst_reg_5_292 () (_ BitVec 32))
(declare-fun dst_reg_5_264 () (_ BitVec 32))
(declare-fun dst_reg_5_291 () (_ BitVec 32))
(declare-fun dst_reg_5_263 () (_ BitVec 32))
(declare-fun dst_reg_5_290 () (_ BitVec 64))
(declare-fun dst_reg_5_262 () (_ BitVec 64))
(declare-fun dst_reg_5_289 () (_ BitVec 64))
(declare-fun dst_reg_5_261 () (_ BitVec 64))
(declare-fun dst_reg_5_288 () (_ BitVec 64))
(declare-fun dst_reg_5_260 () (_ BitVec 64))
(declare-fun dst_reg_5_287 () (_ BitVec 64))
(declare-fun dst_reg_5_259 () (_ BitVec 64))
(declare-fun dst_reg_5_286 () (_ BitVec 64))
(declare-fun dst_reg_5_258 () (_ BitVec 64))
(declare-fun dst_reg_5_285 () (_ BitVec 64))
(declare-fun dst_reg_5_257 () (_ BitVec 64))
(declare-fun dst_reg_5_284 () (_ BitVec 32))
(declare-fun dst_reg_5_256 () (_ BitVec 32))
(declare-fun dst_reg_5_283 () (_ BitVec 32))
(declare-fun dst_reg_5_255 () (_ BitVec 32))
(declare-fun dst_reg_5_282 () (_ BitVec 32))
(declare-fun dst_reg_5_254 () (_ BitVec 32))
(declare-fun dst_reg_5_281 () (_ BitVec 32))
(declare-fun dst_reg_5_253 () (_ BitVec 32))
(declare-fun dst_reg_5_164 () (_ BitVec 8))
(declare-fun dst_reg_5_163 () (_ BitVec 32))
(declare-fun dst_reg_5_162 () (_ BitVec 32))
(declare-fun dst_reg_5_161 () (_ BitVec 32))
(declare-fun dst_reg_5_160 () (_ BitVec 64))
(declare-fun dst_reg_5_159 () (_ BitVec 64))
(declare-fun dst_reg_5_158 () (_ BitVec 64))
(declare-fun dst_reg_5_157 () (_ BitVec 64))
(declare-fun and.i1.i.i_5_249 () (_ BitVec 64))
(declare-fun and4.i.i.i_5_252 () (_ BitVec 64))
(declare-fun dst_reg_5_154 () (_ BitVec 32))
(declare-fun dst_reg_5_153 () (_ BitVec 32))
(declare-fun dst_reg_5_152 () (_ BitVec 32))
(declare-fun dst_reg_5_151 () (_ BitVec 32))
(declare-fun src_reg_5_178 () (_ BitVec 8))
(declare-fun src_reg_5_177 () (_ BitVec 32))
(declare-fun src_reg_5_176 () (_ BitVec 32))
(declare-fun src_reg_5_175 () (_ BitVec 32))
(declare-fun src_reg_5_174 () (_ BitVec 64))
(declare-fun src_reg_5_173 () (_ BitVec 64))
(declare-fun src_reg_5_172 () (_ BitVec 64))
(declare-fun src_reg_5_171 () (_ BitVec 64))
(declare-fun src_reg_5_170 () (_ BitVec 64))
(declare-fun src_reg_5_169 () (_ BitVec 64))
(declare-fun src_reg_5_168 () (_ BitVec 32))
(declare-fun src_reg_5_167 () (_ BitVec 32))
(declare-fun src_reg_5_166 () (_ BitVec 32))
(declare-fun src_reg_5_165 () (_ BitVec 32))
(declare-fun cmp31.i330.i_5_148 () (_ BitVec 1))
(declare-fun cmp.i.i.i.i_5_183 () (_ BitVec 1))
(declare-fun dst_reg_5_13 () (_ BitVec 8))
(declare-fun dst_reg_5_12 () (_ BitVec 32))
(declare-fun dst_reg_5_11 () (_ BitVec 32))
(declare-fun dst_reg_5_3 () (_ BitVec 32))
(declare-fun dst_reg_5_2 () (_ BitVec 32))
(declare-fun dst_reg_5_1 () (_ BitVec 32))
(declare-fun src_reg_5_27 () (_ BitVec 8))
(declare-fun src_reg_5_26 () (_ BitVec 32))
(declare-fun src_reg_5_25 () (_ BitVec 32))
(declare-fun src_reg_5_24 () (_ BitVec 32))
(declare-fun src_reg_5_23 () (_ BitVec 64))
(declare-fun src_reg_5_22 () (_ BitVec 64))
(declare-fun src_reg_5_21 () (_ BitVec 64))
(declare-fun src_reg_5_20 () (_ BitVec 64))
(declare-fun src_reg_5_19 () (_ BitVec 64))
(declare-fun src_reg_5_18 () (_ BitVec 64))
(declare-fun src_reg_5_17 () (_ BitVec 32))
(declare-fun src_reg_5_16 () (_ BitVec 32))
(declare-fun src_reg_5_15 () (_ BitVec 32))
(declare-fun i36.i.i_5_138 () (_ BitVec 64))
(declare-fun cond12.i.i_5_140 () (_ BitVec 64))
(declare-fun i35.i.i_5_137 () (_ BitVec 64))
(declare-fun cmp8.i.i_5_139 () (_ BitVec 1))
(declare-fun dst_reg_5_107 () (_ BitVec 64))
(declare-fun i34.i.i_5_134 () (_ BitVec 64))
(declare-fun cond.i327.i_5_136 () (_ BitVec 64))
(declare-fun i.i322.i_5_128 () (_ BitVec 64))
(declare-fun cmp3.i.i_5_135 () (_ BitVec 1))
(declare-fun and8.i117.i_5_72 () (_ BitVec 64))
(declare-fun cond35.i144.i_5_99 () (_ BitVec 64))
(declare-fun cond184.i_5_76 () (_ BitVec 64))
(declare-fun cmp31.i143.i_5_98 () (_ BitVec 1))
(declare-fun or8.i133.i_5_95 () (_ BitVec 64))
(declare-fun cond14.i135.i_5_97 () (_ BitVec 64))
(declare-fun .cond184.i_5_87 () (_ BitVec 64))
(declare-fun cmp10.i134.i_5_96 () (_ BitVec 1))
(declare-fun and.i116.i_5_71 () (_ BitVec 64))
(declare-fun and7.i132.i_5_94 () (_ BitVec 64))
(declare-fun and9.i.i_5_73 () (_ BitVec 64))
(declare-fun or.i127.i_5_90 () (_ BitVec 64))
(declare-fun cond.i129.i_5_92 () (_ BitVec 64))
(declare-fun ..i_5_85 () (_ BitVec 64))
(declare-fun cmp.i128.i_5_91 () (_ BitVec 1))
(declare-fun and.i126.i_5_89 () (_ BitVec 64))
(declare-fun or.cond3.i_5_83 () (_ BitVec 1))
(declare-fun cmp190.i_5_81 () (_ BitVec 1))
(declare-fun cmp187.i_5_79 () (_ BitVec 1))
(declare-fun src_reg1.sroa.13.0.copyload_5_32 () (_ BitVec 64))
(declare-fun i252.i_5_77 () (_ BitVec 64))
(declare-fun dst_reg_5_6 () (_ BitVec 64))
(declare-fun src_reg1.sroa.22.0.copyload_5_35 () (_ BitVec 64))
(declare-fun i251.i_5_74 () (_ BitVec 64))
(declare-fun cmp182.i_5_75 () (_ BitVec 1))
(declare-fun dst_reg_5_9 () (_ BitVec 64))
(declare-fun or3.i.i_5_70 () (_ BitVec 64))
(declare-fun or.i115.i_5_69 () (_ BitVec 64))
(declare-fun src_reg1.sroa.3.0.copyload_5_30 () (_ BitVec 64))
(declare-fun i247.i_5_66 () (_ BitVec 64))
(declare-fun src_reg1.sroa.10.0.copyload_5_31 () (_ BitVec 64))
(declare-fun i215.i_5_38 () (_ BitVec 64))
(declare-fun and170.i_5_67 () (_ BitVec 64))
(declare-fun cmp24.old.i_5_51 () (_ BitVec 1))
(declare-fun cmp21.old.i_5_50 () (_ BitVec 1))
(declare-fun src_reg1.sroa.17.0.copyload_5_34 () (_ BitVec 64))
(declare-fun src_reg1.sroa.15.0.copyload_5_33 () (_ BitVec 64))
(declare-fun i33.i.i_5_131 () (_ BitVec 64))
(declare-fun land.lhs.true.i_if.end27.i_5_63 () Bool)
(declare-fun lor.lhs.false20.i_if.end27.i_5_62 () Bool)
(declare-fun dst_reg_5_4 () (_ BitVec 64))
(declare-fun tobool.not.i25.i_5_40 () (_ BitVec 1))
(declare-fun __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231 () Bool)
(declare-fun if.end.i.i.i.i___reg_bound_offset.exit.i_5_230 () Bool)
(declare-fun neg.i.i.i_5_251 () (_ BitVec 64))
(declare-fun or.i.i.i_5_248 () (_ BitVec 64))
(declare-fun i11.i.i_5_247 () (_ BitVec 64))
(declare-fun retval.sroa.3.0.i.i.i_5_245 () (_ BitVec 64))
(declare-fun i9.i.i_5_246 () (_ BitVec 64))
(declare-fun retval.sroa.0.0.i.i.i_5_243 () (_ BitVec 64))
(declare-fun dst_reg_5_105 () (_ BitVec 64))
(declare-fun dst_reg_5_104 () (_ BitVec 64))
(declare-fun sub.i.i.i_5_240 () (_ BitVec 64))
(declare-fun cmp.i.i.i_5_235 () (_ BitVec 1))
(declare-fun and.i.i336.i_5_241 () (_ BitVec 64))
(declare-fun i.i333.i_5_179 () (_ BitVec 64))
(declare-fun notmask.i.i.i_5_238 () (_ BitVec 64))
(declare-fun sh_prom.i.i.i_5_236 () (_ BitVec 64))
(declare-fun retval.0.i.i.i.i_5_232 () (_ BitVec 32))
(declare-fun phi.bo_5_229 () (_ BitVec 32))
(declare-fun cond27.i.i_5_146 () (_ BitVec 64))
(declare-fun cmp23.i.i_5_145 () (_ BitVec 1))
(declare-fun dst_reg_5_113 () (_ BitVec 8))
(declare-fun dst_reg_5_112 () (_ BitVec 32))
(declare-fun dst_reg_5_111 () (_ BitVec 32))
(declare-fun dst_reg_5_110 () (_ BitVec 32))
(declare-fun dst_reg_5_10 () (_ BitVec 32))
(declare-fun dst_reg_5_106 () (_ BitVec 64))
(declare-fun dst_reg_5_103 () (_ BitVec 32))
(declare-fun dst_reg_5_102 () (_ BitVec 32))
(declare-fun dst_reg_5_101 () (_ BitVec 32))
(declare-fun dst_reg_5_100 () (_ BitVec 32))
(declare-fun src_reg_5_127 () (_ BitVec 8))
(declare-fun src_reg_5_126 () (_ BitVec 32))
(declare-fun src_reg_5_125 () (_ BitVec 32))
(declare-fun src_reg_5_124 () (_ BitVec 32))
(declare-fun src_reg_5_123 () (_ BitVec 64))
(declare-fun src_reg_5_122 () (_ BitVec 64))
(declare-fun src_reg_5_121 () (_ BitVec 64))
(declare-fun src_reg_5_120 () (_ BitVec 64))
(declare-fun src_reg_5_119 () (_ BitVec 64))
(declare-fun src_reg_5_118 () (_ BitVec 64))
(declare-fun src_reg_5_117 () (_ BitVec 32))
(declare-fun src_reg_5_116 () (_ BitVec 32))
(declare-fun src_reg_5_115 () (_ BitVec 32))
(declare-fun src_reg_5_114 () (_ BitVec 32))
(declare-fun cmp24.i_5_47 () (_ BitVec 1))
(declare-fun or.cond198.i_5_46 () (_ BitVec 1))
(declare-fun or.cond197.i_5_44 () (_ BitVec 1))
(declare-fun cmp21.i_5_45 () (_ BitVec 1))
(declare-fun cmp18.not.i_5_42 () (_ BitVec 1))
(declare-fun cmp16.not.i_5_41 () (_ BitVec 1))
(declare-fun dst_reg_5_5 () (_ BitVec 64))
(declare-fun src_reg_5_14 () (_ BitVec 32))
(declare-fun dst_reg_5_8 () (_ BitVec 64))
(declare-fun dst_reg_5_7 () (_ BitVec 64))
(declare-fun dst_reg_5_0 () (_ BitVec 32))
(declare-fun cond40.i.i_5_150 () (_ BitVec 64))
(declare-fun dst_reg_5_156 () (_ BitVec 64))
(declare-fun dst_reg_5_155 () (_ BitVec 64))
(declare-fun xor.i.i.i_5_181 () (_ BitVec 64))
(declare-fun i5.i.i_5_180 () (_ BitVec 64))
(declare-fun cmp36.i.i_5_149 () (_ BitVec 1))
(declare-fun add.i.i.i335.i_5_227 () (_ BitVec 32))
(declare-fun i.i.i.i.i.i.neg_5_226 () (_ BitVec 32))
(declare-fun num.4.i.i.i.i.i_5_223 () (_ BitVec 32))
(declare-fun word.addr.4.lobit.i.i.i.i.i.neg_5_225 () (_ BitVec 64))
(declare-fun word.addr.4.i.i.i.i.i_5_222 () (_ BitVec 64))
(declare-fun num.3.i.i.i.i.i_5_215 () (_ BitVec 32))
(declare-fun sub22.i.i.i.i.i_5_219 () (_ BitVec 32))
(declare-fun tobool20.not.i.i.i.i.i_5_217 () (_ BitVec 1))
(declare-fun word.addr.3.i.i.i.i.i_5_214 () (_ BitVec 64))
(declare-fun shl23.i.i.i.i.i_5_221 () (_ BitVec 64))
(declare-fun num.2.i.i.i.i.i_5_207 () (_ BitVec 32))
(declare-fun sub16.i.i.i.i.i_5_211 () (_ BitVec 32))
(declare-fun tobool14.not.i.i.i.i.i_5_209 () (_ BitVec 1))
(declare-fun word.addr.2.i.i.i.i.i_5_206 () (_ BitVec 64))
(declare-fun shl17.i.i.i.i.i_5_213 () (_ BitVec 64))
(declare-fun num.1.i.i.i.i.i_5_199 () (_ BitVec 32))
(declare-fun sub10.i.i.i.i.i_5_203 () (_ BitVec 32))
(declare-fun tobool8.not.i.i.i.i.i_5_201 () (_ BitVec 1))
(declare-fun word.addr.1.i.i.i.i.i_5_198 () (_ BitVec 64))
(declare-fun shl11.i.i.i.i.i_5_205 () (_ BitVec 64))
(declare-fun spec.select17.i.i.i.i.i_5_191 () (_ BitVec 32))
(declare-fun sub4.i.i.i.i.i_5_195 () (_ BitVec 32))
(declare-fun tobool2.not.i.i.i.i.i_5_193 () (_ BitVec 1))
(declare-fun spec.select.i.i.i.i.i_5_188 () (_ BitVec 64))
(declare-fun shl5.i.i.i.i.i_5_197 () (_ BitVec 64))
(declare-fun tobool.not.i.i.i.i.i_5_185 () (_ BitVec 1))
(declare-fun shl.i.i.i.i.i_5_187 () (_ BitVec 64))
(assert
 (let (($x345 (= dst_reg_5_108 i38.i.i_5_144)))
 (let (($x341 (= cmp16.i.i_5_143 (_ bv0 1))))
 (let (($x342 (= cmp16.i.i_5_143 (_ bv1 1))))
 (let (($x343 (ite (bvsgt i37.i.i_5_141 (_ bv18446744073709551615 64)) $x342 $x341)))
 (let (($x338 (= dst_reg_5_109 i37.i.i_5_141)))
 (let (($x80 (= tobool.not.i.i_5_37 (_ bv1 1))))
 (let (($x701 (= or.cond199.i_5_49 (_ bv0 1))))
 (let (($x703 (and $x701 $x80)))
 (let (($x78 (= tobool.not.i.i_5_37 (_ bv0 1))))
 (let (($x704 (= or.cond200.i_5_53 (_ bv0 1))))
 (let (($x706 (and $x704 $x78)))
 (let (($x708 (or $x706 $x703)))
 (let (($x709 (= i246.i_5_64 (_ bv1 1))))
 (let (($x710 (and $x709 $x708)))
 (let (($x140 (= i246.i_5_64 (_ bv0 1))))
 (let (($x711 (and $x140 $x708)))
 (let (($x712 (or $x711 $x710)))
 (let (($x303 (= cmp.i323.i_5_130 (_ bv0 1))))
 (let (($x714 (and $x303 $x712)))
 (let (($x310 (= cmp1.i325.i_5_133 (_ bv0 1))))
 (let (($x716 (and $x310 $x714)))
 (let (($x836 (=> $x716 (and $x338 $x343 $x345))))
 (let (($x804 (= src_reg_5_280 src_reg_5_308)))
 (let (($x803 (= src_reg_5_279 src_reg_5_307)))
 (let (($x802 (= src_reg_5_278 src_reg_5_306)))
 (let (($x801 (= src_reg_5_277 src_reg_5_305)))
 (let (($x800 (= src_reg_5_276 src_reg_5_304)))
 (let (($x799 (= src_reg_5_275 src_reg_5_303)))
 (let (($x798 (= src_reg_5_274 src_reg_5_302)))
 (let (($x797 (= src_reg_5_273 src_reg_5_301)))
 (let (($x796 (= src_reg_5_272 src_reg_5_300)))
 (let (($x795 (= src_reg_5_271 src_reg_5_299)))
 (let (($x794 (= src_reg_5_270 src_reg_5_298)))
 (let (($x793 (= src_reg_5_269 src_reg_5_297)))
 (let (($x792 (= src_reg_5_268 src_reg_5_296)))
 (let (($x791 (= src_reg_5_267 src_reg_5_295)))
 (let (($x776 (= dst_reg_5_266 dst_reg_5_294)))
 (let (($x775 (= dst_reg_5_265 dst_reg_5_293)))
 (let (($x774 (= dst_reg_5_264 dst_reg_5_292)))
 (let (($x773 (= dst_reg_5_263 dst_reg_5_291)))
 (let (($x772 (= dst_reg_5_262 dst_reg_5_290)))
 (let (($x771 (= dst_reg_5_261 dst_reg_5_289)))
 (let (($x770 (= dst_reg_5_260 dst_reg_5_288)))
 (let (($x769 (= dst_reg_5_259 dst_reg_5_287)))
 (let (($x768 (= dst_reg_5_258 dst_reg_5_286)))
 (let (($x767 (= dst_reg_5_257 dst_reg_5_285)))
 (let (($x766 (= dst_reg_5_256 dst_reg_5_284)))
 (let (($x765 (= dst_reg_5_255 dst_reg_5_283)))
 (let (($x764 (= dst_reg_5_254 dst_reg_5_282)))
 (let (($x763 (= dst_reg_5_253 dst_reg_5_281)))
 (let (($x700 (= dst_reg_5_164 dst_reg_5_266)))
 (let (($x699 (= dst_reg_5_163 dst_reg_5_265)))
 (let (($x698 (= dst_reg_5_162 dst_reg_5_264)))
 (let (($x697 (= dst_reg_5_161 dst_reg_5_263)))
 (let (($x696 (= dst_reg_5_160 dst_reg_5_262)))
 (let (($x695 (= dst_reg_5_159 dst_reg_5_261)))
 (let (($x694 (= dst_reg_5_158 dst_reg_5_260)))
 (let (($x693 (= dst_reg_5_157 dst_reg_5_259)))
 (let (($x692 (= and.i1.i.i_5_249 dst_reg_5_258)))
 (let (($x691 (= and4.i.i.i_5_252 dst_reg_5_257)))
 (let (($x690 (= dst_reg_5_154 dst_reg_5_256)))
 (let (($x689 (= dst_reg_5_153 dst_reg_5_255)))
 (let (($x688 (= dst_reg_5_152 dst_reg_5_254)))
 (let (($x687 (= dst_reg_5_151 dst_reg_5_253)))
 (let (($x686 (= src_reg_5_178 src_reg_5_280)))
 (let (($x685 (= src_reg_5_177 src_reg_5_279)))
 (let (($x684 (= src_reg_5_176 src_reg_5_278)))
 (let (($x683 (= src_reg_5_175 src_reg_5_277)))
 (let (($x682 (= src_reg_5_174 src_reg_5_276)))
 (let (($x681 (= src_reg_5_173 src_reg_5_275)))
 (let (($x680 (= src_reg_5_172 src_reg_5_274)))
 (let (($x679 (= src_reg_5_171 src_reg_5_273)))
 (let (($x678 (= src_reg_5_170 src_reg_5_272)))
 (let (($x677 (= src_reg_5_169 src_reg_5_271)))
 (let (($x676 (= src_reg_5_168 src_reg_5_270)))
 (let (($x675 (= src_reg_5_167 src_reg_5_269)))
 (let (($x674 (= src_reg_5_166 src_reg_5_268)))
 (let (($x673 (= src_reg_5_165 src_reg_5_267)))
 (let (($x747 (and $x673 $x674 $x675 $x676 $x677 $x678 $x679 $x680 $x681 $x682 $x683 $x684 $x685 $x686 $x687 $x688 $x689 $x690 $x691 $x692 $x693 $x694 $x695 $x696 $x697 $x698 $x699 $x700)))
 (let (($x304 (= cmp.i323.i_5_130 (_ bv1 1))))
 (let (($x713 (and $x304 $x712)))
 (let (($x311 (= cmp1.i325.i_5_133 (_ bv1 1))))
 (let (($x715 (and $x311 $x714)))
 (let (($x717 (or $x715 $x713)))
 (let (($x718 (and $x342 $x716)))
 (let (($x719 (and $x341 $x716)))
 (let (($x357 (= cmp31.i330.i_5_148 (_ bv0 1))))
 (let (($x722 (and $x357 $x719)))
 (let (($x358 (= cmp31.i330.i_5_148 (_ bv1 1))))
 (let (($x721 (and $x358 $x719)))
 (let (($x724 (or $x721 (or $x722 (or $x718 $x717)))))
 (let (($x445 (= cmp.i.i.i.i_5_183 (_ bv1 1))))
 (let (($x725 (and $x445 $x724)))
 (let (($x444 (= cmp.i.i.i.i_5_183 (_ bv0 1))))
 (let (($x726 (and $x444 $x724)))
 (let (($x727 (or $x726 $x725)))
 (let (($x748 (=> $x727 $x747)))
 (let (($x672 (= dst_reg_5_13 dst_reg_5_266)))
 (let (($x671 (= dst_reg_5_12 dst_reg_5_265)))
 (let (($x670 (= dst_reg_5_11 dst_reg_5_264)))
 (let (($x669 (= (_ bv0 32) dst_reg_5_263)))
 (let (($x668 (= (_ bv18446744073709551615 64) dst_reg_5_262)))
 (let (($x667 (= (_ bv0 64) dst_reg_5_261)))
 (let (($x666 (= (_ bv9223372036854775807 64) dst_reg_5_260)))
 (let (($x665 (= (_ bv9223372036854775808 64) dst_reg_5_259)))
 (let (($x664 (= (_ bv18446744073709551615 64) dst_reg_5_258)))
 (let (($x663 (= (_ bv0 64) dst_reg_5_257)))
 (let (($x662 (= dst_reg_5_3 dst_reg_5_256)))
 (let (($x661 (= dst_reg_5_2 dst_reg_5_255)))
 (let (($x660 (= dst_reg_5_1 dst_reg_5_254)))
 (let (($x659 (= (_ bv1 32) dst_reg_5_253)))
 (let (($x658 (= src_reg_5_27 src_reg_5_280)))
 (let (($x657 (= src_reg_5_26 src_reg_5_279)))
 (let (($x656 (= src_reg_5_25 src_reg_5_278)))
 (let (($x655 (= src_reg_5_24 src_reg_5_277)))
 (let (($x654 (= src_reg_5_23 src_reg_5_276)))
 (let (($x653 (= src_reg_5_22 src_reg_5_275)))
 (let (($x652 (= src_reg_5_21 src_reg_5_274)))
 (let (($x651 (= src_reg_5_20 src_reg_5_273)))
 (let (($x650 (= src_reg_5_19 src_reg_5_272)))
 (let (($x649 (= src_reg_5_18 src_reg_5_271)))
 (let (($x648 (= src_reg_5_17 src_reg_5_270)))
 (let (($x647 (= src_reg_5_16 src_reg_5_269)))
 (let (($x646 (= src_reg_5_15 src_reg_5_268)))
 (let (($x645 (= (_ bv1 32) src_reg_5_267)))
 (let (($x745 (and $x645 $x646 $x647 $x648 $x649 $x650 $x651 $x652 $x653 $x654 $x655 $x656 $x657 $x658 $x659 $x660 $x661 $x662 $x663 $x664 $x665 $x666 $x667 $x668 $x669 $x670 $x671 $x672)))
 (let (($x118 (= or.cond199.i_5_49 (_ bv1 1))))
 (let (($x702 (and $x118 $x80)))
 (let (($x131 (= or.cond200.i_5_53 (_ bv1 1))))
 (let (($x705 (and $x131 $x78)))
 (let (($x707 (or $x705 $x702)))
 (let (($x746 (=> $x707 $x745)))
 (let (($x833 (and $x746 $x748 $x763 $x764 $x765 $x766 $x767 $x768 $x769 $x770 $x771 $x772 $x773 $x774 $x775 $x776 $x791 $x792 $x793 $x794 $x795 $x796 $x797 $x798 $x799 $x800 $x801 $x802 $x803 $x804)))
 (let (($x728 (or $x727 $x707)))
 (let (($x834 (=> $x728 $x833)))
 (let (($x331 (= cmp8.i.i_5_139 (_ bv1 1))))
 (let (($x336 (ite $x331 (= cond12.i.i_5_140 i35.i.i_5_137) (= cond12.i.i_5_140 i36.i.i_5_138))))
 (let (($x330 (= cmp8.i.i_5_139 (_ bv0 1))))
 (let (($x332 (ite (bvult i35.i.i_5_137 i36.i.i_5_138) $x331 $x330)))
 (let (($x327 (= dst_reg_5_109 i36.i.i_5_138)))
 (let (($x325 (= dst_reg_5_107 i35.i.i_5_137)))
 (let (($x318 (= cmp3.i.i_5_135 (_ bv1 1))))
 (let (($x323 (ite $x318 (= cond.i327.i_5_136 i.i322.i_5_128) (= cond.i327.i_5_136 i34.i.i_5_134))))
 (let (($x317 (= cmp3.i.i_5_135 (_ bv0 1))))
 (let (($x319 (ite (bvugt i.i322.i_5_128 i34.i.i_5_134) $x318 $x317)))
 (let (($x314 (= dst_reg_5_108 i34.i.i_5_134)))
 (let (($x832 (=> $x717 (and $x314 $x319 $x323 $x325 $x327 $x332 $x336))))
 (let (($x231 (= cmp31.i143.i_5_98 (_ bv1 1))))
 (let (($x236 (ite $x231 (= cond35.i144.i_5_99 cond184.i_5_76) (= cond35.i144.i_5_99 and8.i117.i_5_72))))
 (let (($x230 (= cmp31.i143.i_5_98 (_ bv0 1))))
 (let (($x232 (ite (bvult cond184.i_5_76 and8.i117.i_5_72) $x231 $x230)))
 (let (($x222 (= cmp10.i134.i_5_96 (_ bv1 1))))
 (let (($x227 (ite $x222 (= cond14.i135.i_5_97 .cond184.i_5_87) (= cond14.i135.i_5_97 or8.i133.i_5_95))))
 (let (($x221 (= cmp10.i134.i_5_96 (_ bv0 1))))
 (let (($x223 (ite (bvslt .cond184.i_5_87 or8.i133.i_5_95) $x222 $x221)))
 (let (($x218 (= or8.i133.i_5_95 (bvor and7.i132.i_5_94 and.i116.i_5_71))))
 (let (($x215 (= and7.i132.i_5_94 (bvand and9.i.i_5_73 (_ bv9223372036854775807 64)))))
 (let (($x207 (= cmp.i128.i_5_91 (_ bv1 1))))
 (let (($x212 (ite $x207 (= cond.i129.i_5_92 ..i_5_85) (= cond.i129.i_5_92 or.i127.i_5_90))))
 (let (($x206 (= cmp.i128.i_5_91 (_ bv0 1))))
 (let (($x208 (ite (bvsgt ..i_5_85 or.i127.i_5_90) $x207 $x206)))
 (let (($x203 (= or.i127.i_5_90 (bvor and.i126.i_5_89 and.i116.i_5_71))))
 (let (($x200 (= and.i126.i_5_89 (bvand and9.i.i_5_73 (_ bv9223372036854775808 64)))))
 (let (($x188 (= or.cond3.i_5_83 (_ bv1 1))))
 (let (($x197 (ite $x188 (= .cond184.i_5_87 (_ bv9223372036854775807 64)) (= .cond184.i_5_87 cond184.i_5_76))))
 (let (($x193 (ite $x188 (= ..i_5_85 (_ bv9223372036854775808 64)) (= ..i_5_85 and.i116.i_5_71))))
 (let (($x179 (= cmp187.i_5_79 (_ bv1 1))))
 (let (($x189 (ite $x179 $x188 (= or.cond3.i_5_83 cmp190.i_5_81))))
 (let (($x183 (= cmp190.i_5_81 (_ bv0 1))))
 (let (($x184 (= cmp190.i_5_81 (_ bv1 1))))
 (let (($x185 (ite (bvslt src_reg1.sroa.13.0.copyload_5_32 (_ bv0 64)) $x184 $x183)))
 (let (($x178 (= cmp187.i_5_79 (_ bv0 1))))
 (let (($x180 (ite (bvslt i252.i_5_77 (_ bv0 64)) $x179 $x178)))
 (let (($x175 (= dst_reg_5_6 i252.i_5_77)))
 (let (($x168 (= cmp182.i_5_75 (_ bv1 1))))
 (let (($x173 (ite $x168 (= cond184.i_5_76 i251.i_5_74) (= cond184.i_5_76 src_reg1.sroa.22.0.copyload_5_35))))
 (let (($x167 (= cmp182.i_5_75 (_ bv0 1))))
 (let (($x169 (ite (bvult i251.i_5_74 src_reg1.sroa.22.0.copyload_5_35) $x168 $x167)))
 (let (($x164 (= dst_reg_5_9 i251.i_5_74)))
 (let (($x162 (= and9.i.i_5_73 (bvxor and8.i117.i_5_72 and.i116.i_5_71))))
 (let (($x159 (= and8.i117.i_5_72 (bvand or.i115.i_5_69 or3.i.i_5_70))))
 (let ((?x147 (bvand i247.i_5_66 src_reg1.sroa.3.0.copyload_5_30)))
 (let (($x156 (= and.i116.i_5_71 ?x147)))
 (let (($x154 (= or3.i.i_5_70 (bvor src_reg1.sroa.10.0.copyload_5_31 src_reg1.sroa.3.0.copyload_5_30))))
 (let (($x151 (= or.i115.i_5_69 (bvor i247.i_5_66 i215.i_5_38))))
 (let (($x829 (and $x151 $x154 $x156 $x159 $x162 $x164 $x169 $x173 $x175 $x180 $x185 $x189 $x193 $x197 $x200 $x203 $x208 $x212 $x215 $x218 $x223 $x227 $x232 $x236)))
 (let (($x830 (=> $x711 $x829)))
 (let (($x828 (=> $x710 (and (= and170.i_5_67 ?x147)))))
 (let (($x123 (= cmp21.old.i_5_50 (_ bv1 1))))
 (let (($x132 (ite $x123 $x131 (= or.cond200.i_5_53 cmp24.old.i_5_51))))
 (let (($x126 (= cmp24.old.i_5_51 (_ bv0 1))))
 (let (($x127 (= cmp24.old.i_5_51 (_ bv1 1))))
 (let (($x112 (bvugt src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35)))
 (let (($x128 (ite $x112 $x127 $x126)))
 (let (($x122 (= cmp21.old.i_5_50 (_ bv0 1))))
 (let (($x104 (bvsgt src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33)))
 (let (($x124 (ite $x104 $x123 $x122)))
 (let (($x826 (=> $x78 (and $x124 $x128 $x132))))
 (let (($x312 (ite (bvslt i33.i.i_5_131 (_ bv0 64)) $x311 $x310)))
 (let (($x307 (= dst_reg_5_107 i33.i.i_5_131)))
 (let (($x824 (=> $x714 (and $x307 $x312))))
 (let (($x730 (= land.lhs.true.i_if.end27.i_5_63 $x703)))
 (let (($x729 (= lor.lhs.false20.i_if.end27.i_5_62 $x706)))
 (let (($x145 (= dst_reg_5_4 i247.i_5_66)))
 (let (($x142 (= i246.i_5_64 tobool.not.i25.i_5_40)))
 (let (($x143 (=> land.lhs.true.i_if.end27.i_5_63 $x142)))
 (let (($x141 (=> lor.lhs.false20.i_if.end27.i_5_62 $x140)))
 (let (($x822 (=> $x708 (and $x141 $x143 $x145 $x729 $x730))))
 (let (($x820 (=> $x719 (and (ite (bvslt i38.i.i_5_144 (_ bv0 64)) $x358 $x357)))))
 (let (($x744 (= __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231 $x725)))
 (let (($x743 (= if.end.i.i.i.i___reg_bound_offset.exit.i_5_230 $x726)))
 (let (($x616 (= and4.i.i.i_5_252 (bvand or.i.i.i_5_248 neg.i.i.i_5_251))))
 (let (($x613 (= neg.i.i.i_5_251 (bvxor and.i1.i.i_5_249 (_ bv18446744073709551615 64)))))
 (let (($x610 (= and.i1.i.i_5_249 (bvand retval.sroa.3.0.i.i.i_5_245 i11.i.i_5_247))))
 (let (($x607 (= or.i.i.i_5_248 (bvor retval.sroa.0.0.i.i.i_5_243 i9.i.i_5_246))))
 (let (($x604 (= dst_reg_5_105 i11.i.i_5_247)))
 (let (($x602 (= dst_reg_5_104 i9.i.i_5_246)))
 (let (($x579 (= cmp.i.i.i_5_235 (_ bv1 1))))
 (let (($x600 (ite $x579 (= retval.sroa.3.0.i.i.i_5_245 (_ bv18446744073709551615 64)) (= retval.sroa.3.0.i.i.i_5_245 sub.i.i.i_5_240))))
 (let (($x596 (ite $x579 (= retval.sroa.0.0.i.i.i_5_243 (_ bv0 64)) (= retval.sroa.0.0.i.i.i_5_243 and.i.i336.i_5_241))))
 (let (($x592 (= and.i.i336.i_5_241 (bvand notmask.i.i.i_5_238 i.i333.i_5_179))))
 (let (($x589 (= sub.i.i.i_5_240 (bvxor notmask.i.i.i_5_238 (_ bv18446744073709551615 64)))))
 (let (($x586 (= notmask.i.i.i_5_238 (bvshl (_ bv18446744073709551615 64) sh_prom.i.i.i_5_236))))
 (let (($x583 (= sh_prom.i.i.i_5_236 ((_ zero_extend 32) retval.0.i.i.i.i_5_232))))
 (let (($x578 (= cmp.i.i.i_5_235 (_ bv0 1))))
 (let (($x580 (ite (bvugt retval.0.i.i.i.i_5_232 (_ bv63 32)) $x579 $x578)))
 (let (($x574 (= retval.0.i.i.i.i_5_232 (_ bv0 32))))
 (let (($x575 (=> __reg_deduce_bounds.exit.i___reg_bound_offset.exit.i_5_231 $x574)))
 (let (($x572 (= retval.0.i.i.i.i_5_232 phi.bo_5_229)))
 (let (($x573 (=> if.end.i.i.i.i___reg_bound_offset.exit.i_5_230 $x572)))
 (let (($x817 (and $x573 $x575 $x580 $x583 $x586 $x589 $x592 $x596 $x600 $x602 $x604 $x607 $x610 $x613 $x616 $x743 $x744)))
 (let (($x818 (=> $x727 $x817)))
 (let (($x349 (= cmp23.i.i_5_145 (_ bv1 1))))
 (let (($x354 (ite $x349 (= cond27.i.i_5_146 i33.i.i_5_131) (= cond27.i.i_5_146 i37.i.i_5_141))))
 (let (($x348 (= cmp23.i.i_5_145 (_ bv0 1))))
 (let (($x350 (ite (bvult i33.i.i_5_131 i37.i.i_5_141) $x349 $x348)))
 (let (($x816 (=> $x718 (and $x350 $x354))))
 (let (($x292 (= dst_reg_5_13 dst_reg_5_113)))
 (let (($x291 (= dst_reg_5_12 dst_reg_5_112)))
 (let (($x290 (= dst_reg_5_11 dst_reg_5_111)))
 (let (($x289 (= dst_reg_5_10 dst_reg_5_110)))
 (let (($x298 (= cond35.i144.i_5_99 dst_reg_5_109)))
 (let (($x297 (= and.i116.i_5_71 dst_reg_5_108)))
 (let (($x296 (= cond14.i135.i_5_97 dst_reg_5_107)))
 (let (($x295 (= cond.i129.i_5_92 dst_reg_5_106)))
 (let (($x294 (= and9.i.i_5_73 dst_reg_5_105)))
 (let (($x293 (= and.i116.i_5_71 dst_reg_5_104)))
 (let (($x282 (= dst_reg_5_3 dst_reg_5_103)))
 (let (($x281 (= dst_reg_5_2 dst_reg_5_102)))
 (let (($x280 (= dst_reg_5_1 dst_reg_5_101)))
 (let (($x279 (= (_ bv1 32) dst_reg_5_100)))
 (let (($x278 (= src_reg_5_27 src_reg_5_127)))
 (let (($x277 (= src_reg_5_26 src_reg_5_126)))
 (let (($x276 (= src_reg_5_25 src_reg_5_125)))
 (let (($x275 (= src_reg_5_24 src_reg_5_124)))
 (let (($x274 (= src_reg_5_23 src_reg_5_123)))
 (let (($x273 (= src_reg_5_22 src_reg_5_122)))
 (let (($x272 (= src_reg_5_21 src_reg_5_121)))
 (let (($x271 (= src_reg_5_20 src_reg_5_120)))
 (let (($x270 (= src_reg_5_19 src_reg_5_119)))
 (let (($x269 (= src_reg_5_18 src_reg_5_118)))
 (let (($x268 (= src_reg_5_17 src_reg_5_117)))
 (let (($x267 (= src_reg_5_16 src_reg_5_116)))
 (let (($x266 (= src_reg_5_15 src_reg_5_115)))
 (let (($x265 (= (_ bv1 32) src_reg_5_114)))
 (let (($x733 (and $x265 $x266 $x267 $x268 $x269 $x270 $x271 $x272 $x273 $x274 $x275 $x276 $x277 $x278 $x279 $x280 $x281 $x282 $x293 $x294 $x295 $x296 $x297 $x298 $x289 $x290 $x291 $x292)))
 (let (($x734 (=> $x711 $x733)))
 (let (($x288 (= and170.i_5_67 dst_reg_5_109)))
 (let (($x287 (= and170.i_5_67 dst_reg_5_108)))
 (let (($x286 (= and170.i_5_67 dst_reg_5_107)))
 (let (($x285 (= and170.i_5_67 dst_reg_5_106)))
 (let (($x284 (= (_ bv0 64) dst_reg_5_105)))
 (let (($x283 (= and170.i_5_67 dst_reg_5_104)))
 (let (($x731 (and $x265 $x266 $x267 $x268 $x269 $x270 $x271 $x272 $x273 $x274 $x275 $x276 $x277 $x278 $x279 $x280 $x281 $x282 $x283 $x284 $x285 $x286 $x287 $x288 $x289 $x290 $x291 $x292)))
 (let (($x732 (=> $x710 $x731)))
 (let (($x305 (ite (bvsgt i.i322.i_5_128 (_ bv18446744073709551615 64)) $x304 $x303)))
 (let (($x300 (= dst_reg_5_106 i.i322.i_5_128)))
 (let (($x814 (=> $x712 (and $x300 $x305 $x732 $x734))))
 (let (($x120 (ite (= or.cond198.i_5_46 (_ bv1 1)) $x118 (= or.cond199.i_5_49 cmp24.i_5_47))))
 (let (($x113 (= cmp24.i_5_47 (_ bv0 1))))
 (let (($x114 (= cmp24.i_5_47 (_ bv1 1))))
 (let (($x115 (ite $x112 $x114 $x113)))
 (let (($x110 (= or.cond198.i_5_46 (bvor cmp21.i_5_45 or.cond197.i_5_44))))
 (let (($x105 (= cmp21.i_5_45 (_ bv0 1))))
 (let (($x106 (= cmp21.i_5_45 (_ bv1 1))))
 (let (($x107 (ite $x104 $x106 $x105)))
 (let (($x92 (= cmp16.not.i_5_41 (_ bv1 1))))
 (let (($x102 (ite $x92 (= or.cond197.i_5_44 (_ bv1 1)) (= or.cond197.i_5_44 cmp18.not.i_5_42))))
 (let (($x96 (= cmp18.not.i_5_42 (_ bv0 1))))
 (let (($x97 (= cmp18.not.i_5_42 (_ bv1 1))))
 (let (($x95 (and (distinct src_reg1.sroa.17.0.copyload_5_34 src_reg1.sroa.22.0.copyload_5_35) true)))
 (let (($x98 (ite $x95 $x97 $x96)))
 (let (($x91 (= cmp16.not.i_5_41 (_ bv0 1))))
 (let (($x90 (and (distinct src_reg1.sroa.13.0.copyload_5_32 src_reg1.sroa.15.0.copyload_5_33) true)))
 (let (($x93 (ite $x90 $x92 $x91)))
 (let (($x88 (ite (= i215.i_5_38 (_ bv0 64)) (= tobool.not.i25.i_5_40 (_ bv1 1)) (= tobool.not.i25.i_5_40 (_ bv0 1)))))
 (let (($x812 (=> $x80 (and $x88 $x93 $x98 $x102 $x107 $x110 $x115 $x120))))
 (let (($x83 (= dst_reg_5_5 i215.i_5_38)))
 (let (($x81 (ite (= src_reg1.sroa.10.0.copyload_5_31 (_ bv0 64)) $x80 $x78)))
 (let (($x73 (= src_reg_5_23 src_reg1.sroa.22.0.copyload_5_35)))
 (let (($x71 (= src_reg_5_22 src_reg1.sroa.17.0.copyload_5_34)))
 (let (($x69 (= src_reg_5_21 src_reg1.sroa.15.0.copyload_5_33)))
 (let (($x67 (= src_reg_5_20 src_reg1.sroa.13.0.copyload_5_32)))
 (let (($x65 (= src_reg_5_19 src_reg1.sroa.10.0.copyload_5_31)))
 (let (($x63 (= src_reg_5_18 src_reg1.sroa.3.0.copyload_5_30)))
 (let (($x60 (= src_reg_5_27 src_reg_5_27)))
 (let (($x59 (= src_reg_5_26 src_reg_5_26)))
 (let (($x58 (= src_reg_5_25 src_reg_5_25)))
 (let (($x57 (= src_reg_5_24 src_reg_5_24)))
 (let (($x56 (= src_reg_5_23 src_reg_5_23)))
 (let (($x55 (= src_reg_5_22 src_reg_5_22)))
 (let (($x54 (= src_reg_5_21 src_reg_5_21)))
 (let (($x53 (= src_reg_5_20 src_reg_5_20)))
 (let (($x52 (= src_reg_5_19 src_reg_5_19)))
 (let (($x51 (= src_reg_5_18 src_reg_5_18)))
 (let (($x50 (= src_reg_5_17 src_reg_5_17)))
 (let (($x49 (= src_reg_5_16 src_reg_5_16)))
 (let (($x48 (= src_reg_5_15 src_reg_5_15)))
 (let (($x47 (= src_reg_5_14 src_reg_5_14)))
 (let (($x32 (= dst_reg_5_13 dst_reg_5_13)))
 (let (($x31 (= dst_reg_5_12 dst_reg_5_12)))
 (let (($x30 (= dst_reg_5_11 dst_reg_5_11)))
 (let (($x29 (= dst_reg_5_10 dst_reg_5_10)))
 (let (($x28 (= dst_reg_5_9 dst_reg_5_9)))
 (let (($x27 (= dst_reg_5_8 dst_reg_5_8)))
 (let (($x26 (= dst_reg_5_7 dst_reg_5_7)))
 (let (($x25 (= dst_reg_5_6 dst_reg_5_6)))
 (let (($x24 (= dst_reg_5_5 dst_reg_5_5)))
 (let (($x23 (= dst_reg_5_4 dst_reg_5_4)))
 (let (($x22 (= dst_reg_5_3 dst_reg_5_3)))
 (let (($x21 (= dst_reg_5_2 dst_reg_5_2)))
 (let (($x20 (= dst_reg_5_1 dst_reg_5_1)))
 (let (($x19 (= dst_reg_5_0 dst_reg_5_0)))
 (let (($x424 (= dst_reg_5_113 dst_reg_5_164)))
 (let (($x423 (= dst_reg_5_112 dst_reg_5_163)))
 (let (($x422 (= dst_reg_5_111 dst_reg_5_162)))
 (let (($x421 (= dst_reg_5_110 dst_reg_5_161)))
 (let (($x431 (= dst_reg_5_109 dst_reg_5_160)))
 (let (($x434 (= cond40.i.i_5_150 dst_reg_5_159)))
 (let (($x433 (= i37.i.i_5_141 dst_reg_5_158)))
 (let (($x432 (= cond40.i.i_5_150 dst_reg_5_157)))
 (let (($x416 (= dst_reg_5_105 dst_reg_5_156)))
 (let (($x415 (= dst_reg_5_104 dst_reg_5_155)))
 (let (($x414 (= dst_reg_5_103 dst_reg_5_154)))
 (let (($x413 (= dst_reg_5_102 dst_reg_5_153)))
 (let (($x412 (= dst_reg_5_101 dst_reg_5_152)))
 (let (($x411 (= dst_reg_5_100 dst_reg_5_151)))
 (let (($x410 (= src_reg_5_127 src_reg_5_178)))
 (let (($x409 (= src_reg_5_126 src_reg_5_177)))
 (let (($x408 (= src_reg_5_125 src_reg_5_176)))
 (let (($x407 (= src_reg_5_124 src_reg_5_175)))
 (let (($x406 (= src_reg_5_123 src_reg_5_174)))
 (let (($x405 (= src_reg_5_122 src_reg_5_173)))
 (let (($x404 (= src_reg_5_121 src_reg_5_172)))
 (let (($x403 (= src_reg_5_120 src_reg_5_171)))
 (let (($x402 (= src_reg_5_119 src_reg_5_170)))
 (let (($x401 (= src_reg_5_118 src_reg_5_169)))
 (let (($x400 (= src_reg_5_117 src_reg_5_168)))
 (let (($x399 (= src_reg_5_116 src_reg_5_167)))
 (let (($x398 (= src_reg_5_115 src_reg_5_166)))
 (let (($x397 (= src_reg_5_114 src_reg_5_165)))
 (let (($x741 (and $x397 $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x432 $x433 $x434 $x431 $x421 $x422 $x423 $x424)))
 (let (($x742 (=> $x721 $x741)))
 (let (($x427 (= dst_reg_5_108 dst_reg_5_159)))
 (let (($x430 (= dst_reg_5_107 dst_reg_5_158)))
 (let (($x429 (= dst_reg_5_106 dst_reg_5_157)))
 (let (($x739 (and $x397 $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x429 $x430 $x427 $x431 $x421 $x422 $x423 $x424)))
 (let (($x740 (=> $x722 $x739)))
 (let (($x428 (= cond27.i.i_5_146 dst_reg_5_160)))
 (let (($x426 (= cond27.i.i_5_146 dst_reg_5_158)))
 (let (($x425 (= i38.i.i_5_144 dst_reg_5_157)))
 (let (($x737 (and $x397 $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x425 $x426 $x427 $x428 $x421 $x422 $x423 $x424)))
 (let (($x738 (=> $x718 $x737)))
 (let (($x420 (= cond12.i.i_5_140 dst_reg_5_160)))
 (let (($x419 (= cond.i327.i_5_136 dst_reg_5_159)))
 (let (($x418 (= cond12.i.i_5_140 dst_reg_5_158)))
 (let (($x417 (= cond.i327.i_5_136 dst_reg_5_157)))
 (let (($x735 (and $x397 $x398 $x399 $x400 $x401 $x402 $x403 $x404 $x405 $x406 $x407 $x408 $x409 $x410 $x411 $x412 $x413 $x414 $x415 $x416 $x417 $x418 $x419 $x420 $x421 $x422 $x423 $x424)))
 (let (($x736 (=> $x717 $x735)))
 (let (($x446 (ite (= xor.i.i.i_5_181 (_ bv0 64)) $x445 $x444)))
 (let (($x441 (= xor.i.i.i_5_181 (bvxor i5.i.i_5_180 i.i333.i_5_179))))
 (let (($x438 (= dst_reg_5_160 i5.i.i_5_180)))
 (let (($x436 (= dst_reg_5_159 i.i333.i_5_179)))
 (let (($x810 (=> $x724 (and $x436 $x438 $x441 $x446 $x736 $x738 $x740 $x742))))
 (let (($x363 (= cmp36.i.i_5_149 (_ bv1 1))))
 (let (($x368 (ite $x363 (= cond40.i.i_5_150 i.i322.i_5_128) (= cond40.i.i_5_150 i38.i.i_5_144))))
 (let (($x362 (= cmp36.i.i_5_149 (_ bv0 1))))
 (let (($x364 (ite (bvugt i.i322.i_5_128 i38.i.i_5_144) $x363 $x362)))
 (let (($x808 (=> $x721 (and $x364 $x368))))
 (let (($x568 (= phi.bo_5_229 (bvand add.i.i.i335.i_5_227 (_ bv255 32)))))
 (let (($x564 (= add.i.i.i335.i_5_227 (bvadd num.4.i.i.i.i.i_5_223 i.i.i.i.i.i.neg_5_226))))
 (let (($x561 (= i.i.i.i.i.i.neg_5_226 ((_ extract 31 0) word.addr.4.lobit.i.i.i.i.i.neg_5_225))))
 (let (($x558 (= word.addr.4.lobit.i.i.i.i.i.neg_5_225 (bvlshr word.addr.4.i.i.i.i.i_5_222 (_ bv63 64)))))
 (let (($x537 (= tobool20.not.i.i.i.i.i_5_217 (_ bv1 1))))
 (let (($x554 (ite $x537 (= num.4.i.i.i.i.i_5_223 sub22.i.i.i.i.i_5_219) (= num.4.i.i.i.i.i_5_223 num.3.i.i.i.i.i_5_215))))
 (let (($x550 (ite $x537 (= word.addr.4.i.i.i.i.i_5_222 shl23.i.i.i.i.i_5_221) (= word.addr.4.i.i.i.i.i_5_222 word.addr.3.i.i.i.i.i_5_214))))
 (let (($x546 (= shl23.i.i.i.i.i_5_221 (bvshl word.addr.3.i.i.i.i.i_5_214 (_ bv2 64)))))
 (let (($x542 (= sub22.i.i.i.i.i_5_219 (bvadd num.3.i.i.i.i.i_5_215 (_ bv254 32)))))
 (let (($x536 (= tobool20.not.i.i.i.i.i_5_217 (_ bv0 1))))
 (let (($x538 (ite (bvult word.addr.3.i.i.i.i.i_5_214 (_ bv4611686018427387904 64)) $x537 $x536)))
 (let (($x515 (= tobool14.not.i.i.i.i.i_5_209 (_ bv1 1))))
 (let (($x532 (ite $x515 (= num.3.i.i.i.i.i_5_215 sub16.i.i.i.i.i_5_211) (= num.3.i.i.i.i.i_5_215 num.2.i.i.i.i.i_5_207))))
 (let (($x528 (ite $x515 (= word.addr.3.i.i.i.i.i_5_214 shl17.i.i.i.i.i_5_213) (= word.addr.3.i.i.i.i.i_5_214 word.addr.2.i.i.i.i.i_5_206))))
 (let (($x524 (= shl17.i.i.i.i.i_5_213 (bvshl word.addr.2.i.i.i.i.i_5_206 (_ bv4 64)))))
 (let (($x520 (= sub16.i.i.i.i.i_5_211 (bvadd num.2.i.i.i.i.i_5_207 (_ bv4294967292 32)))))
 (let (($x514 (= tobool14.not.i.i.i.i.i_5_209 (_ bv0 1))))
 (let (($x516 (ite (bvult word.addr.2.i.i.i.i.i_5_206 (_ bv1152921504606846976 64)) $x515 $x514)))
 (let (($x493 (= tobool8.not.i.i.i.i.i_5_201 (_ bv1 1))))
 (let (($x510 (ite $x493 (= num.2.i.i.i.i.i_5_207 sub10.i.i.i.i.i_5_203) (= num.2.i.i.i.i.i_5_207 num.1.i.i.i.i.i_5_199))))
 (let (($x506 (ite $x493 (= word.addr.2.i.i.i.i.i_5_206 shl11.i.i.i.i.i_5_205) (= word.addr.2.i.i.i.i.i_5_206 word.addr.1.i.i.i.i.i_5_198))))
 (let (($x502 (= shl11.i.i.i.i.i_5_205 (bvshl word.addr.1.i.i.i.i.i_5_198 (_ bv8 64)))))
 (let (($x498 (= sub10.i.i.i.i.i_5_203 (bvadd num.1.i.i.i.i.i_5_199 (_ bv4294967288 32)))))
 (let (($x492 (= tobool8.not.i.i.i.i.i_5_201 (_ bv0 1))))
 (let (($x494 (ite (bvult word.addr.1.i.i.i.i.i_5_198 (_ bv72057594037927936 64)) $x493 $x492)))
 (let (($x471 (= tobool2.not.i.i.i.i.i_5_193 (_ bv1 1))))
 (let (($x488 (ite $x471 (= num.1.i.i.i.i.i_5_199 sub4.i.i.i.i.i_5_195) (= num.1.i.i.i.i.i_5_199 spec.select17.i.i.i.i.i_5_191))))
 (let (($x484 (ite $x471 (= word.addr.1.i.i.i.i.i_5_198 shl5.i.i.i.i.i_5_197) (= word.addr.1.i.i.i.i.i_5_198 spec.select.i.i.i.i.i_5_188))))
 (let (($x480 (= shl5.i.i.i.i.i_5_197 (bvshl spec.select.i.i.i.i.i_5_188 (_ bv16 64)))))
 (let (($x476 (= sub4.i.i.i.i.i_5_195 (bvadd spec.select17.i.i.i.i.i_5_191 (_ bv4294967280 32)))))
 (let (($x470 (= tobool2.not.i.i.i.i.i_5_193 (_ bv0 1))))
 (let (($x472 (ite (bvult spec.select.i.i.i.i.i_5_188 (_ bv281474976710656 64)) $x471 $x470)))
 (let (($x451 (= tobool.not.i.i.i.i.i_5_185 (_ bv1 1))))
 (let (($x466 (ite $x451 (= spec.select17.i.i.i.i.i_5_191 (_ bv31 32)) (= spec.select17.i.i.i.i.i_5_191 (_ bv63 32)))))
 (let (($x460 (ite $x451 (= spec.select.i.i.i.i.i_5_188 shl.i.i.i.i.i_5_187) (= spec.select.i.i.i.i.i_5_188 xor.i.i.i_5_181))))
 (let (($x456 (= shl.i.i.i.i.i_5_187 (bvshl xor.i.i.i_5_181 (_ bv32 64)))))
 (let (($x450 (= tobool.not.i.i.i.i.i_5_185 (_ bv0 1))))
 (let (($x452 (ite (bvult xor.i.i.i_5_181 (_ bv4294967296 64)) $x451 $x450)))
 (let (($x805 (and $x452 $x456 $x460 $x466 $x472 $x476 $x480 $x484 $x488 $x494 $x498 $x502 $x506 $x510 $x516 $x520 $x524 $x528 $x532 $x538 $x542 $x546 $x550 $x554 $x558 $x561 $x564 $x568)))
 (let (($x806 (=> $x726 $x805)))
 (and $x806 $x808 $x810 $x19 $x20 $x21 $x22 $x23 $x24 $x25 $x26 $x27 $x28 $x29 $x30 $x31 $x32 $x47 $x48 $x49 $x50 $x51 $x52 $x53 $x54 $x55 $x56 $x57 $x58 $x59 $x60 $x63 $x65 $x67 $x69 $x71 $x73 $x81 $x83 $x812 $x814 $x816 $x818 $x820 $x822 $x824 $x826 $x828 $x830 $x832 $x834 $x836)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

---------
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
Saving encoding to .smt2 file...
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

Output .smt2 file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.smt2
-------------------------------------------
smt2 output file path: /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND/BPF_AND.smt2
-------------------------------------------
Running llvm_to_smt_pass
/home/pchaigno/agni/llvm-to-smt/llvm-passes/llvm_to_smt.sh /home/pchaigno/agni/bpf-encodings/5.4/BPF_AND BPF_AND.O1.ffee.O1.rfc.O1.ivf.O1.pmc.O0.lfsh.ivf.ex.ll adjust_scalar_min_max_vals_wrapper_BPF_AND 5 BPF_AND.smt2

Finished llvm_to_smt_pass
